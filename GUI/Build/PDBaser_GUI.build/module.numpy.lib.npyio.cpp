/* Generated code for Python module 'numpy.lib.npyio'
 * created by Nuitka version 0.6.17.3
 *
 * This code is in part copyright 2021 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "nuitka/unfreezing.h"

#include "__helpers.h"

/* The "module_numpy$lib$npyio" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_numpy$lib$npyio;
PyDictObject *moduledict_numpy$lib$npyio;

/* The declarations of module constants used, if any. */
static PyObject *mod_consts[575];
#ifndef __NUITKA_NO_ASSERT__
static Py_hash_t mod_consts_hash[575];
#endif

static PyObject *module_filename_obj = NULL;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(void) {
    if (constants_created == false) {
        loadConstantsBlob(&mod_consts[0], UNTRANSLATE("numpy.lib.npyio"));
        constants_created = true;

#ifndef __NUITKA_NO_ASSERT__
        for(int i = 0; i < 575; i++) {
            mod_consts_hash[i] = DEEP_HASH(mod_consts[i]);
        }
#endif
    }
}

/* For multiprocessing, we want to be able to initialize the __main__ constants. */
#if (_NUITKA_PLUGIN_MULTIPROCESSING_ENABLED || _NUITKA_PLUGIN_TRACEBACK_ENCRYPTION_ENABLED) && 0
void createMainModuleConstants(void) {
    createModuleConstants();
}
#endif

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_numpy$lib$npyio(void) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;

    for(int i = 0; i < 575; i++) {
        assert(mod_consts_hash[i] == DEEP_HASH(mod_consts[i]));
        CHECK_OBJECT_DEEP(mod_consts[i]);
    }
}
#endif

// The module code objects.
static PyCodeObject *codeobj_aecb38f380049df4021c82a7fb2953ed;
static PyCodeObject *codeobj_3c0761f242e5ce40534f1eab9a868a9e;
static PyCodeObject *codeobj_765937b408da8e9ac56369f215dfdacb;
static PyCodeObject *codeobj_18f089b2e232bbceeb135ddf9d7224da;
static PyCodeObject *codeobj_ab6bb12151acad0dbab958cac65dbd5d;
static PyCodeObject *codeobj_495cbc5b8273413aa93dd87da5deab47;
static PyCodeObject *codeobj_a651cadf4e614bba25fb4c85d60d6214;
static PyCodeObject *codeobj_da5318f4e4c63064b0eb10d014c7282c;
static PyCodeObject *codeobj_c380f76ca12aa0536963b346076e2359;
static PyCodeObject *codeobj_2b596903130a043d4473e80c3b7d1327;
static PyCodeObject *codeobj_83cebef9552bc5e292295f67af9c6efd;
static PyCodeObject *codeobj_859827a834425b584d481d21594f17c1;
static PyCodeObject *codeobj_1c4d467ae28cbd847f4f7e781387400f;
static PyCodeObject *codeobj_71e8ef82d3d1a21b289c89efd29ba4fb;
static PyCodeObject *codeobj_d3d9c2ed86ab4e07fc312d58026d376e;
static PyCodeObject *codeobj_9ff6653e6c9844495bf6f7b83958b910;
static PyCodeObject *codeobj_5e59858bdc2d2b66e2ecebdbaeeb1c5f;
static PyCodeObject *codeobj_6c1a8339bb477bbe8ef692504f74310c;
static PyCodeObject *codeobj_706481369d52597022642401acff5ca9;
static PyCodeObject *codeobj_60e90acd62b857a138258b951b783c8f;
static PyCodeObject *codeobj_f63664256a3aadad9ae4696875b678c8;
static PyCodeObject *codeobj_b3f9574526fd6c4c09ad903ee24f1595;
static PyCodeObject *codeobj_5ac36e1bd8fff02bc4591ebf9aca3658;
static PyCodeObject *codeobj_7d3bb6349ea2ac447e1452609ac7a230;
static PyCodeObject *codeobj_7b96517bc7112ed3a89690b51787f0a5;
static PyCodeObject *codeobj_107dd700e550287aab3b7337563115b5;
static PyCodeObject *codeobj_dcc33c022ba0794259682c4d0b517d5f;
static PyCodeObject *codeobj_d674f5feb9cc6b63d0df17f39beb8ca5;
static PyCodeObject *codeobj_bc9829d011bfeb1390ef1732dd00886d;
static PyCodeObject *codeobj_1b8dda8e313cdb8b11620930481ca640;
static PyCodeObject *codeobj_e3ff8c276e03c8e1a880bb9b87817f26;
static PyCodeObject *codeobj_e97cfa1a33b609f3ef8786f5effa6f30;
static PyCodeObject *codeobj_86b569234a1c18e85201eb491c5cbd83;
static PyCodeObject *codeobj_bd4bdd0b6623041f56eabe0ce043b654;
static PyCodeObject *codeobj_933082d1fc1b1ce8a8130425a055db0d;
static PyCodeObject *codeobj_3f75580b5c7727486225c0616b57f205;
static PyCodeObject *codeobj_38ab9ed5c303df5ab27124fa88a0c141;
static PyCodeObject *codeobj_5e1cc2d20d86a11d012ff1e6be162027;
static PyCodeObject *codeobj_6ca4a6654d5b785088184b5bae7a118f;
static PyCodeObject *codeobj_78a8dba6d77a7a8c47a1383725ec744d;
static PyCodeObject *codeobj_b5133f64a3c8b885e89b634eeb140c25;
static PyCodeObject *codeobj_4a19938cda3c601aaeccfb58a1e34b39;
static PyCodeObject *codeobj_62f242fb3036b9aad5dd90e51b1b762f;
static PyCodeObject *codeobj_7d11199c30bddbed92d6adf934ed4655;
static PyCodeObject *codeobj_ba0f3c1e458a15adc45e861e2cb96579;
static PyCodeObject *codeobj_ce14080c6ebfefbdf4eeca2f3c6a3703;
static PyCodeObject *codeobj_ec151b16458d452ce0a734f86c51f0bd;
static PyCodeObject *codeobj_422f163fd63f8991fd6791abb5003da8;
static PyCodeObject *codeobj_a8612185bdaa1933e5865d344e29b661;
static PyCodeObject *codeobj_c0c5dbbe0fd544ed06dc9412aad86c8f;
static PyCodeObject *codeobj_4b4acc6bad3ec16fa3e9cd104a247d39;
static PyCodeObject *codeobj_39a016bc02cd70d1b9dd734b2a846a54;
static PyCodeObject *codeobj_967cc2e4c03bb02f7578e32ad41830db;
static PyCodeObject *codeobj_b446a954fd7199c282cd24dd1ae9d1a3;
static PyCodeObject *codeobj_389e8661c2254f6148e69c3af38b4fa4;
static PyCodeObject *codeobj_51c964b522699247064b7acc38fee7c6;
static PyCodeObject *codeobj_bcd6c299a9b1325ffc7dcceca04cf14c;
static PyCodeObject *codeobj_6c7bf2e6f982b8a29371bc200df3fb58;
static PyCodeObject *codeobj_47d627e700780e1989fd5fd5291580ae;
static PyCodeObject *codeobj_a629d174a3f4fa3cf2e6fcc0bede0348;
static PyCodeObject *codeobj_37c3f47fa3cc68c66959e173197129c9;
static PyCodeObject *codeobj_5e65546ee4bb33ac40c77193288d4781;
static PyCodeObject *codeobj_0db72ada574b4afe0cda57bda6621849;
static PyCodeObject *codeobj_aeff938374d2ce8e69488f8d5b5573a6;
static PyCodeObject *codeobj_bb48e9f3487600a2cd978f63986d8482;
static PyCodeObject *codeobj_d65142a1321b1f6d9d79a62b087f5f5c;
static PyCodeObject *codeobj_105ef5b2bcec4239ebbd7031df29a51d;
static PyCodeObject *codeobj_d6d98bb061ea83d47c15a67ce1843b33;
static PyCodeObject *codeobj_ba2dede22eeff7087921b6a053f7afe5;
static PyCodeObject *codeobj_958559edcfc230371fd60661b971e2eb;
static PyCodeObject *codeobj_7e71276c952a2d8bf742ad0638b2b627;
static PyCodeObject *codeobj_1a262ad3afd9aea256e84820f76c0c2e;
static PyCodeObject *codeobj_7bcdd43aa61ece872390d47a883072f6;
static PyCodeObject *codeobj_37c571cd74ad2fdf61d5caff50be6f52;
static PyCodeObject *codeobj_d34269cb64eb2787015745693561dccc;
static PyCodeObject *codeobj_9c46e5c65a04bfc8afa20496b7316031;
static PyCodeObject *codeobj_26c3fe9c0522cf75662bb6396b138263;
static PyCodeObject *codeobj_bca6b229eeda0db5cbf02ad225770c22;
static PyCodeObject *codeobj_37c8b7601e04f4296f883e3b07a18f2f;
static PyCodeObject *codeobj_6cce7a0a35abffac4c1dbb76a08284fe;
static PyCodeObject *codeobj_aaf06535c32f5efde0120eb452965a3f;
static PyCodeObject *codeobj_b4d18fb001a90dd499414d48b77fd0b0;
static PyCodeObject *codeobj_37301346538005369406fb049bfd5aa7;
static PyCodeObject *codeobj_c2c52e7e83e73a45f1808a1ef7ce0e20;
static PyCodeObject *codeobj_7186bda3fb1f202992f3691a45418b04;
static PyCodeObject *codeobj_d2d849213ae56d24f52f143da7a11ef1;
static PyCodeObject *codeobj_1ae4e77edcdc6c9918e5fa6a831d799e;
static PyCodeObject *codeobj_c825fe02a5098d57da507b6c66339805;
static PyCodeObject *codeobj_c46307c7a6ef593b39620af49cf4d929;
static PyCodeObject *codeobj_5367a775332636804cc182b3bd4e1852;
static PyCodeObject *codeobj_b731066c572840eb56efb7bda1cd137e;
static PyCodeObject *codeobj_05b48e1fba59274dcc27baf4f70e40a7;
static PyCodeObject *codeobj_e63b9958f8928d9d4d831ae4c8d41e3c;
static PyCodeObject *codeobj_4f469ce220d3d4a8e430fc24c476d69a;
static PyCodeObject *codeobj_049731c7a8a148b6349c8849ed44c30e;
static PyCodeObject *codeobj_a2f8a04adc5c1a104d57d1177c308c1d;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(mod_consts[507]); CHECK_OBJECT(module_filename_obj);
    codeobj_aecb38f380049df4021c82a7fb2953ed = MAKE_CODEOBJECT(module_filename_obj, 2170, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[214], mod_consts[508], NULL, 1, 0, 0);
    codeobj_3c0761f242e5ce40534f1eab9a868a9e = MAKE_CODEOBJECT(module_filename_obj, 923, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[214], mod_consts[509], NULL, 1, 0, 0);
    codeobj_765937b408da8e9ac56369f215dfdacb = MAKE_CODEOBJECT(module_filename_obj, 2136, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[214], mod_consts[510], NULL, 1, 0, 0);
    codeobj_18f089b2e232bbceeb135ddf9d7224da = MAKE_CODEOBJECT(module_filename_obj, 2197, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[214], mod_consts[510], NULL, 1, 0, 0);
    codeobj_ab6bb12151acad0dbab958cac65dbd5d = MAKE_CODEOBJECT(module_filename_obj, 767, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[124], mod_consts[511], NULL, 1, 0, 0);
    codeobj_495cbc5b8273413aa93dd87da5deab47 = MAKE_CODEOBJECT(module_filename_obj, 773, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[124], mod_consts[511], NULL, 1, 0, 0);
    codeobj_a651cadf4e614bba25fb4c85d60d6214 = MAKE_CODEOBJECT(module_filename_obj, 779, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[124], mod_consts[511], NULL, 1, 0, 0);
    codeobj_da5318f4e4c63064b0eb10d014c7282c = MAKE_CODEOBJECT(module_filename_obj, 1132, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[124], mod_consts[512], mod_consts[513], 1, 0, 0);
    codeobj_c380f76ca12aa0536963b346076e2359 = MAKE_CODEOBJECT(module_filename_obj, 1799, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[515], NULL, 1, 0, 0);
    codeobj_2b596903130a043d4473e80c3b7d1327 = MAKE_CODEOBJECT(module_filename_obj, 1809, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[515], NULL, 1, 0, 0);
    codeobj_83cebef9552bc5e292295f67af9c6efd = MAKE_CODEOBJECT(module_filename_obj, 1812, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[515], NULL, 1, 0, 0);
    codeobj_859827a834425b584d481d21594f17c1 = MAKE_CODEOBJECT(module_filename_obj, 1851, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[515], NULL, 1, 0, 0);
    codeobj_1c4d467ae28cbd847f4f7e781387400f = MAKE_CODEOBJECT(module_filename_obj, 1873, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[515], NULL, 1, 0, 0);
    codeobj_71e8ef82d3d1a21b289c89efd29ba4fb = MAKE_CODEOBJECT(module_filename_obj, 2177, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[515], NULL, 1, 0, 0);
    codeobj_d3d9c2ed86ab4e07fc312d58026d376e = MAKE_CODEOBJECT(module_filename_obj, 2213, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[515], NULL, 1, 0, 0);
    codeobj_9ff6653e6c9844495bf6f7b83958b910 = MAKE_CODEOBJECT(module_filename_obj, 2221, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[516], NULL, 1, 0, 0);
    codeobj_5e59858bdc2d2b66e2ecebdbaeeb1c5f = MAKE_CODEOBJECT(module_filename_obj, 1836, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[517], NULL, 1, 0, 0);
    codeobj_6c1a8339bb477bbe8ef692504f74310c = MAKE_CODEOBJECT(module_filename_obj, 1840, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[518], NULL, 1, 0, 0);
    codeobj_706481369d52597022642401acff5ca9 = MAKE_CODEOBJECT(module_filename_obj, 2064, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[519], NULL, 1, 0, 0);
    codeobj_60e90acd62b857a138258b951b783c8f = MAKE_CODEOBJECT(module_filename_obj, 2024, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[520], NULL, 1, 0, 0);
    codeobj_f63664256a3aadad9ae4696875b678c8 = MAKE_CODEOBJECT(module_filename_obj, 2043, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[521], NULL, 1, 0, 0);
    codeobj_b3f9574526fd6c4c09ad903ee24f1595 = MAKE_CODEOBJECT(module_filename_obj, 2095, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[522], NULL, 1, 0, 0);
    codeobj_5ac36e1bd8fff02bc4591ebf9aca3658 = MAKE_CODEOBJECT(module_filename_obj, 2099, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[522], NULL, 1, 0, 0);
    codeobj_7d3bb6349ea2ac447e1452609ac7a230 = MAKE_CODEOBJECT(module_filename_obj, 1131, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[190], NULL, 1, 0, 0);
    codeobj_7b96517bc7112ed3a89690b51787f0a5 = MAKE_CODEOBJECT(module_filename_obj, 2106, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[190], NULL, 1, 0, 0);
    codeobj_107dd700e550287aab3b7337563115b5 = MAKE_CODEOBJECT(module_filename_obj, 2192, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[190], NULL, 1, 0, 0);
    codeobj_dcc33c022ba0794259682c4d0b517d5f = MAKE_CODEOBJECT(module_filename_obj, 1067, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[523], NULL, 1, 0, 0);
    codeobj_d674f5feb9cc6b63d0df17f39beb8ca5 = MAKE_CODEOBJECT(module_filename_obj, 1105, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[524], NULL, 1, 0, 0);
    codeobj_bc9829d011bfeb1390ef1732dd00886d = MAKE_CODEOBJECT(module_filename_obj, 1947, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[525], NULL, 1, 0, 0);
    codeobj_1b8dda8e313cdb8b11620930481ca640 = MAKE_CODEOBJECT(module_filename_obj, 1178, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[526], NULL, 1, 0, 0);
    codeobj_e3ff8c276e03c8e1a880bb9b87817f26 = MAKE_CODEOBJECT(module_filename_obj, 2095, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[527], NULL, 1, 0, 0);
    codeobj_e97cfa1a33b609f3ef8786f5effa6f30 = MAKE_CODEOBJECT(module_filename_obj, 2099, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[527], NULL, 1, 0, 0);
    codeobj_86b569234a1c18e85201eb491c5cbd83 = MAKE_CODEOBJECT(module_filename_obj, 1108, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[528], NULL, 1, 0, 0);
    codeobj_bd4bdd0b6623041f56eabe0ce043b654 = MAKE_CODEOBJECT(module_filename_obj, 2149, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[529], NULL, 1, 0, 0);
    codeobj_933082d1fc1b1ce8a8130425a055db0d = MAKE_CODEOBJECT(module_filename_obj, 2152, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[529], NULL, 1, 0, 0);
    codeobj_3f75580b5c7727486225c0616b57f205 = MAKE_CODEOBJECT(module_filename_obj, 2073, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[530], NULL, 1, 0, 0);
    codeobj_38ab9ed5c303df5ab27124fa88a0c141 = MAKE_CODEOBJECT(module_filename_obj, 2108, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[531], NULL, 1, 0, 0);
    codeobj_5e1cc2d20d86a11d012ff1e6be162027 = MAKE_CODEOBJECT(module_filename_obj, 1060, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[532], NULL, 1, 0, 0);
    codeobj_6ca4a6654d5b785088184b5bae7a118f = MAKE_CODEOBJECT(module_filename_obj, 1939, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[533], NULL, 1, 0, 0);
    codeobj_78a8dba6d77a7a8c47a1383725ec744d = MAKE_CODEOBJECT(module_filename_obj, 1953, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[534], NULL, 1, 0, 0);
    codeobj_b5133f64a3c8b885e89b634eeb140c25 = MAKE_CODEOBJECT(module_filename_obj, 2125, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[535], NULL, 1, 0, 0);
    codeobj_4a19938cda3c601aaeccfb58a1e34b39 = MAKE_CODEOBJECT(module_filename_obj, 2182, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[536], NULL, 1, 0, 0);
    codeobj_62f242fb3036b9aad5dd90e51b1b762f = MAKE_CODEOBJECT(module_filename_obj, 2034, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[537], NULL, 1, 0, 0);
    codeobj_7d11199c30bddbed92d6adf934ed4655 = MAKE_CODEOBJECT(module_filename_obj, 921, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[514], mod_consts[511], NULL, 1, 0, 0);
    codeobj_ba0f3c1e458a15adc45e861e2cb96579 = MAKE_CODEOBJECT(module_filename_obj, 1, CO_NOFREE, mod_consts[538], NULL, NULL, 0, 0, 0);
    codeobj_ce14080c6ebfefbdf4eeca2f3c6a3703 = MAKE_CODEOBJECT(module_filename_obj, 2141, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[539], mod_consts[540], NULL, 1, 0, 0);
    codeobj_ec151b16458d452ce0a734f86c51f0bd = MAKE_CODEOBJECT(module_filename_obj, 51, CO_NOFREE, mod_consts[32], mod_consts[541], NULL, 0, 0, 0);
    codeobj_422f163fd63f8991fd6791abb5003da8 = MAKE_CODEOBJECT(module_filename_obj, 115, CO_NOFREE, mod_consts[67], mod_consts[541], NULL, 0, 0, 0);
    codeobj_a8612185bdaa1933e5865d344e29b661 = MAKE_CODEOBJECT(module_filename_obj, 1319, CO_OPTIMIZED | CO_NOFREE, mod_consts[268], mod_consts[541], NULL, 0, 0, 0);
    codeobj_c0c5dbbe0fd544ed06dc9412aad86c8f = MAKE_CODEOBJECT(module_filename_obj, 222, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[471], mod_consts[542], NULL, 1, 0, 0);
    codeobj_4b4acc6bad3ec16fa3e9cd104a247d39 = MAKE_CODEOBJECT(module_filename_obj, 91, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[463], mod_consts[542], NULL, 1, 0, 0);
    codeobj_39a016bc02cd70d1b9dd734b2a846a54 = MAKE_CODEOBJECT(module_filename_obj, 203, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[55], mod_consts[542], NULL, 1, 0, 0);
    codeobj_967cc2e4c03bb02f7578e32ad41830db = MAKE_CODEOBJECT(module_filename_obj, 206, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[56], mod_consts[543], NULL, 4, 0, 0);
    codeobj_b446a954fd7199c282cd24dd1ae9d1a3 = MAKE_CODEOBJECT(module_filename_obj, 85, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[10], mod_consts[544], NULL, 2, 0, 0);
    codeobj_389e8661c2254f6148e69c3af38b4fa4 = MAKE_CODEOBJECT(module_filename_obj, 232, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[248], mod_consts[545], NULL, 2, 0, 0);
    codeobj_51c964b522699247064b7acc38fee7c6 = MAKE_CODEOBJECT(module_filename_obj, 1323, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[258], mod_consts[546], NULL, 3, 0, 0);
    codeobj_bcd6c299a9b1325ffc7dcceca04cf14c = MAKE_CODEOBJECT(module_filename_obj, 182, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[258], mod_consts[547], NULL, 5, 0, 0);
    codeobj_6c7bf2e6f982b8a29371bc200df3fb58 = MAKE_CODEOBJECT(module_filename_obj, 81, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[258], mod_consts[548], NULL, 2, 0, 0);
    codeobj_47d627e700780e1989fd5fd5291580ae = MAKE_CODEOBJECT(module_filename_obj, 226, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[473], mod_consts[542], NULL, 1, 0, 0);
    codeobj_a629d174a3f4fa3cf2e6fcc0bede0348 = MAKE_CODEOBJECT(module_filename_obj, 229, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[475], mod_consts[542], NULL, 1, 0, 0);
    codeobj_37c3f47fa3cc68c66959e173197129c9 = MAKE_CODEOBJECT(module_filename_obj, 756, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[177], mod_consts[549], NULL, 1, 0, 0);
    codeobj_5e65546ee4bb33ac40c77193288d4781 = MAKE_CODEOBJECT(module_filename_obj, 453, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[484], mod_consts[550], NULL, 4, 0, 0);
    codeobj_0db72ada574b4afe0cda57bda6621849 = MAKE_CODEOBJECT(module_filename_obj, 1185, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[494], mod_consts[551], NULL, 9, 0, 0);
    codeobj_aeff938374d2ce8e69488f8d5b5573a6 = MAKE_CODEOBJECT(module_filename_obj, 689, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[88], mod_consts[552], NULL, 6, 0, 0);
    codeobj_bb48e9f3487600a2cd978f63986d8482 = MAKE_CODEOBJECT(module_filename_obj, 619, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[90], mod_consts[553], NULL, 1, 0, 0);
    codeobj_d65142a1321b1f6d9d79a62b087f5f5c = MAKE_CODEOBJECT(module_filename_obj, 532, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[87], mod_consts[553], NULL, 1, 0, 0);
    codeobj_105ef5b2bcec4239ebbd7031df29a51d = MAKE_CODEOBJECT(module_filename_obj, 209, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[35], mod_consts[542], NULL, 1, 0, 0);
    codeobj_d6d98bb061ea83d47c15a67ce1843b33 = MAKE_CODEOBJECT(module_filename_obj, 1328, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[35], mod_consts[542], NULL, 1, 0, 0);
    codeobj_ba2dede22eeff7087921b6a053f7afe5 = MAKE_CODEOBJECT(module_filename_obj, 2118, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[373], mod_consts[554], mod_consts[555], 1, 0, 0);
    codeobj_958559edcfc230371fd60661b971e2eb = MAKE_CODEOBJECT(module_filename_obj, 1343, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[266], mod_consts[556], NULL, 2, 0, 0);
    codeobj_7e71276c952a2d8bf742ad0638b2b627 = MAKE_CODEOBJECT(module_filename_obj, 981, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[165], mod_consts[557], NULL, 2, 0, 0);
    codeobj_1a262ad3afd9aea256e84820f76c0c2e = MAKE_CODEOBJECT(module_filename_obj, 759, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[120], mod_consts[511], NULL, 1, 0, 0);
    codeobj_7bcdd43aa61ece872390d47a883072f6 = MAKE_CODEOBJECT(module_filename_obj, 1439, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[497], mod_consts[558], NULL, 4, 0, 0);
    codeobj_37c571cd74ad2fdf61d5caff50be6f52 = MAKE_CODEOBJECT(module_filename_obj, 1538, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[407], mod_consts[559], NULL, 23, 0, 0);
    codeobj_d34269cb64eb2787015745693561dccc = MAKE_CODEOBJECT(module_filename_obj, 266, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[478], mod_consts[542], NULL, 1, 0, 0);
    codeobj_9c46e5c65a04bfc8afa20496b7316031 = MAKE_CODEOBJECT(module_filename_obj, 274, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[480], mod_consts[542], NULL, 1, 0, 0);
    codeobj_26c3fe9c0522cf75662bb6396b138263 = MAKE_CODEOBJECT(module_filename_obj, 283, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[73], mod_consts[560], NULL, 5, 0, 0);
    codeobj_bca6b229eeda0db5cbf02ad225770c22 = MAKE_CODEOBJECT(module_filename_obj, 31, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[6], mod_consts[561], NULL, 0, 0, 0);
    codeobj_37c8b7601e04f4296f883e3b07a18f2f = MAKE_CODEOBJECT(module_filename_obj, 791, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[492], mod_consts[562], NULL, 11, 0, 0);
    codeobj_6cce7a0a35abffac4c1dbb76a08284fe = MAKE_CODEOBJECT(module_filename_obj, 2262, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[504], mod_consts[563], NULL, 1, 0, 0);
    codeobj_aaf06535c32f5efde0120eb452965a3f = MAKE_CODEOBJECT(module_filename_obj, 2234, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[503], mod_consts[563], NULL, 1, 0, 0);
    codeobj_b4d18fb001a90dd499414d48b77fd0b0 = MAKE_CODEOBJECT(module_filename_obj, 1011, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[168], mod_consts[564], NULL, 3, 0, 0);
    codeobj_37301346538005369406fb049bfd5aa7 = MAKE_CODEOBJECT(module_filename_obj, 1040, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[174], mod_consts[565], mod_consts[566], 1, 0, 0);
    codeobj_c2c52e7e83e73a45f1808a1ef7ce0e20 = MAKE_CODEOBJECT(module_filename_obj, 2322, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[506], mod_consts[567], NULL, 1, 0, 0);
    codeobj_7186bda3fb1f202992f3691a45418b04 = MAKE_CODEOBJECT(module_filename_obj, 2290, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[505], mod_consts[568], NULL, 1, 0, 0);
    codeobj_d2d849213ae56d24f52f143da7a11ef1 = MAKE_CODEOBJECT(module_filename_obj, 457, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[486], mod_consts[569], NULL, 4, 0, 0);
    codeobj_1ae4e77edcdc6c9918e5fa6a831d799e = MAKE_CODEOBJECT(module_filename_obj, 1191, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[496], mod_consts[570], NULL, 9, 0, 0);
    codeobj_c825fe02a5098d57da507b6c66339805 = MAKE_CODEOBJECT(module_filename_obj, 537, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[487], mod_consts[553], NULL, 1, 0, 0);
    codeobj_c46307c7a6ef593b39620af49cf4d929 = MAKE_CODEOBJECT(module_filename_obj, 624, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[488], mod_consts[553], NULL, 1, 0, 0);
    codeobj_5367a775332636804cc182b3bd4e1852 = MAKE_CODEOBJECT(module_filename_obj, 1028, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[171], mod_consts[571], mod_consts[572], 1, 0, 0);
    codeobj_b731066c572840eb56efb7bda1cd137e = MAKE_CODEOBJECT(module_filename_obj, 1123, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[186], mod_consts[573], NULL, 2, 0, 0);
    codeobj_05b48e1fba59274dcc27baf4f70e40a7 = MAKE_CODEOBJECT(module_filename_obj, 1984, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[186], mod_consts[573], NULL, 2, 0, 0);
    codeobj_e63b9958f8928d9d4d831ae4c8d41e3c = MAKE_CODEOBJECT(module_filename_obj, 1331, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[77], mod_consts[556], NULL, 2, 0, 0);
    codeobj_4f469ce220d3d4a8e430fc24c476d69a = MAKE_CODEOBJECT(module_filename_obj, 1334, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[262], mod_consts[556], NULL, 2, 0, 0);
    codeobj_049731c7a8a148b6349c8849ed44c30e = MAKE_CODEOBJECT(module_filename_obj, 1340, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[264], mod_consts[556], NULL, 2, 0, 0);
    codeobj_a2f8a04adc5c1a104d57d1177c308c1d = MAKE_CODEOBJECT(module_filename_obj, 100, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[20], mod_consts[574], NULL, 1, 0, 0);
}

// The module function declarations.
static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__19__savez_dispatcher$$$genobj__1__savez_dispatcher(struct Nuitka_CellObject **closure);


static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__21__savez_compressed_dispatcher$$$genobj__1__savez_compressed_dispatcher(struct Nuitka_CellObject **closure);


static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__25_loadtxt$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure);


static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data$$$genobj__1_read_data(struct Nuitka_CellObject **closure);


static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure);


static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__2_genexpr(struct Nuitka_CellObject **closure);


static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__3_genexpr(struct Nuitka_CellObject **closure);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__13_complex_call_helper_star_list_star_dict(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__6_complex_call_helper_pos_star_list_star_dict(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__3_complex_call_helper_pos_star_dict(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__4_complex_call_helper_star_list(PyObject **python_pars);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__10___del__();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__11___iter__();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__12___len__();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__13___getitem__();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__14_iteritems();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__15_iterkeys();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__16_load(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__17__save_dispatcher(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__18_save(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__19__savez_dispatcher();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__1_loads();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__20_savez();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__21__savez_compressed_dispatcher();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__22_savez_compressed();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__23__savez(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__1_floatconv();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__2_lambda();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__3_lambda();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__4_lambda();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__1_flatten_dtype_internal();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__2_pack_items();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__3_split_line(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__5_tobytes_first();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__6_lambda(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__26__savetxt_dispatcher(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__1___init__();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__2_close();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__3_write();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__4_write_bytes();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__5_write_normal();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__6_first_write();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__28_fromregex(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__29_genfromtxt(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__29_genfromtxt$$$function__1_tobytes_first();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__29_genfromtxt$$$function__2_encode_unicode_cols(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__2___init__();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__30_ndfromtxt();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__31_mafromtxt();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__32_recfromtxt();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__33_recfromcsv();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__3___getattribute__();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__4___dir__();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__5_zipfile_factory();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__6___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__7___enter__();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__8___exit__();


static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__9_close();


// The module function definitions.
static PyObject *impl_numpy$lib$npyio$$$function__1_loads(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[0];
    PyObject *par_kwargs = python_pars[1];
    struct Nuitka_FrameObject *frame_bca6b229eeda0db5cbf02ad225770c22;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_bca6b229eeda0db5cbf02ad225770c22 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_bca6b229eeda0db5cbf02ad225770c22)) {
        Py_XDECREF(cache_frame_bca6b229eeda0db5cbf02ad225770c22);

#if _DEBUG_REFCOUNTS
        if (cache_frame_bca6b229eeda0db5cbf02ad225770c22 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_bca6b229eeda0db5cbf02ad225770c22 = MAKE_FUNCTION_FRAME(codeobj_bca6b229eeda0db5cbf02ad225770c22, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_bca6b229eeda0db5cbf02ad225770c22->m_type_description == NULL);
    frame_bca6b229eeda0db5cbf02ad225770c22 = cache_frame_bca6b229eeda0db5cbf02ad225770c22;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_bca6b229eeda0db5cbf02ad225770c22);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_bca6b229eeda0db5cbf02ad225770c22) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_name_1;
        tmp_expression_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_name_1 == NULL)) {
            tmp_expression_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 34;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[1]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 34;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = mod_consts[2];
        tmp_args_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_name_1, 0, tmp_tuple_element_1);
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[3]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[3]);
        }

        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 36;
            type_description_1 = "oo";
            goto tuple_build_exception_1;
        }
        PyTuple_SET_ITEM0(tmp_args_name_1, 1, tmp_tuple_element_1);
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_name_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_kwargs_name_1 = PyDict_Copy(mod_consts[4]);
        frame_bca6b229eeda0db5cbf02ad225770c22->m_frame.f_lineno = 34;
        tmp_call_result_1 = CALL_FUNCTION(tmp_called_name_1, tmp_args_name_1, tmp_kwargs_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kwargs_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 34;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_expression_name_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[5]);

        if (unlikely(tmp_expression_name_2 == NULL)) {
            tmp_expression_name_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[5]);
        }

        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[6]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_args);
        tmp_dircall_arg2_1 = par_args;
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg2_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__13_complex_call_helper_star_list_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bca6b229eeda0db5cbf02ad225770c22);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_bca6b229eeda0db5cbf02ad225770c22);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bca6b229eeda0db5cbf02ad225770c22);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_bca6b229eeda0db5cbf02ad225770c22, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_bca6b229eeda0db5cbf02ad225770c22->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_bca6b229eeda0db5cbf02ad225770c22, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_bca6b229eeda0db5cbf02ad225770c22,
        type_description_1,
        par_args,
        par_kwargs
    );


    // Release cached frame if used for exception.
    if (frame_bca6b229eeda0db5cbf02ad225770c22 == cache_frame_bca6b229eeda0db5cbf02ad225770c22) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_bca6b229eeda0db5cbf02ad225770c22);
        cache_frame_bca6b229eeda0db5cbf02ad225770c22 = NULL;
    }

    assertFrameObject(frame_bca6b229eeda0db5cbf02ad225770c22);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__2___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_obj = python_pars[1];
    struct Nuitka_FrameObject *frame_6c7bf2e6f982b8a29371bc200df3fb58;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_6c7bf2e6f982b8a29371bc200df3fb58 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_6c7bf2e6f982b8a29371bc200df3fb58)) {
        Py_XDECREF(cache_frame_6c7bf2e6f982b8a29371bc200df3fb58);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6c7bf2e6f982b8a29371bc200df3fb58 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6c7bf2e6f982b8a29371bc200df3fb58 = MAKE_FUNCTION_FRAME(codeobj_6c7bf2e6f982b8a29371bc200df3fb58, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_6c7bf2e6f982b8a29371bc200df3fb58->m_type_description == NULL);
    frame_6c7bf2e6f982b8a29371bc200df3fb58 = cache_frame_6c7bf2e6f982b8a29371bc200df3fb58;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_6c7bf2e6f982b8a29371bc200df3fb58);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_6c7bf2e6f982b8a29371bc200df3fb58) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[7]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[7]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_obj);
        tmp_args_element_name_1 = par_obj;
        frame_6c7bf2e6f982b8a29371bc200df3fb58->m_frame.f_lineno = 83;
        tmp_assattr_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[8], tmp_args_element_name_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[9], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6c7bf2e6f982b8a29371bc200df3fb58);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6c7bf2e6f982b8a29371bc200df3fb58);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6c7bf2e6f982b8a29371bc200df3fb58, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6c7bf2e6f982b8a29371bc200df3fb58->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6c7bf2e6f982b8a29371bc200df3fb58, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6c7bf2e6f982b8a29371bc200df3fb58,
        type_description_1,
        par_self,
        par_obj
    );


    // Release cached frame if used for exception.
    if (frame_6c7bf2e6f982b8a29371bc200df3fb58 == cache_frame_6c7bf2e6f982b8a29371bc200df3fb58) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_6c7bf2e6f982b8a29371bc200df3fb58);
        cache_frame_6c7bf2e6f982b8a29371bc200df3fb58 = NULL;
    }

    assertFrameObject(frame_6c7bf2e6f982b8a29371bc200df3fb58);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_obj);
    Py_DECREF(par_obj);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_obj);
    Py_DECREF(par_obj);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__3___getattribute__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_key = python_pars[1];
    struct Nuitka_FrameObject *frame_b446a954fd7199c282cd24dd1ae9d1a3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_b446a954fd7199c282cd24dd1ae9d1a3 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b446a954fd7199c282cd24dd1ae9d1a3)) {
        Py_XDECREF(cache_frame_b446a954fd7199c282cd24dd1ae9d1a3);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b446a954fd7199c282cd24dd1ae9d1a3 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b446a954fd7199c282cd24dd1ae9d1a3 = MAKE_FUNCTION_FRAME(codeobj_b446a954fd7199c282cd24dd1ae9d1a3, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b446a954fd7199c282cd24dd1ae9d1a3->m_type_description == NULL);
    frame_b446a954fd7199c282cd24dd1ae9d1a3 = cache_frame_b446a954fd7199c282cd24dd1ae9d1a3;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b446a954fd7199c282cd24dd1ae9d1a3);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b446a954fd7199c282cd24dd1ae9d1a3) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_subscript_name_1;
        tmp_called_instance_1 = (PyObject *)&PyBaseObject_Type;
        CHECK_OBJECT(par_self);
        tmp_args_element_name_1 = par_self;
        tmp_args_element_name_2 = mod_consts[9];
        frame_b446a954fd7199c282cd24dd1ae9d1a3->m_frame.f_lineno = 87;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
            tmp_expression_name_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[10],
                call_args
            );
        }

        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 87;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
        CHECK_OBJECT(par_key);
        tmp_subscript_name_1 = par_key;
        tmp_return_value = LOOKUP_SUBSCRIPT(tmp_expression_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_expression_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 87;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
        goto frame_return_exit_1;
    }
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_1, &exception_preserved_value_1, &exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_b446a954fd7199c282cd24dd1ae9d1a3, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_b446a954fd7199c282cd24dd1ae9d1a3, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_1, exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_KeyError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_1, tmp_compexpr_right_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        CHECK_OBJECT(par_key);
        tmp_make_exception_arg_1 = par_key;
        frame_b446a954fd7199c282cd24dd1ae9d1a3->m_frame.f_lineno = 89;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_AttributeError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 89;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 86;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_b446a954fd7199c282cd24dd1ae9d1a3->m_frame) frame_b446a954fd7199c282cd24dd1ae9d1a3->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oo";
    goto try_except_handler_2;
    branch_end_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b446a954fd7199c282cd24dd1ae9d1a3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_b446a954fd7199c282cd24dd1ae9d1a3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b446a954fd7199c282cd24dd1ae9d1a3);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b446a954fd7199c282cd24dd1ae9d1a3, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b446a954fd7199c282cd24dd1ae9d1a3->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b446a954fd7199c282cd24dd1ae9d1a3, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b446a954fd7199c282cd24dd1ae9d1a3,
        type_description_1,
        par_self,
        par_key
    );


    // Release cached frame if used for exception.
    if (frame_b446a954fd7199c282cd24dd1ae9d1a3 == cache_frame_b446a954fd7199c282cd24dd1ae9d1a3) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b446a954fd7199c282cd24dd1ae9d1a3);
        cache_frame_b446a954fd7199c282cd24dd1ae9d1a3 = NULL;
    }

    assertFrameObject(frame_b446a954fd7199c282cd24dd1ae9d1a3);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_key);
    Py_DECREF(par_key);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_key);
    Py_DECREF(par_key);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__4___dir__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_4b4acc6bad3ec16fa3e9cd104a247d39;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4b4acc6bad3ec16fa3e9cd104a247d39 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4b4acc6bad3ec16fa3e9cd104a247d39)) {
        Py_XDECREF(cache_frame_4b4acc6bad3ec16fa3e9cd104a247d39);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4b4acc6bad3ec16fa3e9cd104a247d39 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4b4acc6bad3ec16fa3e9cd104a247d39 = MAKE_FUNCTION_FRAME(codeobj_4b4acc6bad3ec16fa3e9cd104a247d39, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4b4acc6bad3ec16fa3e9cd104a247d39->m_type_description == NULL);
    frame_4b4acc6bad3ec16fa3e9cd104a247d39 = cache_frame_4b4acc6bad3ec16fa3e9cd104a247d39;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4b4acc6bad3ec16fa3e9cd104a247d39);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4b4acc6bad3ec16fa3e9cd104a247d39) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_list_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        tmp_called_instance_2 = (PyObject *)&PyBaseObject_Type;
        CHECK_OBJECT(par_self);
        tmp_args_element_name_1 = par_self;
        tmp_args_element_name_2 = mod_consts[9];
        frame_4b4acc6bad3ec16fa3e9cd104a247d39->m_frame.f_lineno = 97;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
            tmp_called_instance_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_2,
                mod_consts[10],
                call_args
            );
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 97;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_4b4acc6bad3ec16fa3e9cd104a247d39->m_frame.f_lineno = 97;
        tmp_list_arg_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[11]);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_list_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 97;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = MAKE_LIST(tmp_list_arg_1);
        Py_DECREF(tmp_list_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 97;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4b4acc6bad3ec16fa3e9cd104a247d39);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_4b4acc6bad3ec16fa3e9cd104a247d39);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4b4acc6bad3ec16fa3e9cd104a247d39);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4b4acc6bad3ec16fa3e9cd104a247d39, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4b4acc6bad3ec16fa3e9cd104a247d39->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4b4acc6bad3ec16fa3e9cd104a247d39, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4b4acc6bad3ec16fa3e9cd104a247d39,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_4b4acc6bad3ec16fa3e9cd104a247d39 == cache_frame_4b4acc6bad3ec16fa3e9cd104a247d39) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4b4acc6bad3ec16fa3e9cd104a247d39);
        cache_frame_4b4acc6bad3ec16fa3e9cd104a247d39 = NULL;
    }

    assertFrameObject(frame_4b4acc6bad3ec16fa3e9cd104a247d39);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__5_zipfile_factory(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_file = python_pars[0];
    PyObject *par_args = python_pars[1];
    PyObject *par_kwargs = python_pars[2];
    PyObject *var_zipfile = NULL;
    struct Nuitka_FrameObject *frame_a2f8a04adc5c1a104d57d1177c308c1d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_a2f8a04adc5c1a104d57d1177c308c1d = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_a2f8a04adc5c1a104d57d1177c308c1d)) {
        Py_XDECREF(cache_frame_a2f8a04adc5c1a104d57d1177c308c1d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a2f8a04adc5c1a104d57d1177c308c1d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a2f8a04adc5c1a104d57d1177c308c1d = MAKE_FUNCTION_FRAME(codeobj_a2f8a04adc5c1a104d57d1177c308c1d, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a2f8a04adc5c1a104d57d1177c308c1d->m_type_description == NULL);
    frame_a2f8a04adc5c1a104d57d1177c308c1d = cache_frame_a2f8a04adc5c1a104d57d1177c308c1d;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a2f8a04adc5c1a104d57d1177c308c1d);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a2f8a04adc5c1a104d57d1177c308c1d) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT(par_file);
        tmp_expression_name_1 = par_file;
        tmp_attribute_name_1 = mod_consts[13];
        tmp_res = BUILTIN_HASATTR_BOOL(tmp_expression_name_1, tmp_attribute_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_called_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[14]);

        if (unlikely(tmp_called_name_1 == NULL)) {
            tmp_called_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[14]);
        }

        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_file);
        tmp_args_element_name_1 = par_file;
        frame_a2f8a04adc5c1a104d57d1177c308c1d->m_frame.f_lineno = 109;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_file;
            assert(old != NULL);
            par_file = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_arg_name_1;
        PyObject *tmp_locals_arg_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = mod_consts[15];
        tmp_globals_arg_name_1 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = mod_consts[16];
        frame_a2f8a04adc5c1a104d57d1177c308c1d->m_frame.f_lineno = 110;
        tmp_assign_source_2 = IMPORT_MODULE5(tmp_name_name_1, tmp_globals_arg_name_1, tmp_locals_arg_name_1, tmp_fromlist_name_1, tmp_level_name_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_zipfile == NULL);
        var_zipfile = tmp_assign_source_2;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        tmp_ass_subvalue_1 = Py_True;
        CHECK_OBJECT(par_kwargs);
        tmp_ass_subscribed_1 = par_kwargs;
        tmp_ass_subscript_1 = mod_consts[17];
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 111;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_dircall_arg4_1;
        CHECK_OBJECT(var_zipfile);
        tmp_expression_name_2 = var_zipfile;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[18]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 112;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_file);
        tmp_tuple_element_1 = par_file;
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_args);
        tmp_dircall_arg3_1 = par_args;
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg4_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg3_1);
        Py_INCREF(tmp_dircall_arg4_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1, tmp_dircall_arg4_1};
            tmp_return_value = impl___main__$$$function__6_complex_call_helper_pos_star_list_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 112;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a2f8a04adc5c1a104d57d1177c308c1d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_a2f8a04adc5c1a104d57d1177c308c1d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a2f8a04adc5c1a104d57d1177c308c1d);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a2f8a04adc5c1a104d57d1177c308c1d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a2f8a04adc5c1a104d57d1177c308c1d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a2f8a04adc5c1a104d57d1177c308c1d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a2f8a04adc5c1a104d57d1177c308c1d,
        type_description_1,
        par_file,
        par_args,
        par_kwargs,
        var_zipfile
    );


    // Release cached frame if used for exception.
    if (frame_a2f8a04adc5c1a104d57d1177c308c1d == cache_frame_a2f8a04adc5c1a104d57d1177c308c1d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a2f8a04adc5c1a104d57d1177c308c1d);
        cache_frame_a2f8a04adc5c1a104d57d1177c308c1d = NULL;
    }

    assertFrameObject(frame_a2f8a04adc5c1a104d57d1177c308c1d);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_file);
    Py_DECREF(par_file);
    par_file = NULL;
    CHECK_OBJECT(var_zipfile);
    Py_DECREF(var_zipfile);
    var_zipfile = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_file);
    par_file = NULL;
    Py_XDECREF(var_zipfile);
    var_zipfile = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__6___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_fid = python_pars[1];
    PyObject *par_own_fid = python_pars[2];
    PyObject *par_allow_pickle = python_pars[3];
    PyObject *par_pickle_kwargs = python_pars[4];
    PyObject *var__zip = NULL;
    PyObject *var_x = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_bcd6c299a9b1325ffc7dcceca04cf14c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_bcd6c299a9b1325ffc7dcceca04cf14c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_bcd6c299a9b1325ffc7dcceca04cf14c)) {
        Py_XDECREF(cache_frame_bcd6c299a9b1325ffc7dcceca04cf14c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_bcd6c299a9b1325ffc7dcceca04cf14c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_bcd6c299a9b1325ffc7dcceca04cf14c = MAKE_FUNCTION_FRAME(codeobj_bcd6c299a9b1325ffc7dcceca04cf14c, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_bcd6c299a9b1325ffc7dcceca04cf14c->m_type_description == NULL);
    frame_bcd6c299a9b1325ffc7dcceca04cf14c = cache_frame_bcd6c299a9b1325ffc7dcceca04cf14c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_bcd6c299a9b1325ffc7dcceca04cf14c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_bcd6c299a9b1325ffc7dcceca04cf14c) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_called_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[20]);

        if (unlikely(tmp_called_name_1 == NULL)) {
            tmp_called_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[20]);
        }

        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_fid);
        tmp_args_element_name_1 = par_fid;
        frame_bcd6c299a9b1325ffc7dcceca04cf14c->m_frame.f_lineno = 186;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var__zip == NULL);
        var__zip = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(var__zip);
        tmp_called_instance_1 = var__zip;
        frame_bcd6c299a9b1325ffc7dcceca04cf14c->m_frame.f_lineno = 187;
        tmp_assattr_value_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[21]);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[22], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = PyList_New(0);
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[23], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_allow_pickle);
        tmp_assattr_value_3 = par_allow_pickle;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[24], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT(par_pickle_kwargs);
        tmp_assattr_value_4 = par_pickle_kwargs;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, mod_consts[25], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 190;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_expression_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_iter_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[22]);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_3 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooo";
                exception_lineno = 191;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_4 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_x;
            var_x = tmp_assign_source_4;
            Py_INCREF(var_x);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_x);
        tmp_called_instance_2 = var_x;
        frame_bcd6c299a9b1325ffc7dcceca04cf14c->m_frame.f_lineno = 192;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_2,
            mod_consts[26],
            PyTuple_GET_ITEM(mod_consts[27], 0)
        );

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 192;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 192;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_subscript_name_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[28]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_expression_name_3 = par_self;
        tmp_expression_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[23]);
        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[29]);
        Py_DECREF(tmp_expression_name_2);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_x);
        tmp_expression_name_4 = var_x;
        tmp_subscript_name_1 = mod_consts[30];
        tmp_args_element_name_2 = LOOKUP_SUBSCRIPT(tmp_expression_name_4, tmp_subscript_name_1);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        frame_bcd6c299a9b1325ffc7dcceca04cf14c->m_frame.f_lineno = 193;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_2);
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_expression_name_5;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_3;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[28]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 195;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_expression_name_5 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, mod_consts[23]);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_x);
        tmp_args_element_name_3 = var_x;
        frame_bcd6c299a9b1325ffc7dcceca04cf14c->m_frame.f_lineno = 195;
        tmp_call_result_3 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_3, mod_consts[29], tmp_args_element_name_3);
        Py_DECREF(tmp_called_instance_3);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_3);
    }
    branch_end_1:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 191;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_assattr_target_5;
        CHECK_OBJECT(var__zip);
        tmp_assattr_value_5 = var__zip;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[28]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 196;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, mod_consts[31], tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 196;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_6;
        PyObject *tmp_called_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_assattr_target_6;
        tmp_called_name_3 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[32]);

        if (unlikely(tmp_called_name_3 == NULL)) {
            tmp_called_name_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[32]);
        }

        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[28]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 197;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_4 = par_self;
        frame_bcd6c299a9b1325ffc7dcceca04cf14c->m_frame.f_lineno = 197;
        tmp_assattr_value_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_4);
        if (tmp_assattr_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_assattr_value_6);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[28]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 197;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, mod_consts[33], tmp_assattr_value_6);
        Py_DECREF(tmp_assattr_value_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_own_fid);
        tmp_truth_name_2 = CHECK_IF_TRUE(par_own_fid);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assattr_value_7;
        PyObject *tmp_assattr_target_7;
        CHECK_OBJECT(par_fid);
        tmp_assattr_value_7 = par_fid;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[28]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 199;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_7 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_7, mod_consts[34], tmp_assattr_value_7);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 199;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assattr_value_8;
        PyObject *tmp_assattr_target_8;
        tmp_assattr_value_8 = Py_None;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[28]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 201;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_8 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_8, mod_consts[34], tmp_assattr_value_8);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bcd6c299a9b1325ffc7dcceca04cf14c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bcd6c299a9b1325ffc7dcceca04cf14c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_bcd6c299a9b1325ffc7dcceca04cf14c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_bcd6c299a9b1325ffc7dcceca04cf14c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_bcd6c299a9b1325ffc7dcceca04cf14c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_bcd6c299a9b1325ffc7dcceca04cf14c,
        type_description_1,
        par_self,
        par_fid,
        par_own_fid,
        par_allow_pickle,
        par_pickle_kwargs,
        var__zip,
        var_x
    );


    // Release cached frame if used for exception.
    if (frame_bcd6c299a9b1325ffc7dcceca04cf14c == cache_frame_bcd6c299a9b1325ffc7dcceca04cf14c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_bcd6c299a9b1325ffc7dcceca04cf14c);
        cache_frame_bcd6c299a9b1325ffc7dcceca04cf14c = NULL;
    }

    assertFrameObject(frame_bcd6c299a9b1325ffc7dcceca04cf14c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var__zip);
    Py_DECREF(var__zip);
    var__zip = NULL;
    Py_XDECREF(var_x);
    var_x = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var__zip);
    var__zip = NULL;
    Py_XDECREF(var_x);
    var_x = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_fid);
    Py_DECREF(par_fid);
    CHECK_OBJECT(par_own_fid);
    Py_DECREF(par_own_fid);
    CHECK_OBJECT(par_allow_pickle);
    Py_DECREF(par_allow_pickle);
    CHECK_OBJECT(par_pickle_kwargs);
    Py_DECREF(par_pickle_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_fid);
    Py_DECREF(par_fid);
    CHECK_OBJECT(par_own_fid);
    Py_DECREF(par_own_fid);
    CHECK_OBJECT(par_allow_pickle);
    Py_DECREF(par_allow_pickle);
    CHECK_OBJECT(par_pickle_kwargs);
    Py_DECREF(par_pickle_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__7___enter__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    CHECK_OBJECT(par_self);
    tmp_return_value = par_self;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__8___exit__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_exc_type = python_pars[1];
    PyObject *par_exc_value = python_pars[2];
    PyObject *par_traceback = python_pars[3];
    struct Nuitka_FrameObject *frame_967cc2e4c03bb02f7578e32ad41830db;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_967cc2e4c03bb02f7578e32ad41830db = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_967cc2e4c03bb02f7578e32ad41830db)) {
        Py_XDECREF(cache_frame_967cc2e4c03bb02f7578e32ad41830db);

#if _DEBUG_REFCOUNTS
        if (cache_frame_967cc2e4c03bb02f7578e32ad41830db == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_967cc2e4c03bb02f7578e32ad41830db = MAKE_FUNCTION_FRAME(codeobj_967cc2e4c03bb02f7578e32ad41830db, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_967cc2e4c03bb02f7578e32ad41830db->m_type_description == NULL);
    frame_967cc2e4c03bb02f7578e32ad41830db = cache_frame_967cc2e4c03bb02f7578e32ad41830db;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_967cc2e4c03bb02f7578e32ad41830db);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_967cc2e4c03bb02f7578e32ad41830db) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        frame_967cc2e4c03bb02f7578e32ad41830db->m_frame.f_lineno = 207;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[35]);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 207;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_967cc2e4c03bb02f7578e32ad41830db);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_967cc2e4c03bb02f7578e32ad41830db);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_967cc2e4c03bb02f7578e32ad41830db, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_967cc2e4c03bb02f7578e32ad41830db->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_967cc2e4c03bb02f7578e32ad41830db, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_967cc2e4c03bb02f7578e32ad41830db,
        type_description_1,
        par_self,
        par_exc_type,
        par_exc_value,
        par_traceback
    );


    // Release cached frame if used for exception.
    if (frame_967cc2e4c03bb02f7578e32ad41830db == cache_frame_967cc2e4c03bb02f7578e32ad41830db) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_967cc2e4c03bb02f7578e32ad41830db);
        cache_frame_967cc2e4c03bb02f7578e32ad41830db = NULL;
    }

    assertFrameObject(frame_967cc2e4c03bb02f7578e32ad41830db);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_exc_type);
    Py_DECREF(par_exc_type);
    CHECK_OBJECT(par_exc_value);
    Py_DECREF(par_exc_value);
    CHECK_OBJECT(par_traceback);
    Py_DECREF(par_traceback);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_exc_type);
    Py_DECREF(par_exc_type);
    CHECK_OBJECT(par_exc_value);
    Py_DECREF(par_exc_value);
    CHECK_OBJECT(par_traceback);
    Py_DECREF(par_traceback);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__9_close(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_105ef5b2bcec4239ebbd7031df29a51d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_105ef5b2bcec4239ebbd7031df29a51d = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_105ef5b2bcec4239ebbd7031df29a51d)) {
        Py_XDECREF(cache_frame_105ef5b2bcec4239ebbd7031df29a51d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_105ef5b2bcec4239ebbd7031df29a51d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_105ef5b2bcec4239ebbd7031df29a51d = MAKE_FUNCTION_FRAME(codeobj_105ef5b2bcec4239ebbd7031df29a51d, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_105ef5b2bcec4239ebbd7031df29a51d->m_type_description == NULL);
    frame_105ef5b2bcec4239ebbd7031df29a51d = cache_frame_105ef5b2bcec4239ebbd7031df29a51d;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_105ef5b2bcec4239ebbd7031df29a51d);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_105ef5b2bcec4239ebbd7031df29a51d) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_expression_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[31]);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 214;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 != tmp_compexpr_right_1) ? true : false;
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_2 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[31]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_105ef5b2bcec4239ebbd7031df29a51d->m_frame.f_lineno = 215;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[35]);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[31], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    branch_no_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_expression_name_3;
        CHECK_OBJECT(par_self);
        tmp_expression_name_3 = par_self;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[34]);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 217;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_2 = (tmp_compexpr_left_2 != tmp_compexpr_right_2) ? true : false;
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(par_self);
        tmp_expression_name_4 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, mod_consts[34]);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 218;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_105ef5b2bcec4239ebbd7031df29a51d->m_frame.f_lineno = 218;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, mod_consts[35]);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 218;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[34], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    branch_no_2:;
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_value_3 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[33], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_105ef5b2bcec4239ebbd7031df29a51d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_105ef5b2bcec4239ebbd7031df29a51d);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_105ef5b2bcec4239ebbd7031df29a51d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_105ef5b2bcec4239ebbd7031df29a51d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_105ef5b2bcec4239ebbd7031df29a51d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_105ef5b2bcec4239ebbd7031df29a51d,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_105ef5b2bcec4239ebbd7031df29a51d == cache_frame_105ef5b2bcec4239ebbd7031df29a51d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_105ef5b2bcec4239ebbd7031df29a51d);
        cache_frame_105ef5b2bcec4239ebbd7031df29a51d = NULL;
    }

    assertFrameObject(frame_105ef5b2bcec4239ebbd7031df29a51d);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__10___del__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_c0c5dbbe0fd544ed06dc9412aad86c8f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c0c5dbbe0fd544ed06dc9412aad86c8f = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c0c5dbbe0fd544ed06dc9412aad86c8f)) {
        Py_XDECREF(cache_frame_c0c5dbbe0fd544ed06dc9412aad86c8f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c0c5dbbe0fd544ed06dc9412aad86c8f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c0c5dbbe0fd544ed06dc9412aad86c8f = MAKE_FUNCTION_FRAME(codeobj_c0c5dbbe0fd544ed06dc9412aad86c8f, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c0c5dbbe0fd544ed06dc9412aad86c8f->m_type_description == NULL);
    frame_c0c5dbbe0fd544ed06dc9412aad86c8f = cache_frame_c0c5dbbe0fd544ed06dc9412aad86c8f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c0c5dbbe0fd544ed06dc9412aad86c8f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c0c5dbbe0fd544ed06dc9412aad86c8f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        frame_c0c5dbbe0fd544ed06dc9412aad86c8f->m_frame.f_lineno = 223;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[35]);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 223;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c0c5dbbe0fd544ed06dc9412aad86c8f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c0c5dbbe0fd544ed06dc9412aad86c8f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c0c5dbbe0fd544ed06dc9412aad86c8f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c0c5dbbe0fd544ed06dc9412aad86c8f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c0c5dbbe0fd544ed06dc9412aad86c8f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c0c5dbbe0fd544ed06dc9412aad86c8f,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_c0c5dbbe0fd544ed06dc9412aad86c8f == cache_frame_c0c5dbbe0fd544ed06dc9412aad86c8f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c0c5dbbe0fd544ed06dc9412aad86c8f);
        cache_frame_c0c5dbbe0fd544ed06dc9412aad86c8f = NULL;
    }

    assertFrameObject(frame_c0c5dbbe0fd544ed06dc9412aad86c8f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__11___iter__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_47d627e700780e1989fd5fd5291580ae;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_47d627e700780e1989fd5fd5291580ae = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_47d627e700780e1989fd5fd5291580ae)) {
        Py_XDECREF(cache_frame_47d627e700780e1989fd5fd5291580ae);

#if _DEBUG_REFCOUNTS
        if (cache_frame_47d627e700780e1989fd5fd5291580ae == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_47d627e700780e1989fd5fd5291580ae = MAKE_FUNCTION_FRAME(codeobj_47d627e700780e1989fd5fd5291580ae, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_47d627e700780e1989fd5fd5291580ae->m_type_description == NULL);
    frame_47d627e700780e1989fd5fd5291580ae = cache_frame_47d627e700780e1989fd5fd5291580ae;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_47d627e700780e1989fd5fd5291580ae);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_47d627e700780e1989fd5fd5291580ae) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_expression_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_iter_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[23]);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 227;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 227;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_47d627e700780e1989fd5fd5291580ae);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_47d627e700780e1989fd5fd5291580ae);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_47d627e700780e1989fd5fd5291580ae);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_47d627e700780e1989fd5fd5291580ae, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_47d627e700780e1989fd5fd5291580ae->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_47d627e700780e1989fd5fd5291580ae, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_47d627e700780e1989fd5fd5291580ae,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_47d627e700780e1989fd5fd5291580ae == cache_frame_47d627e700780e1989fd5fd5291580ae) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_47d627e700780e1989fd5fd5291580ae);
        cache_frame_47d627e700780e1989fd5fd5291580ae = NULL;
    }

    assertFrameObject(frame_47d627e700780e1989fd5fd5291580ae);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__12___len__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_a629d174a3f4fa3cf2e6fcc0bede0348;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a629d174a3f4fa3cf2e6fcc0bede0348 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a629d174a3f4fa3cf2e6fcc0bede0348)) {
        Py_XDECREF(cache_frame_a629d174a3f4fa3cf2e6fcc0bede0348);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a629d174a3f4fa3cf2e6fcc0bede0348 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a629d174a3f4fa3cf2e6fcc0bede0348 = MAKE_FUNCTION_FRAME(codeobj_a629d174a3f4fa3cf2e6fcc0bede0348, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a629d174a3f4fa3cf2e6fcc0bede0348->m_type_description == NULL);
    frame_a629d174a3f4fa3cf2e6fcc0bede0348 = cache_frame_a629d174a3f4fa3cf2e6fcc0bede0348;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a629d174a3f4fa3cf2e6fcc0bede0348);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a629d174a3f4fa3cf2e6fcc0bede0348) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[23]);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 230;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 230;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a629d174a3f4fa3cf2e6fcc0bede0348);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_a629d174a3f4fa3cf2e6fcc0bede0348);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a629d174a3f4fa3cf2e6fcc0bede0348);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a629d174a3f4fa3cf2e6fcc0bede0348, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a629d174a3f4fa3cf2e6fcc0bede0348->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a629d174a3f4fa3cf2e6fcc0bede0348, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a629d174a3f4fa3cf2e6fcc0bede0348,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_a629d174a3f4fa3cf2e6fcc0bede0348 == cache_frame_a629d174a3f4fa3cf2e6fcc0bede0348) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a629d174a3f4fa3cf2e6fcc0bede0348);
        cache_frame_a629d174a3f4fa3cf2e6fcc0bede0348 = NULL;
    }

    assertFrameObject(frame_a629d174a3f4fa3cf2e6fcc0bede0348);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__13___getitem__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_key = python_pars[1];
    nuitka_bool var_member = NUITKA_BOOL_UNASSIGNED;
    PyObject *var_bytes = NULL;
    PyObject *var_magic = NULL;
    struct Nuitka_FrameObject *frame_389e8661c2254f6148e69c3af38b4fa4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_389e8661c2254f6148e69c3af38b4fa4 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        nuitka_bool tmp_assign_source_1;
        tmp_assign_source_1 = NUITKA_BOOL_FALSE;
        var_member = tmp_assign_source_1;
    }
    // Tried code:
    if (isFrameUnusable(cache_frame_389e8661c2254f6148e69c3af38b4fa4)) {
        Py_XDECREF(cache_frame_389e8661c2254f6148e69c3af38b4fa4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_389e8661c2254f6148e69c3af38b4fa4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_389e8661c2254f6148e69c3af38b4fa4 = MAKE_FUNCTION_FRAME(codeobj_389e8661c2254f6148e69c3af38b4fa4, module_numpy$lib$npyio, sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_389e8661c2254f6148e69c3af38b4fa4->m_type_description == NULL);
    frame_389e8661c2254f6148e69c3af38b4fa4 = cache_frame_389e8661c2254f6148e69c3af38b4fa4;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_389e8661c2254f6148e69c3af38b4fa4);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_389e8661c2254f6148e69c3af38b4fa4) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_expression_name_1;
        CHECK_OBJECT(par_key);
        tmp_compexpr_left_1 = par_key;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[22]);
        if (tmp_compexpr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_compexpr_right_1, tmp_compexpr_left_1);
        Py_DECREF(tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_assign_source_2;
        tmp_assign_source_2 = NUITKA_BOOL_TRUE;
        var_member = tmp_assign_source_2;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_expression_name_2;
        CHECK_OBJECT(par_key);
        tmp_compexpr_left_2 = par_key;
        CHECK_OBJECT(par_self);
        tmp_expression_name_2 = par_self;
        tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[23]);
        if (tmp_compexpr_right_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_compexpr_right_2, tmp_compexpr_left_2);
        Py_DECREF(tmp_compexpr_right_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        nuitka_bool tmp_assign_source_3;
        tmp_assign_source_3 = NUITKA_BOOL_TRUE;
        var_member = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT(par_key);
        tmp_left_name_1 = par_key;
        tmp_right_name_1 = mod_consts[37];
        tmp_result = BINARY_OPERATION_ADD_OBJECT_UNICODE_INPLACE(&tmp_left_name_1, tmp_right_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 246;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = tmp_left_name_1;
        par_key = tmp_assign_source_4;

    }
    branch_no_2:;
    branch_end_1:;
    {
        nuitka_bool tmp_condition_result_3;
        if (var_member == NUITKA_BOOL_UNASSIGNED) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[38]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 247;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }

        tmp_condition_result_3 = var_member;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_4 = par_self;
        tmp_expression_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, mod_consts[31]);
        if (tmp_expression_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 248;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[39]);
        Py_DECREF(tmp_expression_name_3);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 248;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        if (par_key == NULL) {
            Py_DECREF(tmp_called_name_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[40]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 248;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_1 = par_key;
        frame_389e8661c2254f6148e69c3af38b4fa4->m_frame.f_lineno = 248;
        tmp_assign_source_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 248;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        assert(var_bytes == NULL);
        var_bytes = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_5;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_name_6;
        CHECK_OBJECT(var_bytes);
        tmp_expression_name_5 = var_bytes;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, mod_consts[13]);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_expression_name_6 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[41]);

        if (unlikely(tmp_expression_name_6 == NULL)) {
            tmp_expression_name_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[41]);
        }

        if (tmp_expression_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 249;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_6, mod_consts[42]);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 249;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_2 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 249;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        frame_389e8661c2254f6148e69c3af38b4fa4->m_frame.f_lineno = 249;
        tmp_assign_source_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        assert(var_magic == NULL);
        var_magic = tmp_assign_source_6;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(var_bytes);
        tmp_called_instance_1 = var_bytes;
        frame_389e8661c2254f6148e69c3af38b4fa4->m_frame.f_lineno = 250;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[35]);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 250;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_expression_name_7;
        CHECK_OBJECT(var_magic);
        tmp_compexpr_left_3 = var_magic;
        tmp_expression_name_7 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[41]);

        if (unlikely(tmp_expression_name_7 == NULL)) {
            tmp_expression_name_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[41]);
        }

        if (tmp_expression_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 251;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_7, mod_consts[42]);
        if (tmp_compexpr_right_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 251;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_right_3);
        if (tmp_condition_result_4 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 251;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
        assert(tmp_condition_result_4 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_name_3;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT(par_self);
        tmp_expression_name_9 = par_self;
        tmp_expression_name_8 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, mod_consts[31]);
        if (tmp_expression_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, mod_consts[39]);
        Py_DECREF(tmp_expression_name_8);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        if (par_key == NULL) {
            Py_DECREF(tmp_called_name_3);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[40]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 252;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_3 = par_key;
        frame_389e8661c2254f6148e69c3af38b4fa4->m_frame.f_lineno = 252;
        tmp_assign_source_7 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_3);
        Py_DECREF(tmp_called_name_3);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_bytes;
            assert(old != NULL);
            var_bytes = tmp_assign_source_7;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_expression_name_11;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_expression_name_12;
        tmp_expression_name_10 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[41]);

        if (unlikely(tmp_expression_name_10 == NULL)) {
            tmp_expression_name_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[41]);
        }

        if (tmp_expression_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_10, mod_consts[43]);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_bytes);
        tmp_kw_call_arg_value_0_1 = var_bytes;
        CHECK_OBJECT(par_self);
        tmp_expression_name_11 = par_self;
        tmp_kw_call_dict_value_0_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, mod_consts[24]);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 254;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_name_12 = par_self;
        tmp_kw_call_dict_value_1_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_12, mod_consts[25]);
        if (tmp_kw_call_dict_value_1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 255;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        frame_389e8661c2254f6148e69c3af38b4fa4->m_frame.f_lineno = 253;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[2] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_4, args, kw_values, mod_consts[44]);
        }

        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_4;
    branch_no_4:;
    {
        PyObject *tmp_called_name_5;
        PyObject *tmp_expression_name_13;
        PyObject *tmp_expression_name_14;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT(par_self);
        tmp_expression_name_14 = par_self;
        tmp_expression_name_13 = LOOKUP_ATTRIBUTE(tmp_expression_name_14, mod_consts[31]);
        if (tmp_expression_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 257;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_13, mod_consts[13]);
        Py_DECREF(tmp_expression_name_13);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 257;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        if (par_key == NULL) {
            Py_DECREF(tmp_called_name_5);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[40]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 257;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_4 = par_key;
        frame_389e8661c2254f6148e69c3af38b4fa4->m_frame.f_lineno = 257;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_5, tmp_args_element_name_4);
        Py_DECREF(tmp_called_name_5);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 257;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_4:;
    goto branch_end_3;
    branch_no_3:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        tmp_left_name_2 = mod_consts[45];
        if (par_key == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[40]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 259;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }

        tmp_right_name_2 = par_key;
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_2, tmp_right_name_2);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;
            type_description_1 = "ooboo";
            goto frame_exception_exit_1;
        }
        frame_389e8661c2254f6148e69c3af38b4fa4->m_frame.f_lineno = 259;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_KeyError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 259;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooboo";
        goto frame_exception_exit_1;
    }
    branch_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_389e8661c2254f6148e69c3af38b4fa4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_389e8661c2254f6148e69c3af38b4fa4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_389e8661c2254f6148e69c3af38b4fa4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_389e8661c2254f6148e69c3af38b4fa4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_389e8661c2254f6148e69c3af38b4fa4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_389e8661c2254f6148e69c3af38b4fa4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_389e8661c2254f6148e69c3af38b4fa4,
        type_description_1,
        par_self,
        par_key,
        (int)var_member,
        var_bytes,
        var_magic
    );


    // Release cached frame if used for exception.
    if (frame_389e8661c2254f6148e69c3af38b4fa4 == cache_frame_389e8661c2254f6148e69c3af38b4fa4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_389e8661c2254f6148e69c3af38b4fa4);
        cache_frame_389e8661c2254f6148e69c3af38b4fa4 = NULL;
    }

    assertFrameObject(frame_389e8661c2254f6148e69c3af38b4fa4);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_key);
    par_key = NULL;
    var_member = NUITKA_BOOL_UNASSIGNED;
    Py_XDECREF(var_bytes);
    var_bytes = NULL;
    CHECK_OBJECT(var_magic);
    Py_DECREF(var_magic);
    var_magic = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_key);
    par_key = NULL;
    var_member = NUITKA_BOOL_UNASSIGNED;
    Py_XDECREF(var_bytes);
    var_bytes = NULL;
    Py_XDECREF(var_magic);
    var_magic = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__14_iteritems(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_d34269cb64eb2787015745693561dccc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_d34269cb64eb2787015745693561dccc = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d34269cb64eb2787015745693561dccc)) {
        Py_XDECREF(cache_frame_d34269cb64eb2787015745693561dccc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d34269cb64eb2787015745693561dccc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d34269cb64eb2787015745693561dccc = MAKE_FUNCTION_FRAME(codeobj_d34269cb64eb2787015745693561dccc, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d34269cb64eb2787015745693561dccc->m_type_description == NULL);
    frame_d34269cb64eb2787015745693561dccc = cache_frame_d34269cb64eb2787015745693561dccc;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d34269cb64eb2787015745693561dccc);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d34269cb64eb2787015745693561dccc) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_name_1;
        tmp_expression_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_name_1 == NULL)) {
            tmp_expression_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 268;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[1]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 268;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = mod_consts[46];
        tmp_args_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_name_1, 0, tmp_tuple_element_1);
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[3]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[3]);
        }

        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;
            type_description_1 = "o";
            goto tuple_build_exception_1;
        }
        PyTuple_SET_ITEM0(tmp_args_name_1, 1, tmp_tuple_element_1);
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_name_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_kwargs_name_1 = PyDict_Copy(mod_consts[4]);
        frame_d34269cb64eb2787015745693561dccc->m_frame.f_lineno = 268;
        tmp_call_result_1 = CALL_FUNCTION(tmp_called_name_1, tmp_args_name_1, tmp_kwargs_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kwargs_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 268;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        frame_d34269cb64eb2787015745693561dccc->m_frame.f_lineno = 272;
        tmp_return_value = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[47]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 272;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d34269cb64eb2787015745693561dccc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d34269cb64eb2787015745693561dccc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d34269cb64eb2787015745693561dccc);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d34269cb64eb2787015745693561dccc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d34269cb64eb2787015745693561dccc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d34269cb64eb2787015745693561dccc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d34269cb64eb2787015745693561dccc,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_d34269cb64eb2787015745693561dccc == cache_frame_d34269cb64eb2787015745693561dccc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d34269cb64eb2787015745693561dccc);
        cache_frame_d34269cb64eb2787015745693561dccc = NULL;
    }

    assertFrameObject(frame_d34269cb64eb2787015745693561dccc);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__15_iterkeys(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_9c46e5c65a04bfc8afa20496b7316031;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_9c46e5c65a04bfc8afa20496b7316031 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_9c46e5c65a04bfc8afa20496b7316031)) {
        Py_XDECREF(cache_frame_9c46e5c65a04bfc8afa20496b7316031);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9c46e5c65a04bfc8afa20496b7316031 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9c46e5c65a04bfc8afa20496b7316031 = MAKE_FUNCTION_FRAME(codeobj_9c46e5c65a04bfc8afa20496b7316031, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9c46e5c65a04bfc8afa20496b7316031->m_type_description == NULL);
    frame_9c46e5c65a04bfc8afa20496b7316031 = cache_frame_9c46e5c65a04bfc8afa20496b7316031;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9c46e5c65a04bfc8afa20496b7316031);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9c46e5c65a04bfc8afa20496b7316031) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_name_1;
        tmp_expression_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_name_1 == NULL)) {
            tmp_expression_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 276;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[1]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 276;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = mod_consts[48];
        tmp_args_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_name_1, 0, tmp_tuple_element_1);
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[3]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[3]);
        }

        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;
            type_description_1 = "o";
            goto tuple_build_exception_1;
        }
        PyTuple_SET_ITEM0(tmp_args_name_1, 1, tmp_tuple_element_1);
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_name_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_kwargs_name_1 = PyDict_Copy(mod_consts[4]);
        frame_9c46e5c65a04bfc8afa20496b7316031->m_frame.f_lineno = 276;
        tmp_call_result_1 = CALL_FUNCTION(tmp_called_name_1, tmp_args_name_1, tmp_kwargs_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kwargs_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 276;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        frame_9c46e5c65a04bfc8afa20496b7316031->m_frame.f_lineno = 280;
        tmp_return_value = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[11]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9c46e5c65a04bfc8afa20496b7316031);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_9c46e5c65a04bfc8afa20496b7316031);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9c46e5c65a04bfc8afa20496b7316031);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9c46e5c65a04bfc8afa20496b7316031, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9c46e5c65a04bfc8afa20496b7316031->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9c46e5c65a04bfc8afa20496b7316031, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9c46e5c65a04bfc8afa20496b7316031,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_9c46e5c65a04bfc8afa20496b7316031 == cache_frame_9c46e5c65a04bfc8afa20496b7316031) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9c46e5c65a04bfc8afa20496b7316031);
        cache_frame_9c46e5c65a04bfc8afa20496b7316031 = NULL;
    }

    assertFrameObject(frame_9c46e5c65a04bfc8afa20496b7316031);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__16_load(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_file = python_pars[0];
    PyObject *par_mmap_mode = python_pars[1];
    PyObject *par_allow_pickle = python_pars[2];
    PyObject *par_fix_imports = python_pars[3];
    PyObject *par_encoding = python_pars[4];
    PyObject *var_pickle_kwargs = NULL;
    PyObject *var_stack = NULL;
    PyObject *var_fid = NULL;
    PyObject *var_own_fid = NULL;
    PyObject *var__ZIP_PREFIX = NULL;
    PyObject *var__ZIP_SUFFIX = NULL;
    PyObject *var_N = NULL;
    PyObject *var_magic = NULL;
    PyObject *var_ret = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_26c3fe9c0522cf75662bb6396b138263;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    static struct Nuitka_FrameObject *cache_frame_26c3fe9c0522cf75662bb6396b138263 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_26c3fe9c0522cf75662bb6396b138263)) {
        Py_XDECREF(cache_frame_26c3fe9c0522cf75662bb6396b138263);

#if _DEBUG_REFCOUNTS
        if (cache_frame_26c3fe9c0522cf75662bb6396b138263 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_26c3fe9c0522cf75662bb6396b138263 = MAKE_FUNCTION_FRAME(codeobj_26c3fe9c0522cf75662bb6396b138263, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_26c3fe9c0522cf75662bb6396b138263->m_type_description == NULL);
    frame_26c3fe9c0522cf75662bb6396b138263 = cache_frame_26c3fe9c0522cf75662bb6396b138263;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_26c3fe9c0522cf75662bb6396b138263);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_26c3fe9c0522cf75662bb6396b138263) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(par_encoding);
        tmp_compexpr_left_1 = par_encoding;
        tmp_compexpr_right_1 = mod_consts[49];
        tmp_res = PySequence_Contains(tmp_compexpr_right_1, tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = mod_consts[50];
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 407;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 407;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_dict_key_1 = mod_consts[51];
        CHECK_OBJECT(par_encoding);
        tmp_dict_value_1 = par_encoding;
        tmp_assign_source_1 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem(tmp_assign_source_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        tmp_dict_key_1 = mod_consts[52];
        CHECK_OBJECT(par_fix_imports);
        tmp_dict_value_1 = par_fix_imports;
        tmp_res = PyDict_SetItem(tmp_assign_source_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        assert(var_pickle_kwargs == NULL);
        var_pickle_kwargs = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[53]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[53]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 411;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 411;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[54]);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 411;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        assert(tmp_with_1__source == NULL);
        tmp_with_1__source = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        CHECK_OBJECT(tmp_with_1__source);
        tmp_expression_name_1 = tmp_with_1__source;
        tmp_called_name_1 = LOOKUP_SPECIAL(tmp_expression_name_1, mod_consts[55]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 411;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 411;
        tmp_assign_source_3 = CALL_FUNCTION_NO_ARGS(tmp_called_name_1);
        Py_DECREF(tmp_called_name_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 411;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        assert(tmp_with_1__enter == NULL);
        tmp_with_1__enter = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_expression_name_2;
        CHECK_OBJECT(tmp_with_1__source);
        tmp_expression_name_2 = tmp_with_1__source;
        tmp_assign_source_4 = LOOKUP_SPECIAL(tmp_expression_name_2, mod_consts[56]);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 411;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        assert(tmp_with_1__exit == NULL);
        tmp_with_1__exit = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_assign_source_5;
        tmp_assign_source_5 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(tmp_with_1__enter);
        tmp_assign_source_6 = tmp_with_1__enter;
        assert(var_stack == NULL);
        Py_INCREF(tmp_assign_source_6);
        var_stack = tmp_assign_source_6;
    }
    // Tried code:
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT(par_file);
        tmp_expression_name_3 = par_file;
        tmp_attribute_name_1 = mod_consts[13];
        tmp_res = BUILTIN_HASATTR_BOOL(tmp_expression_name_3, tmp_attribute_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(par_file);
        tmp_assign_source_7 = par_file;
        assert(var_fid == NULL);
        Py_INCREF(tmp_assign_source_7);
        var_fid = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        tmp_assign_source_8 = Py_False;
        assert(var_own_fid == NULL);
        Py_INCREF(tmp_assign_source_8);
        var_own_fid = tmp_assign_source_8;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_open_filename_1;
        PyObject *tmp_called_name_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_open_mode_1;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_4 = var_stack;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, mod_consts[57]);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_called_name_3 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[14]);

        if (unlikely(tmp_called_name_3 == NULL)) {
            tmp_called_name_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[14]);
        }

        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 416;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT(par_file);
        tmp_args_element_name_2 = par_file;
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 416;
        tmp_open_filename_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_2);
        if (tmp_open_filename_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 416;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_open_mode_1 = mod_consts[58];
        tmp_args_element_name_1 = BUILTIN_OPEN(tmp_open_filename_1, tmp_open_mode_1, NULL, NULL, NULL, NULL, NULL, NULL);
        Py_DECREF(tmp_open_filename_1);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 416;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 416;
        tmp_assign_source_9 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        assert(var_fid == NULL);
        var_fid = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        tmp_assign_source_10 = Py_True;
        assert(var_own_fid == NULL);
        Py_INCREF(tmp_assign_source_10);
        var_own_fid = tmp_assign_source_10;
    }
    branch_end_2:;
    {
        PyObject *tmp_assign_source_11;
        tmp_assign_source_11 = mod_consts[59];
        assert(var__ZIP_PREFIX == NULL);
        Py_INCREF(tmp_assign_source_11);
        var__ZIP_PREFIX = tmp_assign_source_11;
    }
    {
        PyObject *tmp_assign_source_12;
        tmp_assign_source_12 = mod_consts[60];
        assert(var__ZIP_SUFFIX == NULL);
        Py_INCREF(tmp_assign_source_12);
        var__ZIP_SUFFIX = tmp_assign_source_12;
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_name_5;
        tmp_expression_name_5 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[41]);

        if (unlikely(tmp_expression_name_5 == NULL)) {
            tmp_expression_name_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[41]);
        }

        if (tmp_expression_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, mod_consts[42]);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_13 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        assert(var_N == NULL);
        var_N = tmp_assign_source_13;
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT(var_fid);
        tmp_called_instance_2 = var_fid;
        CHECK_OBJECT(var_N);
        tmp_args_element_name_3 = var_N;
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 423;
        tmp_assign_source_14 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[13], tmp_args_element_name_3);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 423;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        assert(var_magic == NULL);
        var_magic = tmp_assign_source_14;
    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_called_name_5;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_args_element_name_7;
        CHECK_OBJECT(var_fid);
        tmp_expression_name_6 = var_fid;
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_6, mod_consts[61]);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 426;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_called_name_5 = LOOKUP_BUILTIN(mod_consts[62]);
        assert(tmp_called_name_5 != NULL);
        CHECK_OBJECT(var_N);
        tmp_args_element_name_5 = var_N;
        CHECK_OBJECT(var_magic);
        tmp_len_arg_2 = var_magic;
        tmp_args_element_name_6 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_args_element_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 426;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 426;
        {
            PyObject *call_args[] = {tmp_args_element_name_5, tmp_args_element_name_6};
            tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_5, call_args);
        }

        Py_DECREF(tmp_args_element_name_6);
        if (tmp_operand_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 426;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_args_element_name_4 = UNARY_OPERATION(PyNumber_Negative, tmp_operand_name_1);
        Py_DECREF(tmp_operand_name_1);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 426;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_args_element_name_7 = mod_consts[63];
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 426;
        {
            PyObject *call_args[] = {tmp_args_element_name_4, tmp_args_element_name_7};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_4, call_args);
        }

        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 426;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_8;
        int tmp_truth_name_1;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_9;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_magic);
        tmp_called_instance_3 = var_magic;
        CHECK_OBJECT(var__ZIP_PREFIX);
        tmp_args_element_name_8 = var__ZIP_PREFIX;
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 427;
        tmp_call_result_2 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_3, mod_consts[64], tmp_args_element_name_8);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 427;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_2);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_2);

            exception_lineno = 427;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_or_left_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_2);
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 427;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(var_magic);
        tmp_called_instance_4 = var_magic;
        CHECK_OBJECT(var__ZIP_SUFFIX);
        tmp_args_element_name_9 = var__ZIP_SUFFIX;
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 427;
        tmp_call_result_3 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_4, mod_consts[64], tmp_args_element_name_9);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 427;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_call_result_3);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_3);

            exception_lineno = 427;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_or_right_value_1 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_3);
        tmp_condition_result_3 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_3 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_4;
        if (var_stack == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[65]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 430;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_called_instance_5 = var_stack;
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 430;
        tmp_call_result_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, mod_consts[66]);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_name_6;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_kw_call_dict_value_2_1;
        tmp_called_name_6 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[67]);

        if (unlikely(tmp_called_name_6 == NULL)) {
            tmp_called_name_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[67]);
        }

        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 431;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT(var_fid);
        tmp_kw_call_arg_value_0_1 = var_fid;
        CHECK_OBJECT(var_own_fid);
        tmp_kw_call_dict_value_0_1 = var_own_fid;
        CHECK_OBJECT(par_allow_pickle);
        tmp_kw_call_dict_value_1_1 = par_allow_pickle;
        CHECK_OBJECT(var_pickle_kwargs);
        tmp_kw_call_dict_value_2_1 = var_pickle_kwargs;
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 431;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[3] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1};
            tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_6, args, kw_values, mod_consts[68]);
        }

        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 431;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        assert(var_ret == NULL);
        var_ret = tmp_assign_source_15;
    }
    CHECK_OBJECT(var_ret);
    tmp_return_value = var_ret;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_3;
    goto branch_end_3;
    branch_no_3:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_expression_name_7;
        CHECK_OBJECT(var_magic);
        tmp_compexpr_left_2 = var_magic;
        tmp_expression_name_7 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[41]);

        if (unlikely(tmp_expression_name_7 == NULL)) {
            tmp_expression_name_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[41]);
        }

        if (tmp_expression_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 434;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_7, mod_consts[42]);
        if (tmp_compexpr_right_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 434;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_4 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_right_2);
        if (tmp_condition_result_4 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 434;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
        assert(tmp_condition_result_4 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_4:;
    {
        nuitka_bool tmp_condition_result_5;
        int tmp_truth_name_3;
        CHECK_OBJECT(par_mmap_mode);
        tmp_truth_name_3 = CHECK_IF_TRUE(par_mmap_mode);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_5 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_called_name_7;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_kw_call_arg_value_0_2;
        PyObject *tmp_kw_call_dict_value_0_2;
        tmp_expression_name_8 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[41]);

        if (unlikely(tmp_expression_name_8 == NULL)) {
            tmp_expression_name_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[41]);
        }

        if (tmp_expression_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 437;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, mod_consts[69]);
        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 437;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        if (par_file == NULL) {
            Py_DECREF(tmp_called_name_7);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[70]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 437;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_kw_call_arg_value_0_2 = par_file;
        CHECK_OBJECT(par_mmap_mode);
        tmp_kw_call_dict_value_0_2 = par_mmap_mode;
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 437;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_2};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_7, args, kw_values, mod_consts[71]);
        }

        Py_DECREF(tmp_called_name_7);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 437;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        goto try_return_handler_3;
    }
    goto branch_end_5;
    branch_no_5:;
    {
        PyObject *tmp_called_name_8;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_kw_call_arg_value_0_3;
        PyObject *tmp_kw_call_dict_value_0_3;
        PyObject *tmp_kw_call_dict_value_1_2;
        tmp_expression_name_9 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[41]);

        if (unlikely(tmp_expression_name_9 == NULL)) {
            tmp_expression_name_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[41]);
        }

        if (tmp_expression_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_called_name_8 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, mod_consts[43]);
        if (tmp_called_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT(var_fid);
        tmp_kw_call_arg_value_0_3 = var_fid;
        CHECK_OBJECT(par_allow_pickle);
        tmp_kw_call_dict_value_0_3 = par_allow_pickle;
        CHECK_OBJECT(var_pickle_kwargs);
        tmp_kw_call_dict_value_1_2 = var_pickle_kwargs;
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 439;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_3};
            PyObject *kw_values[2] = {tmp_kw_call_dict_value_0_3, tmp_kw_call_dict_value_1_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_8, args, kw_values, mod_consts[44]);
        }

        Py_DECREF(tmp_called_name_8);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        goto try_return_handler_3;
    }
    branch_end_5:;
    goto branch_end_4;
    branch_no_4:;
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_operand_name_2;
        CHECK_OBJECT(par_allow_pickle);
        tmp_operand_name_2 = par_allow_pickle;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_6 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_make_exception_arg_2;
        tmp_make_exception_arg_2 = mod_consts[72];
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 444;
        tmp_raise_type_2 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_2);
        assert(!(tmp_raise_type_2 == NULL));
        exception_type = tmp_raise_type_2;
        exception_lineno = 444;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooooo";
        goto try_except_handler_4;
    }
    branch_no_6:;
    // Tried code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_expression_name_10 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[5]);

        if (unlikely(tmp_expression_name_10 == NULL)) {
            tmp_expression_name_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[5]);
        }

        if (tmp_expression_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 447;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_10, mod_consts[73]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 447;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(var_fid);
        tmp_tuple_element_1 = var_fid;
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_pickle_kwargs);
        tmp_dircall_arg3_1 = var_pickle_kwargs;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__3_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 447;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_5;
        }
        goto try_return_handler_3;
    }
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_1, &exception_preserved_value_1, &exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_26c3fe9c0522cf75662bb6396b138263, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_26c3fe9c0522cf75662bb6396b138263, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_1, exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        tmp_compexpr_left_3 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_3 = PyExc_Exception;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_3, tmp_compexpr_right_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_7 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_7 != false) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_make_exception_arg_3;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_operand_name_3;
        tmp_left_name_1 = mod_consts[74];
        if (par_file == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[70]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 450;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_6;
        }

        tmp_operand_name_3 = par_file;
        tmp_right_name_1 = UNARY_OPERATION(PyObject_Repr, tmp_operand_name_3);
        if (tmp_right_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 450;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_make_exception_arg_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_UNICODE(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_make_exception_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 450;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_6;
        }
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 449;
        tmp_raise_type_3 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_IOError, tmp_make_exception_arg_3);
        Py_DECREF(tmp_make_exception_arg_3);
        assert(!(tmp_raise_type_3 == NULL));
        exception_type = tmp_raise_type_3;
        exception_lineno = 449;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooooo";
        goto try_except_handler_6;
    }
    goto branch_end_7;
    branch_no_7:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 446;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_26c3fe9c0522cf75662bb6396b138263->m_frame) frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooo";
    goto try_except_handler_6;
    branch_end_7:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_4;
    // End of try:
    // End of try:
    branch_end_4:;
    branch_end_3:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 2.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_2, &exception_preserved_value_2, &exception_preserved_tb_2);

    if (exception_keeper_tb_3 == NULL) {
        exception_keeper_tb_3 = MAKE_TRACEBACK(frame_26c3fe9c0522cf75662bb6396b138263, exception_keeper_lineno_3);
    } else if (exception_keeper_lineno_3 != 0) {
        exception_keeper_tb_3 = ADD_TRACEBACK(exception_keeper_tb_3, frame_26c3fe9c0522cf75662bb6396b138263, exception_keeper_lineno_3);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_3, exception_keeper_tb_3);
    PUBLISH_EXCEPTION(&exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3);
    // Tried code:
    {
        bool tmp_condition_result_8;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        tmp_compexpr_left_4 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_4 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_4, tmp_compexpr_right_4);
        assert(!(tmp_res == -1));
        tmp_condition_result_8 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_8 != false) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        nuitka_bool tmp_assign_source_16;
        tmp_assign_source_16 = NUITKA_BOOL_FALSE;
        tmp_with_1__indicator = tmp_assign_source_16;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_operand_name_4;
        PyObject *tmp_called_name_9;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_args_element_name_12;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_9 = tmp_with_1__exit;
        tmp_args_element_name_10 = EXC_TYPE(PyThreadState_GET());
        tmp_args_element_name_11 = EXC_VALUE(PyThreadState_GET());
        tmp_args_element_name_12 = EXC_TRACEBACK(PyThreadState_GET());
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 446;
        {
            PyObject *call_args[] = {tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12};
            tmp_operand_name_4 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_9, call_args);
        }

        if (tmp_operand_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 446;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_4);
        Py_DECREF(tmp_operand_name_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 446;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_9 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 446;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_26c3fe9c0522cf75662bb6396b138263->m_frame) frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooo";
    goto try_except_handler_7;
    branch_no_9:;
    goto branch_end_8;
    branch_no_8:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 411;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_26c3fe9c0522cf75662bb6396b138263->m_frame) frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooo";
    goto try_except_handler_7;
    branch_end_8:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 2.
    SET_CURRENT_EXCEPTION(exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2);

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    // Restore previous exception id 2.
    SET_CURRENT_EXCEPTION(exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2);

    goto try_end_2;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Return handler code:
    try_return_handler_3:;
    {
        bool tmp_condition_result_10;
        nuitka_bool tmp_compexpr_left_5;
        nuitka_bool tmp_compexpr_right_5;
        assert(tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_5 = tmp_with_1__indicator;
        tmp_compexpr_right_5 = NUITKA_BOOL_TRUE;
        tmp_condition_result_10 = (tmp_compexpr_left_5 == tmp_compexpr_right_5) ? true : false;
        if (tmp_condition_result_10 != false) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_called_name_10;
        PyObject *tmp_call_result_5;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_10 = tmp_with_1__exit;
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 446;
        tmp_call_result_5 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_name_10, mod_consts[75]);

        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 446;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_5);
    }
    branch_no_10:;
    goto try_return_handler_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        bool tmp_condition_result_11;
        nuitka_bool tmp_compexpr_left_6;
        nuitka_bool tmp_compexpr_right_6;
        assert(tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_6 = tmp_with_1__indicator;
        tmp_compexpr_right_6 = NUITKA_BOOL_TRUE;
        tmp_condition_result_11 = (tmp_compexpr_left_6 == tmp_compexpr_right_6) ? true : false;
        if (tmp_condition_result_11 != false) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_called_name_11;
        PyObject *tmp_call_result_6;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_11 = tmp_with_1__exit;
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 446;
        tmp_call_result_6 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_name_11, mod_consts[75]);

        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            Py_DECREF(exception_keeper_type_5);
            Py_XDECREF(exception_keeper_value_5);
            Py_XDECREF(exception_keeper_tb_5);

            exception_lineno = 446;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_6);
    }
    branch_no_11:;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_2;
    // End of try:
    try_end_3:;
    {
        bool tmp_condition_result_12;
        nuitka_bool tmp_compexpr_left_7;
        nuitka_bool tmp_compexpr_right_7;
        assert(tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_7 = tmp_with_1__indicator;
        tmp_compexpr_right_7 = NUITKA_BOOL_TRUE;
        tmp_condition_result_12 = (tmp_compexpr_left_7 == tmp_compexpr_right_7) ? true : false;
        if (tmp_condition_result_12 != false) {
            goto branch_yes_12;
        } else {
            goto branch_no_12;
        }
    }
    branch_yes_12:;
    {
        PyObject *tmp_called_name_12;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_12 = tmp_with_1__exit;
        frame_26c3fe9c0522cf75662bb6396b138263->m_frame.f_lineno = 446;
        tmp_call_result_7 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_name_12, mod_consts[75]);

        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 446;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_7);
    }
    branch_no_12:;
    goto try_end_4;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT(tmp_with_1__source);
    Py_DECREF(tmp_with_1__source);
    tmp_with_1__source = NULL;
    CHECK_OBJECT(tmp_with_1__enter);
    Py_DECREF(tmp_with_1__enter);
    tmp_with_1__enter = NULL;
    Py_XDECREF(tmp_with_1__exit);
    tmp_with_1__exit = NULL;
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_with_1__source);
    tmp_with_1__source = NULL;
    Py_XDECREF(tmp_with_1__enter);
    tmp_with_1__enter = NULL;
    Py_XDECREF(tmp_with_1__exit);
    tmp_with_1__exit = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_26c3fe9c0522cf75662bb6396b138263);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_26c3fe9c0522cf75662bb6396b138263);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_26c3fe9c0522cf75662bb6396b138263);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_26c3fe9c0522cf75662bb6396b138263, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_26c3fe9c0522cf75662bb6396b138263->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_26c3fe9c0522cf75662bb6396b138263, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_26c3fe9c0522cf75662bb6396b138263,
        type_description_1,
        par_file,
        par_mmap_mode,
        par_allow_pickle,
        par_fix_imports,
        par_encoding,
        var_pickle_kwargs,
        var_stack,
        var_fid,
        var_own_fid,
        var__ZIP_PREFIX,
        var__ZIP_SUFFIX,
        var_N,
        var_magic,
        var_ret
    );


    // Release cached frame if used for exception.
    if (frame_26c3fe9c0522cf75662bb6396b138263 == cache_frame_26c3fe9c0522cf75662bb6396b138263) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_26c3fe9c0522cf75662bb6396b138263);
        cache_frame_26c3fe9c0522cf75662bb6396b138263 = NULL;
    }

    assertFrameObject(frame_26c3fe9c0522cf75662bb6396b138263);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(tmp_with_1__source);
    Py_DECREF(tmp_with_1__source);
    tmp_with_1__source = NULL;
    CHECK_OBJECT(tmp_with_1__enter);
    Py_DECREF(tmp_with_1__enter);
    tmp_with_1__enter = NULL;
    Py_XDECREF(tmp_with_1__exit);
    tmp_with_1__exit = NULL;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_pickle_kwargs);
    var_pickle_kwargs = NULL;
    Py_XDECREF(var_stack);
    var_stack = NULL;
    Py_XDECREF(var_fid);
    var_fid = NULL;
    Py_XDECREF(var_own_fid);
    var_own_fid = NULL;
    Py_XDECREF(var__ZIP_PREFIX);
    var__ZIP_PREFIX = NULL;
    Py_XDECREF(var__ZIP_SUFFIX);
    var__ZIP_SUFFIX = NULL;
    Py_XDECREF(var_N);
    var_N = NULL;
    Py_XDECREF(var_magic);
    var_magic = NULL;
    Py_XDECREF(var_ret);
    var_ret = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_pickle_kwargs);
    var_pickle_kwargs = NULL;
    Py_XDECREF(var_stack);
    var_stack = NULL;
    Py_XDECREF(var_fid);
    var_fid = NULL;
    Py_XDECREF(var_own_fid);
    var_own_fid = NULL;
    Py_XDECREF(var__ZIP_PREFIX);
    var__ZIP_PREFIX = NULL;
    Py_XDECREF(var__ZIP_SUFFIX);
    var__ZIP_SUFFIX = NULL;
    Py_XDECREF(var_N);
    var_N = NULL;
    Py_XDECREF(var_magic);
    var_magic = NULL;
    Py_XDECREF(var_ret);
    var_ret = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_file);
    Py_DECREF(par_file);
    CHECK_OBJECT(par_mmap_mode);
    Py_DECREF(par_mmap_mode);
    CHECK_OBJECT(par_allow_pickle);
    Py_DECREF(par_allow_pickle);
    CHECK_OBJECT(par_fix_imports);
    Py_DECREF(par_fix_imports);
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_file);
    Py_DECREF(par_file);
    CHECK_OBJECT(par_mmap_mode);
    Py_DECREF(par_mmap_mode);
    CHECK_OBJECT(par_allow_pickle);
    Py_DECREF(par_allow_pickle);
    CHECK_OBJECT(par_fix_imports);
    Py_DECREF(par_fix_imports);
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__17__save_dispatcher(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_file = python_pars[0];
    PyObject *par_arr = python_pars[1];
    PyObject *par_allow_pickle = python_pars[2];
    PyObject *par_fix_imports = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(par_arr);
        tmp_tuple_element_1 = par_arr;
        tmp_return_value = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
        goto function_return_exit;
    }

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_file);
    Py_DECREF(par_file);
    CHECK_OBJECT(par_arr);
    Py_DECREF(par_arr);
    CHECK_OBJECT(par_allow_pickle);
    Py_DECREF(par_allow_pickle);
    CHECK_OBJECT(par_fix_imports);
    Py_DECREF(par_fix_imports);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__18_save(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_file = python_pars[0];
    PyObject *par_arr = python_pars[1];
    PyObject *par_allow_pickle = python_pars[2];
    PyObject *par_fix_imports = python_pars[3];
    PyObject *var_file_ctx = NULL;
    PyObject *var_fid = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_d2d849213ae56d24f52f143da7a11ef1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_d2d849213ae56d24f52f143da7a11ef1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d2d849213ae56d24f52f143da7a11ef1)) {
        Py_XDECREF(cache_frame_d2d849213ae56d24f52f143da7a11ef1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d2d849213ae56d24f52f143da7a11ef1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d2d849213ae56d24f52f143da7a11ef1 = MAKE_FUNCTION_FRAME(codeobj_d2d849213ae56d24f52f143da7a11ef1, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d2d849213ae56d24f52f143da7a11ef1->m_type_description == NULL);
    frame_d2d849213ae56d24f52f143da7a11ef1 = cache_frame_d2d849213ae56d24f52f143da7a11ef1;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d2d849213ae56d24f52f143da7a11ef1);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d2d849213ae56d24f52f143da7a11ef1) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT(par_file);
        tmp_expression_name_1 = par_file;
        tmp_attribute_name_1 = mod_consts[77];
        tmp_res = BUILTIN_HASATTR_BOOL(tmp_expression_name_1, tmp_attribute_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 518;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_called_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[78]);

        if (unlikely(tmp_called_name_1 == NULL)) {
            tmp_called_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[78]);
        }

        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 519;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_file);
        tmp_args_element_name_1 = par_file;
        frame_d2d849213ae56d24f52f143da7a11ef1->m_frame.f_lineno = 519;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 519;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_file_ctx == NULL);
        var_file_ctx = tmp_assign_source_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_2;
        tmp_called_name_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[14]);

        if (unlikely(tmp_called_name_2 == NULL)) {
            tmp_called_name_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[14]);
        }

        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 521;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_file);
        tmp_args_element_name_2 = par_file;
        frame_d2d849213ae56d24f52f143da7a11ef1->m_frame.f_lineno = 521;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 521;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_file;
            assert(old != NULL);
            par_file = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_file);
        tmp_called_instance_1 = par_file;
        frame_d2d849213ae56d24f52f143da7a11ef1->m_frame.f_lineno = 522;
        tmp_operand_name_1 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_1,
            mod_consts[26],
            PyTuple_GET_ITEM(mod_consts[27], 0)
        );

        if (tmp_operand_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 522;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        Py_DECREF(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 522;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT(par_file);
        tmp_left_name_1 = par_file;
        tmp_right_name_1 = mod_consts[37];
        tmp_assign_source_3 = BINARY_OPERATION_ADD_OBJECT_OBJECT_UNICODE(tmp_left_name_1, tmp_right_name_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 523;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_file;
            assert(old != NULL);
            par_file = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_open_filename_1;
        PyObject *tmp_open_mode_1;
        if (par_file == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[70]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 524;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_open_filename_1 = par_file;
        tmp_open_mode_1 = mod_consts[79];
        tmp_assign_source_4 = BUILTIN_OPEN(tmp_open_filename_1, tmp_open_mode_1, NULL, NULL, NULL, NULL, NULL, NULL);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_file_ctx == NULL);
        var_file_ctx = tmp_assign_source_4;
    }
    branch_end_1:;
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(var_file_ctx);
        tmp_assign_source_5 = var_file_ctx;
        assert(tmp_with_1__source == NULL);
        Py_INCREF(tmp_assign_source_5);
        tmp_with_1__source = tmp_assign_source_5;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_name_3;
        PyObject *tmp_expression_name_2;
        CHECK_OBJECT(tmp_with_1__source);
        tmp_expression_name_2 = tmp_with_1__source;
        tmp_called_name_3 = LOOKUP_SPECIAL(tmp_expression_name_2, mod_consts[55]);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 526;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        frame_d2d849213ae56d24f52f143da7a11ef1->m_frame.f_lineno = 526;
        tmp_assign_source_6 = CALL_FUNCTION_NO_ARGS(tmp_called_name_3);
        Py_DECREF(tmp_called_name_3);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 526;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        assert(tmp_with_1__enter == NULL);
        tmp_with_1__enter = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_expression_name_3;
        CHECK_OBJECT(tmp_with_1__source);
        tmp_expression_name_3 = tmp_with_1__source;
        tmp_assign_source_7 = LOOKUP_SPECIAL(tmp_expression_name_3, mod_consts[56]);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 526;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        assert(tmp_with_1__exit == NULL);
        tmp_with_1__exit = tmp_assign_source_7;
    }
    {
        nuitka_bool tmp_assign_source_8;
        tmp_assign_source_8 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_with_1__enter);
        tmp_assign_source_9 = tmp_with_1__enter;
        assert(var_fid == NULL);
        Py_INCREF(tmp_assign_source_9);
        var_fid = tmp_assign_source_9;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_3;
        tmp_called_instance_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_called_instance_2 == NULL)) {
            tmp_called_instance_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 527;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT(par_arr);
        tmp_args_element_name_3 = par_arr;
        frame_d2d849213ae56d24f52f143da7a11ef1->m_frame.f_lineno = 527;
        tmp_assign_source_10 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[81], tmp_args_element_name_3);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 527;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = par_arr;
            assert(old != NULL);
            par_arr = tmp_assign_source_10;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_expression_name_4 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[41]);

        if (unlikely(tmp_expression_name_4 == NULL)) {
            tmp_expression_name_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[41]);
        }

        if (tmp_expression_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 528;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, mod_consts[82]);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 528;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT(var_fid);
        tmp_kw_call_arg_value_0_1 = var_fid;
        CHECK_OBJECT(par_arr);
        tmp_kw_call_arg_value_1_1 = par_arr;
        CHECK_OBJECT(par_allow_pickle);
        tmp_kw_call_dict_value_0_1 = par_allow_pickle;
        tmp_dict_key_1 = mod_consts[52];
        CHECK_OBJECT(par_fix_imports);
        tmp_dict_value_1 = par_fix_imports;
        tmp_kw_call_dict_value_1_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_kw_call_dict_value_1_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        frame_d2d849213ae56d24f52f143da7a11ef1->m_frame.f_lineno = 528;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1};
            PyObject *kw_values[2] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tmp_called_name_4, args, kw_values, mod_consts[44]);
        }

        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 528;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        Py_DECREF(tmp_call_result_1);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_1, &exception_preserved_value_1, &exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_d2d849213ae56d24f52f143da7a11ef1, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_d2d849213ae56d24f52f143da7a11ef1, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_1, exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_1, tmp_compexpr_right_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_3 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        nuitka_bool tmp_assign_source_11;
        tmp_assign_source_11 = NUITKA_BOOL_FALSE;
        tmp_with_1__indicator = tmp_assign_source_11;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_called_name_5;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_5 = tmp_with_1__exit;
        tmp_args_element_name_4 = EXC_TYPE(PyThreadState_GET());
        tmp_args_element_name_5 = EXC_VALUE(PyThreadState_GET());
        tmp_args_element_name_6 = EXC_TRACEBACK(PyThreadState_GET());
        frame_d2d849213ae56d24f52f143da7a11ef1->m_frame.f_lineno = 529;
        {
            PyObject *call_args[] = {tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6};
            tmp_operand_name_2 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_5, call_args);
        }

        if (tmp_operand_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 529;
            type_description_1 = "oooooo";
            goto try_except_handler_5;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        Py_DECREF(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 529;
            type_description_1 = "oooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_4 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 529;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_d2d849213ae56d24f52f143da7a11ef1->m_frame) frame_d2d849213ae56d24f52f143da7a11ef1->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooo";
    goto try_except_handler_5;
    branch_no_4:;
    goto branch_end_3;
    branch_no_3:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 526;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_d2d849213ae56d24f52f143da7a11ef1->m_frame) frame_d2d849213ae56d24f52f143da7a11ef1->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooo";
    goto try_except_handler_5;
    branch_end_3:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    try_end_2:;
    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    goto try_end_1;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        bool tmp_condition_result_5;
        nuitka_bool tmp_compexpr_left_2;
        nuitka_bool tmp_compexpr_right_2;
        assert(tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_2 = tmp_with_1__indicator;
        tmp_compexpr_right_2 = NUITKA_BOOL_TRUE;
        tmp_condition_result_5 = (tmp_compexpr_left_2 == tmp_compexpr_right_2) ? true : false;
        if (tmp_condition_result_5 != false) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_called_name_6;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_6 = tmp_with_1__exit;
        frame_d2d849213ae56d24f52f143da7a11ef1->m_frame.f_lineno = 529;
        tmp_call_result_2 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_name_6, mod_consts[75]);

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            Py_DECREF(exception_keeper_type_3);
            Py_XDECREF(exception_keeper_value_3);
            Py_XDECREF(exception_keeper_tb_3);

            exception_lineno = 529;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_2);
    }
    branch_no_5:;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_2;
    // End of try:
    try_end_3:;
    {
        bool tmp_condition_result_6;
        nuitka_bool tmp_compexpr_left_3;
        nuitka_bool tmp_compexpr_right_3;
        assert(tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_3 = tmp_with_1__indicator;
        tmp_compexpr_right_3 = NUITKA_BOOL_TRUE;
        tmp_condition_result_6 = (tmp_compexpr_left_3 == tmp_compexpr_right_3) ? true : false;
        if (tmp_condition_result_6 != false) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_called_name_7;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_7 = tmp_with_1__exit;
        frame_d2d849213ae56d24f52f143da7a11ef1->m_frame.f_lineno = 529;
        tmp_call_result_3 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_name_7, mod_consts[75]);

        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 529;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_3);
    }
    branch_no_6:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_with_1__source);
    Py_DECREF(tmp_with_1__source);
    tmp_with_1__source = NULL;
    Py_XDECREF(tmp_with_1__enter);
    tmp_with_1__enter = NULL;
    Py_XDECREF(tmp_with_1__exit);
    tmp_with_1__exit = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d2d849213ae56d24f52f143da7a11ef1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d2d849213ae56d24f52f143da7a11ef1);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d2d849213ae56d24f52f143da7a11ef1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d2d849213ae56d24f52f143da7a11ef1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d2d849213ae56d24f52f143da7a11ef1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d2d849213ae56d24f52f143da7a11ef1,
        type_description_1,
        par_file,
        par_arr,
        par_allow_pickle,
        par_fix_imports,
        var_file_ctx,
        var_fid
    );


    // Release cached frame if used for exception.
    if (frame_d2d849213ae56d24f52f143da7a11ef1 == cache_frame_d2d849213ae56d24f52f143da7a11ef1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d2d849213ae56d24f52f143da7a11ef1);
        cache_frame_d2d849213ae56d24f52f143da7a11ef1 = NULL;
    }

    assertFrameObject(frame_d2d849213ae56d24f52f143da7a11ef1);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(tmp_with_1__source);
    Py_DECREF(tmp_with_1__source);
    tmp_with_1__source = NULL;
    CHECK_OBJECT(tmp_with_1__enter);
    Py_DECREF(tmp_with_1__enter);
    tmp_with_1__enter = NULL;
    Py_XDECREF(tmp_with_1__exit);
    tmp_with_1__exit = NULL;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_file);
    par_file = NULL;
    Py_XDECREF(par_arr);
    par_arr = NULL;
    CHECK_OBJECT(var_file_ctx);
    Py_DECREF(var_file_ctx);
    var_file_ctx = NULL;
    Py_XDECREF(var_fid);
    var_fid = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_file);
    par_file = NULL;
    Py_XDECREF(par_arr);
    par_arr = NULL;
    Py_XDECREF(var_file_ctx);
    var_file_ctx = NULL;
    Py_XDECREF(var_fid);
    var_fid = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_allow_pickle);
    Py_DECREF(par_allow_pickle);
    CHECK_OBJECT(par_fix_imports);
    Py_DECREF(par_fix_imports);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_allow_pickle);
    Py_DECREF(par_allow_pickle);
    CHECK_OBJECT(par_fix_imports);
    Py_DECREF(par_fix_imports);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__19__savez_dispatcher(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_file = python_pars[0];
    struct Nuitka_CellObject *par_args = Nuitka_Cell_New1(python_pars[1]);
    struct Nuitka_CellObject *par_kwds = Nuitka_Cell_New1(python_pars[2]);
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        struct Nuitka_CellObject *tmp_closure_1[3];

        tmp_closure_1[0] = par_args;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = Nuitka_Cell_New0(par_file);
        tmp_closure_1[2] = par_kwds;
        Py_INCREF(tmp_closure_1[2]);

        tmp_return_value = MAKE_GENERATOR_numpy$lib$npyio$$$function__19__savez_dispatcher$$$genobj__1__savez_dispatcher(tmp_closure_1);

        goto function_return_exit;
    }

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_file);
    Py_DECREF(par_file);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwds);
    Py_DECREF(par_kwds);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct numpy$lib$npyio$$$function__19__savez_dispatcher$$$genobj__1__savez_dispatcher_locals {
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
};

static PyObject *numpy$lib$npyio$$$function__19__savez_dispatcher$$$genobj__1__savez_dispatcher_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

    // Heap access if used.
    struct numpy$lib$npyio$$$function__19__savez_dispatcher$$$genobj__1__savez_dispatcher_locals *generator_heap = (struct numpy$lib$npyio$$$function__19__savez_dispatcher$$$genobj__1__savez_dispatcher_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 2: goto yield_return_2;
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_d65142a1321b1f6d9d79a62b087f5f5c, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 0x340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_yieldfrom_result_1;
        if (Nuitka_Cell_GET(generator->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[84]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 533;
            generator_heap->type_description_1 = "ccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        Py_INCREF(tmp_expression_name_1);
        generator->m_yield_return_index = 1;
        generator->m_yieldfrom = tmp_expression_name_1;
        return NULL;

        yield_return_1:
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 533;
            generator_heap->type_description_1 = "ccc";
            goto frame_exception_exit_1;
        }
        tmp_yieldfrom_result_1 = yield_return_value;
        Py_DECREF(tmp_yieldfrom_result_1);
    }
    {
        PyObject *tmp_expression_name_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_yieldfrom_result_2;
        if (Nuitka_Cell_GET(generator->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[85]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 534;
            generator_heap->type_description_1 = "ccc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(generator->m_closure[2]);
        generator->m_frame->m_frame.f_lineno = 534;
        tmp_expression_name_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[86]);
        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 534;
            generator_heap->type_description_1 = "ccc";
            goto frame_exception_exit_1;
        }
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 2;
        generator->m_yieldfrom = tmp_expression_name_2;
        return NULL;

        yield_return_2:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 534;
            generator_heap->type_description_1 = "ccc";
            goto frame_exception_exit_1;
        }
        tmp_yieldfrom_result_2 = yield_return_value;
        Py_DECREF(tmp_yieldfrom_result_2);
    }

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            generator->m_closure[1],
            generator->m_closure[0],
            generator->m_closure[2]
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;


    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__19__savez_dispatcher$$$genobj__1__savez_dispatcher(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        numpy$lib$npyio$$$function__19__savez_dispatcher$$$genobj__1__savez_dispatcher_context,
        module_numpy$lib$npyio,
        mod_consts[87],
#if PYTHON_VERSION >= 0x350
        NULL,
#endif
        codeobj_d65142a1321b1f6d9d79a62b087f5f5c,
        closure,
        3,
        sizeof(struct numpy$lib$npyio$$$function__19__savez_dispatcher$$$genobj__1__savez_dispatcher_locals)
    );
}


static PyObject *impl_numpy$lib$npyio$$$function__20_savez(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_file = python_pars[0];
    PyObject *par_args = python_pars[1];
    PyObject *par_kwds = python_pars[2];
    struct Nuitka_FrameObject *frame_c825fe02a5098d57da507b6c66339805;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c825fe02a5098d57da507b6c66339805 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c825fe02a5098d57da507b6c66339805)) {
        Py_XDECREF(cache_frame_c825fe02a5098d57da507b6c66339805);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c825fe02a5098d57da507b6c66339805 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c825fe02a5098d57da507b6c66339805 = MAKE_FUNCTION_FRAME(codeobj_c825fe02a5098d57da507b6c66339805, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c825fe02a5098d57da507b6c66339805->m_type_description == NULL);
    frame_c825fe02a5098d57da507b6c66339805 = cache_frame_c825fe02a5098d57da507b6c66339805;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c825fe02a5098d57da507b6c66339805);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c825fe02a5098d57da507b6c66339805) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        tmp_called_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[88]);

        if (unlikely(tmp_called_name_1 == NULL)) {
            tmp_called_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[88]);
        }

        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 616;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_file);
        tmp_args_element_name_1 = par_file;
        CHECK_OBJECT(par_args);
        tmp_args_element_name_2 = par_args;
        CHECK_OBJECT(par_kwds);
        tmp_args_element_name_3 = par_kwds;
        tmp_args_element_name_4 = Py_False;
        frame_c825fe02a5098d57da507b6c66339805->m_frame.f_lineno = 616;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_1, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 616;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c825fe02a5098d57da507b6c66339805);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c825fe02a5098d57da507b6c66339805);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c825fe02a5098d57da507b6c66339805, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c825fe02a5098d57da507b6c66339805->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c825fe02a5098d57da507b6c66339805, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c825fe02a5098d57da507b6c66339805,
        type_description_1,
        par_file,
        par_args,
        par_kwds
    );


    // Release cached frame if used for exception.
    if (frame_c825fe02a5098d57da507b6c66339805 == cache_frame_c825fe02a5098d57da507b6c66339805) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c825fe02a5098d57da507b6c66339805);
        cache_frame_c825fe02a5098d57da507b6c66339805 = NULL;
    }

    assertFrameObject(frame_c825fe02a5098d57da507b6c66339805);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_file);
    Py_DECREF(par_file);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwds);
    Py_DECREF(par_kwds);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_file);
    Py_DECREF(par_file);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwds);
    Py_DECREF(par_kwds);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__21__savez_compressed_dispatcher(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_file = python_pars[0];
    struct Nuitka_CellObject *par_args = Nuitka_Cell_New1(python_pars[1]);
    struct Nuitka_CellObject *par_kwds = Nuitka_Cell_New1(python_pars[2]);
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        struct Nuitka_CellObject *tmp_closure_1[3];

        tmp_closure_1[0] = par_args;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = Nuitka_Cell_New0(par_file);
        tmp_closure_1[2] = par_kwds;
        Py_INCREF(tmp_closure_1[2]);

        tmp_return_value = MAKE_GENERATOR_numpy$lib$npyio$$$function__21__savez_compressed_dispatcher$$$genobj__1__savez_compressed_dispatcher(tmp_closure_1);

        goto function_return_exit;
    }

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_file);
    Py_DECREF(par_file);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwds);
    Py_DECREF(par_kwds);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct numpy$lib$npyio$$$function__21__savez_compressed_dispatcher$$$genobj__1__savez_compressed_dispatcher_locals {
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
};

static PyObject *numpy$lib$npyio$$$function__21__savez_compressed_dispatcher$$$genobj__1__savez_compressed_dispatcher_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

    // Heap access if used.
    struct numpy$lib$npyio$$$function__21__savez_compressed_dispatcher$$$genobj__1__savez_compressed_dispatcher_locals *generator_heap = (struct numpy$lib$npyio$$$function__21__savez_compressed_dispatcher$$$genobj__1__savez_compressed_dispatcher_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 2: goto yield_return_2;
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_bb48e9f3487600a2cd978f63986d8482, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 0x340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_yieldfrom_result_1;
        if (Nuitka_Cell_GET(generator->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[84]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 620;
            generator_heap->type_description_1 = "ccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        Py_INCREF(tmp_expression_name_1);
        generator->m_yield_return_index = 1;
        generator->m_yieldfrom = tmp_expression_name_1;
        return NULL;

        yield_return_1:
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 620;
            generator_heap->type_description_1 = "ccc";
            goto frame_exception_exit_1;
        }
        tmp_yieldfrom_result_1 = yield_return_value;
        Py_DECREF(tmp_yieldfrom_result_1);
    }
    {
        PyObject *tmp_expression_name_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_yieldfrom_result_2;
        if (Nuitka_Cell_GET(generator->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[85]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 621;
            generator_heap->type_description_1 = "ccc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(generator->m_closure[2]);
        generator->m_frame->m_frame.f_lineno = 621;
        tmp_expression_name_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[86]);
        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 621;
            generator_heap->type_description_1 = "ccc";
            goto frame_exception_exit_1;
        }
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 2;
        generator->m_yieldfrom = tmp_expression_name_2;
        return NULL;

        yield_return_2:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 621;
            generator_heap->type_description_1 = "ccc";
            goto frame_exception_exit_1;
        }
        tmp_yieldfrom_result_2 = yield_return_value;
        Py_DECREF(tmp_yieldfrom_result_2);
    }

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            generator->m_closure[1],
            generator->m_closure[0],
            generator->m_closure[2]
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;


    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__21__savez_compressed_dispatcher$$$genobj__1__savez_compressed_dispatcher(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        numpy$lib$npyio$$$function__21__savez_compressed_dispatcher$$$genobj__1__savez_compressed_dispatcher_context,
        module_numpy$lib$npyio,
        mod_consts[90],
#if PYTHON_VERSION >= 0x350
        NULL,
#endif
        codeobj_bb48e9f3487600a2cd978f63986d8482,
        closure,
        3,
        sizeof(struct numpy$lib$npyio$$$function__21__savez_compressed_dispatcher$$$genobj__1__savez_compressed_dispatcher_locals)
    );
}


static PyObject *impl_numpy$lib$npyio$$$function__22_savez_compressed(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_file = python_pars[0];
    PyObject *par_args = python_pars[1];
    PyObject *par_kwds = python_pars[2];
    struct Nuitka_FrameObject *frame_c46307c7a6ef593b39620af49cf4d929;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c46307c7a6ef593b39620af49cf4d929 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c46307c7a6ef593b39620af49cf4d929)) {
        Py_XDECREF(cache_frame_c46307c7a6ef593b39620af49cf4d929);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c46307c7a6ef593b39620af49cf4d929 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c46307c7a6ef593b39620af49cf4d929 = MAKE_FUNCTION_FRAME(codeobj_c46307c7a6ef593b39620af49cf4d929, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c46307c7a6ef593b39620af49cf4d929->m_type_description == NULL);
    frame_c46307c7a6ef593b39620af49cf4d929 = cache_frame_c46307c7a6ef593b39620af49cf4d929;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c46307c7a6ef593b39620af49cf4d929);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c46307c7a6ef593b39620af49cf4d929) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        tmp_called_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[88]);

        if (unlikely(tmp_called_name_1 == NULL)) {
            tmp_called_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[88]);
        }

        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 686;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_file);
        tmp_args_element_name_1 = par_file;
        CHECK_OBJECT(par_args);
        tmp_args_element_name_2 = par_args;
        CHECK_OBJECT(par_kwds);
        tmp_args_element_name_3 = par_kwds;
        tmp_args_element_name_4 = Py_True;
        frame_c46307c7a6ef593b39620af49cf4d929->m_frame.f_lineno = 686;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_1, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 686;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c46307c7a6ef593b39620af49cf4d929);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c46307c7a6ef593b39620af49cf4d929);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c46307c7a6ef593b39620af49cf4d929, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c46307c7a6ef593b39620af49cf4d929->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c46307c7a6ef593b39620af49cf4d929, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c46307c7a6ef593b39620af49cf4d929,
        type_description_1,
        par_file,
        par_args,
        par_kwds
    );


    // Release cached frame if used for exception.
    if (frame_c46307c7a6ef593b39620af49cf4d929 == cache_frame_c46307c7a6ef593b39620af49cf4d929) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c46307c7a6ef593b39620af49cf4d929);
        cache_frame_c46307c7a6ef593b39620af49cf4d929 = NULL;
    }

    assertFrameObject(frame_c46307c7a6ef593b39620af49cf4d929);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_file);
    Py_DECREF(par_file);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwds);
    Py_DECREF(par_kwds);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_file);
    Py_DECREF(par_file);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwds);
    Py_DECREF(par_kwds);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__23__savez(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_file = python_pars[0];
    PyObject *par_args = python_pars[1];
    PyObject *par_kwds = python_pars[2];
    PyObject *par_compress = python_pars[3];
    PyObject *par_allow_pickle = python_pars[4];
    PyObject *par_pickle_kwargs = python_pars[5];
    PyObject *var_zipfile = NULL;
    PyObject *var_namedict = NULL;
    PyObject *var_i = NULL;
    PyObject *var_val = NULL;
    PyObject *var_key = NULL;
    PyObject *var_compression = NULL;
    PyObject *var_zipf = NULL;
    PyObject *var_fname = NULL;
    PyObject *var_fid = NULL;
    PyObject *var_tempfile = NULL;
    PyObject *var_file_dir = NULL;
    PyObject *var_file_prefix = NULL;
    PyObject *var_fd = NULL;
    PyObject *var_tmpfile = NULL;
    PyObject *var_exc = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    PyObject *tmp_tuple_unpack_5__element_1 = NULL;
    PyObject *tmp_tuple_unpack_5__element_2 = NULL;
    PyObject *tmp_tuple_unpack_5__source_iter = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_aeff938374d2ce8e69488f8d5b5573a6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_preserved_type_3;
    PyObject *exception_preserved_value_3;
    PyTracebackObject *exception_preserved_tb_3;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_preserved_type_4;
    PyObject *exception_preserved_value_4;
    PyTracebackObject *exception_preserved_tb_4;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    static struct Nuitka_FrameObject *cache_frame_aeff938374d2ce8e69488f8d5b5573a6 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_aeff938374d2ce8e69488f8d5b5573a6)) {
        Py_XDECREF(cache_frame_aeff938374d2ce8e69488f8d5b5573a6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_aeff938374d2ce8e69488f8d5b5573a6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_aeff938374d2ce8e69488f8d5b5573a6 = MAKE_FUNCTION_FRAME(codeobj_aeff938374d2ce8e69488f8d5b5573a6, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_aeff938374d2ce8e69488f8d5b5573a6->m_type_description == NULL);
    frame_aeff938374d2ce8e69488f8d5b5573a6 = cache_frame_aeff938374d2ce8e69488f8d5b5573a6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_aeff938374d2ce8e69488f8d5b5573a6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_aeff938374d2ce8e69488f8d5b5573a6) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_arg_name_1;
        PyObject *tmp_locals_arg_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = mod_consts[15];
        tmp_globals_arg_name_1 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = mod_consts[16];
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 692;
        tmp_assign_source_1 = IMPORT_MODULE5(tmp_name_name_1, tmp_globals_arg_name_1, tmp_locals_arg_name_1, tmp_fromlist_name_1, tmp_level_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 692;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_zipfile == NULL);
        var_zipfile = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT(par_file);
        tmp_expression_name_1 = par_file;
        tmp_attribute_name_1 = mod_consts[77];
        tmp_res = BUILTIN_HASATTR_BOOL(tmp_expression_name_1, tmp_attribute_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 694;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 694;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_called_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[14]);

        if (unlikely(tmp_called_name_1 == NULL)) {
            tmp_called_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[14]);
        }

        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 695;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_file);
        tmp_args_element_name_1 = par_file;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 695;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 695;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_file;
            assert(old != NULL);
            par_file = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_file);
        tmp_called_instance_1 = par_file;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 696;
        tmp_operand_name_2 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_1,
            mod_consts[26],
            PyTuple_GET_ITEM(mod_consts[92], 0)
        );

        if (tmp_operand_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 696;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        Py_DECREF(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 696;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT(par_file);
        tmp_left_name_1 = par_file;
        tmp_right_name_1 = mod_consts[93];
        tmp_assign_source_3 = BINARY_OPERATION_ADD_OBJECT_OBJECT_UNICODE(tmp_left_name_1, tmp_right_name_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 697;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_file;
            assert(old != NULL);
            par_file = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(par_kwds);
        tmp_assign_source_4 = par_kwds;
        assert(var_namedict == NULL);
        Py_INCREF(tmp_assign_source_4);
        var_namedict = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_2;
        tmp_called_name_2 = (PyObject *)&PyEnum_Type;
        CHECK_OBJECT(par_args);
        tmp_args_element_name_2 = par_args;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 700;
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 700;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_5 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 700;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_5;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_6 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_6 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooooooooooooooooo";
                exception_lineno = 700;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_7 = MAKE_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 700;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_8 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 700;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_8;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_9 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_9 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 700;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_9;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooooooooooooooooo";
                    exception_lineno = 700;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 700;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_10;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_val;
            var_val = tmp_assign_source_11;
            Py_INCREF(var_val);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        tmp_left_name_2 = mod_consts[95];
        CHECK_OBJECT(var_i);
        tmp_right_name_2 = var_i;
        tmp_assign_source_12 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_2, tmp_right_name_2);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 701;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_key;
            var_key = tmp_assign_source_12;
            Py_XDECREF(old);
        }

    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_key);
        tmp_compexpr_left_1 = var_key;
        if (var_namedict == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[96]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 702;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_2;
        }

        tmp_called_instance_2 = var_namedict;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 702;
        tmp_compexpr_right_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, mod_consts[11]);
        if (tmp_compexpr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_res = PySequence_Contains(tmp_compexpr_right_1, tmp_compexpr_left_1);
        Py_DECREF(tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_3 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        tmp_left_name_3 = mod_consts[97];
        CHECK_OBJECT(var_key);
        tmp_right_name_3 = var_key;
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_3, tmp_right_name_3);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 704;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 703;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 703;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    branch_no_3:;
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(var_val);
        tmp_ass_subvalue_1 = var_val;
        if (var_namedict == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[96]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 705;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_2;
        }

        tmp_ass_subscribed_1 = var_namedict;
        CHECK_OBJECT(var_key);
        tmp_ass_subscript_1 = var_key;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 705;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_2;
        }
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 700;
        type_description_1 = "ooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_compress);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_compress);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 707;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_expression_name_2;
        CHECK_OBJECT(var_zipfile);
        tmp_expression_name_2 = var_zipfile;
        tmp_assign_source_13 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[98]);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 708;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_compression == NULL);
        var_compression = tmp_assign_source_13;
    }
    goto branch_end_4;
    branch_no_4:;
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_expression_name_3;
        CHECK_OBJECT(var_zipfile);
        tmp_expression_name_3 = var_zipfile;
        tmp_assign_source_14 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[99]);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 710;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_compression == NULL);
        var_compression = tmp_assign_source_14;
    }
    branch_end_4:;
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_name_3;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_kw_call_dict_value_1_1;
        tmp_called_name_3 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[20]);

        if (unlikely(tmp_called_name_3 == NULL)) {
            tmp_called_name_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[20]);
        }

        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 712;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (par_file == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[70]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 712;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_arg_value_0_1 = par_file;
        tmp_kw_call_dict_value_0_1 = mod_consts[100];
        CHECK_OBJECT(var_compression);
        tmp_kw_call_dict_value_1_1 = var_compression;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 712;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[2] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1};
            tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_3, args, kw_values, mod_consts[101]);
        }

        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 712;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_zipf == NULL);
        var_zipf = tmp_assign_source_15;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_expression_name_4;
        tmp_expression_name_4 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[102]);

        if (unlikely(tmp_expression_name_4 == NULL)) {
            tmp_expression_name_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[102]);
        }

        if (tmp_expression_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 714;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, mod_consts[103]);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 714;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = mod_consts[104];
        tmp_condition_result_5 = RICH_COMPARE_GE_NBOOL_OBJECT_TUPLE(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_condition_result_5 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 714;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
        assert(tmp_condition_result_5 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_5:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_called_instance_3;
        if (var_namedict == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[96]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 716;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_3 = var_namedict;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 716;
        tmp_iter_arg_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, mod_consts[47]);
        if (tmp_iter_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 716;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_16 = MAKE_ITERATOR(tmp_iter_arg_3);
        Py_DECREF(tmp_iter_arg_3);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 716;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_2__for_iterator == NULL);
        tmp_for_loop_2__for_iterator = tmp_assign_source_16;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_17;
        CHECK_OBJECT(tmp_for_loop_2__for_iterator);
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_17 = ITERATOR_NEXT(tmp_next_source_2);
        if (tmp_assign_source_17 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_2;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooooooooooooooooo";
                exception_lineno = 716;
                goto try_except_handler_5;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_17;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_iter_arg_4;
        CHECK_OBJECT(tmp_for_loop_2__iter_value);
        tmp_iter_arg_4 = tmp_for_loop_2__iter_value;
        tmp_assign_source_18 = MAKE_ITERATOR(tmp_iter_arg_4);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 716;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__source_iter;
            tmp_tuple_unpack_2__source_iter = tmp_assign_source_18;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_19 = UNPACK_NEXT(tmp_unpack_3, 0, 2);
        if (tmp_assign_source_19 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 716;
            goto try_except_handler_7;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_1;
            tmp_tuple_unpack_2__element_1 = tmp_assign_source_19;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_20 = UNPACK_NEXT(tmp_unpack_4, 1, 2);
        if (tmp_assign_source_20 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 716;
            goto try_except_handler_7;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_2;
            tmp_tuple_unpack_2__element_2 = tmp_assign_source_20;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_2); assert(HAS_ITERNEXT(tmp_iterator_name_2));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_2)->tp_iternext)(tmp_iterator_name_2);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooooooooooooooooo";
                    exception_lineno = 716;
                    goto try_except_handler_7;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 716;
            goto try_except_handler_7;
        }
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
    Py_DECREF(tmp_tuple_unpack_2__source_iter);
    tmp_tuple_unpack_2__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_6;
    // End of try:
    try_end_4:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_2__element_1);
    tmp_tuple_unpack_2__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_2__element_2);
    tmp_tuple_unpack_2__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_5;
    // End of try:
    try_end_5:;
    CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
    Py_DECREF(tmp_tuple_unpack_2__source_iter);
    tmp_tuple_unpack_2__source_iter = NULL;
    {
        PyObject *tmp_assign_source_21;
        CHECK_OBJECT(tmp_tuple_unpack_2__element_1);
        tmp_assign_source_21 = tmp_tuple_unpack_2__element_1;
        {
            PyObject *old = var_key;
            var_key = tmp_assign_source_21;
            Py_INCREF(var_key);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_2__element_1);
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_22;
        CHECK_OBJECT(tmp_tuple_unpack_2__element_2);
        tmp_assign_source_22 = tmp_tuple_unpack_2__element_2;
        {
            PyObject *old = var_val;
            var_val = tmp_assign_source_22;
            Py_INCREF(var_val);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_2__element_2);
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        CHECK_OBJECT(var_key);
        tmp_left_name_4 = var_key;
        tmp_right_name_4 = mod_consts[37];
        tmp_assign_source_23 = BINARY_OPERATION_ADD_OBJECT_OBJECT_UNICODE(tmp_left_name_4, tmp_right_name_4);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 717;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = var_fname;
            var_fname = tmp_assign_source_23;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_args_element_name_3;
        tmp_called_instance_4 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_called_instance_4 == NULL)) {
            tmp_called_instance_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_called_instance_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 718;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(var_val);
        tmp_args_element_name_3 = var_val;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 718;
        tmp_assign_source_24 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_4, mod_consts[81], tmp_args_element_name_3);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 718;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = var_val;
            assert(old != NULL);
            var_val = tmp_assign_source_24;
            Py_DECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_called_name_4;
        PyObject *tmp_expression_name_5;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_name_1;
        if (var_zipf == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[105]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 720;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_8;
        }

        tmp_expression_name_5 = var_zipf;
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, mod_consts[39]);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 720;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        CHECK_OBJECT(var_fname);
        tmp_tuple_element_1 = var_fname;
        tmp_args_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_name_1, 0, tmp_tuple_element_1);
        tmp_tuple_element_1 = mod_consts[100];
        PyTuple_SET_ITEM0(tmp_args_name_1, 1, tmp_tuple_element_1);
        tmp_kwargs_name_1 = PyDict_Copy(mod_consts[106]);
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 720;
        tmp_assign_source_25 = CALL_FUNCTION(tmp_called_name_4, tmp_args_name_1, tmp_kwargs_name_1);
        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kwargs_name_1);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 720;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_with_1__source;
            tmp_with_1__source = tmp_assign_source_25;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_called_name_5;
        PyObject *tmp_expression_name_6;
        CHECK_OBJECT(tmp_with_1__source);
        tmp_expression_name_6 = tmp_with_1__source;
        tmp_called_name_5 = LOOKUP_SPECIAL(tmp_expression_name_6, mod_consts[55]);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 720;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 720;
        tmp_assign_source_26 = CALL_FUNCTION_NO_ARGS(tmp_called_name_5);
        Py_DECREF(tmp_called_name_5);
        if (tmp_assign_source_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 720;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_with_1__enter;
            tmp_with_1__enter = tmp_assign_source_26;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_expression_name_7;
        CHECK_OBJECT(tmp_with_1__source);
        tmp_expression_name_7 = tmp_with_1__source;
        tmp_assign_source_27 = LOOKUP_SPECIAL(tmp_expression_name_7, mod_consts[56]);
        if (tmp_assign_source_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 720;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_with_1__exit;
            tmp_with_1__exit = tmp_assign_source_27;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_assign_source_28;
        tmp_assign_source_28 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_28;
    }
    {
        PyObject *tmp_assign_source_29;
        CHECK_OBJECT(tmp_with_1__enter);
        tmp_assign_source_29 = tmp_with_1__enter;
        {
            PyObject *old = var_fid;
            var_fid = tmp_assign_source_29;
            Py_INCREF(var_fid);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_called_name_6;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_arg_value_0_2;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_kw_call_dict_value_0_2;
        PyObject *tmp_kw_call_dict_value_1_2;
        tmp_expression_name_8 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[41]);

        if (unlikely(tmp_expression_name_8 == NULL)) {
            tmp_expression_name_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[41]);
        }

        if (tmp_expression_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 721;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_10;
        }
        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, mod_consts[82]);
        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 721;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_10;
        }
        CHECK_OBJECT(var_fid);
        tmp_kw_call_arg_value_0_2 = var_fid;
        CHECK_OBJECT(var_val);
        tmp_kw_call_arg_value_1_1 = var_val;
        if (par_allow_pickle == NULL) {
            Py_DECREF(tmp_called_name_6);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[24]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 722;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_10;
        }

        tmp_kw_call_dict_value_0_2 = par_allow_pickle;
        if (par_pickle_kwargs == NULL) {
            Py_DECREF(tmp_called_name_6);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[25]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 723;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_10;
        }

        tmp_kw_call_dict_value_1_2 = par_pickle_kwargs;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 721;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_2, tmp_kw_call_arg_value_1_1};
            PyObject *kw_values[2] = {tmp_kw_call_dict_value_0_2, tmp_kw_call_dict_value_1_2};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tmp_called_name_6, args, kw_values, mod_consts[44]);
        }

        Py_DECREF(tmp_called_name_6);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 721;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_10;
        }
        Py_DECREF(tmp_call_result_1);
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_1, &exception_preserved_value_1, &exception_preserved_tb_1);

    if (exception_keeper_tb_6 == NULL) {
        exception_keeper_tb_6 = MAKE_TRACEBACK(frame_aeff938374d2ce8e69488f8d5b5573a6, exception_keeper_lineno_6);
    } else if (exception_keeper_lineno_6 != 0) {
        exception_keeper_tb_6 = ADD_TRACEBACK(exception_keeper_tb_6, frame_aeff938374d2ce8e69488f8d5b5573a6, exception_keeper_lineno_6);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_6, &exception_keeper_value_6, &exception_keeper_tb_6);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_6, exception_keeper_tb_6);
    PUBLISH_EXCEPTION(&exception_keeper_type_6, &exception_keeper_value_6, &exception_keeper_tb_6);
    // Tried code:
    {
        bool tmp_condition_result_6;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        tmp_compexpr_left_3 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_3 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_3, tmp_compexpr_right_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_6 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_6 != false) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        nuitka_bool tmp_assign_source_30;
        tmp_assign_source_30 = NUITKA_BOOL_FALSE;
        tmp_with_1__indicator = tmp_assign_source_30;
    }
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_operand_name_3;
        PyObject *tmp_called_name_7;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_7 = tmp_with_1__exit;
        tmp_args_element_name_4 = EXC_TYPE(PyThreadState_GET());
        tmp_args_element_name_5 = EXC_VALUE(PyThreadState_GET());
        tmp_args_element_name_6 = EXC_TRACEBACK(PyThreadState_GET());
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 723;
        {
            PyObject *call_args[] = {tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6};
            tmp_operand_name_3 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_7, call_args);
        }

        if (tmp_operand_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 723;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_3);
        Py_DECREF(tmp_operand_name_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 723;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_condition_result_7 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 723;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame) frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooooooooooooooooooo";
    goto try_except_handler_11;
    branch_no_7:;
    goto branch_end_6;
    branch_no_6:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 720;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame) frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooooooooooooooooooo";
    goto try_except_handler_11;
    branch_end_6:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto try_except_handler_9;
    // End of try:
    try_end_7:;
    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    goto try_end_6;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_6:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        bool tmp_condition_result_8;
        nuitka_bool tmp_compexpr_left_4;
        nuitka_bool tmp_compexpr_right_4;
        assert(tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_4 = tmp_with_1__indicator;
        tmp_compexpr_right_4 = NUITKA_BOOL_TRUE;
        tmp_condition_result_8 = (tmp_compexpr_left_4 == tmp_compexpr_right_4) ? true : false;
        if (tmp_condition_result_8 != false) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        PyObject *tmp_called_name_8;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_8 = tmp_with_1__exit;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 723;
        tmp_call_result_2 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_name_8, mod_consts[75]);

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            Py_DECREF(exception_keeper_type_8);
            Py_XDECREF(exception_keeper_value_8);
            Py_XDECREF(exception_keeper_tb_8);

            exception_lineno = 723;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        Py_DECREF(tmp_call_result_2);
    }
    branch_no_8:;
    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto try_except_handler_8;
    // End of try:
    try_end_8:;
    {
        bool tmp_condition_result_9;
        nuitka_bool tmp_compexpr_left_5;
        nuitka_bool tmp_compexpr_right_5;
        assert(tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_5 = tmp_with_1__indicator;
        tmp_compexpr_right_5 = NUITKA_BOOL_TRUE;
        tmp_condition_result_9 = (tmp_compexpr_left_5 == tmp_compexpr_right_5) ? true : false;
        if (tmp_condition_result_9 != false) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    {
        PyObject *tmp_called_name_9;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_9 = tmp_with_1__exit;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 723;
        tmp_call_result_3 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_name_9, mod_consts[75]);

        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 723;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        Py_DECREF(tmp_call_result_3);
    }
    branch_no_9:;
    goto try_end_9;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_with_1__source);
    tmp_with_1__source = NULL;
    Py_XDECREF(tmp_with_1__enter);
    tmp_with_1__enter = NULL;
    Py_XDECREF(tmp_with_1__exit);
    tmp_with_1__exit = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto try_except_handler_5;
    // End of try:
    try_end_9:;
    CHECK_OBJECT(tmp_with_1__source);
    Py_DECREF(tmp_with_1__source);
    tmp_with_1__source = NULL;
    CHECK_OBJECT(tmp_with_1__enter);
    Py_DECREF(tmp_with_1__enter);
    tmp_with_1__enter = NULL;
    Py_XDECREF(tmp_with_1__exit);
    tmp_with_1__exit = NULL;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 716;
        type_description_1 = "ooooooooooooooooooooo";
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_10;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;
    goto branch_end_5;
    branch_no_5:;
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_arg_name_2;
        PyObject *tmp_locals_arg_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = mod_consts[107];
        tmp_globals_arg_name_2 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_2 = Py_None;
        tmp_fromlist_name_2 = Py_None;
        tmp_level_name_2 = mod_consts[16];
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 728;
        tmp_assign_source_31 = IMPORT_MODULE5(tmp_name_name_2, tmp_globals_arg_name_2, tmp_locals_arg_name_2, tmp_fromlist_name_2, tmp_level_name_2);
        if (tmp_assign_source_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 728;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_tempfile == NULL);
        var_tempfile = tmp_assign_source_31;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_iter_arg_5;
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_called_name_10;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_7;
        int tmp_truth_name_2;
        PyObject *tmp_called_name_11;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_args_element_name_8;
        tmp_called_name_10 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[108]);

        if (unlikely(tmp_called_name_10 == NULL)) {
            tmp_called_name_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[108]);
        }

        if (tmp_called_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 731;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_12;
        }
        if (par_file == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[70]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 731;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_12;
        }

        tmp_args_element_name_7 = par_file;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 731;
        tmp_call_result_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_10, tmp_args_element_name_7);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 731;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_12;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_call_result_4);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_4);

            exception_lineno = 731;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_12;
        }
        tmp_condition_result_10 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_4);
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_expression_name_10 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[109]);

        if (unlikely(tmp_expression_name_10 == NULL)) {
            tmp_expression_name_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[109]);
        }

        if (tmp_expression_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 731;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_12;
        }
        tmp_expression_name_9 = LOOKUP_ATTRIBUTE(tmp_expression_name_10, mod_consts[110]);
        if (tmp_expression_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 731;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_12;
        }
        tmp_called_name_11 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, mod_consts[111]);
        Py_DECREF(tmp_expression_name_9);
        if (tmp_called_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 731;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_12;
        }
        if (par_file == NULL) {
            Py_DECREF(tmp_called_name_11);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[70]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 731;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_12;
        }

        tmp_args_element_name_8 = par_file;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 731;
        tmp_iter_arg_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_11, tmp_args_element_name_8);
        Py_DECREF(tmp_called_name_11);
        if (tmp_iter_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 731;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_12;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_iter_arg_5 = mod_consts[112];
        Py_INCREF(tmp_iter_arg_5);
        condexpr_end_1:;
        tmp_assign_source_32 = MAKE_ITERATOR(tmp_iter_arg_5);
        Py_DECREF(tmp_iter_arg_5);
        if (tmp_assign_source_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 731;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_12;
        }
        assert(tmp_tuple_unpack_3__source_iter == NULL);
        tmp_tuple_unpack_3__source_iter = tmp_assign_source_32;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
        tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_33 = UNPACK_NEXT(tmp_unpack_5, 0, 2);
        if (tmp_assign_source_33 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 731;
            goto try_except_handler_13;
        }
        assert(tmp_tuple_unpack_3__element_1 == NULL);
        tmp_tuple_unpack_3__element_1 = tmp_assign_source_33;
    }
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_unpack_6;
        CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
        tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_34 = UNPACK_NEXT(tmp_unpack_6, 1, 2);
        if (tmp_assign_source_34 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 731;
            goto try_except_handler_13;
        }
        assert(tmp_tuple_unpack_3__element_2 == NULL);
        tmp_tuple_unpack_3__element_2 = tmp_assign_source_34;
    }
    {
        PyObject *tmp_iterator_name_3;
        CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
        tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_3); assert(HAS_ITERNEXT(tmp_iterator_name_3));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_3)->tp_iternext)(tmp_iterator_name_3);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooooooooooooooooo";
                    exception_lineno = 731;
                    goto try_except_handler_13;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 731;
            goto try_except_handler_13;
        }
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
    Py_DECREF(tmp_tuple_unpack_3__source_iter);
    tmp_tuple_unpack_3__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto try_except_handler_12;
    // End of try:
    try_end_11:;
    goto try_end_12;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_3__element_1);
    tmp_tuple_unpack_3__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_3__element_2);
    tmp_tuple_unpack_3__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
    Py_DECREF(tmp_tuple_unpack_3__source_iter);
    tmp_tuple_unpack_3__source_iter = NULL;
    {
        PyObject *tmp_assign_source_35;
        CHECK_OBJECT(tmp_tuple_unpack_3__element_1);
        tmp_assign_source_35 = tmp_tuple_unpack_3__element_1;
        assert(var_file_dir == NULL);
        Py_INCREF(tmp_assign_source_35);
        var_file_dir = tmp_assign_source_35;
    }
    Py_XDECREF(tmp_tuple_unpack_3__element_1);
    tmp_tuple_unpack_3__element_1 = NULL;

    {
        PyObject *tmp_assign_source_36;
        CHECK_OBJECT(tmp_tuple_unpack_3__element_2);
        tmp_assign_source_36 = tmp_tuple_unpack_3__element_2;
        assert(var_file_prefix == NULL);
        Py_INCREF(tmp_assign_source_36);
        var_file_prefix = tmp_assign_source_36;
    }
    Py_XDECREF(tmp_tuple_unpack_3__element_2);
    tmp_tuple_unpack_3__element_2 = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_iter_arg_6;
        PyObject *tmp_called_name_12;
        PyObject *tmp_expression_name_11;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        PyObject *tmp_kw_call_value_2_1;
        CHECK_OBJECT(var_tempfile);
        tmp_expression_name_11 = var_tempfile;
        tmp_called_name_12 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, mod_consts[113]);
        if (tmp_called_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 732;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_14;
        }
        CHECK_OBJECT(var_file_prefix);
        tmp_kw_call_value_0_1 = var_file_prefix;
        CHECK_OBJECT(var_file_dir);
        tmp_kw_call_value_1_1 = var_file_dir;
        tmp_kw_call_value_2_1 = mod_consts[114];
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 732;
        {
            PyObject *kw_values[3] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1, tmp_kw_call_value_2_1};

            tmp_iter_arg_6 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_name_12, kw_values, mod_consts[115]);
        }

        Py_DECREF(tmp_called_name_12);
        if (tmp_iter_arg_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 732;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_14;
        }
        tmp_assign_source_37 = MAKE_ITERATOR(tmp_iter_arg_6);
        Py_DECREF(tmp_iter_arg_6);
        if (tmp_assign_source_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 732;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_14;
        }
        assert(tmp_tuple_unpack_4__source_iter == NULL);
        tmp_tuple_unpack_4__source_iter = tmp_assign_source_37;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_unpack_7;
        CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
        tmp_unpack_7 = tmp_tuple_unpack_4__source_iter;
        tmp_assign_source_38 = UNPACK_NEXT(tmp_unpack_7, 0, 2);
        if (tmp_assign_source_38 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 732;
            goto try_except_handler_15;
        }
        assert(tmp_tuple_unpack_4__element_1 == NULL);
        tmp_tuple_unpack_4__element_1 = tmp_assign_source_38;
    }
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_unpack_8;
        CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
        tmp_unpack_8 = tmp_tuple_unpack_4__source_iter;
        tmp_assign_source_39 = UNPACK_NEXT(tmp_unpack_8, 1, 2);
        if (tmp_assign_source_39 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 732;
            goto try_except_handler_15;
        }
        assert(tmp_tuple_unpack_4__element_2 == NULL);
        tmp_tuple_unpack_4__element_2 = tmp_assign_source_39;
    }
    {
        PyObject *tmp_iterator_name_4;
        CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
        tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_4); assert(HAS_ITERNEXT(tmp_iterator_name_4));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_4)->tp_iternext)(tmp_iterator_name_4);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooooooooooooooooo";
                    exception_lineno = 732;
                    goto try_except_handler_15;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 732;
            goto try_except_handler_15;
        }
    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
    Py_DECREF(tmp_tuple_unpack_4__source_iter);
    tmp_tuple_unpack_4__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto try_except_handler_14;
    // End of try:
    try_end_13:;
    goto try_end_14;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_4__element_1);
    tmp_tuple_unpack_4__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_4__element_2);
    tmp_tuple_unpack_4__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
    Py_DECREF(tmp_tuple_unpack_4__source_iter);
    tmp_tuple_unpack_4__source_iter = NULL;
    {
        PyObject *tmp_assign_source_40;
        CHECK_OBJECT(tmp_tuple_unpack_4__element_1);
        tmp_assign_source_40 = tmp_tuple_unpack_4__element_1;
        assert(var_fd == NULL);
        Py_INCREF(tmp_assign_source_40);
        var_fd = tmp_assign_source_40;
    }
    Py_XDECREF(tmp_tuple_unpack_4__element_1);
    tmp_tuple_unpack_4__element_1 = NULL;

    {
        PyObject *tmp_assign_source_41;
        CHECK_OBJECT(tmp_tuple_unpack_4__element_2);
        tmp_assign_source_41 = tmp_tuple_unpack_4__element_2;
        assert(var_tmpfile == NULL);
        Py_INCREF(tmp_assign_source_41);
        var_tmpfile = tmp_assign_source_41;
    }
    Py_XDECREF(tmp_tuple_unpack_4__element_2);
    tmp_tuple_unpack_4__element_2 = NULL;

    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_9;
        tmp_called_instance_5 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[109]);

        if (unlikely(tmp_called_instance_5 == NULL)) {
            tmp_called_instance_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[109]);
        }

        if (tmp_called_instance_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 733;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_fd);
        tmp_args_element_name_9 = var_fd;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 733;
        tmp_call_result_5 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_5, mod_consts[35], tmp_args_element_name_9);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 733;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_42;
        PyObject *tmp_iter_arg_7;
        PyObject *tmp_called_instance_6;
        if (var_namedict == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[96]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 735;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_16;
        }

        tmp_called_instance_6 = var_namedict;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 735;
        tmp_iter_arg_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, mod_consts[47]);
        if (tmp_iter_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 735;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_16;
        }
        tmp_assign_source_42 = MAKE_ITERATOR(tmp_iter_arg_7);
        Py_DECREF(tmp_iter_arg_7);
        if (tmp_assign_source_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 735;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_16;
        }
        assert(tmp_for_loop_3__for_iterator == NULL);
        tmp_for_loop_3__for_iterator = tmp_assign_source_42;
    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_43;
        CHECK_OBJECT(tmp_for_loop_3__for_iterator);
        tmp_next_source_3 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_43 = ITERATOR_NEXT(tmp_next_source_3);
        if (tmp_assign_source_43 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_3;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooooooooooooooooo";
                exception_lineno = 735;
                goto try_except_handler_17;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_43;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_44;
        PyObject *tmp_iter_arg_8;
        CHECK_OBJECT(tmp_for_loop_3__iter_value);
        tmp_iter_arg_8 = tmp_for_loop_3__iter_value;
        tmp_assign_source_44 = MAKE_ITERATOR(tmp_iter_arg_8);
        if (tmp_assign_source_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 735;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_18;
        }
        {
            PyObject *old = tmp_tuple_unpack_5__source_iter;
            tmp_tuple_unpack_5__source_iter = tmp_assign_source_44;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_45;
        PyObject *tmp_unpack_9;
        CHECK_OBJECT(tmp_tuple_unpack_5__source_iter);
        tmp_unpack_9 = tmp_tuple_unpack_5__source_iter;
        tmp_assign_source_45 = UNPACK_NEXT(tmp_unpack_9, 0, 2);
        if (tmp_assign_source_45 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 735;
            goto try_except_handler_19;
        }
        {
            PyObject *old = tmp_tuple_unpack_5__element_1;
            tmp_tuple_unpack_5__element_1 = tmp_assign_source_45;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_46;
        PyObject *tmp_unpack_10;
        CHECK_OBJECT(tmp_tuple_unpack_5__source_iter);
        tmp_unpack_10 = tmp_tuple_unpack_5__source_iter;
        tmp_assign_source_46 = UNPACK_NEXT(tmp_unpack_10, 1, 2);
        if (tmp_assign_source_46 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 735;
            goto try_except_handler_19;
        }
        {
            PyObject *old = tmp_tuple_unpack_5__element_2;
            tmp_tuple_unpack_5__element_2 = tmp_assign_source_46;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_5;
        CHECK_OBJECT(tmp_tuple_unpack_5__source_iter);
        tmp_iterator_name_5 = tmp_tuple_unpack_5__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_5); assert(HAS_ITERNEXT(tmp_iterator_name_5));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_5)->tp_iternext)(tmp_iterator_name_5);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooooooooooooooooo";
                    exception_lineno = 735;
                    goto try_except_handler_19;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooooooooooooooooo";
            exception_lineno = 735;
            goto try_except_handler_19;
        }
    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_5__source_iter);
    Py_DECREF(tmp_tuple_unpack_5__source_iter);
    tmp_tuple_unpack_5__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto try_except_handler_18;
    // End of try:
    try_end_15:;
    goto try_end_16;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_5__element_1);
    tmp_tuple_unpack_5__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_5__element_2);
    tmp_tuple_unpack_5__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto try_except_handler_17;
    // End of try:
    try_end_16:;
    CHECK_OBJECT(tmp_tuple_unpack_5__source_iter);
    Py_DECREF(tmp_tuple_unpack_5__source_iter);
    tmp_tuple_unpack_5__source_iter = NULL;
    {
        PyObject *tmp_assign_source_47;
        CHECK_OBJECT(tmp_tuple_unpack_5__element_1);
        tmp_assign_source_47 = tmp_tuple_unpack_5__element_1;
        {
            PyObject *old = var_key;
            var_key = tmp_assign_source_47;
            Py_INCREF(var_key);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_5__element_1);
    tmp_tuple_unpack_5__element_1 = NULL;

    {
        PyObject *tmp_assign_source_48;
        CHECK_OBJECT(tmp_tuple_unpack_5__element_2);
        tmp_assign_source_48 = tmp_tuple_unpack_5__element_2;
        {
            PyObject *old = var_val;
            var_val = tmp_assign_source_48;
            Py_INCREF(var_val);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_5__element_2);
    tmp_tuple_unpack_5__element_2 = NULL;

    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_left_name_5;
        PyObject *tmp_right_name_5;
        CHECK_OBJECT(var_key);
        tmp_left_name_5 = var_key;
        tmp_right_name_5 = mod_consts[37];
        tmp_assign_source_49 = BINARY_OPERATION_ADD_OBJECT_OBJECT_UNICODE(tmp_left_name_5, tmp_right_name_5);
        if (tmp_assign_source_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 736;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        {
            PyObject *old = var_fname;
            var_fname = tmp_assign_source_49;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_open_filename_1;
        PyObject *tmp_open_mode_1;
        if (var_tmpfile == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[116]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 737;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_17;
        }

        tmp_open_filename_1 = var_tmpfile;
        tmp_open_mode_1 = mod_consts[79];
        tmp_assign_source_50 = BUILTIN_OPEN(tmp_open_filename_1, tmp_open_mode_1, NULL, NULL, NULL, NULL, NULL, NULL);
        if (tmp_assign_source_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 737;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        {
            PyObject *old = var_fid;
            var_fid = tmp_assign_source_50;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_called_name_13;
        PyObject *tmp_expression_name_12;
        PyObject *tmp_call_result_6;
        PyObject *tmp_kw_call_arg_value_0_3;
        PyObject *tmp_kw_call_arg_value_1_2;
        PyObject *tmp_called_instance_7;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_kw_call_dict_value_0_3;
        PyObject *tmp_kw_call_dict_value_1_3;
        tmp_expression_name_12 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[41]);

        if (unlikely(tmp_expression_name_12 == NULL)) {
            tmp_expression_name_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[41]);
        }

        if (tmp_expression_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 739;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }
        tmp_called_name_13 = LOOKUP_ATTRIBUTE(tmp_expression_name_12, mod_consts[82]);
        if (tmp_called_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 739;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }
        CHECK_OBJECT(var_fid);
        tmp_kw_call_arg_value_0_3 = var_fid;
        tmp_called_instance_7 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_called_instance_7 == NULL)) {
            tmp_called_instance_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_called_instance_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_13);

            exception_lineno = 739;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }
        CHECK_OBJECT(var_val);
        tmp_args_element_name_10 = var_val;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 739;
        tmp_kw_call_arg_value_1_2 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_7, mod_consts[81], tmp_args_element_name_10);
        if (tmp_kw_call_arg_value_1_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_13);

            exception_lineno = 739;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }
        if (par_allow_pickle == NULL) {
            Py_DECREF(tmp_called_name_13);
            Py_DECREF(tmp_kw_call_arg_value_1_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[24]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 740;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }

        tmp_kw_call_dict_value_0_3 = par_allow_pickle;
        if (par_pickle_kwargs == NULL) {
            Py_DECREF(tmp_called_name_13);
            Py_DECREF(tmp_kw_call_arg_value_1_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[25]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 741;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }

        tmp_kw_call_dict_value_1_3 = par_pickle_kwargs;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 739;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_3, tmp_kw_call_arg_value_1_2};
            PyObject *kw_values[2] = {tmp_kw_call_dict_value_0_3, tmp_kw_call_dict_value_1_3};
            tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tmp_called_name_13, args, kw_values, mod_consts[44]);
        }

        Py_DECREF(tmp_called_name_13);
        Py_DECREF(tmp_kw_call_arg_value_1_2);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 739;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_called_instance_8;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(var_fid);
        tmp_called_instance_8 = var_fid;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 742;
        tmp_call_result_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_8, mod_consts[35]);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 742;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }
        Py_DECREF(tmp_call_result_7);
    }
    {
        PyObject *tmp_assign_source_51;
        tmp_assign_source_51 = Py_None;
        {
            PyObject *old = var_fid;
            assert(old != NULL);
            var_fid = tmp_assign_source_51;
            Py_INCREF(var_fid);
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_14;
        PyObject *tmp_expression_name_13;
        PyObject *tmp_call_result_8;
        PyObject *tmp_kw_call_arg_value_0_4;
        PyObject *tmp_kw_call_dict_value_0_4;
        if (var_zipf == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[105]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 744;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }

        tmp_expression_name_13 = var_zipf;
        tmp_called_name_14 = LOOKUP_ATTRIBUTE(tmp_expression_name_13, mod_consts[77]);
        if (tmp_called_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 744;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }
        if (var_tmpfile == NULL) {
            Py_DECREF(tmp_called_name_14);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[116]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 744;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }

        tmp_kw_call_arg_value_0_4 = var_tmpfile;
        CHECK_OBJECT(var_fname);
        tmp_kw_call_dict_value_0_4 = var_fname;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 744;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_4};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_4};
            tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_14, args, kw_values, mod_consts[117]);
        }

        Py_DECREF(tmp_called_name_14);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 744;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_21;
        }
        Py_DECREF(tmp_call_result_8);
    }
    goto try_end_17;
    // Exception handler code:
    try_except_handler_21:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 2.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_2, &exception_preserved_value_2, &exception_preserved_tb_2);

    if (exception_keeper_tb_17 == NULL) {
        exception_keeper_tb_17 = MAKE_TRACEBACK(frame_aeff938374d2ce8e69488f8d5b5573a6, exception_keeper_lineno_17);
    } else if (exception_keeper_lineno_17 != 0) {
        exception_keeper_tb_17 = ADD_TRACEBACK(exception_keeper_tb_17, frame_aeff938374d2ce8e69488f8d5b5573a6, exception_keeper_lineno_17);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_17, &exception_keeper_value_17, &exception_keeper_tb_17);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_17, exception_keeper_tb_17);
    PUBLISH_EXCEPTION(&exception_keeper_type_17, &exception_keeper_value_17, &exception_keeper_tb_17);
    // Tried code:
    {
        bool tmp_condition_result_11;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        tmp_compexpr_left_6 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_6 = PyExc_IOError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_6, tmp_compexpr_right_6);
        assert(!(tmp_res == -1));
        tmp_condition_result_11 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_11 != false) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_assign_source_52;
        tmp_assign_source_52 = EXC_VALUE(PyThreadState_GET());
        {
            PyObject *old = var_exc;
            var_exc = tmp_assign_source_52;
            Py_INCREF(var_exc);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_make_exception_arg_2;
        PyObject *tmp_left_name_6;
        PyObject *tmp_right_name_6;
        PyObject *tmp_tuple_element_2;
        tmp_left_name_6 = mod_consts[118];
        if (var_tmpfile == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[116]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 746;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_23;
        }

        tmp_tuple_element_2 = var_tmpfile;
        tmp_right_name_6 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_right_name_6, 0, tmp_tuple_element_2);
        CHECK_OBJECT(var_exc);
        tmp_tuple_element_2 = var_exc;
        PyTuple_SET_ITEM0(tmp_right_name_6, 1, tmp_tuple_element_2);
        tmp_make_exception_arg_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_6, tmp_right_name_6);
        Py_DECREF(tmp_right_name_6);
        if (tmp_make_exception_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 746;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_23;
        }
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 746;
        tmp_raise_type_2 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_IOError, tmp_make_exception_arg_2);
        Py_DECREF(tmp_make_exception_arg_2);
        assert(!(tmp_raise_type_2 == NULL));
        exception_type = tmp_raise_type_2;
        exception_lineno = 746;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooooooooooooooooooooo";
        goto try_except_handler_23;
    }
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_23:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_exc);
    var_exc = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto try_except_handler_22;
    // End of try:
    goto branch_end_10;
    branch_no_10:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 738;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame) frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooooooooooooooooooo";
    goto try_except_handler_22;
    branch_end_10:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_22:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 2.
    SET_CURRENT_EXCEPTION(exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2);

    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto try_except_handler_20;
    // End of try:
    // End of try:
    try_end_17:;
    goto try_end_18;
    // Exception handler code:
    try_except_handler_20:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_keeper_lineno_20 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 3.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_3, &exception_preserved_value_3, &exception_preserved_tb_3);

    if (exception_keeper_tb_20 == NULL) {
        exception_keeper_tb_20 = MAKE_TRACEBACK(frame_aeff938374d2ce8e69488f8d5b5573a6, exception_keeper_lineno_20);
    } else if (exception_keeper_lineno_20 != 0) {
        exception_keeper_tb_20 = ADD_TRACEBACK(exception_keeper_tb_20, frame_aeff938374d2ce8e69488f8d5b5573a6, exception_keeper_lineno_20);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_20, &exception_keeper_value_20, &exception_keeper_tb_20);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_20, exception_keeper_tb_20);
    PUBLISH_EXCEPTION(&exception_keeper_type_20, &exception_keeper_value_20, &exception_keeper_tb_20);
    // Tried code:
    {
        nuitka_bool tmp_condition_result_12;
        int tmp_truth_name_3;
        if (var_fid == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[34]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 748;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_24;
        }

        tmp_truth_name_3 = CHECK_IF_TRUE(var_fid);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 748;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_24;
        }
        tmp_condition_result_12 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_called_instance_9;
        PyObject *tmp_call_result_9;
        if (var_fid == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[34]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 749;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_24;
        }

        tmp_called_instance_9 = var_fid;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 749;
        tmp_call_result_9 = CALL_METHOD_NO_ARGS(tmp_called_instance_9, mod_consts[35]);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 749;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_24;
        }
        Py_DECREF(tmp_call_result_9);
    }
    branch_no_11:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 738;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame) frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooooooooooooooooooo";
    goto try_except_handler_24;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_24:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 3.
    SET_CURRENT_EXCEPTION(exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3);

    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto try_except_handler_17;
    // End of try:
    // End of try:
    try_end_18:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 735;
        type_description_1 = "ooooooooooooooooooooo";
        goto try_except_handler_17;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_19;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_keeper_lineno_22 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_22;
    exception_value = exception_keeper_value_22;
    exception_tb = exception_keeper_tb_22;
    exception_lineno = exception_keeper_lineno_22;

    goto try_except_handler_16;
    // End of try:
    try_end_19:;
    goto try_end_20;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_keeper_lineno_23 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 4.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_4, &exception_preserved_value_4, &exception_preserved_tb_4);

    if (exception_keeper_tb_23 == NULL) {
        exception_keeper_tb_23 = MAKE_TRACEBACK(frame_aeff938374d2ce8e69488f8d5b5573a6, exception_keeper_lineno_23);
    } else if (exception_keeper_lineno_23 != 0) {
        exception_keeper_tb_23 = ADD_TRACEBACK(exception_keeper_tb_23, frame_aeff938374d2ce8e69488f8d5b5573a6, exception_keeper_lineno_23);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_23, &exception_keeper_value_23, &exception_keeper_tb_23);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_23, exception_keeper_tb_23);
    PUBLISH_EXCEPTION(&exception_keeper_type_23, &exception_keeper_value_23, &exception_keeper_tb_23);
    // Tried code:
    {
        PyObject *tmp_called_name_15;
        PyObject *tmp_expression_name_14;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_name_11;
        tmp_expression_name_14 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[109]);

        if (unlikely(tmp_expression_name_14 == NULL)) {
            tmp_expression_name_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[109]);
        }

        if (tmp_expression_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 751;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_25;
        }
        tmp_called_name_15 = LOOKUP_ATTRIBUTE(tmp_expression_name_14, mod_consts[119]);
        if (tmp_called_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 751;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_25;
        }
        if (var_tmpfile == NULL) {
            Py_DECREF(tmp_called_name_15);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[116]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 751;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_25;
        }

        tmp_args_element_name_11 = var_tmpfile;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 751;
        tmp_call_result_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_15, tmp_args_element_name_11);
        Py_DECREF(tmp_called_name_15);
        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 751;
            type_description_1 = "ooooooooooooooooooooo";
            goto try_except_handler_25;
        }
        Py_DECREF(tmp_call_result_10);
    }
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 734;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame) frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooooooooooooooooooo";
    goto try_except_handler_25;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_25:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_keeper_lineno_24 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 4.
    SET_CURRENT_EXCEPTION(exception_preserved_type_4, exception_preserved_value_4, exception_preserved_tb_4);

    // Re-raise.
    exception_type = exception_keeper_type_24;
    exception_value = exception_keeper_value_24;
    exception_tb = exception_keeper_tb_24;
    exception_lineno = exception_keeper_lineno_24;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_20:;
    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;
    {
        PyObject *tmp_called_name_16;
        PyObject *tmp_expression_name_15;
        PyObject *tmp_call_result_11;
        PyObject *tmp_args_element_name_12;
        tmp_expression_name_15 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[109]);

        if (unlikely(tmp_expression_name_15 == NULL)) {
            tmp_expression_name_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[109]);
        }

        if (tmp_expression_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 751;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_16 = LOOKUP_ATTRIBUTE(tmp_expression_name_15, mod_consts[119]);
        if (tmp_called_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 751;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (var_tmpfile == NULL) {
            Py_DECREF(tmp_called_name_16);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[116]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 751;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_12 = var_tmpfile;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 751;
        tmp_call_result_11 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_16, tmp_args_element_name_12);
        Py_DECREF(tmp_called_name_16);
        if (tmp_call_result_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 751;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_11);
    }
    branch_end_5:;
    {
        PyObject *tmp_called_instance_10;
        PyObject *tmp_call_result_12;
        if (var_zipf == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[105]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 753;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_10 = var_zipf;
        frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame.f_lineno = 753;
        tmp_call_result_12 = CALL_METHOD_NO_ARGS(tmp_called_instance_10, mod_consts[35]);
        if (tmp_call_result_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 753;
            type_description_1 = "ooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_12);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_aeff938374d2ce8e69488f8d5b5573a6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_aeff938374d2ce8e69488f8d5b5573a6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_aeff938374d2ce8e69488f8d5b5573a6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_aeff938374d2ce8e69488f8d5b5573a6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_aeff938374d2ce8e69488f8d5b5573a6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_aeff938374d2ce8e69488f8d5b5573a6,
        type_description_1,
        par_file,
        par_args,
        par_kwds,
        par_compress,
        par_allow_pickle,
        par_pickle_kwargs,
        var_zipfile,
        var_namedict,
        var_i,
        var_val,
        var_key,
        var_compression,
        var_zipf,
        var_fname,
        var_fid,
        var_tempfile,
        var_file_dir,
        var_file_prefix,
        var_fd,
        var_tmpfile,
        var_exc
    );


    // Release cached frame if used for exception.
    if (frame_aeff938374d2ce8e69488f8d5b5573a6 == cache_frame_aeff938374d2ce8e69488f8d5b5573a6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_aeff938374d2ce8e69488f8d5b5573a6);
        cache_frame_aeff938374d2ce8e69488f8d5b5573a6 = NULL;
    }

    assertFrameObject(frame_aeff938374d2ce8e69488f8d5b5573a6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_file);
    par_file = NULL;
    Py_XDECREF(var_zipfile);
    var_zipfile = NULL;
    Py_XDECREF(var_namedict);
    var_namedict = NULL;
    Py_XDECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_val);
    var_val = NULL;
    Py_XDECREF(var_key);
    var_key = NULL;
    CHECK_OBJECT(var_compression);
    Py_DECREF(var_compression);
    var_compression = NULL;
    Py_XDECREF(var_zipf);
    var_zipf = NULL;
    Py_XDECREF(var_fname);
    var_fname = NULL;
    Py_XDECREF(var_fid);
    var_fid = NULL;
    Py_XDECREF(var_tempfile);
    var_tempfile = NULL;
    Py_XDECREF(var_file_dir);
    var_file_dir = NULL;
    Py_XDECREF(var_file_prefix);
    var_file_prefix = NULL;
    Py_XDECREF(var_fd);
    var_fd = NULL;
    Py_XDECREF(var_tmpfile);
    var_tmpfile = NULL;
    Py_XDECREF(var_exc);
    var_exc = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_keeper_lineno_25 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_file);
    par_file = NULL;
    Py_XDECREF(var_zipfile);
    var_zipfile = NULL;
    Py_XDECREF(var_namedict);
    var_namedict = NULL;
    Py_XDECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_val);
    var_val = NULL;
    Py_XDECREF(var_key);
    var_key = NULL;
    Py_XDECREF(var_compression);
    var_compression = NULL;
    Py_XDECREF(var_zipf);
    var_zipf = NULL;
    Py_XDECREF(var_fname);
    var_fname = NULL;
    Py_XDECREF(var_fid);
    var_fid = NULL;
    Py_XDECREF(var_tempfile);
    var_tempfile = NULL;
    Py_XDECREF(var_file_dir);
    var_file_dir = NULL;
    Py_XDECREF(var_file_prefix);
    var_file_prefix = NULL;
    Py_XDECREF(var_fd);
    var_fd = NULL;
    Py_XDECREF(var_tmpfile);
    var_tmpfile = NULL;
    Py_XDECREF(var_exc);
    var_exc = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_25;
    exception_value = exception_keeper_value_25;
    exception_tb = exception_keeper_tb_25;
    exception_lineno = exception_keeper_lineno_25;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwds);
    Py_DECREF(par_kwds);
    CHECK_OBJECT(par_compress);
    Py_DECREF(par_compress);
    CHECK_OBJECT(par_allow_pickle);
    Py_DECREF(par_allow_pickle);
    CHECK_OBJECT(par_pickle_kwargs);
    Py_DECREF(par_pickle_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwds);
    Py_DECREF(par_kwds);
    CHECK_OBJECT(par_compress);
    Py_DECREF(par_compress);
    CHECK_OBJECT(par_allow_pickle);
    Py_DECREF(par_allow_pickle);
    CHECK_OBJECT(par_pickle_kwargs);
    Py_DECREF(par_pickle_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__24__getconv(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_dtype = python_pars[0];
    PyObject *var_floatconv = NULL;
    PyObject *var_typ = NULL;
    struct Nuitka_FrameObject *frame_37c3f47fa3cc68c66959e173197129c9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_37c3f47fa3cc68c66959e173197129c9 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;


        tmp_assign_source_1 = MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__1_floatconv();

        assert(var_floatconv == NULL);
        var_floatconv = tmp_assign_source_1;
    }
    // Tried code:
    if (isFrameUnusable(cache_frame_37c3f47fa3cc68c66959e173197129c9)) {
        Py_XDECREF(cache_frame_37c3f47fa3cc68c66959e173197129c9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_37c3f47fa3cc68c66959e173197129c9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_37c3f47fa3cc68c66959e173197129c9 = MAKE_FUNCTION_FRAME(codeobj_37c3f47fa3cc68c66959e173197129c9, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_37c3f47fa3cc68c66959e173197129c9->m_type_description == NULL);
    frame_37c3f47fa3cc68c66959e173197129c9 = cache_frame_37c3f47fa3cc68c66959e173197129c9;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_37c3f47fa3cc68c66959e173197129c9);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_37c3f47fa3cc68c66959e173197129c9) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_name_1;
        CHECK_OBJECT(par_dtype);
        tmp_expression_name_1 = par_dtype;
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[122]);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 765;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_typ == NULL);
        var_typ = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_issubclass_cls_1;
        PyObject *tmp_issubclass_classes_1;
        PyObject *tmp_expression_name_2;
        CHECK_OBJECT(var_typ);
        tmp_issubclass_cls_1 = var_typ;
        tmp_expression_name_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_2 == NULL)) {
            tmp_expression_name_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 766;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_issubclass_classes_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[123]);
        if (tmp_issubclass_classes_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 766;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsSubclass(tmp_issubclass_cls_1, tmp_issubclass_classes_1);
        Py_DECREF(tmp_issubclass_classes_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 766;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;


    tmp_return_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__2_lambda();

    goto frame_return_exit_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_issubclass_cls_2;
        PyObject *tmp_issubclass_classes_2;
        PyObject *tmp_expression_name_3;
        CHECK_OBJECT(var_typ);
        tmp_issubclass_cls_2 = var_typ;
        tmp_expression_name_3 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_3 == NULL)) {
            tmp_expression_name_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 768;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_issubclass_classes_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[126]);
        if (tmp_issubclass_classes_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 768;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsSubclass(tmp_issubclass_cls_2, tmp_issubclass_classes_2);
        Py_DECREF(tmp_issubclass_classes_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 768;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_expression_name_4;
        tmp_expression_name_4 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_4 == NULL)) {
            tmp_expression_name_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 769;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_name_4, mod_consts[126]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 769;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_no_2:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_issubclass_cls_3;
        PyObject *tmp_issubclass_classes_3;
        PyObject *tmp_expression_name_5;
        CHECK_OBJECT(var_typ);
        tmp_issubclass_cls_3 = var_typ;
        tmp_expression_name_5 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_5 == NULL)) {
            tmp_expression_name_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 770;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_issubclass_classes_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, mod_consts[127]);
        if (tmp_issubclass_classes_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 770;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsSubclass(tmp_issubclass_cls_3, tmp_issubclass_classes_3);
        Py_DECREF(tmp_issubclass_classes_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 770;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_expression_name_6;
        tmp_expression_name_6 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_6 == NULL)) {
            tmp_expression_name_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 771;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_name_6, mod_consts[127]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 771;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_no_3:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_issubclass_cls_4;
        PyObject *tmp_issubclass_classes_4;
        PyObject *tmp_expression_name_7;
        CHECK_OBJECT(var_typ);
        tmp_issubclass_cls_4 = var_typ;
        tmp_expression_name_7 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_7 == NULL)) {
            tmp_expression_name_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 772;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_issubclass_classes_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_7, mod_consts[128]);
        if (tmp_issubclass_classes_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 772;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsSubclass(tmp_issubclass_cls_4, tmp_issubclass_classes_4);
        Py_DECREF(tmp_issubclass_classes_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 772;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;


    tmp_return_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__3_lambda();

    goto frame_return_exit_1;
    goto branch_end_4;
    branch_no_4:;
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_issubclass_cls_5;
        PyObject *tmp_issubclass_classes_5;
        PyObject *tmp_expression_name_8;
        CHECK_OBJECT(var_typ);
        tmp_issubclass_cls_5 = var_typ;
        tmp_expression_name_8 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_8 == NULL)) {
            tmp_expression_name_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 774;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_issubclass_classes_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, mod_consts[129]);
        if (tmp_issubclass_classes_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 774;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsSubclass(tmp_issubclass_cls_5, tmp_issubclass_classes_5);
        Py_DECREF(tmp_issubclass_classes_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 774;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_expression_name_9;
        tmp_expression_name_9 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_9 == NULL)) {
            tmp_expression_name_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 775;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_name_9, mod_consts[129]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 775;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_5;
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_issubclass_cls_6;
        PyObject *tmp_issubclass_classes_6;
        PyObject *tmp_expression_name_10;
        CHECK_OBJECT(var_typ);
        tmp_issubclass_cls_6 = var_typ;
        tmp_expression_name_10 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_10 == NULL)) {
            tmp_expression_name_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 776;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_issubclass_classes_6 = LOOKUP_ATTRIBUTE(tmp_expression_name_10, mod_consts[130]);
        if (tmp_issubclass_classes_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 776;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsSubclass(tmp_issubclass_cls_6, tmp_issubclass_classes_6);
        Py_DECREF(tmp_issubclass_classes_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 776;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    CHECK_OBJECT(var_floatconv);
    tmp_return_value = var_floatconv;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_6;
    branch_no_6:;
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_issubclass_cls_7;
        PyObject *tmp_issubclass_classes_7;
        CHECK_OBJECT(var_typ);
        tmp_issubclass_cls_7 = var_typ;
        tmp_issubclass_classes_7 = (PyObject *)&PyComplex_Type;
        tmp_res = PyObject_IsSubclass(tmp_issubclass_cls_7, tmp_issubclass_classes_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 778;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;


    tmp_return_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__4_lambda();

    goto frame_return_exit_1;
    goto branch_end_7;
    branch_no_7:;
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_issubclass_cls_8;
        PyObject *tmp_issubclass_classes_8;
        PyObject *tmp_expression_name_11;
        CHECK_OBJECT(var_typ);
        tmp_issubclass_cls_8 = var_typ;
        tmp_expression_name_11 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_11 == NULL)) {
            tmp_expression_name_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 780;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_issubclass_classes_8 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, mod_consts[131]);
        if (tmp_issubclass_classes_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 780;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsSubclass(tmp_issubclass_cls_8, tmp_issubclass_classes_8);
        Py_DECREF(tmp_issubclass_classes_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 780;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    tmp_return_value = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[132]);

    if (unlikely(tmp_return_value == NULL)) {
        tmp_return_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[132]);
    }

    if (tmp_return_value == NULL) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 781;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_8;
    branch_no_8:;
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_issubclass_cls_9;
        PyObject *tmp_issubclass_classes_9;
        PyObject *tmp_expression_name_12;
        CHECK_OBJECT(var_typ);
        tmp_issubclass_cls_9 = var_typ;
        tmp_expression_name_12 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_12 == NULL)) {
            tmp_expression_name_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 782;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_issubclass_classes_9 = LOOKUP_ATTRIBUTE(tmp_expression_name_12, mod_consts[133]);
        if (tmp_issubclass_classes_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 782;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsSubclass(tmp_issubclass_cls_9, tmp_issubclass_classes_9);
        Py_DECREF(tmp_issubclass_classes_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 782;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    tmp_return_value = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[134]);

    if (unlikely(tmp_return_value == NULL)) {
        tmp_return_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[134]);
    }

    if (tmp_return_value == NULL) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 783;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_9;
    branch_no_9:;
    tmp_return_value = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[135]);

    if (unlikely(tmp_return_value == NULL)) {
        tmp_return_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[135]);
    }

    if (tmp_return_value == NULL) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 785;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_9:;
    branch_end_8:;
    branch_end_7:;
    branch_end_6:;
    branch_end_5:;
    branch_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_37c3f47fa3cc68c66959e173197129c9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_37c3f47fa3cc68c66959e173197129c9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_37c3f47fa3cc68c66959e173197129c9);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_37c3f47fa3cc68c66959e173197129c9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_37c3f47fa3cc68c66959e173197129c9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_37c3f47fa3cc68c66959e173197129c9, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_37c3f47fa3cc68c66959e173197129c9,
        type_description_1,
        par_dtype,
        var_floatconv,
        var_typ
    );


    // Release cached frame if used for exception.
    if (frame_37c3f47fa3cc68c66959e173197129c9 == cache_frame_37c3f47fa3cc68c66959e173197129c9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_37c3f47fa3cc68c66959e173197129c9);
        cache_frame_37c3f47fa3cc68c66959e173197129c9 = NULL;
    }

    assertFrameObject(frame_37c3f47fa3cc68c66959e173197129c9);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_floatconv);
    Py_DECREF(var_floatconv);
    var_floatconv = NULL;
    CHECK_OBJECT(var_typ);
    Py_DECREF(var_typ);
    var_typ = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_floatconv);
    Py_DECREF(var_floatconv);
    var_floatconv = NULL;
    Py_XDECREF(var_typ);
    var_typ = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_dtype);
    Py_DECREF(par_dtype);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_dtype);
    Py_DECREF(par_dtype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__24__getconv$$$function__1_floatconv(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[0];
    struct Nuitka_FrameObject *frame_1a262ad3afd9aea256e84820f76c0c2e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_1a262ad3afd9aea256e84820f76c0c2e = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1a262ad3afd9aea256e84820f76c0c2e)) {
        Py_XDECREF(cache_frame_1a262ad3afd9aea256e84820f76c0c2e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1a262ad3afd9aea256e84820f76c0c2e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1a262ad3afd9aea256e84820f76c0c2e = MAKE_FUNCTION_FRAME(codeobj_1a262ad3afd9aea256e84820f76c0c2e, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1a262ad3afd9aea256e84820f76c0c2e->m_type_description == NULL);
    frame_1a262ad3afd9aea256e84820f76c0c2e = cache_frame_1a262ad3afd9aea256e84820f76c0c2e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1a262ad3afd9aea256e84820f76c0c2e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1a262ad3afd9aea256e84820f76c0c2e) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_x);
        tmp_called_instance_1 = par_x;
        frame_1a262ad3afd9aea256e84820f76c0c2e->m_frame.f_lineno = 760;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[137]);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 760;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = mod_consts[138];
        CHECK_OBJECT(par_x);
        tmp_compexpr_right_1 = par_x;
        tmp_res = PySequence_Contains(tmp_compexpr_right_1, tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 761;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_1;
        tmp_called_instance_2 = (PyObject *)&PyFloat_Type;
        CHECK_OBJECT(par_x);
        tmp_args_element_name_1 = par_x;
        frame_1a262ad3afd9aea256e84820f76c0c2e->m_frame.f_lineno = 762;
        tmp_return_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[139], tmp_args_element_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 762;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_float_arg_1;
        CHECK_OBJECT(par_x);
        tmp_float_arg_1 = par_x;
        tmp_return_value = TO_FLOAT(tmp_float_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 763;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1a262ad3afd9aea256e84820f76c0c2e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_1a262ad3afd9aea256e84820f76c0c2e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1a262ad3afd9aea256e84820f76c0c2e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1a262ad3afd9aea256e84820f76c0c2e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1a262ad3afd9aea256e84820f76c0c2e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1a262ad3afd9aea256e84820f76c0c2e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1a262ad3afd9aea256e84820f76c0c2e,
        type_description_1,
        par_x
    );


    // Release cached frame if used for exception.
    if (frame_1a262ad3afd9aea256e84820f76c0c2e == cache_frame_1a262ad3afd9aea256e84820f76c0c2e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1a262ad3afd9aea256e84820f76c0c2e);
        cache_frame_1a262ad3afd9aea256e84820f76c0c2e = NULL;
    }

    assertFrameObject(frame_1a262ad3afd9aea256e84820f76c0c2e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__24__getconv$$$function__2_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[0];
    struct Nuitka_FrameObject *frame_ab6bb12151acad0dbab958cac65dbd5d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_ab6bb12151acad0dbab958cac65dbd5d = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_ab6bb12151acad0dbab958cac65dbd5d)) {
        Py_XDECREF(cache_frame_ab6bb12151acad0dbab958cac65dbd5d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ab6bb12151acad0dbab958cac65dbd5d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ab6bb12151acad0dbab958cac65dbd5d = MAKE_FUNCTION_FRAME(codeobj_ab6bb12151acad0dbab958cac65dbd5d, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ab6bb12151acad0dbab958cac65dbd5d->m_type_description == NULL);
    frame_ab6bb12151acad0dbab958cac65dbd5d = cache_frame_ab6bb12151acad0dbab958cac65dbd5d;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ab6bb12151acad0dbab958cac65dbd5d);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ab6bb12151acad0dbab958cac65dbd5d) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_value_name_1;
        PyObject *tmp_int_arg_1;
        CHECK_OBJECT(par_x);
        tmp_int_arg_1 = par_x;
        tmp_value_name_1 = PyNumber_Int(tmp_int_arg_1);
        if (tmp_value_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_value_name_1);
        Py_DECREF(tmp_value_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = (tmp_res != 0) ? Py_True : Py_False;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ab6bb12151acad0dbab958cac65dbd5d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_ab6bb12151acad0dbab958cac65dbd5d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ab6bb12151acad0dbab958cac65dbd5d);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ab6bb12151acad0dbab958cac65dbd5d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ab6bb12151acad0dbab958cac65dbd5d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ab6bb12151acad0dbab958cac65dbd5d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ab6bb12151acad0dbab958cac65dbd5d,
        type_description_1,
        par_x
    );


    // Release cached frame if used for exception.
    if (frame_ab6bb12151acad0dbab958cac65dbd5d == cache_frame_ab6bb12151acad0dbab958cac65dbd5d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ab6bb12151acad0dbab958cac65dbd5d);
        cache_frame_ab6bb12151acad0dbab958cac65dbd5d = NULL;
    }

    assertFrameObject(frame_ab6bb12151acad0dbab958cac65dbd5d);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__24__getconv$$$function__3_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[0];
    struct Nuitka_FrameObject *frame_495cbc5b8273413aa93dd87da5deab47;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_495cbc5b8273413aa93dd87da5deab47 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_495cbc5b8273413aa93dd87da5deab47)) {
        Py_XDECREF(cache_frame_495cbc5b8273413aa93dd87da5deab47);

#if _DEBUG_REFCOUNTS
        if (cache_frame_495cbc5b8273413aa93dd87da5deab47 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_495cbc5b8273413aa93dd87da5deab47 = MAKE_FUNCTION_FRAME(codeobj_495cbc5b8273413aa93dd87da5deab47, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_495cbc5b8273413aa93dd87da5deab47->m_type_description == NULL);
    frame_495cbc5b8273413aa93dd87da5deab47 = cache_frame_495cbc5b8273413aa93dd87da5deab47;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_495cbc5b8273413aa93dd87da5deab47);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_495cbc5b8273413aa93dd87da5deab47) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_int_arg_1;
        PyObject *tmp_float_arg_1;
        CHECK_OBJECT(par_x);
        tmp_float_arg_1 = par_x;
        tmp_int_arg_1 = TO_FLOAT(tmp_float_arg_1);
        if (tmp_int_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 773;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyNumber_Int(tmp_int_arg_1);
        Py_DECREF(tmp_int_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 773;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_495cbc5b8273413aa93dd87da5deab47);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_495cbc5b8273413aa93dd87da5deab47);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_495cbc5b8273413aa93dd87da5deab47);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_495cbc5b8273413aa93dd87da5deab47, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_495cbc5b8273413aa93dd87da5deab47->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_495cbc5b8273413aa93dd87da5deab47, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_495cbc5b8273413aa93dd87da5deab47,
        type_description_1,
        par_x
    );


    // Release cached frame if used for exception.
    if (frame_495cbc5b8273413aa93dd87da5deab47 == cache_frame_495cbc5b8273413aa93dd87da5deab47) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_495cbc5b8273413aa93dd87da5deab47);
        cache_frame_495cbc5b8273413aa93dd87da5deab47 = NULL;
    }

    assertFrameObject(frame_495cbc5b8273413aa93dd87da5deab47);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__24__getconv$$$function__4_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[0];
    struct Nuitka_FrameObject *frame_a651cadf4e614bba25fb4c85d60d6214;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a651cadf4e614bba25fb4c85d60d6214 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a651cadf4e614bba25fb4c85d60d6214)) {
        Py_XDECREF(cache_frame_a651cadf4e614bba25fb4c85d60d6214);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a651cadf4e614bba25fb4c85d60d6214 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a651cadf4e614bba25fb4c85d60d6214 = MAKE_FUNCTION_FRAME(codeobj_a651cadf4e614bba25fb4c85d60d6214, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a651cadf4e614bba25fb4c85d60d6214->m_type_description == NULL);
    frame_a651cadf4e614bba25fb4c85d60d6214 = cache_frame_a651cadf4e614bba25fb4c85d60d6214;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a651cadf4e614bba25fb4c85d60d6214);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a651cadf4e614bba25fb4c85d60d6214) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_real_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_called_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[135]);

        if (unlikely(tmp_called_name_1 == NULL)) {
            tmp_called_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[135]);
        }

        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 779;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_x);
        tmp_args_element_name_1 = par_x;
        frame_a651cadf4e614bba25fb4c85d60d6214->m_frame.f_lineno = 779;
        tmp_called_instance_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 779;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_a651cadf4e614bba25fb4c85d60d6214->m_frame.f_lineno = 779;
        tmp_real_arg_1 = CALL_METHOD_WITH_ARGS2(
            tmp_called_instance_1,
            mod_consts[140],
            &PyTuple_GET_ITEM(mod_consts[141], 0)
        );

        Py_DECREF(tmp_called_instance_1);
        if (tmp_real_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 779;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = BUILTIN_COMPLEX1(tmp_real_arg_1);
        Py_DECREF(tmp_real_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 779;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a651cadf4e614bba25fb4c85d60d6214);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_a651cadf4e614bba25fb4c85d60d6214);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a651cadf4e614bba25fb4c85d60d6214);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a651cadf4e614bba25fb4c85d60d6214, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a651cadf4e614bba25fb4c85d60d6214->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a651cadf4e614bba25fb4c85d60d6214, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a651cadf4e614bba25fb4c85d60d6214,
        type_description_1,
        par_x
    );


    // Release cached frame if used for exception.
    if (frame_a651cadf4e614bba25fb4c85d60d6214 == cache_frame_a651cadf4e614bba25fb4c85d60d6214) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a651cadf4e614bba25fb4c85d60d6214);
        cache_frame_a651cadf4e614bba25fb4c85d60d6214 = NULL;
    }

    assertFrameObject(frame_a651cadf4e614bba25fb4c85d60d6214);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__25_loadtxt(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_fname = python_pars[0];
    PyObject *par_dtype = python_pars[1];
    struct Nuitka_CellObject *par_comments = Nuitka_Cell_New1(python_pars[2]);
    struct Nuitka_CellObject *par_delimiter = Nuitka_Cell_New1(python_pars[3]);
    struct Nuitka_CellObject *par_converters = Nuitka_Cell_New1(python_pars[4]);
    struct Nuitka_CellObject *par_skiprows = Nuitka_Cell_New1(python_pars[5]);
    struct Nuitka_CellObject *par_usecols = Nuitka_Cell_New1(python_pars[6]);
    PyObject *par_unpack = python_pars[7];
    PyObject *par_ndmin = python_pars[8];
    struct Nuitka_CellObject *par_encoding = Nuitka_Cell_New1(python_pars[9]);
    struct Nuitka_CellObject *par_max_rows = Nuitka_Cell_New1(python_pars[10]);
    struct Nuitka_CellObject *var_regex_comments = Nuitka_Cell_Empty();
    PyObject *var_user_converters = NULL;
    nuitka_bool var_byte_converters = NUITKA_BOOL_UNASSIGNED;
    PyObject *var_usecols_as_list = NULL;
    PyObject *var_col_idx = NULL;
    PyObject *var_e = NULL;
    nuitka_bool var_fown = NUITKA_BOOL_UNASSIGNED;
    struct Nuitka_CellObject *var_fh = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_fencoding = Nuitka_Cell_Empty();
    PyObject *var_locale = NULL;
    PyObject *var_flatten_dtype_internal = NULL;
    struct Nuitka_CellObject *var_pack_items = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_split_line = Nuitka_Cell_Empty();
    PyObject *var_read_data = NULL;
    PyObject *var_defconv = NULL;
    PyObject *var_i = NULL;
    PyObject *var_first_vals = NULL;
    struct Nuitka_CellObject *var_first_line = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_N = Nuitka_Cell_Empty();
    PyObject *var_dtype_types = NULL;
    struct Nuitka_CellObject *var_packing = Nuitka_Cell_Empty();
    PyObject *var_conv = NULL;
    PyObject *var_tobytes_first = NULL;
    PyObject *var_X = NULL;
    PyObject *var_x = NULL;
    PyObject *var_nshape = NULL;
    PyObject *var_pos = NULL;
    PyObject *outline_0_var_x = NULL;
    PyObject *outline_1_var_dt = NULL;
    PyObject *outline_2_var_i = NULL;
    PyObject *outline_3_var_conv = NULL;
    PyObject *outline_4_var_field = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_inplace_assign_subscr_1__subscript = NULL;
    PyObject *tmp_inplace_assign_subscr_1__target = NULL;
    PyObject *tmp_inplace_assign_subscr_1__value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_listcomp_2__$0 = NULL;
    PyObject *tmp_listcomp_2__contraction = NULL;
    PyObject *tmp_listcomp_2__iter_value_0 = NULL;
    PyObject *tmp_listcomp_3__$0 = NULL;
    PyObject *tmp_listcomp_3__contraction = NULL;
    PyObject *tmp_listcomp_3__iter_value_0 = NULL;
    PyObject *tmp_listcomp_4__$0 = NULL;
    PyObject *tmp_listcomp_4__contraction = NULL;
    PyObject *tmp_listcomp_4__iter_value_0 = NULL;
    PyObject *tmp_listcomp_5__$0 = NULL;
    PyObject *tmp_listcomp_5__contraction = NULL;
    PyObject *tmp_listcomp_5__iter_value_0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    struct Nuitka_FrameObject *frame_37c8b7601e04f4296f883e3b07a18f2f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    struct Nuitka_FrameObject *frame_7d11199c30bddbed92d6adf934ed4655_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_7d11199c30bddbed92d6adf934ed4655_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_preserved_type_3;
    PyObject *exception_preserved_value_3;
    PyTracebackObject *exception_preserved_tb_3;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_preserved_type_4;
    PyObject *exception_preserved_value_4;
    PyTracebackObject *exception_preserved_tb_4;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    struct Nuitka_FrameObject *frame_d674f5feb9cc6b63d0df17f39beb8ca5_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    static struct Nuitka_FrameObject *cache_frame_d674f5feb9cc6b63d0df17f39beb8ca5_3 = NULL;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    struct Nuitka_FrameObject *frame_86b569234a1c18e85201eb491c5cbd83_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    static struct Nuitka_FrameObject *cache_frame_86b569234a1c18e85201eb491c5cbd83_4 = NULL;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_preserved_type_5;
    PyObject *exception_preserved_value_5;
    PyTracebackObject *exception_preserved_tb_5;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    struct Nuitka_FrameObject *frame_7d3bb6349ea2ac447e1452609ac7a230_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    static struct Nuitka_FrameObject *cache_frame_7d3bb6349ea2ac447e1452609ac7a230_5 = NULL;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *exception_preserved_type_6;
    PyObject *exception_preserved_value_6;
    PyTracebackObject *exception_preserved_tb_6;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *tmp_return_value = NULL;
    struct Nuitka_FrameObject *frame_1b8dda8e313cdb8b11620930481ca640_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    static struct Nuitka_FrameObject *cache_frame_1b8dda8e313cdb8b11620930481ca640_6 = NULL;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    static struct Nuitka_FrameObject *cache_frame_37c8b7601e04f4296f883e3b07a18f2f = NULL;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_37c8b7601e04f4296f883e3b07a18f2f)) {
        Py_XDECREF(cache_frame_37c8b7601e04f4296f883e3b07a18f2f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_37c8b7601e04f4296f883e3b07a18f2f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_37c8b7601e04f4296f883e3b07a18f2f = MAKE_FUNCTION_FRAME(codeobj_37c8b7601e04f4296f883e3b07a18f2f, module_numpy$lib$npyio, sizeof(nuitka_bool)+sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_37c8b7601e04f4296f883e3b07a18f2f->m_type_description == NULL);
    frame_37c8b7601e04f4296f883e3b07a18f2f = cache_frame_37c8b7601e04f4296f883e3b07a18f2f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_37c8b7601e04f4296f883e3b07a18f2f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_37c8b7601e04f4296f883e3b07a18f2f) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(Nuitka_Cell_GET(par_comments));
        tmp_compexpr_left_1 = Nuitka_Cell_GET(par_comments);
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 != tmp_compexpr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(Nuitka_Cell_GET(par_comments));
        tmp_isinstance_inst_1 = Nuitka_Cell_GET(par_comments);
        tmp_tuple_element_1 = (PyObject *)&PyUnicode_Type;
        tmp_isinstance_cls_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_isinstance_cls_1, 0, tmp_tuple_element_1);
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[142]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
        }

        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 919;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto tuple_build_exception_1;
        }
        PyTuple_SET_ITEM0(tmp_isinstance_cls_1, 1, tmp_tuple_element_1);
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_isinstance_cls_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 919;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_list_element_1;
        CHECK_OBJECT(Nuitka_Cell_GET(par_comments));
        tmp_list_element_1 = Nuitka_Cell_GET(par_comments);
        tmp_assign_source_1 = PyList_New(1);
        PyList_SET_ITEM0(tmp_assign_source_1, 0, tmp_list_element_1);
        {
            PyObject *old = Nuitka_Cell_GET(par_comments);
            PyCell_SET(par_comments, tmp_assign_source_1);
            Py_XDECREF(old);
        }

    }
    branch_no_2:;
    {
        PyObject *tmp_assign_source_2;
        // Tried code:
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_iter_arg_1;
            if (Nuitka_Cell_GET(par_comments) == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[143]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 921;
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                goto try_except_handler_2;
            }

            tmp_iter_arg_1 = Nuitka_Cell_GET(par_comments);
            tmp_assign_source_3 = MAKE_ITERATOR(tmp_iter_arg_1);
            if (tmp_assign_source_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 921;
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                goto try_except_handler_2;
            }
            assert(tmp_listcomp_1__$0 == NULL);
            tmp_listcomp_1__$0 = tmp_assign_source_3;
        }
        {
            PyObject *tmp_assign_source_4;
            tmp_assign_source_4 = PyList_New(0);
            assert(tmp_listcomp_1__contraction == NULL);
            tmp_listcomp_1__contraction = tmp_assign_source_4;
        }
        if (isFrameUnusable(cache_frame_7d11199c30bddbed92d6adf934ed4655_2)) {
            Py_XDECREF(cache_frame_7d11199c30bddbed92d6adf934ed4655_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_7d11199c30bddbed92d6adf934ed4655_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_7d11199c30bddbed92d6adf934ed4655_2 = MAKE_FUNCTION_FRAME(codeobj_7d11199c30bddbed92d6adf934ed4655, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_7d11199c30bddbed92d6adf934ed4655_2->m_type_description == NULL);
        frame_7d11199c30bddbed92d6adf934ed4655_2 = cache_frame_7d11199c30bddbed92d6adf934ed4655_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_7d11199c30bddbed92d6adf934ed4655_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_7d11199c30bddbed92d6adf934ed4655_2) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_5;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_5 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_5 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 921;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_5;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_6;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_assign_source_6 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_x;
                outline_0_var_x = tmp_assign_source_6;
                Py_INCREF(outline_0_var_x);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_args_element_name_1;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            tmp_called_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[144]);

            if (unlikely(tmp_called_name_1 == NULL)) {
                tmp_called_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[144]);
            }

            if (tmp_called_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 921;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            CHECK_OBJECT(outline_0_var_x);
            tmp_args_element_name_1 = outline_0_var_x;
            frame_7d11199c30bddbed92d6adf934ed4655_2->m_frame.f_lineno = 921;
            tmp_append_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
            if (tmp_append_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 921;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            assert(PyList_Check(tmp_append_list_1));
            tmp_result = LIST_APPEND1(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 921;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 921;
            type_description_2 = "o";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_assign_source_2 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_assign_source_2);
        goto try_return_handler_3;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7d11199c30bddbed92d6adf934ed4655_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_7d11199c30bddbed92d6adf934ed4655_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7d11199c30bddbed92d6adf934ed4655_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7d11199c30bddbed92d6adf934ed4655_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7d11199c30bddbed92d6adf934ed4655_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7d11199c30bddbed92d6adf934ed4655_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7d11199c30bddbed92d6adf934ed4655_2,
            type_description_2,
            outline_0_var_x
        );


        // Release cached frame if used for exception.
        if (frame_7d11199c30bddbed92d6adf934ed4655_2 == cache_frame_7d11199c30bddbed92d6adf934ed4655_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_7d11199c30bddbed92d6adf934ed4655_2);
            cache_frame_7d11199c30bddbed92d6adf934ed4655_2 = NULL;
        }

        assertFrameObject(frame_7d11199c30bddbed92d6adf934ed4655_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto try_except_handler_2;
        skip_nested_handling_1:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF(outline_0_var_x);
        outline_0_var_x = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var_x);
        outline_0_var_x = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 921;
        goto frame_exception_exit_1;
        outline_result_1:;
        {
            PyObject *old = Nuitka_Cell_GET(par_comments);
            PyCell_SET(par_comments, tmp_assign_source_2);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_7;
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_iter_arg_2;
            CHECK_OBJECT(Nuitka_Cell_GET(par_comments));
            tmp_iter_arg_2 = Nuitka_Cell_GET(par_comments);
            tmp_assign_source_8 = MAKE_ITERATOR(tmp_iter_arg_2);
            if (tmp_assign_source_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 923;
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_genexpr_1__$0 == NULL);
            tmp_genexpr_1__$0 = tmp_assign_source_8;
        }
        // Tried code:
        {
            struct Nuitka_CellObject *tmp_closure_1[1];

            tmp_closure_1[0] = Nuitka_Cell_New0(tmp_genexpr_1__$0);

            tmp_assign_source_7 = MAKE_GENERATOR_numpy$lib$npyio$$$function__25_loadtxt$$$genexpr__1_genexpr(tmp_closure_1);

            goto try_return_handler_4;
        }
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_4:;
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;
        goto outline_result_2;
        // End of try:
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_2:;
        {
            PyObject *old = Nuitka_Cell_GET(par_comments);
            PyCell_SET(par_comments, tmp_assign_source_7);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_3;
        tmp_expression_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[145]);

        if (unlikely(tmp_expression_name_1 == NULL)) {
            tmp_expression_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[145]);
        }

        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 924;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[146]);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 924;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_instance_1 = mod_consts[147];
        CHECK_OBJECT(Nuitka_Cell_GET(par_comments));
        tmp_args_element_name_3 = Nuitka_Cell_GET(par_comments);
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 924;
        tmp_args_element_name_2 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[148], tmp_args_element_name_3);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 924;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 924;
        tmp_assign_source_9 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 924;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_regex_comments) == NULL);
        PyCell_SET(var_regex_comments, tmp_assign_source_9);

    }
    branch_no_1:;
    {
        bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT(Nuitka_Cell_GET(par_delimiter));
        tmp_compexpr_left_2 = Nuitka_Cell_GET(par_delimiter);
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_3 = (tmp_compexpr_left_2 != tmp_compexpr_right_2) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_name_3;
        PyObject *tmp_args_element_name_4;
        tmp_called_name_3 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[144]);

        if (unlikely(tmp_called_name_3 == NULL)) {
            tmp_called_name_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[144]);
        }

        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 927;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(Nuitka_Cell_GET(par_delimiter));
        tmp_args_element_name_4 = Nuitka_Cell_GET(par_delimiter);
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 927;
        tmp_assign_source_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_4);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 927;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = Nuitka_Cell_GET(par_delimiter);
            PyCell_SET(par_delimiter, tmp_assign_source_10);
            Py_XDECREF(old);
        }

    }
    branch_no_3:;
    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT(Nuitka_Cell_GET(par_converters));
        tmp_assign_source_11 = Nuitka_Cell_GET(par_converters);
        assert(var_user_converters == NULL);
        Py_INCREF(tmp_assign_source_11);
        var_user_converters = tmp_assign_source_11;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_tmp_condition_result_4_object_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(Nuitka_Cell_GET(par_encoding));
        tmp_compexpr_left_3 = Nuitka_Cell_GET(par_encoding);
        tmp_compexpr_right_3 = mod_consts[142];
        tmp_tmp_condition_result_4_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        if (tmp_tmp_condition_result_4_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 931;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_tmp_condition_result_4_object_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_4_object_1);

            exception_lineno = 931;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_4_object_1);
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_12;
        tmp_assign_source_12 = Py_None;
        {
            PyObject *old = Nuitka_Cell_GET(par_encoding);
            PyCell_SET(par_encoding, tmp_assign_source_12);
            Py_INCREF(tmp_assign_source_12);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_assign_source_13;
        tmp_assign_source_13 = NUITKA_BOOL_TRUE;
        var_byte_converters = tmp_assign_source_13;
    }
    goto branch_end_4;
    branch_no_4:;
    {
        nuitka_bool tmp_assign_source_14;
        tmp_assign_source_14 = NUITKA_BOOL_FALSE;
        var_byte_converters = tmp_assign_source_14;
    }
    branch_end_4:;
    {
        bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        CHECK_OBJECT(Nuitka_Cell_GET(par_usecols));
        tmp_compexpr_left_4 = Nuitka_Cell_GET(par_usecols);
        tmp_compexpr_right_4 = Py_None;
        tmp_condition_result_5 = (tmp_compexpr_left_4 != tmp_compexpr_right_4) ? true : false;
        if (tmp_condition_result_5 != false) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_list_arg_1;
        CHECK_OBJECT(Nuitka_Cell_GET(par_usecols));
        tmp_list_arg_1 = Nuitka_Cell_GET(par_usecols);
        tmp_assign_source_15 = MAKE_LIST(tmp_list_arg_1);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 940;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_5;
        }
        assert(var_usecols_as_list == NULL);
        var_usecols_as_list = tmp_assign_source_15;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_1, &exception_preserved_value_1, &exception_preserved_tb_1);

    if (exception_keeper_tb_3 == NULL) {
        exception_keeper_tb_3 = MAKE_TRACEBACK(frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_3);
    } else if (exception_keeper_lineno_3 != 0) {
        exception_keeper_tb_3 = ADD_TRACEBACK(exception_keeper_tb_3, frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_3);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_3, exception_keeper_tb_3);
    PUBLISH_EXCEPTION(&exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3);
    // Tried code:
    {
        bool tmp_condition_result_6;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        tmp_compexpr_left_5 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_5 = PyExc_TypeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_5, tmp_compexpr_right_5);
        assert(!(tmp_res == -1));
        tmp_condition_result_6 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_6 != false) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_list_element_2;
        CHECK_OBJECT(Nuitka_Cell_GET(par_usecols));
        tmp_list_element_2 = Nuitka_Cell_GET(par_usecols);
        tmp_assign_source_16 = PyList_New(1);
        PyList_SET_ITEM0(tmp_assign_source_16, 0, tmp_list_element_2);
        assert(var_usecols_as_list == NULL);
        var_usecols_as_list = tmp_assign_source_16;
    }
    goto branch_end_6;
    branch_no_6:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 939;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame) frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
    goto try_except_handler_6;
    branch_end_6:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    goto try_end_1;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_iter_arg_3;
        if (var_usecols_as_list == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[149]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 943;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_iter_arg_3 = var_usecols_as_list;
        tmp_assign_source_17 = MAKE_ITERATOR(tmp_iter_arg_3);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 943;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_17;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_18;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_2 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_18 = ITERATOR_NEXT(tmp_next_source_2);
        if (tmp_assign_source_18 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_2;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                exception_lineno = 943;
                goto try_except_handler_7;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_18;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_19;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_19 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_col_idx;
            var_col_idx = tmp_assign_source_19;
            Py_INCREF(var_col_idx);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_5;
        tmp_called_name_4 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[150]);

        if (unlikely(tmp_called_name_4 == NULL)) {
            tmp_called_name_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[150]);
        }

        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 945;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_8;
        }
        CHECK_OBJECT(var_col_idx);
        tmp_args_element_name_5 = var_col_idx;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 945;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_4, tmp_args_element_name_5);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 945;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_8;
        }
        Py_DECREF(tmp_call_result_1);
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 2.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_2, &exception_preserved_value_2, &exception_preserved_tb_2);

    if (exception_keeper_tb_5 == NULL) {
        exception_keeper_tb_5 = MAKE_TRACEBACK(frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_5);
    } else if (exception_keeper_lineno_5 != 0) {
        exception_keeper_tb_5 = ADD_TRACEBACK(exception_keeper_tb_5, frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_5);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_5, exception_keeper_tb_5);
    PUBLISH_EXCEPTION(&exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5);
    // Tried code:
    {
        bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        tmp_compexpr_left_6 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_6 = PyExc_TypeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_6, tmp_compexpr_right_6);
        assert(!(tmp_res == -1));
        tmp_condition_result_7 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_7 != false) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_assign_source_20;
        tmp_assign_source_20 = EXC_VALUE(PyThreadState_GET());
        {
            PyObject *old = var_e;
            var_e = tmp_assign_source_20;
            Py_INCREF(var_e);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_assattr_target_1;
        tmp_left_name_1 = mod_consts[151];
        if (var_col_idx == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[152]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 950;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_10;
        }

        tmp_type_arg_1 = var_col_idx;
        tmp_right_name_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        if (tmp_right_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 950;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_10;
        }
        tmp_tuple_element_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 950;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_10;
        }
        tmp_assattr_value_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assattr_value_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(var_e);
        tmp_assattr_target_1 = var_e;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[84], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 947;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_10;
        }
    }
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 952;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame) frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
    goto try_except_handler_10;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_e);
    var_e = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_9;
    // End of try:
    goto branch_end_7;
    branch_no_7:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 944;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame) frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
    goto try_except_handler_9;
    branch_end_7:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 2.
    SET_CURRENT_EXCEPTION(exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2);

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto try_except_handler_7;
    // End of try:
    // End of try:
    try_end_3:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 943;
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto try_except_handler_7;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        PyObject *tmp_assign_source_21;
        if (var_usecols_as_list == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[149]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 954;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_assign_source_21 = var_usecols_as_list;
        {
            PyObject *old = Nuitka_Cell_GET(par_usecols);
            PyCell_SET(par_usecols, tmp_assign_source_21);
            Py_INCREF(tmp_assign_source_21);
            Py_XDECREF(old);
        }

    }
    branch_no_5:;
    {
        nuitka_bool tmp_assign_source_22;
        tmp_assign_source_22 = NUITKA_BOOL_FALSE;
        var_fown = tmp_assign_source_22;
    }
    // Tried code:
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        CHECK_OBJECT(par_fname);
        tmp_isinstance_inst_2 = par_fname;
        tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[153]);

        if (unlikely(tmp_isinstance_cls_2 == NULL)) {
            tmp_isinstance_cls_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[153]);
        }

        if (tmp_isinstance_cls_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 958;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 958;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        tmp_condition_result_8 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_called_name_5;
        PyObject *tmp_args_element_name_6;
        tmp_called_name_5 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[14]);

        if (unlikely(tmp_called_name_5 == NULL)) {
            tmp_called_name_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[14]);
        }

        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 959;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        CHECK_OBJECT(par_fname);
        tmp_args_element_name_6 = par_fname;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 959;
        tmp_assign_source_23 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_5, tmp_args_element_name_6);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 959;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        {
            PyObject *old = par_fname;
            assert(old != NULL);
            par_fname = tmp_assign_source_23;
            Py_DECREF(old);
        }

    }
    branch_no_8:;
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_called_name_6;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_7;
        int tmp_truth_name_2;
        tmp_called_name_6 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[108]);

        if (unlikely(tmp_called_name_6 == NULL)) {
            tmp_called_name_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[108]);
        }

        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 960;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        CHECK_OBJECT(par_fname);
        tmp_args_element_name_7 = par_fname;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 960;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_6, tmp_args_element_name_7);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 960;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_call_result_2);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_2);

            exception_lineno = 960;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        tmp_condition_result_9 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_2);
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_called_name_7;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        tmp_expression_name_4 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_4 == NULL)) {
            tmp_expression_name_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 961;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        tmp_expression_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, mod_consts[154]);
        if (tmp_expression_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 961;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        tmp_expression_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[155]);
        Py_DECREF(tmp_expression_name_3);
        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 961;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[39]);
        Py_DECREF(tmp_expression_name_2);
        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 961;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        CHECK_OBJECT(par_fname);
        tmp_kw_call_arg_value_0_1 = par_fname;
        tmp_kw_call_arg_value_1_1 = mod_consts[156];
        if (Nuitka_Cell_GET(par_encoding) == NULL) {
            Py_DECREF(tmp_called_name_7);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 961;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }

        tmp_kw_call_dict_value_0_1 = Nuitka_Cell_GET(par_encoding);
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 961;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tmp_called_name_7, args, kw_values, mod_consts[157]);
        }

        Py_DECREF(tmp_called_name_7);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 961;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        assert(Nuitka_Cell_GET(var_fh) == NULL);
        PyCell_SET(var_fh, tmp_assign_source_24);

    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        CHECK_OBJECT(Nuitka_Cell_GET(var_fh));
        tmp_getattr_target_1 = Nuitka_Cell_GET(var_fh);
        tmp_getattr_attr_1 = mod_consts[51];
        tmp_getattr_default_1 = mod_consts[158];
        tmp_assign_source_25 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 962;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        assert(Nuitka_Cell_GET(var_fencoding) == NULL);
        PyCell_SET(var_fencoding, tmp_assign_source_25);

    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_iter_arg_4;
        CHECK_OBJECT(Nuitka_Cell_GET(var_fh));
        tmp_iter_arg_4 = Nuitka_Cell_GET(var_fh);
        tmp_assign_source_26 = MAKE_ITERATOR(tmp_iter_arg_4);
        if (tmp_assign_source_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        {
            PyObject *old = Nuitka_Cell_GET(var_fh);
            PyCell_SET(var_fh, tmp_assign_source_26);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_assign_source_27;
        tmp_assign_source_27 = NUITKA_BOOL_TRUE;
        var_fown = tmp_assign_source_27;
    }
    goto branch_end_9;
    branch_no_9:;
    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_iter_arg_5;
        CHECK_OBJECT(par_fname);
        tmp_iter_arg_5 = par_fname;
        tmp_assign_source_28 = MAKE_ITERATOR(tmp_iter_arg_5);
        if (tmp_assign_source_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 966;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        assert(Nuitka_Cell_GET(var_fh) == NULL);
        PyCell_SET(var_fh, tmp_assign_source_28);

    }
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_getattr_target_2;
        PyObject *tmp_getattr_attr_2;
        PyObject *tmp_getattr_default_2;
        CHECK_OBJECT(par_fname);
        tmp_getattr_target_2 = par_fname;
        tmp_getattr_attr_2 = mod_consts[51];
        tmp_getattr_default_2 = mod_consts[158];
        tmp_assign_source_29 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2);
        if (tmp_assign_source_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 967;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_11;
        }
        assert(Nuitka_Cell_GET(var_fencoding) == NULL);
        PyCell_SET(var_fencoding, tmp_assign_source_29);

    }
    branch_end_9:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 3.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_3, &exception_preserved_value_3, &exception_preserved_tb_3);

    if (exception_keeper_tb_9 == NULL) {
        exception_keeper_tb_9 = MAKE_TRACEBACK(frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_9);
    } else if (exception_keeper_lineno_9 != 0) {
        exception_keeper_tb_9 = ADD_TRACEBACK(exception_keeper_tb_9, frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_9);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_9, exception_keeper_tb_9);
    PUBLISH_EXCEPTION(&exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9);
    // Tried code:
    {
        bool tmp_condition_result_10;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        tmp_compexpr_left_7 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_7 = PyExc_TypeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_7, tmp_compexpr_right_7);
        assert(!(tmp_res == -1));
        tmp_condition_result_10 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_10 != false) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = mod_consts[159];
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 969;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 969;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto try_except_handler_12;
    }
    goto branch_end_10;
    branch_no_10:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 957;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame) frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
    goto try_except_handler_12;
    branch_end_10:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 3.
    SET_CURRENT_EXCEPTION(exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3);

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_5:;
    {
        bool tmp_condition_result_11;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        if (Nuitka_Cell_GET(par_encoding) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 972;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_8 = Nuitka_Cell_GET(par_encoding);
        tmp_compexpr_right_8 = Py_None;
        tmp_condition_result_11 = (tmp_compexpr_left_8 != tmp_compexpr_right_8) ? true : false;
        if (tmp_condition_result_11 != false) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_assign_source_30;
        if (Nuitka_Cell_GET(par_encoding) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 973;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_assign_source_30 = Nuitka_Cell_GET(par_encoding);
        {
            PyObject *old = Nuitka_Cell_GET(var_fencoding);
            PyCell_SET(var_fencoding, tmp_assign_source_30);
            Py_INCREF(tmp_assign_source_30);
            Py_XDECREF(old);
        }

    }
    goto branch_end_11;
    branch_no_11:;
    {
        bool tmp_condition_result_12;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        if (Nuitka_Cell_GET(var_fencoding) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[160]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 976;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_9 = Nuitka_Cell_GET(var_fencoding);
        tmp_compexpr_right_9 = Py_None;
        tmp_condition_result_12 = (tmp_compexpr_left_9 == tmp_compexpr_right_9) ? true : false;
        if (tmp_condition_result_12 != false) {
            goto branch_yes_12;
        } else {
            goto branch_no_12;
        }
    }
    branch_yes_12:;
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_arg_name_1;
        PyObject *tmp_locals_arg_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = mod_consts[161];
        tmp_globals_arg_name_1 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = mod_consts[16];
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 977;
        tmp_assign_source_31 = IMPORT_MODULE5(tmp_name_name_1, tmp_globals_arg_name_1, tmp_locals_arg_name_1, tmp_fromlist_name_1, tmp_level_name_1);
        if (tmp_assign_source_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 977;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        assert(var_locale == NULL);
        var_locale = tmp_assign_source_31;
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_locale);
        tmp_called_instance_2 = var_locale;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 978;
        tmp_assign_source_32 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, mod_consts[162]);
        if (tmp_assign_source_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 978;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = Nuitka_Cell_GET(var_fencoding);
            PyCell_SET(var_fencoding, tmp_assign_source_32);
            Py_XDECREF(old);
        }

    }
    branch_no_12:;
    branch_end_11:;
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_called_name_8;
        PyObject *tmp_args_element_name_8;
        tmp_called_name_8 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[163]);

        if (unlikely(tmp_called_name_8 == NULL)) {
            tmp_called_name_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[163]);
        }

        if (tmp_called_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 981;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }


        tmp_args_element_name_8 = MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__1_flatten_dtype_internal();

        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 981;
        tmp_assign_source_33 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_8, tmp_args_element_name_8);
        Py_DECREF(tmp_args_element_name_8);
        if (tmp_assign_source_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 981;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        assert(var_flatten_dtype_internal == NULL);
        var_flatten_dtype_internal = tmp_assign_source_33;
    }
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_called_name_9;
        PyObject *tmp_args_element_name_9;
        tmp_called_name_9 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[163]);

        if (unlikely(tmp_called_name_9 == NULL)) {
            tmp_called_name_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[163]);
        }

        if (tmp_called_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1011;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }


        tmp_args_element_name_9 = MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__2_pack_items();

        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1011;
        tmp_assign_source_34 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_9, tmp_args_element_name_9);
        Py_DECREF(tmp_args_element_name_9);
        if (tmp_assign_source_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1011;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_pack_items) == NULL);
        PyCell_SET(var_pack_items, tmp_assign_source_34);

    }
    {
        PyObject *tmp_assign_source_35;
        struct Nuitka_CellObject *tmp_closure_2[4];

        tmp_closure_2[0] = par_comments;
        Py_INCREF(tmp_closure_2[0]);
        tmp_closure_2[1] = par_delimiter;
        Py_INCREF(tmp_closure_2[1]);
        tmp_closure_2[2] = par_encoding;
        Py_INCREF(tmp_closure_2[2]);
        tmp_closure_2[3] = var_regex_comments;
        Py_INCREF(tmp_closure_2[3]);

        tmp_assign_source_35 = MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__3_split_line(tmp_closure_2);

        assert(Nuitka_Cell_GET(var_split_line) == NULL);
        PyCell_SET(var_split_line, tmp_assign_source_35);

    }
    {
        PyObject *tmp_assign_source_36;
        struct Nuitka_CellObject *tmp_closure_3[10];

        tmp_closure_3[0] = var_N;
        Py_INCREF(tmp_closure_3[0]);
        tmp_closure_3[1] = par_converters;
        Py_INCREF(tmp_closure_3[1]);
        tmp_closure_3[2] = var_fh;
        Py_INCREF(tmp_closure_3[2]);
        tmp_closure_3[3] = var_first_line;
        Py_INCREF(tmp_closure_3[3]);
        tmp_closure_3[4] = par_max_rows;
        Py_INCREF(tmp_closure_3[4]);
        tmp_closure_3[5] = var_pack_items;
        Py_INCREF(tmp_closure_3[5]);
        tmp_closure_3[6] = var_packing;
        Py_INCREF(tmp_closure_3[6]);
        tmp_closure_3[7] = par_skiprows;
        Py_INCREF(tmp_closure_3[7]);
        tmp_closure_3[8] = var_split_line;
        Py_INCREF(tmp_closure_3[8]);
        tmp_closure_3[9] = par_usecols;
        Py_INCREF(tmp_closure_3[9]);

        tmp_assign_source_36 = MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data(tmp_closure_3);

        assert(var_read_data == NULL);
        var_read_data = tmp_assign_source_36;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_args_element_name_10;
        tmp_called_instance_3 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_called_instance_3 == NULL)) {
            tmp_called_instance_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        CHECK_OBJECT(par_dtype);
        tmp_args_element_name_10 = par_dtype;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1080;
        tmp_assign_source_37 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_3, mod_consts[176], tmp_args_element_name_10);
        if (tmp_assign_source_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        {
            PyObject *old = par_dtype;
            assert(old != NULL);
            par_dtype = tmp_assign_source_37;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_called_name_10;
        PyObject *tmp_args_element_name_11;
        tmp_called_name_10 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[177]);

        if (unlikely(tmp_called_name_10 == NULL)) {
            tmp_called_name_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[177]);
        }

        if (tmp_called_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1081;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        CHECK_OBJECT(par_dtype);
        tmp_args_element_name_11 = par_dtype;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1081;
        tmp_assign_source_38 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_10, tmp_args_element_name_11);
        if (tmp_assign_source_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1081;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        assert(var_defconv == NULL);
        var_defconv = tmp_assign_source_38;
    }
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_iter_arg_6;
        PyObject *tmp_xrange_low_1;
        CHECK_OBJECT(Nuitka_Cell_GET(par_skiprows));
        tmp_xrange_low_1 = Nuitka_Cell_GET(par_skiprows);
        tmp_iter_arg_6 = BUILTIN_XRANGE1(tmp_xrange_low_1);
        if (tmp_iter_arg_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1084;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        tmp_assign_source_39 = MAKE_ITERATOR(tmp_iter_arg_6);
        Py_DECREF(tmp_iter_arg_6);
        if (tmp_assign_source_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1084;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        assert(tmp_for_loop_2__for_iterator == NULL);
        tmp_for_loop_2__for_iterator = tmp_assign_source_39;
    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_40;
        CHECK_OBJECT(tmp_for_loop_2__for_iterator);
        tmp_next_source_3 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_40 = ITERATOR_NEXT(tmp_next_source_3);
        if (tmp_assign_source_40 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_3;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                exception_lineno = 1084;
                goto try_except_handler_14;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_40;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_41;
        CHECK_OBJECT(tmp_for_loop_2__iter_value);
        tmp_assign_source_41 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_41;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_value_name_1;
        PyObject *tmp_next_value_1;
        if (Nuitka_Cell_GET(var_fh) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[178]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1085;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_14;
        }

        tmp_value_name_1 = Nuitka_Cell_GET(var_fh);
        tmp_next_value_1 = ITERATOR_NEXT(tmp_value_name_1);
        if (tmp_next_value_1 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            exception_lineno = 1085;
            goto try_except_handler_14;
        }
        Py_DECREF(tmp_next_value_1);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1084;
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto try_except_handler_14;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto try_except_handler_13;
    // End of try:
    try_end_6:;
    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;
    {
        PyObject *tmp_assign_source_42;
        tmp_assign_source_42 = Py_None;
        assert(var_first_vals == NULL);
        Py_INCREF(tmp_assign_source_42);
        var_first_vals = tmp_assign_source_42;
    }
    // Tried code:
    loop_start_4:;
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_operand_name_2;
        if (var_first_vals == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[179]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1091;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_15;
        }

        tmp_operand_name_2 = var_first_vals;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1091;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_15;
        }
        tmp_operand_name_1 = (tmp_res == 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1091;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_15;
        }
        tmp_condition_result_13 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    goto loop_end_4;
    branch_no_13:;
    {
        PyObject *tmp_assign_source_43;
        PyObject *tmp_value_name_2;
        if (Nuitka_Cell_GET(var_fh) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[178]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1092;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_15;
        }

        tmp_value_name_2 = Nuitka_Cell_GET(var_fh);
        tmp_assign_source_43 = ITERATOR_NEXT(tmp_value_name_2);
        if (tmp_assign_source_43 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            exception_lineno = 1092;
            goto try_except_handler_15;
        }
        {
            PyObject *old = Nuitka_Cell_GET(var_first_line);
            PyCell_SET(var_first_line, tmp_assign_source_43);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_44;
        PyObject *tmp_called_name_11;
        PyObject *tmp_args_element_name_12;
        if (Nuitka_Cell_GET(var_split_line) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[171]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1093;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_15;
        }

        tmp_called_name_11 = Nuitka_Cell_GET(var_split_line);
        CHECK_OBJECT(Nuitka_Cell_GET(var_first_line));
        tmp_args_element_name_12 = Nuitka_Cell_GET(var_first_line);
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1093;
        tmp_assign_source_44 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_11, tmp_args_element_name_12);
        if (tmp_assign_source_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1093;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_15;
        }
        {
            PyObject *old = var_first_vals;
            var_first_vals = tmp_assign_source_44;
            Py_XDECREF(old);
        }

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1091;
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto try_except_handler_15;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 4.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_4, &exception_preserved_value_4, &exception_preserved_tb_4);

    if (exception_keeper_tb_12 == NULL) {
        exception_keeper_tb_12 = MAKE_TRACEBACK(frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_12);
    } else if (exception_keeper_lineno_12 != 0) {
        exception_keeper_tb_12 = ADD_TRACEBACK(exception_keeper_tb_12, frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_12);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_12, &exception_keeper_value_12, &exception_keeper_tb_12);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_12, exception_keeper_tb_12);
    PUBLISH_EXCEPTION(&exception_keeper_type_12, &exception_keeper_value_12, &exception_keeper_tb_12);
    // Tried code:
    {
        bool tmp_condition_result_14;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        tmp_compexpr_left_10 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_10 = PyExc_StopIteration;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_10, tmp_compexpr_right_10);
        assert(!(tmp_res == -1));
        tmp_condition_result_14 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_14 != false) {
            goto branch_yes_14;
        } else {
            goto branch_no_14;
        }
    }
    branch_yes_14:;
    {
        PyObject *tmp_assign_source_45;
        tmp_assign_source_45 = mod_consts[180];
        {
            PyObject *old = Nuitka_Cell_GET(var_first_line);
            PyCell_SET(var_first_line, tmp_assign_source_45);
            Py_INCREF(tmp_assign_source_45);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_46;
        tmp_assign_source_46 = PyList_New(0);
        {
            PyObject *old = var_first_vals;
            var_first_vals = tmp_assign_source_46;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_12;
        PyObject *tmp_expression_name_5;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_kwargs_name_1;
        tmp_expression_name_5 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_name_5 == NULL)) {
            tmp_expression_name_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1098;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_16;
        }
        tmp_called_name_12 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, mod_consts[1]);
        if (tmp_called_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1098;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_16;
        }
        tmp_left_name_2 = mod_consts[181];
        CHECK_OBJECT(par_fname);
        tmp_right_name_2 = par_fname;
        tmp_tuple_element_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_2, tmp_right_name_2);
        if (tmp_tuple_element_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_12);

            exception_lineno = 1098;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_16;
        }
        tmp_args_name_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_name_1, 0, tmp_tuple_element_3);
        tmp_kwargs_name_1 = PyDict_Copy(mod_consts[4]);
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1098;
        tmp_call_result_3 = CALL_FUNCTION(tmp_called_name_12, tmp_args_name_1, tmp_kwargs_name_1);
        Py_DECREF(tmp_called_name_12);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kwargs_name_1);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1098;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_16;
        }
        Py_DECREF(tmp_call_result_3);
    }
    goto branch_end_14;
    branch_no_14:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1090;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame) frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
    goto try_except_handler_16;
    branch_end_14:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 4.
    SET_CURRENT_EXCEPTION(exception_preserved_type_4, exception_preserved_value_4, exception_preserved_tb_4);

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto try_except_handler_13;
    // End of try:
    try_end_8:;
    // Restore previous exception id 4.
    SET_CURRENT_EXCEPTION(exception_preserved_type_4, exception_preserved_value_4, exception_preserved_tb_4);

    goto try_end_7;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_7:;
    {
        PyObject *tmp_assign_source_47;
        PyObject *tmp_len_arg_1;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        if (Nuitka_Cell_GET(par_usecols) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1099;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }

        tmp_or_left_value_1 = Nuitka_Cell_GET(par_usecols);
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1099;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        if (var_first_vals == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[179]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1099;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }

        tmp_or_right_value_1 = var_first_vals;
        tmp_len_arg_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_len_arg_1 = tmp_or_left_value_1;
        or_end_1:;
        tmp_assign_source_47 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1099;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        assert(Nuitka_Cell_GET(var_N) == NULL);
        PyCell_SET(var_N, tmp_assign_source_47);

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_48;
        PyObject *tmp_iter_arg_7;
        PyObject *tmp_called_name_13;
        PyObject *tmp_args_element_name_13;
        CHECK_OBJECT(var_flatten_dtype_internal);
        tmp_called_name_13 = var_flatten_dtype_internal;
        CHECK_OBJECT(par_dtype);
        tmp_args_element_name_13 = par_dtype;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1101;
        tmp_iter_arg_7 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_13, tmp_args_element_name_13);
        if (tmp_iter_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1101;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_17;
        }
        tmp_assign_source_48 = MAKE_ITERATOR(tmp_iter_arg_7);
        Py_DECREF(tmp_iter_arg_7);
        if (tmp_assign_source_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1101;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_17;
        }
        assert(tmp_tuple_unpack_1__source_iter == NULL);
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_48;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_49 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_49 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            exception_lineno = 1101;
            goto try_except_handler_18;
        }
        assert(tmp_tuple_unpack_1__element_1 == NULL);
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_49;
    }
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_50 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_50 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            exception_lineno = 1101;
            goto try_except_handler_18;
        }
        assert(tmp_tuple_unpack_1__element_2 == NULL);
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_50;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                    exception_lineno = 1101;
                    goto try_except_handler_18;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            exception_lineno = 1101;
            goto try_except_handler_18;
        }
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto try_except_handler_17;
    // End of try:
    try_end_9:;
    goto try_end_10;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto try_except_handler_13;
    // End of try:
    try_end_10:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_51;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_51 = tmp_tuple_unpack_1__element_1;
        assert(var_dtype_types == NULL);
        Py_INCREF(tmp_assign_source_51);
        var_dtype_types = tmp_assign_source_51;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_52;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_52 = tmp_tuple_unpack_1__element_2;
        assert(Nuitka_Cell_GET(var_packing) == NULL);
        Py_INCREF(tmp_assign_source_52);
        PyCell_SET(var_packing, tmp_assign_source_52);

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        bool tmp_condition_result_15;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_tmp_condition_result_15_object_1;
        CHECK_OBJECT(var_dtype_types);
        tmp_len_arg_2 = var_dtype_types;
        tmp_compexpr_left_11 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_compexpr_left_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1102;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        tmp_compexpr_right_11 = mod_consts[63];
        tmp_tmp_condition_result_15_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_11, tmp_compexpr_right_11);
        Py_DECREF(tmp_compexpr_left_11);
        assert(!(tmp_tmp_condition_result_15_object_1 == NULL));
        tmp_condition_result_15 = CHECK_IF_TRUE(tmp_tmp_condition_result_15_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_15_object_1);
        if (tmp_condition_result_15 != false) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
    }
    branch_yes_15:;
    {
        PyObject *tmp_assign_source_53;
        // Tried code:
        {
            PyObject *tmp_assign_source_54;
            PyObject *tmp_iter_arg_8;
            CHECK_OBJECT(var_dtype_types);
            tmp_iter_arg_8 = var_dtype_types;
            tmp_assign_source_54 = MAKE_ITERATOR(tmp_iter_arg_8);
            if (tmp_assign_source_54 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1105;
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                goto try_except_handler_19;
            }
            assert(tmp_listcomp_2__$0 == NULL);
            tmp_listcomp_2__$0 = tmp_assign_source_54;
        }
        {
            PyObject *tmp_assign_source_55;
            tmp_assign_source_55 = PyList_New(0);
            assert(tmp_listcomp_2__contraction == NULL);
            tmp_listcomp_2__contraction = tmp_assign_source_55;
        }
        if (isFrameUnusable(cache_frame_d674f5feb9cc6b63d0df17f39beb8ca5_3)) {
            Py_XDECREF(cache_frame_d674f5feb9cc6b63d0df17f39beb8ca5_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_d674f5feb9cc6b63d0df17f39beb8ca5_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_d674f5feb9cc6b63d0df17f39beb8ca5_3 = MAKE_FUNCTION_FRAME(codeobj_d674f5feb9cc6b63d0df17f39beb8ca5, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_d674f5feb9cc6b63d0df17f39beb8ca5_3->m_type_description == NULL);
        frame_d674f5feb9cc6b63d0df17f39beb8ca5_3 = cache_frame_d674f5feb9cc6b63d0df17f39beb8ca5_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_d674f5feb9cc6b63d0df17f39beb8ca5_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_d674f5feb9cc6b63d0df17f39beb8ca5_3) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_5:;
        {
            PyObject *tmp_next_source_4;
            PyObject *tmp_assign_source_56;
            CHECK_OBJECT(tmp_listcomp_2__$0);
            tmp_next_source_4 = tmp_listcomp_2__$0;
            tmp_assign_source_56 = ITERATOR_NEXT(tmp_next_source_4);
            if (tmp_assign_source_56 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_5;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 1105;
                    goto try_except_handler_20;
                }
            }

            {
                PyObject *old = tmp_listcomp_2__iter_value_0;
                tmp_listcomp_2__iter_value_0 = tmp_assign_source_56;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_57;
            CHECK_OBJECT(tmp_listcomp_2__iter_value_0);
            tmp_assign_source_57 = tmp_listcomp_2__iter_value_0;
            {
                PyObject *old = outline_1_var_dt;
                outline_1_var_dt = tmp_assign_source_57;
                Py_INCREF(outline_1_var_dt);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_2;
            PyObject *tmp_append_value_2;
            PyObject *tmp_called_name_14;
            PyObject *tmp_args_element_name_14;
            CHECK_OBJECT(tmp_listcomp_2__contraction);
            tmp_append_list_2 = tmp_listcomp_2__contraction;
            tmp_called_name_14 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[177]);

            if (unlikely(tmp_called_name_14 == NULL)) {
                tmp_called_name_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[177]);
            }

            if (tmp_called_name_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1105;
                type_description_2 = "o";
                goto try_except_handler_20;
            }
            CHECK_OBJECT(outline_1_var_dt);
            tmp_args_element_name_14 = outline_1_var_dt;
            frame_d674f5feb9cc6b63d0df17f39beb8ca5_3->m_frame.f_lineno = 1105;
            tmp_append_value_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_14, tmp_args_element_name_14);
            if (tmp_append_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1105;
                type_description_2 = "o";
                goto try_except_handler_20;
            }
            assert(PyList_Check(tmp_append_list_2));
            tmp_result = LIST_APPEND1(tmp_append_list_2, tmp_append_value_2);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1105;
                type_description_2 = "o";
                goto try_except_handler_20;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1105;
            type_description_2 = "o";
            goto try_except_handler_20;
        }
        goto loop_start_5;
        loop_end_5:;
        CHECK_OBJECT(tmp_listcomp_2__contraction);
        tmp_assign_source_53 = tmp_listcomp_2__contraction;
        Py_INCREF(tmp_assign_source_53);
        goto try_return_handler_20;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_20:;
        CHECK_OBJECT(tmp_listcomp_2__$0);
        Py_DECREF(tmp_listcomp_2__$0);
        tmp_listcomp_2__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_2__contraction);
        Py_DECREF(tmp_listcomp_2__contraction);
        tmp_listcomp_2__contraction = NULL;
        Py_XDECREF(tmp_listcomp_2__iter_value_0);
        tmp_listcomp_2__iter_value_0 = NULL;
        goto frame_return_exit_3;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_2__$0);
        Py_DECREF(tmp_listcomp_2__$0);
        tmp_listcomp_2__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_2__contraction);
        Py_DECREF(tmp_listcomp_2__contraction);
        tmp_listcomp_2__contraction = NULL;
        Py_XDECREF(tmp_listcomp_2__iter_value_0);
        tmp_listcomp_2__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto frame_exception_exit_3;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d674f5feb9cc6b63d0df17f39beb8ca5_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_return_exit_3:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_d674f5feb9cc6b63d0df17f39beb8ca5_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_19;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d674f5feb9cc6b63d0df17f39beb8ca5_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d674f5feb9cc6b63d0df17f39beb8ca5_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d674f5feb9cc6b63d0df17f39beb8ca5_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d674f5feb9cc6b63d0df17f39beb8ca5_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d674f5feb9cc6b63d0df17f39beb8ca5_3,
            type_description_2,
            outline_1_var_dt
        );


        // Release cached frame if used for exception.
        if (frame_d674f5feb9cc6b63d0df17f39beb8ca5_3 == cache_frame_d674f5feb9cc6b63d0df17f39beb8ca5_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_d674f5feb9cc6b63d0df17f39beb8ca5_3);
            cache_frame_d674f5feb9cc6b63d0df17f39beb8ca5_3 = NULL;
        }

        assertFrameObject(frame_d674f5feb9cc6b63d0df17f39beb8ca5_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto try_except_handler_19;
        skip_nested_handling_2:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_19:;
        Py_XDECREF(outline_1_var_dt);
        outline_1_var_dt = NULL;
        goto outline_result_3;
        // Exception handler code:
        try_except_handler_19:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_1_var_dt);
        outline_1_var_dt = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;
        exception_lineno = exception_keeper_lineno_17;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 1105;
        goto try_except_handler_13;
        outline_result_3:;
        {
            PyObject *old = Nuitka_Cell_GET(par_converters);
            PyCell_SET(par_converters, tmp_assign_source_53);
            Py_XDECREF(old);
        }

    }
    goto branch_end_15;
    branch_no_15:;
    {
        PyObject *tmp_assign_source_58;
        // Tried code:
        {
            PyObject *tmp_assign_source_59;
            PyObject *tmp_iter_arg_9;
            PyObject *tmp_xrange_low_2;
            CHECK_OBJECT(Nuitka_Cell_GET(var_N));
            tmp_xrange_low_2 = Nuitka_Cell_GET(var_N);
            tmp_iter_arg_9 = BUILTIN_XRANGE1(tmp_xrange_low_2);
            if (tmp_iter_arg_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1108;
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                goto try_except_handler_21;
            }
            tmp_assign_source_59 = MAKE_ITERATOR(tmp_iter_arg_9);
            Py_DECREF(tmp_iter_arg_9);
            if (tmp_assign_source_59 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1108;
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                goto try_except_handler_21;
            }
            assert(tmp_listcomp_3__$0 == NULL);
            tmp_listcomp_3__$0 = tmp_assign_source_59;
        }
        {
            PyObject *tmp_assign_source_60;
            tmp_assign_source_60 = PyList_New(0);
            assert(tmp_listcomp_3__contraction == NULL);
            tmp_listcomp_3__contraction = tmp_assign_source_60;
        }
        if (isFrameUnusable(cache_frame_86b569234a1c18e85201eb491c5cbd83_4)) {
            Py_XDECREF(cache_frame_86b569234a1c18e85201eb491c5cbd83_4);

#if _DEBUG_REFCOUNTS
            if (cache_frame_86b569234a1c18e85201eb491c5cbd83_4 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_86b569234a1c18e85201eb491c5cbd83_4 = MAKE_FUNCTION_FRAME(codeobj_86b569234a1c18e85201eb491c5cbd83, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_86b569234a1c18e85201eb491c5cbd83_4->m_type_description == NULL);
        frame_86b569234a1c18e85201eb491c5cbd83_4 = cache_frame_86b569234a1c18e85201eb491c5cbd83_4;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_86b569234a1c18e85201eb491c5cbd83_4);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_86b569234a1c18e85201eb491c5cbd83_4) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_6:;
        {
            PyObject *tmp_next_source_5;
            PyObject *tmp_assign_source_61;
            CHECK_OBJECT(tmp_listcomp_3__$0);
            tmp_next_source_5 = tmp_listcomp_3__$0;
            tmp_assign_source_61 = ITERATOR_NEXT(tmp_next_source_5);
            if (tmp_assign_source_61 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_6;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 1108;
                    goto try_except_handler_22;
                }
            }

            {
                PyObject *old = tmp_listcomp_3__iter_value_0;
                tmp_listcomp_3__iter_value_0 = tmp_assign_source_61;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_62;
            CHECK_OBJECT(tmp_listcomp_3__iter_value_0);
            tmp_assign_source_62 = tmp_listcomp_3__iter_value_0;
            {
                PyObject *old = outline_2_var_i;
                outline_2_var_i = tmp_assign_source_62;
                Py_INCREF(outline_2_var_i);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_3;
            PyObject *tmp_append_value_3;
            CHECK_OBJECT(tmp_listcomp_3__contraction);
            tmp_append_list_3 = tmp_listcomp_3__contraction;
            if (var_defconv == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[183]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1108;
                type_description_2 = "oo";
                goto try_except_handler_22;
            }

            tmp_append_value_3 = var_defconv;
            assert(PyList_Check(tmp_append_list_3));
            tmp_result = LIST_APPEND0(tmp_append_list_3, tmp_append_value_3);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1108;
                type_description_2 = "oo";
                goto try_except_handler_22;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1108;
            type_description_2 = "oo";
            goto try_except_handler_22;
        }
        goto loop_start_6;
        loop_end_6:;
        CHECK_OBJECT(tmp_listcomp_3__contraction);
        tmp_assign_source_58 = tmp_listcomp_3__contraction;
        Py_INCREF(tmp_assign_source_58);
        goto try_return_handler_22;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_22:;
        CHECK_OBJECT(tmp_listcomp_3__$0);
        Py_DECREF(tmp_listcomp_3__$0);
        tmp_listcomp_3__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_3__contraction);
        Py_DECREF(tmp_listcomp_3__contraction);
        tmp_listcomp_3__contraction = NULL;
        Py_XDECREF(tmp_listcomp_3__iter_value_0);
        tmp_listcomp_3__iter_value_0 = NULL;
        goto frame_return_exit_4;
        // Exception handler code:
        try_except_handler_22:;
        exception_keeper_type_18 = exception_type;
        exception_keeper_value_18 = exception_value;
        exception_keeper_tb_18 = exception_tb;
        exception_keeper_lineno_18 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_3__$0);
        Py_DECREF(tmp_listcomp_3__$0);
        tmp_listcomp_3__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_3__contraction);
        Py_DECREF(tmp_listcomp_3__contraction);
        tmp_listcomp_3__contraction = NULL;
        Py_XDECREF(tmp_listcomp_3__iter_value_0);
        tmp_listcomp_3__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;
        exception_lineno = exception_keeper_lineno_18;

        goto frame_exception_exit_4;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_86b569234a1c18e85201eb491c5cbd83_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_return_exit_4:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_86b569234a1c18e85201eb491c5cbd83_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_21;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_86b569234a1c18e85201eb491c5cbd83_4);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_86b569234a1c18e85201eb491c5cbd83_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_86b569234a1c18e85201eb491c5cbd83_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_86b569234a1c18e85201eb491c5cbd83_4, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_86b569234a1c18e85201eb491c5cbd83_4,
            type_description_2,
            outline_2_var_i,
            var_defconv
        );


        // Release cached frame if used for exception.
        if (frame_86b569234a1c18e85201eb491c5cbd83_4 == cache_frame_86b569234a1c18e85201eb491c5cbd83_4) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_86b569234a1c18e85201eb491c5cbd83_4);
            cache_frame_86b569234a1c18e85201eb491c5cbd83_4 = NULL;
        }

        assertFrameObject(frame_86b569234a1c18e85201eb491c5cbd83_4);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto try_except_handler_21;
        skip_nested_handling_3:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_21:;
        Py_XDECREF(outline_2_var_i);
        outline_2_var_i = NULL;
        goto outline_result_4;
        // Exception handler code:
        try_except_handler_21:;
        exception_keeper_type_19 = exception_type;
        exception_keeper_value_19 = exception_value;
        exception_keeper_tb_19 = exception_tb;
        exception_keeper_lineno_19 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_2_var_i);
        outline_2_var_i = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;
        exception_lineno = exception_keeper_lineno_19;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 1108;
        goto try_except_handler_13;
        outline_result_4:;
        {
            PyObject *old = Nuitka_Cell_GET(par_converters);
            PyCell_SET(par_converters, tmp_assign_source_58);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_compexpr_left_12;
        PyObject *tmp_compexpr_right_12;
        PyObject *tmp_tmp_condition_result_16_object_1;
        int tmp_truth_name_3;
        CHECK_OBJECT(Nuitka_Cell_GET(var_N));
        tmp_compexpr_left_12 = Nuitka_Cell_GET(var_N);
        tmp_compexpr_right_12 = mod_consts[63];
        tmp_tmp_condition_result_16_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_12, tmp_compexpr_right_12);
        if (tmp_tmp_condition_result_16_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1109;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_tmp_condition_result_16_object_1);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_16_object_1);

            exception_lineno = 1109;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        tmp_condition_result_16 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_16_object_1);
        if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
            goto branch_yes_16;
        } else {
            goto branch_no_16;
        }
    }
    branch_yes_16:;
    {
        PyObject *tmp_assign_source_63;
        PyObject *tmp_list_element_3;
        PyObject *tmp_tuple_element_4;
        CHECK_OBJECT(Nuitka_Cell_GET(var_N));
        tmp_tuple_element_4 = Nuitka_Cell_GET(var_N);
        tmp_list_element_3 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_4);
        tmp_tuple_element_4 = (PyObject *)&PyTuple_Type;
        PyTuple_SET_ITEM0(tmp_list_element_3, 1, tmp_tuple_element_4);
        tmp_assign_source_63 = PyList_New(1);
        PyList_SET_ITEM(tmp_assign_source_63, 0, tmp_list_element_3);
        {
            PyObject *old = Nuitka_Cell_GET(var_packing);
            PyCell_SET(var_packing, tmp_assign_source_63);
            Py_XDECREF(old);
        }

    }
    branch_no_16:;
    branch_end_15:;
    {
        PyObject *tmp_assign_source_64;
        PyObject *tmp_iter_arg_10;
        PyObject *tmp_called_instance_4;
        int tmp_or_left_truth_2;
        PyObject *tmp_or_left_value_2;
        PyObject *tmp_or_right_value_2;
        CHECK_OBJECT(var_user_converters);
        tmp_or_left_value_2 = var_user_converters;
        tmp_or_left_truth_2 = CHECK_IF_TRUE(tmp_or_left_value_2);
        if (tmp_or_left_truth_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1113;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        if (tmp_or_left_truth_2 == 1) {
            goto or_left_2;
        } else {
            goto or_right_2;
        }
        or_right_2:;
        tmp_or_right_value_2 = PyDict_New();
        tmp_called_instance_4 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        Py_INCREF(tmp_or_left_value_2);
        tmp_called_instance_4 = tmp_or_left_value_2;
        or_end_2:;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1113;
        tmp_iter_arg_10 = CALL_METHOD_NO_ARGS(tmp_called_instance_4, mod_consts[47]);
        Py_DECREF(tmp_called_instance_4);
        if (tmp_iter_arg_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1113;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        tmp_assign_source_64 = MAKE_ITERATOR(tmp_iter_arg_10);
        Py_DECREF(tmp_iter_arg_10);
        if (tmp_assign_source_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1113;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        assert(tmp_for_loop_3__for_iterator == NULL);
        tmp_for_loop_3__for_iterator = tmp_assign_source_64;
    }
    // Tried code:
    loop_start_7:;
    {
        PyObject *tmp_next_source_6;
        PyObject *tmp_assign_source_65;
        CHECK_OBJECT(tmp_for_loop_3__for_iterator);
        tmp_next_source_6 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_65 = ITERATOR_NEXT(tmp_next_source_6);
        if (tmp_assign_source_65 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_7;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                exception_lineno = 1113;
                goto try_except_handler_23;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_65;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_66;
        PyObject *tmp_iter_arg_11;
        CHECK_OBJECT(tmp_for_loop_3__iter_value);
        tmp_iter_arg_11 = tmp_for_loop_3__iter_value;
        tmp_assign_source_66 = MAKE_ITERATOR(tmp_iter_arg_11);
        if (tmp_assign_source_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1113;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_24;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__source_iter;
            tmp_tuple_unpack_2__source_iter = tmp_assign_source_66;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_67;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_67 = UNPACK_NEXT(tmp_unpack_3, 0, 2);
        if (tmp_assign_source_67 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            exception_lineno = 1113;
            goto try_except_handler_25;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_1;
            tmp_tuple_unpack_2__element_1 = tmp_assign_source_67;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_68;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_68 = UNPACK_NEXT(tmp_unpack_4, 1, 2);
        if (tmp_assign_source_68 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            exception_lineno = 1113;
            goto try_except_handler_25;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_2;
            tmp_tuple_unpack_2__element_2 = tmp_assign_source_68;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_2); assert(HAS_ITERNEXT(tmp_iterator_name_2));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_2)->tp_iternext)(tmp_iterator_name_2);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                    exception_lineno = 1113;
                    goto try_except_handler_25;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            exception_lineno = 1113;
            goto try_except_handler_25;
        }
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_25:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_keeper_lineno_20 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
    Py_DECREF(tmp_tuple_unpack_2__source_iter);
    tmp_tuple_unpack_2__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_20;
    exception_value = exception_keeper_value_20;
    exception_tb = exception_keeper_tb_20;
    exception_lineno = exception_keeper_lineno_20;

    goto try_except_handler_24;
    // End of try:
    try_end_11:;
    goto try_end_12;
    // Exception handler code:
    try_except_handler_24:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_2__element_1);
    tmp_tuple_unpack_2__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_2__element_2);
    tmp_tuple_unpack_2__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto try_except_handler_23;
    // End of try:
    try_end_12:;
    CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
    Py_DECREF(tmp_tuple_unpack_2__source_iter);
    tmp_tuple_unpack_2__source_iter = NULL;
    {
        PyObject *tmp_assign_source_69;
        CHECK_OBJECT(tmp_tuple_unpack_2__element_1);
        tmp_assign_source_69 = tmp_tuple_unpack_2__element_1;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_69;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_2__element_1);
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_70;
        CHECK_OBJECT(tmp_tuple_unpack_2__element_2);
        tmp_assign_source_70 = tmp_tuple_unpack_2__element_2;
        {
            PyObject *old = var_conv;
            var_conv = tmp_assign_source_70;
            Py_INCREF(var_conv);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_2__element_2);
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_17;
        int tmp_truth_name_4;
        if (Nuitka_Cell_GET(par_usecols) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1114;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_23;
        }

        tmp_truth_name_4 = CHECK_IF_TRUE(Nuitka_Cell_GET(par_usecols));
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1114;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_23;
        }
        tmp_condition_result_17 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_17 == NUITKA_BOOL_TRUE) {
            goto branch_yes_17;
        } else {
            goto branch_no_17;
        }
    }
    branch_yes_17:;
    // Tried code:
    {
        PyObject *tmp_assign_source_71;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_args_element_name_15;
        if (Nuitka_Cell_GET(par_usecols) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1116;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_26;
        }

        tmp_called_instance_5 = Nuitka_Cell_GET(par_usecols);
        CHECK_OBJECT(var_i);
        tmp_args_element_name_15 = var_i;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1116;
        tmp_assign_source_71 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_5, mod_consts[184], tmp_args_element_name_15);
        if (tmp_assign_source_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1116;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_26;
        }
        {
            PyObject *old = var_i;
            assert(old != NULL);
            var_i = tmp_assign_source_71;
            Py_DECREF(old);
        }

    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_26:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_keeper_lineno_22 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 5.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_5, &exception_preserved_value_5, &exception_preserved_tb_5);

    if (exception_keeper_tb_22 == NULL) {
        exception_keeper_tb_22 = MAKE_TRACEBACK(frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_22);
    } else if (exception_keeper_lineno_22 != 0) {
        exception_keeper_tb_22 = ADD_TRACEBACK(exception_keeper_tb_22, frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_22);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_22, &exception_keeper_value_22, &exception_keeper_tb_22);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_22, exception_keeper_tb_22);
    PUBLISH_EXCEPTION(&exception_keeper_type_22, &exception_keeper_value_22, &exception_keeper_tb_22);
    // Tried code:
    {
        bool tmp_condition_result_18;
        PyObject *tmp_compexpr_left_13;
        PyObject *tmp_compexpr_right_13;
        tmp_compexpr_left_13 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_13 = PyExc_ValueError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_13, tmp_compexpr_right_13);
        assert(!(tmp_res == -1));
        tmp_condition_result_18 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_18 != false) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    goto try_continue_handler_27;
    goto branch_end_18;
    branch_no_18:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1115;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame) frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
    goto try_except_handler_27;
    branch_end_18:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_27:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_keeper_lineno_23 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 5.
    SET_CURRENT_EXCEPTION(exception_preserved_type_5, exception_preserved_value_5, exception_preserved_tb_5);

    // Re-raise.
    exception_type = exception_keeper_type_23;
    exception_value = exception_keeper_value_23;
    exception_tb = exception_keeper_tb_23;
    exception_lineno = exception_keeper_lineno_23;

    goto try_except_handler_23;
    // try continue handler code:
    try_continue_handler_27:;
    // Restore previous exception id 5.
    SET_CURRENT_EXCEPTION(exception_preserved_type_5, exception_preserved_value_5, exception_preserved_tb_5);

    goto loop_start_7;
    // End of try:
    // End of try:
    try_end_13:;
    branch_no_17:;
    {
        nuitka_bool tmp_condition_result_19;
        if (var_byte_converters == NUITKA_BOOL_UNASSIGNED) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[185]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1120;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_23;
        }

        tmp_condition_result_19 = var_byte_converters;
        if (tmp_condition_result_19 == NUITKA_BOOL_TRUE) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_assign_source_72;


        tmp_assign_source_72 = MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__5_tobytes_first();

        {
            PyObject *old = var_tobytes_first;
            var_tobytes_first = tmp_assign_source_72;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_called_name_15;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_kw_call_arg_value_0_2;
        PyObject *tmp_kw_call_dict_value_0_2;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        tmp_expression_name_6 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[188]);

        if (unlikely(tmp_expression_name_6 == NULL)) {
            tmp_expression_name_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[188]);
        }

        if (tmp_expression_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1127;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_23;
        }
        tmp_called_name_15 = LOOKUP_ATTRIBUTE(tmp_expression_name_6, mod_consts[189]);
        if (tmp_called_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1127;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_23;
        }
        CHECK_OBJECT(var_tobytes_first);
        tmp_kw_call_arg_value_0_2 = var_tobytes_first;
        CHECK_OBJECT(var_conv);
        tmp_kw_call_dict_value_0_2 = var_conv;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1127;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_2};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_2};
            tmp_ass_subvalue_1 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_15, args, kw_values, mod_consts[190]);
        }

        Py_DECREF(tmp_called_name_15);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1127;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_23;
        }
        if (Nuitka_Cell_GET(par_converters) == NULL) {
            Py_DECREF(tmp_ass_subvalue_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[191]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1127;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_23;
        }

        tmp_ass_subscribed_1 = Nuitka_Cell_GET(par_converters);
        CHECK_OBJECT(var_i);
        tmp_ass_subscript_1 = var_i;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1127;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_23;
        }
    }
    goto branch_end_19;
    branch_no_19:;
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_ass_subscript_2;
        CHECK_OBJECT(var_conv);
        tmp_ass_subvalue_2 = var_conv;
        if (Nuitka_Cell_GET(par_converters) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[191]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1129;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_23;
        }

        tmp_ass_subscribed_2 = Nuitka_Cell_GET(par_converters);
        CHECK_OBJECT(var_i);
        tmp_ass_subscript_2 = var_i;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1129;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_23;
        }
    }
    branch_end_19:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1113;
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto try_except_handler_23;
    }
    goto loop_start_7;
    loop_end_7:;
    goto try_end_14;
    // Exception handler code:
    try_except_handler_23:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_keeper_lineno_24 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_24;
    exception_value = exception_keeper_value_24;
    exception_tb = exception_keeper_tb_24;
    exception_lineno = exception_keeper_lineno_24;

    goto try_except_handler_13;
    // End of try:
    try_end_14:;
    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;
    {
        PyObject *tmp_assign_source_73;
        // Tried code:
        {
            PyObject *tmp_assign_source_74;
            PyObject *tmp_iter_arg_12;
            if (Nuitka_Cell_GET(par_converters) == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[191]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1132;
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                goto try_except_handler_28;
            }

            tmp_iter_arg_12 = Nuitka_Cell_GET(par_converters);
            tmp_assign_source_74 = MAKE_ITERATOR(tmp_iter_arg_12);
            if (tmp_assign_source_74 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1131;
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                goto try_except_handler_28;
            }
            assert(tmp_listcomp_4__$0 == NULL);
            tmp_listcomp_4__$0 = tmp_assign_source_74;
        }
        {
            PyObject *tmp_assign_source_75;
            tmp_assign_source_75 = PyList_New(0);
            assert(tmp_listcomp_4__contraction == NULL);
            tmp_listcomp_4__contraction = tmp_assign_source_75;
        }
        if (isFrameUnusable(cache_frame_7d3bb6349ea2ac447e1452609ac7a230_5)) {
            Py_XDECREF(cache_frame_7d3bb6349ea2ac447e1452609ac7a230_5);

#if _DEBUG_REFCOUNTS
            if (cache_frame_7d3bb6349ea2ac447e1452609ac7a230_5 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_7d3bb6349ea2ac447e1452609ac7a230_5 = MAKE_FUNCTION_FRAME(codeobj_7d3bb6349ea2ac447e1452609ac7a230, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_7d3bb6349ea2ac447e1452609ac7a230_5->m_type_description == NULL);
        frame_7d3bb6349ea2ac447e1452609ac7a230_5 = cache_frame_7d3bb6349ea2ac447e1452609ac7a230_5;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_7d3bb6349ea2ac447e1452609ac7a230_5);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_7d3bb6349ea2ac447e1452609ac7a230_5) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_8:;
        {
            PyObject *tmp_next_source_7;
            PyObject *tmp_assign_source_76;
            CHECK_OBJECT(tmp_listcomp_4__$0);
            tmp_next_source_7 = tmp_listcomp_4__$0;
            tmp_assign_source_76 = ITERATOR_NEXT(tmp_next_source_7);
            if (tmp_assign_source_76 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_8;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 1131;
                    goto try_except_handler_29;
                }
            }

            {
                PyObject *old = tmp_listcomp_4__iter_value_0;
                tmp_listcomp_4__iter_value_0 = tmp_assign_source_76;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_77;
            CHECK_OBJECT(tmp_listcomp_4__iter_value_0);
            tmp_assign_source_77 = tmp_listcomp_4__iter_value_0;
            {
                PyObject *old = outline_3_var_conv;
                outline_3_var_conv = tmp_assign_source_77;
                Py_INCREF(outline_3_var_conv);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_4;
            PyObject *tmp_append_value_4;
            bool tmp_condition_result_20;
            PyObject *tmp_compexpr_left_14;
            PyObject *tmp_compexpr_right_14;
            struct Nuitka_CellObject *tmp_closure_4[1];
            CHECK_OBJECT(tmp_listcomp_4__contraction);
            tmp_append_list_4 = tmp_listcomp_4__contraction;
            CHECK_OBJECT(outline_3_var_conv);
            tmp_compexpr_left_14 = outline_3_var_conv;
            tmp_compexpr_right_14 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[142]);

            if (unlikely(tmp_compexpr_right_14 == NULL)) {
                tmp_compexpr_right_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
            }

            if (tmp_compexpr_right_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1131;
                type_description_2 = "o";
                goto try_except_handler_29;
            }
            tmp_condition_result_20 = (tmp_compexpr_left_14 != tmp_compexpr_right_14) ? true : false;
            if (tmp_condition_result_20 != false) {
                goto condexpr_true_1;
            } else {
                goto condexpr_false_1;
            }
            condexpr_true_1:;
            CHECK_OBJECT(outline_3_var_conv);
            tmp_append_value_4 = outline_3_var_conv;
            Py_INCREF(tmp_append_value_4);
            goto condexpr_end_1;
            condexpr_false_1:;

            tmp_closure_4[0] = var_fencoding;
            Py_INCREF(tmp_closure_4[0]);

            tmp_append_value_4 = MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__6_lambda(tmp_closure_4);

            condexpr_end_1:;
            assert(PyList_Check(tmp_append_list_4));
            tmp_result = LIST_APPEND1(tmp_append_list_4, tmp_append_value_4);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1131;
                type_description_2 = "o";
                goto try_except_handler_29;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1131;
            type_description_2 = "o";
            goto try_except_handler_29;
        }
        goto loop_start_8;
        loop_end_8:;
        CHECK_OBJECT(tmp_listcomp_4__contraction);
        tmp_assign_source_73 = tmp_listcomp_4__contraction;
        Py_INCREF(tmp_assign_source_73);
        goto try_return_handler_29;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_29:;
        CHECK_OBJECT(tmp_listcomp_4__$0);
        Py_DECREF(tmp_listcomp_4__$0);
        tmp_listcomp_4__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_4__contraction);
        Py_DECREF(tmp_listcomp_4__contraction);
        tmp_listcomp_4__contraction = NULL;
        Py_XDECREF(tmp_listcomp_4__iter_value_0);
        tmp_listcomp_4__iter_value_0 = NULL;
        goto frame_return_exit_5;
        // Exception handler code:
        try_except_handler_29:;
        exception_keeper_type_25 = exception_type;
        exception_keeper_value_25 = exception_value;
        exception_keeper_tb_25 = exception_tb;
        exception_keeper_lineno_25 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_4__$0);
        Py_DECREF(tmp_listcomp_4__$0);
        tmp_listcomp_4__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_4__contraction);
        Py_DECREF(tmp_listcomp_4__contraction);
        tmp_listcomp_4__contraction = NULL;
        Py_XDECREF(tmp_listcomp_4__iter_value_0);
        tmp_listcomp_4__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;
        exception_lineno = exception_keeper_lineno_25;

        goto frame_exception_exit_5;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7d3bb6349ea2ac447e1452609ac7a230_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_return_exit_5:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_7d3bb6349ea2ac447e1452609ac7a230_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_28;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7d3bb6349ea2ac447e1452609ac7a230_5);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7d3bb6349ea2ac447e1452609ac7a230_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7d3bb6349ea2ac447e1452609ac7a230_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7d3bb6349ea2ac447e1452609ac7a230_5, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7d3bb6349ea2ac447e1452609ac7a230_5,
            type_description_2,
            outline_3_var_conv
        );


        // Release cached frame if used for exception.
        if (frame_7d3bb6349ea2ac447e1452609ac7a230_5 == cache_frame_7d3bb6349ea2ac447e1452609ac7a230_5) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_7d3bb6349ea2ac447e1452609ac7a230_5);
            cache_frame_7d3bb6349ea2ac447e1452609ac7a230_5 = NULL;
        }

        assertFrameObject(frame_7d3bb6349ea2ac447e1452609ac7a230_5);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto try_except_handler_28;
        skip_nested_handling_4:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_28:;
        Py_XDECREF(outline_3_var_conv);
        outline_3_var_conv = NULL;
        goto outline_result_5;
        // Exception handler code:
        try_except_handler_28:;
        exception_keeper_type_26 = exception_type;
        exception_keeper_value_26 = exception_value;
        exception_keeper_tb_26 = exception_tb;
        exception_keeper_lineno_26 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_3_var_conv);
        outline_3_var_conv = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;
        exception_lineno = exception_keeper_lineno_26;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 1131;
        goto try_except_handler_13;
        outline_result_5:;
        {
            PyObject *old = Nuitka_Cell_GET(par_converters);
            PyCell_SET(par_converters, tmp_assign_source_73);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_78;
        tmp_assign_source_78 = Py_None;
        assert(var_X == NULL);
        Py_INCREF(tmp_assign_source_78);
        var_X = tmp_assign_source_78;
    }
    {
        PyObject *tmp_assign_source_79;
        PyObject *tmp_iter_arg_13;
        PyObject *tmp_called_name_16;
        PyObject *tmp_args_element_name_16;
        CHECK_OBJECT(var_read_data);
        tmp_called_name_16 = var_read_data;
        tmp_args_element_name_16 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[193]);

        if (unlikely(tmp_args_element_name_16 == NULL)) {
            tmp_args_element_name_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[193]);
        }

        if (tmp_args_element_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1139;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1139;
        tmp_iter_arg_13 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_16, tmp_args_element_name_16);
        if (tmp_iter_arg_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1139;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        tmp_assign_source_79 = MAKE_ITERATOR(tmp_iter_arg_13);
        Py_DECREF(tmp_iter_arg_13);
        if (tmp_assign_source_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1139;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_13;
        }
        assert(tmp_for_loop_4__for_iterator == NULL);
        tmp_for_loop_4__for_iterator = tmp_assign_source_79;
    }
    // Tried code:
    loop_start_9:;
    {
        PyObject *tmp_next_source_8;
        PyObject *tmp_assign_source_80;
        CHECK_OBJECT(tmp_for_loop_4__for_iterator);
        tmp_next_source_8 = tmp_for_loop_4__for_iterator;
        tmp_assign_source_80 = ITERATOR_NEXT(tmp_next_source_8);
        if (tmp_assign_source_80 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_9;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
                exception_lineno = 1139;
                goto try_except_handler_30;
            }
        }

        {
            PyObject *old = tmp_for_loop_4__iter_value;
            tmp_for_loop_4__iter_value = tmp_assign_source_80;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_81;
        CHECK_OBJECT(tmp_for_loop_4__iter_value);
        tmp_assign_source_81 = tmp_for_loop_4__iter_value;
        {
            PyObject *old = var_x;
            var_x = tmp_assign_source_81;
            Py_INCREF(var_x);
            Py_XDECREF(old);
        }

    }
    {
        bool tmp_condition_result_21;
        PyObject *tmp_compexpr_left_15;
        PyObject *tmp_compexpr_right_15;
        if (var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1140;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }

        tmp_compexpr_left_15 = var_X;
        tmp_compexpr_right_15 = Py_None;
        tmp_condition_result_21 = (tmp_compexpr_left_15 == tmp_compexpr_right_15) ? true : false;
        if (tmp_condition_result_21 != false) {
            goto branch_yes_20;
        } else {
            goto branch_no_20;
        }
    }
    branch_yes_20:;
    {
        PyObject *tmp_assign_source_82;
        PyObject *tmp_called_name_17;
        PyObject *tmp_expression_name_7;
        PyObject *tmp_args_element_name_17;
        PyObject *tmp_args_element_name_18;
        tmp_expression_name_7 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_7 == NULL)) {
            tmp_expression_name_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1141;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }
        tmp_called_name_17 = LOOKUP_ATTRIBUTE(tmp_expression_name_7, mod_consts[195]);
        if (tmp_called_name_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1141;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }
        CHECK_OBJECT(var_x);
        tmp_args_element_name_17 = var_x;
        if (par_dtype == NULL) {
            Py_DECREF(tmp_called_name_17);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1141;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }

        tmp_args_element_name_18 = par_dtype;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1141;
        {
            PyObject *call_args[] = {tmp_args_element_name_17, tmp_args_element_name_18};
            tmp_assign_source_82 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_17, call_args);
        }

        Py_DECREF(tmp_called_name_17);
        if (tmp_assign_source_82 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1141;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }
        {
            PyObject *old = var_X;
            var_X = tmp_assign_source_82;
            Py_XDECREF(old);
        }

    }
    goto branch_end_20;
    branch_no_20:;
    {
        PyObject *tmp_assign_source_83;
        PyObject *tmp_list_arg_2;
        PyObject *tmp_expression_name_8;
        if (var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1143;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }

        tmp_expression_name_8 = var_X;
        tmp_list_arg_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, mod_consts[196]);
        if (tmp_list_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1143;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }
        tmp_assign_source_83 = MAKE_LIST(tmp_list_arg_2);
        Py_DECREF(tmp_list_arg_2);
        if (tmp_assign_source_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1143;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }
        {
            PyObject *old = var_nshape;
            var_nshape = tmp_assign_source_83;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_84;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(var_nshape);
        tmp_expression_name_9 = var_nshape;
        tmp_subscript_name_1 = mod_consts[16];
        tmp_assign_source_84 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_9, tmp_subscript_name_1, 0);
        if (tmp_assign_source_84 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1144;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }
        {
            PyObject *old = var_pos;
            var_pos = tmp_assign_source_84;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_85;
        CHECK_OBJECT(var_nshape);
        tmp_assign_source_85 = var_nshape;
        {
            PyObject *old = tmp_inplace_assign_subscr_1__target;
            tmp_inplace_assign_subscr_1__target = tmp_assign_source_85;
            Py_INCREF(tmp_inplace_assign_subscr_1__target);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_86;
        tmp_assign_source_86 = mod_consts[16];
        {
            PyObject *old = tmp_inplace_assign_subscr_1__subscript;
            tmp_inplace_assign_subscr_1__subscript = tmp_assign_source_86;
            Py_INCREF(tmp_inplace_assign_subscr_1__subscript);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_87;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
        tmp_expression_name_10 = tmp_inplace_assign_subscr_1__target;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
        tmp_subscript_name_2 = tmp_inplace_assign_subscr_1__subscript;
        tmp_assign_source_87 = LOOKUP_SUBSCRIPT(tmp_expression_name_10, tmp_subscript_name_2);
        if (tmp_assign_source_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1145;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_31;
        }
        {
            PyObject *old = tmp_inplace_assign_subscr_1__value;
            tmp_inplace_assign_subscr_1__value = tmp_assign_source_87;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_88;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_len_arg_3;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
        tmp_left_name_3 = tmp_inplace_assign_subscr_1__value;
        CHECK_OBJECT(var_x);
        tmp_len_arg_3 = var_x;
        tmp_right_name_3 = BUILTIN_LEN(tmp_len_arg_3);
        if (tmp_right_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1145;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_31;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_name_3, tmp_right_name_3);
        Py_DECREF(tmp_right_name_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1145;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_31;
        }
        tmp_assign_source_88 = tmp_left_name_3;
        tmp_inplace_assign_subscr_1__value = tmp_assign_source_88;

    }
    {
        PyObject *tmp_ass_subvalue_3;
        PyObject *tmp_ass_subscribed_3;
        PyObject *tmp_ass_subscript_3;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
        tmp_ass_subvalue_3 = tmp_inplace_assign_subscr_1__value;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
        tmp_ass_subscribed_3 = tmp_inplace_assign_subscr_1__target;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
        tmp_ass_subscript_3 = tmp_inplace_assign_subscr_1__subscript;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1145;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_31;
        }
    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_31:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_keeper_lineno_27 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
    Py_DECREF(tmp_inplace_assign_subscr_1__target);
    tmp_inplace_assign_subscr_1__target = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
    Py_DECREF(tmp_inplace_assign_subscr_1__subscript);
    tmp_inplace_assign_subscr_1__subscript = NULL;
    Py_XDECREF(tmp_inplace_assign_subscr_1__value);
    tmp_inplace_assign_subscr_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_27;
    exception_value = exception_keeper_value_27;
    exception_tb = exception_keeper_tb_27;
    exception_lineno = exception_keeper_lineno_27;

    goto try_except_handler_30;
    // End of try:
    try_end_15:;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
    Py_DECREF(tmp_inplace_assign_subscr_1__target);
    tmp_inplace_assign_subscr_1__target = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
    Py_DECREF(tmp_inplace_assign_subscr_1__subscript);
    tmp_inplace_assign_subscr_1__subscript = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
    Py_DECREF(tmp_inplace_assign_subscr_1__value);
    tmp_inplace_assign_subscr_1__value = NULL;
    {
        PyObject *tmp_called_name_18;
        PyObject *tmp_expression_name_11;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_name_2;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_kwargs_name_2;
        if (var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1146;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }

        tmp_expression_name_11 = var_X;
        tmp_called_name_18 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, mod_consts[197]);
        if (tmp_called_name_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1146;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }
        CHECK_OBJECT(var_nshape);
        tmp_tuple_element_5 = var_nshape;
        tmp_args_name_2 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_args_name_2, 0, tmp_tuple_element_5);
        tmp_kwargs_name_2 = PyDict_Copy(mod_consts[198]);
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1146;
        tmp_call_result_4 = CALL_FUNCTION(tmp_called_name_18, tmp_args_name_2, tmp_kwargs_name_2);
        Py_DECREF(tmp_called_name_18);
        Py_DECREF(tmp_args_name_2);
        Py_DECREF(tmp_kwargs_name_2);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1146;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_ass_subvalue_4;
        PyObject *tmp_ass_subscribed_4;
        PyObject *tmp_ass_subscript_4;
        PyObject *tmp_tuple_element_6;
        PyObject *tmp_start_name_1;
        PyObject *tmp_stop_name_1;
        CHECK_OBJECT(var_x);
        tmp_ass_subvalue_4 = var_x;
        if (var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1147;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }

        tmp_ass_subscribed_4 = var_X;
        CHECK_OBJECT(var_pos);
        tmp_start_name_1 = var_pos;
        tmp_stop_name_1 = Py_None;
        tmp_tuple_element_6 = MAKE_SLICEOBJ2(tmp_start_name_1, tmp_stop_name_1);
        assert(!(tmp_tuple_element_6 == NULL));
        tmp_ass_subscript_4 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_ass_subscript_4, 0, tmp_tuple_element_6);
        tmp_tuple_element_6 = Py_Ellipsis;
        PyTuple_SET_ITEM0(tmp_ass_subscript_4, 1, tmp_tuple_element_6);
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4);
        Py_DECREF(tmp_ass_subscript_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1147;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_30;
        }
    }
    branch_end_20:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1139;
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto try_except_handler_30;
    }
    goto loop_start_9;
    loop_end_9:;
    goto try_end_16;
    // Exception handler code:
    try_except_handler_30:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_keeper_lineno_28 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_4__iter_value);
    tmp_for_loop_4__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_4__for_iterator);
    Py_DECREF(tmp_for_loop_4__for_iterator);
    tmp_for_loop_4__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_28;
    exception_value = exception_keeper_value_28;
    exception_tb = exception_keeper_tb_28;
    exception_lineno = exception_keeper_lineno_28;

    goto try_except_handler_13;
    // End of try:
    try_end_16:;
    goto try_end_17;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_keeper_lineno_29 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 6.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_6, &exception_preserved_value_6, &exception_preserved_tb_6);

    if (exception_keeper_tb_29 == NULL) {
        exception_keeper_tb_29 = MAKE_TRACEBACK(frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_29);
    } else if (exception_keeper_lineno_29 != 0) {
        exception_keeper_tb_29 = ADD_TRACEBACK(exception_keeper_tb_29, frame_37c8b7601e04f4296f883e3b07a18f2f, exception_keeper_lineno_29);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_29, &exception_keeper_value_29, &exception_keeper_tb_29);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_29, exception_keeper_tb_29);
    PUBLISH_EXCEPTION(&exception_keeper_type_29, &exception_keeper_value_29, &exception_keeper_tb_29);
    // Tried code:
    {
        bool tmp_condition_result_22;
        assert(var_fown != NUITKA_BOOL_UNASSIGNED);
        tmp_condition_result_22 = var_fown == NUITKA_BOOL_TRUE;
        if (tmp_condition_result_22 != false) {
            goto branch_yes_21;
        } else {
            goto branch_no_21;
        }
    }
    branch_yes_21:;
    {
        PyObject *tmp_called_instance_6;
        PyObject *tmp_call_result_5;
        if (Nuitka_Cell_GET(var_fh) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[178]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1150;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_32;
        }

        tmp_called_instance_6 = Nuitka_Cell_GET(var_fh);
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1150;
        tmp_call_result_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, mod_consts[35]);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1150;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_32;
        }
        Py_DECREF(tmp_call_result_5);
    }
    branch_no_21:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1078;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame) frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
    goto try_except_handler_32;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_32:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_keeper_lineno_30 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 6.
    SET_CURRENT_EXCEPTION(exception_preserved_type_6, exception_preserved_value_6, exception_preserved_tb_6);

    // Re-raise.
    exception_type = exception_keeper_type_30;
    exception_value = exception_keeper_value_30;
    exception_tb = exception_keeper_tb_30;
    exception_lineno = exception_keeper_lineno_30;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_17:;
    Py_XDECREF(tmp_for_loop_4__iter_value);
    tmp_for_loop_4__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_4__for_iterator);
    Py_DECREF(tmp_for_loop_4__for_iterator);
    tmp_for_loop_4__for_iterator = NULL;
    {
        bool tmp_condition_result_23;
        assert(var_fown != NUITKA_BOOL_UNASSIGNED);
        tmp_condition_result_23 = var_fown == NUITKA_BOOL_TRUE;
        if (tmp_condition_result_23 != false) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_call_result_6;
        if (Nuitka_Cell_GET(var_fh) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[178]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1150;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_7 = Nuitka_Cell_GET(var_fh);
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1150;
        tmp_call_result_6 = CALL_METHOD_NO_ARGS(tmp_called_instance_7, mod_consts[35]);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1150;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    branch_no_22:;
    {
        bool tmp_condition_result_24;
        PyObject *tmp_compexpr_left_16;
        PyObject *tmp_compexpr_right_16;
        if (var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1152;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_16 = var_X;
        tmp_compexpr_right_16 = Py_None;
        tmp_condition_result_24 = (tmp_compexpr_left_16 == tmp_compexpr_right_16) ? true : false;
        if (tmp_condition_result_24 != false) {
            goto branch_yes_23;
        } else {
            goto branch_no_23;
        }
    }
    branch_yes_23:;
    {
        PyObject *tmp_assign_source_89;
        PyObject *tmp_called_name_19;
        PyObject *tmp_expression_name_12;
        PyObject *tmp_args_element_name_19;
        PyObject *tmp_args_element_name_20;
        tmp_expression_name_12 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_12 == NULL)) {
            tmp_expression_name_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1153;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_19 = LOOKUP_ATTRIBUTE(tmp_expression_name_12, mod_consts[195]);
        if (tmp_called_name_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1153;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_19 = PyList_New(0);
        if (par_dtype == NULL) {
            Py_DECREF(tmp_called_name_19);
            Py_DECREF(tmp_args_element_name_19);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1153;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_20 = par_dtype;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1153;
        {
            PyObject *call_args[] = {tmp_args_element_name_19, tmp_args_element_name_20};
            tmp_assign_source_89 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_19, call_args);
        }

        Py_DECREF(tmp_called_name_19);
        Py_DECREF(tmp_args_element_name_19);
        if (tmp_assign_source_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1153;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_X;
            var_X = tmp_assign_source_89;
            Py_XDECREF(old);
        }

    }
    branch_no_23:;
    {
        nuitka_bool tmp_condition_result_25;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_17;
        PyObject *tmp_compexpr_right_17;
        PyObject *tmp_expression_name_13;
        PyObject *tmp_tmp_and_left_value_1_object_1;
        int tmp_truth_name_5;
        PyObject *tmp_compexpr_left_18;
        PyObject *tmp_compexpr_right_18;
        PyObject *tmp_expression_name_14;
        PyObject *tmp_expression_name_15;
        PyObject *tmp_subscript_name_3;
        if (var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1157;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_13 = var_X;
        tmp_compexpr_left_17 = LOOKUP_ATTRIBUTE(tmp_expression_name_13, mod_consts[199]);
        if (tmp_compexpr_left_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1157;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_17 = mod_consts[200];
        tmp_tmp_and_left_value_1_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_17, tmp_compexpr_right_17);
        Py_DECREF(tmp_compexpr_left_17);
        if (tmp_tmp_and_left_value_1_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1157;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_tmp_and_left_value_1_object_1);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_and_left_value_1_object_1);

            exception_lineno = 1157;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_5 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_and_left_value_1_object_1);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1157;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        if (var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1157;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_15 = var_X;
        tmp_expression_name_14 = LOOKUP_ATTRIBUTE(tmp_expression_name_15, mod_consts[196]);
        if (tmp_expression_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1157;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_3 = mod_consts[201];
        tmp_compexpr_left_18 = LOOKUP_SUBSCRIPT(tmp_expression_name_14, tmp_subscript_name_3);
        Py_DECREF(tmp_expression_name_14);
        if (tmp_compexpr_left_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1157;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_18 = mod_consts[202];
        tmp_and_right_value_1 = RICH_COMPARE_EQ_NBOOL_OBJECT_TUPLE(tmp_compexpr_left_18, tmp_compexpr_right_18);
        Py_DECREF(tmp_compexpr_left_18);
        if (tmp_and_right_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1157;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_25 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_25 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_25 == NUITKA_BOOL_TRUE) {
            goto branch_yes_24;
        } else {
            goto branch_no_24;
        }
        assert(tmp_condition_result_25 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_24:;
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = mod_consts[203];
        if (var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1158;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_2 = var_X;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[196], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1158;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_no_24:;
    {
        bool tmp_condition_result_26;
        PyObject *tmp_compexpr_left_19;
        PyObject *tmp_compexpr_right_19;
        CHECK_OBJECT(par_ndmin);
        tmp_compexpr_left_19 = par_ndmin;
        tmp_compexpr_right_19 = LIST_COPY(mod_consts[204]);
        tmp_res = PySequence_Contains(tmp_compexpr_right_19, tmp_compexpr_left_19);
        Py_DECREF(tmp_compexpr_right_19);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1162;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_26 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_26 != false) {
            goto branch_yes_25;
        } else {
            goto branch_no_25;
        }
    }
    branch_yes_25:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_make_exception_arg_2;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        tmp_left_name_4 = mod_consts[205];
        CHECK_OBJECT(par_ndmin);
        tmp_right_name_4 = par_ndmin;
        tmp_make_exception_arg_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_4, tmp_right_name_4);
        if (tmp_make_exception_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1163;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1163;
        tmp_raise_type_2 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_2);
        Py_DECREF(tmp_make_exception_arg_2);
        assert(!(tmp_raise_type_2 == NULL));
        exception_type = tmp_raise_type_2;
        exception_lineno = 1163;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto frame_exception_exit_1;
    }
    branch_no_25:;
    {
        nuitka_bool tmp_condition_result_27;
        PyObject *tmp_compexpr_left_20;
        PyObject *tmp_compexpr_right_20;
        PyObject *tmp_expression_name_16;
        if (var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1165;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_16 = var_X;
        tmp_compexpr_left_20 = LOOKUP_ATTRIBUTE(tmp_expression_name_16, mod_consts[199]);
        if (tmp_compexpr_left_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1165;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_ndmin);
        tmp_compexpr_right_20 = par_ndmin;
        tmp_condition_result_27 = RICH_COMPARE_GT_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_20, tmp_compexpr_right_20);
        Py_DECREF(tmp_compexpr_left_20);
        if (tmp_condition_result_27 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1165;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_27 == NUITKA_BOOL_TRUE) {
            goto branch_yes_26;
        } else {
            goto branch_no_26;
        }
        assert(tmp_condition_result_27 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_26:;
    {
        PyObject *tmp_assign_source_90;
        PyObject *tmp_called_name_20;
        PyObject *tmp_expression_name_17;
        PyObject *tmp_args_element_name_21;
        tmp_expression_name_17 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_17 == NULL)) {
            tmp_expression_name_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1166;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_20 = LOOKUP_ATTRIBUTE(tmp_expression_name_17, mod_consts[206]);
        if (tmp_called_name_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1166;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        if (var_X == NULL) {
            Py_DECREF(tmp_called_name_20);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1166;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_21 = var_X;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1166;
        tmp_assign_source_90 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_20, tmp_args_element_name_21);
        Py_DECREF(tmp_called_name_20);
        if (tmp_assign_source_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1166;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_X;
            var_X = tmp_assign_source_90;
            Py_XDECREF(old);
        }

    }
    branch_no_26:;
    {
        nuitka_bool tmp_condition_result_28;
        PyObject *tmp_compexpr_left_21;
        PyObject *tmp_compexpr_right_21;
        PyObject *tmp_expression_name_18;
        if (var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1169;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_18 = var_X;
        tmp_compexpr_left_21 = LOOKUP_ATTRIBUTE(tmp_expression_name_18, mod_consts[199]);
        if (tmp_compexpr_left_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1169;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_ndmin);
        tmp_compexpr_right_21 = par_ndmin;
        tmp_condition_result_28 = RICH_COMPARE_LT_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_21, tmp_compexpr_right_21);
        Py_DECREF(tmp_compexpr_left_21);
        if (tmp_condition_result_28 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1169;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_28 == NUITKA_BOOL_TRUE) {
            goto branch_yes_27;
        } else {
            goto branch_no_27;
        }
        assert(tmp_condition_result_28 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_27:;
    {
        nuitka_bool tmp_condition_result_29;
        PyObject *tmp_compexpr_left_22;
        PyObject *tmp_compexpr_right_22;
        PyObject *tmp_tmp_condition_result_29_object_1;
        int tmp_truth_name_6;
        CHECK_OBJECT(par_ndmin);
        tmp_compexpr_left_22 = par_ndmin;
        tmp_compexpr_right_22 = mod_consts[63];
        tmp_tmp_condition_result_29_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_22, tmp_compexpr_right_22);
        if (tmp_tmp_condition_result_29_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1170;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_tmp_condition_result_29_object_1);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_29_object_1);

            exception_lineno = 1170;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_29 = tmp_truth_name_6 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_29_object_1);
        if (tmp_condition_result_29 == NUITKA_BOOL_TRUE) {
            goto branch_yes_28;
        } else {
            goto branch_no_28;
        }
    }
    branch_yes_28:;
    {
        PyObject *tmp_assign_source_91;
        PyObject *tmp_called_name_21;
        PyObject *tmp_expression_name_19;
        PyObject *tmp_args_element_name_22;
        tmp_expression_name_19 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_19 == NULL)) {
            tmp_expression_name_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1171;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_21 = LOOKUP_ATTRIBUTE(tmp_expression_name_19, mod_consts[207]);
        if (tmp_called_name_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1171;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        if (var_X == NULL) {
            Py_DECREF(tmp_called_name_21);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1171;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_22 = var_X;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1171;
        tmp_assign_source_91 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_21, tmp_args_element_name_22);
        Py_DECREF(tmp_called_name_21);
        if (tmp_assign_source_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1171;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_X;
            var_X = tmp_assign_source_91;
            Py_XDECREF(old);
        }

    }
    goto branch_end_28;
    branch_no_28:;
    {
        nuitka_bool tmp_condition_result_30;
        PyObject *tmp_compexpr_left_23;
        PyObject *tmp_compexpr_right_23;
        PyObject *tmp_tmp_condition_result_30_object_1;
        int tmp_truth_name_7;
        CHECK_OBJECT(par_ndmin);
        tmp_compexpr_left_23 = par_ndmin;
        tmp_compexpr_right_23 = mod_consts[208];
        tmp_tmp_condition_result_30_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_23, tmp_compexpr_right_23);
        if (tmp_tmp_condition_result_30_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1172;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_7 = CHECK_IF_TRUE(tmp_tmp_condition_result_30_object_1);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_30_object_1);

            exception_lineno = 1172;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_30 = tmp_truth_name_7 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_30_object_1);
        if (tmp_condition_result_30 == NUITKA_BOOL_TRUE) {
            goto branch_yes_29;
        } else {
            goto branch_no_29;
        }
    }
    branch_yes_29:;
    {
        PyObject *tmp_assign_source_92;
        PyObject *tmp_expression_name_20;
        PyObject *tmp_called_name_22;
        PyObject *tmp_expression_name_21;
        PyObject *tmp_args_element_name_23;
        tmp_expression_name_21 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_21 == NULL)) {
            tmp_expression_name_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1173;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_22 = LOOKUP_ATTRIBUTE(tmp_expression_name_21, mod_consts[209]);
        if (tmp_called_name_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1173;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        if (var_X == NULL) {
            Py_DECREF(tmp_called_name_22);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1173;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_23 = var_X;
        frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame.f_lineno = 1173;
        tmp_expression_name_20 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_22, tmp_args_element_name_23);
        Py_DECREF(tmp_called_name_22);
        if (tmp_expression_name_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1173;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_92 = LOOKUP_ATTRIBUTE(tmp_expression_name_20, mod_consts[210]);
        Py_DECREF(tmp_expression_name_20);
        if (tmp_assign_source_92 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1173;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_X;
            var_X = tmp_assign_source_92;
            Py_XDECREF(old);
        }

    }
    branch_no_29:;
    branch_end_28:;
    branch_no_27:;
    {
        nuitka_bool tmp_condition_result_31;
        int tmp_truth_name_8;
        CHECK_OBJECT(par_unpack);
        tmp_truth_name_8 = CHECK_IF_TRUE(par_unpack);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1175;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_31 = tmp_truth_name_8 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_31 == NUITKA_BOOL_TRUE) {
            goto branch_yes_30;
        } else {
            goto branch_no_30;
        }
    }
    branch_yes_30:;
    {
        bool tmp_condition_result_32;
        PyObject *tmp_compexpr_left_24;
        PyObject *tmp_compexpr_right_24;
        PyObject *tmp_len_arg_4;
        PyObject *tmp_tmp_condition_result_32_object_1;
        CHECK_OBJECT(var_dtype_types);
        tmp_len_arg_4 = var_dtype_types;
        tmp_compexpr_left_24 = BUILTIN_LEN(tmp_len_arg_4);
        if (tmp_compexpr_left_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1176;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_24 = mod_consts[63];
        tmp_tmp_condition_result_32_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_24, tmp_compexpr_right_24);
        Py_DECREF(tmp_compexpr_left_24);
        assert(!(tmp_tmp_condition_result_32_object_1 == NULL));
        tmp_condition_result_32 = CHECK_IF_TRUE(tmp_tmp_condition_result_32_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_32_object_1);
        if (tmp_condition_result_32 != false) {
            goto branch_yes_31;
        } else {
            goto branch_no_31;
        }
    }
    branch_yes_31:;
    // Tried code:
    {
        PyObject *tmp_assign_source_93;
        PyObject *tmp_iter_arg_14;
        PyObject *tmp_expression_name_22;
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1178;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_33;
        }

        tmp_expression_name_22 = par_dtype;
        tmp_iter_arg_14 = LOOKUP_ATTRIBUTE(tmp_expression_name_22, mod_consts[211]);
        if (tmp_iter_arg_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1178;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_33;
        }
        tmp_assign_source_93 = MAKE_ITERATOR(tmp_iter_arg_14);
        Py_DECREF(tmp_iter_arg_14);
        if (tmp_assign_source_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1178;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto try_except_handler_33;
        }
        assert(tmp_listcomp_5__$0 == NULL);
        tmp_listcomp_5__$0 = tmp_assign_source_93;
    }
    {
        PyObject *tmp_assign_source_94;
        tmp_assign_source_94 = PyList_New(0);
        assert(tmp_listcomp_5__contraction == NULL);
        tmp_listcomp_5__contraction = tmp_assign_source_94;
    }
    if (isFrameUnusable(cache_frame_1b8dda8e313cdb8b11620930481ca640_6)) {
        Py_XDECREF(cache_frame_1b8dda8e313cdb8b11620930481ca640_6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1b8dda8e313cdb8b11620930481ca640_6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1b8dda8e313cdb8b11620930481ca640_6 = MAKE_FUNCTION_FRAME(codeobj_1b8dda8e313cdb8b11620930481ca640, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1b8dda8e313cdb8b11620930481ca640_6->m_type_description == NULL);
    frame_1b8dda8e313cdb8b11620930481ca640_6 = cache_frame_1b8dda8e313cdb8b11620930481ca640_6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1b8dda8e313cdb8b11620930481ca640_6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1b8dda8e313cdb8b11620930481ca640_6) == 2); // Frame stack

    // Framed code:
    // Tried code:
    loop_start_10:;
    {
        PyObject *tmp_next_source_9;
        PyObject *tmp_assign_source_95;
        CHECK_OBJECT(tmp_listcomp_5__$0);
        tmp_next_source_9 = tmp_listcomp_5__$0;
        tmp_assign_source_95 = ITERATOR_NEXT(tmp_next_source_9);
        if (tmp_assign_source_95 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_10;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_2 = "oo";
                exception_lineno = 1178;
                goto try_except_handler_34;
            }
        }

        {
            PyObject *old = tmp_listcomp_5__iter_value_0;
            tmp_listcomp_5__iter_value_0 = tmp_assign_source_95;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_96;
        CHECK_OBJECT(tmp_listcomp_5__iter_value_0);
        tmp_assign_source_96 = tmp_listcomp_5__iter_value_0;
        {
            PyObject *old = outline_4_var_field;
            outline_4_var_field = tmp_assign_source_96;
            Py_INCREF(outline_4_var_field);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_append_list_5;
        PyObject *tmp_append_value_5;
        PyObject *tmp_expression_name_23;
        PyObject *tmp_subscript_name_4;
        CHECK_OBJECT(tmp_listcomp_5__contraction);
        tmp_append_list_5 = tmp_listcomp_5__contraction;
        if (var_X == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1178;
            type_description_2 = "oo";
            goto try_except_handler_34;
        }

        tmp_expression_name_23 = var_X;
        CHECK_OBJECT(outline_4_var_field);
        tmp_subscript_name_4 = outline_4_var_field;
        tmp_append_value_5 = LOOKUP_SUBSCRIPT(tmp_expression_name_23, tmp_subscript_name_4);
        if (tmp_append_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1178;
            type_description_2 = "oo";
            goto try_except_handler_34;
        }
        assert(PyList_Check(tmp_append_list_5));
        tmp_result = LIST_APPEND1(tmp_append_list_5, tmp_append_value_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1178;
            type_description_2 = "oo";
            goto try_except_handler_34;
        }
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1178;
        type_description_2 = "oo";
        goto try_except_handler_34;
    }
    goto loop_start_10;
    loop_end_10:;
    CHECK_OBJECT(tmp_listcomp_5__contraction);
    tmp_return_value = tmp_listcomp_5__contraction;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_34;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_34:;
    CHECK_OBJECT(tmp_listcomp_5__$0);
    Py_DECREF(tmp_listcomp_5__$0);
    tmp_listcomp_5__$0 = NULL;
    CHECK_OBJECT(tmp_listcomp_5__contraction);
    Py_DECREF(tmp_listcomp_5__contraction);
    tmp_listcomp_5__contraction = NULL;
    Py_XDECREF(tmp_listcomp_5__iter_value_0);
    tmp_listcomp_5__iter_value_0 = NULL;
    goto frame_return_exit_6;
    // Exception handler code:
    try_except_handler_34:;
    exception_keeper_type_31 = exception_type;
    exception_keeper_value_31 = exception_value;
    exception_keeper_tb_31 = exception_tb;
    exception_keeper_lineno_31 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_listcomp_5__$0);
    Py_DECREF(tmp_listcomp_5__$0);
    tmp_listcomp_5__$0 = NULL;
    CHECK_OBJECT(tmp_listcomp_5__contraction);
    Py_DECREF(tmp_listcomp_5__contraction);
    tmp_listcomp_5__contraction = NULL;
    Py_XDECREF(tmp_listcomp_5__iter_value_0);
    tmp_listcomp_5__iter_value_0 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_31;
    exception_value = exception_keeper_value_31;
    exception_tb = exception_keeper_tb_31;
    exception_lineno = exception_keeper_lineno_31;

    goto frame_exception_exit_6;
    // End of try:

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1b8dda8e313cdb8b11620930481ca640_6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_5;

    frame_return_exit_6:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_1b8dda8e313cdb8b11620930481ca640_6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_33;

    frame_exception_exit_6:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1b8dda8e313cdb8b11620930481ca640_6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1b8dda8e313cdb8b11620930481ca640_6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1b8dda8e313cdb8b11620930481ca640_6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1b8dda8e313cdb8b11620930481ca640_6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1b8dda8e313cdb8b11620930481ca640_6,
        type_description_2,
        outline_4_var_field,
        var_X
    );


    // Release cached frame if used for exception.
    if (frame_1b8dda8e313cdb8b11620930481ca640_6 == cache_frame_1b8dda8e313cdb8b11620930481ca640_6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1b8dda8e313cdb8b11620930481ca640_6);
        cache_frame_1b8dda8e313cdb8b11620930481ca640_6 = NULL;
    }

    assertFrameObject(frame_1b8dda8e313cdb8b11620930481ca640_6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_5;

    frame_no_exception_5:;
    goto skip_nested_handling_5;
    nested_frame_exit_5:;
    type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
    goto try_except_handler_33;
    skip_nested_handling_5:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_33:;
    Py_XDECREF(outline_4_var_field);
    outline_4_var_field = NULL;
    goto outline_result_6;
    // Exception handler code:
    try_except_handler_33:;
    exception_keeper_type_32 = exception_type;
    exception_keeper_value_32 = exception_value;
    exception_keeper_tb_32 = exception_tb;
    exception_keeper_lineno_32 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(outline_4_var_field);
    outline_4_var_field = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_32;
    exception_value = exception_keeper_value_32;
    exception_tb = exception_keeper_tb_32;
    exception_lineno = exception_keeper_lineno_32;

    goto outline_exception_5;
    // End of try:
    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;
    outline_exception_5:;
    exception_lineno = 1178;
    goto frame_exception_exit_1;
    outline_result_6:;
    goto frame_return_exit_1;
    goto branch_end_31;
    branch_no_31:;
    {
        PyObject *tmp_expression_name_24;
        if (var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1180;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_24 = var_X;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_name_24, mod_consts[210]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1180;
            type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_31:;
    goto branch_end_30;
    branch_no_30:;
    if (var_X == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 1182;
        type_description_1 = "oocccccoocccobooobccooccooooccocoooooo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_X;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_30:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_37c8b7601e04f4296f883e3b07a18f2f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_6;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_37c8b7601e04f4296f883e3b07a18f2f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_37c8b7601e04f4296f883e3b07a18f2f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_37c8b7601e04f4296f883e3b07a18f2f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_37c8b7601e04f4296f883e3b07a18f2f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_37c8b7601e04f4296f883e3b07a18f2f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_37c8b7601e04f4296f883e3b07a18f2f,
        type_description_1,
        par_fname,
        par_dtype,
        par_comments,
        par_delimiter,
        par_converters,
        par_skiprows,
        par_usecols,
        par_unpack,
        par_ndmin,
        par_encoding,
        par_max_rows,
        var_regex_comments,
        var_user_converters,
        (int)var_byte_converters,
        var_usecols_as_list,
        var_col_idx,
        var_e,
        (int)var_fown,
        var_fh,
        var_fencoding,
        var_locale,
        var_flatten_dtype_internal,
        var_pack_items,
        var_split_line,
        var_read_data,
        var_defconv,
        var_i,
        var_first_vals,
        var_first_line,
        var_N,
        var_dtype_types,
        var_packing,
        var_conv,
        var_tobytes_first,
        var_X,
        var_x,
        var_nshape,
        var_pos
    );


    // Release cached frame if used for exception.
    if (frame_37c8b7601e04f4296f883e3b07a18f2f == cache_frame_37c8b7601e04f4296f883e3b07a18f2f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_37c8b7601e04f4296f883e3b07a18f2f);
        cache_frame_37c8b7601e04f4296f883e3b07a18f2f = NULL;
    }

    assertFrameObject(frame_37c8b7601e04f4296f883e3b07a18f2f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_6:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_fname);
    Py_DECREF(par_fname);
    par_fname = NULL;
    Py_XDECREF(par_dtype);
    par_dtype = NULL;
    CHECK_OBJECT(par_comments);
    Py_DECREF(par_comments);
    par_comments = NULL;
    CHECK_OBJECT(par_delimiter);
    Py_DECREF(par_delimiter);
    par_delimiter = NULL;
    CHECK_OBJECT(par_converters);
    Py_DECREF(par_converters);
    par_converters = NULL;
    CHECK_OBJECT(par_usecols);
    Py_DECREF(par_usecols);
    par_usecols = NULL;
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);
    par_encoding = NULL;
    CHECK_OBJECT(var_regex_comments);
    Py_DECREF(var_regex_comments);
    var_regex_comments = NULL;
    CHECK_OBJECT(var_user_converters);
    Py_DECREF(var_user_converters);
    var_user_converters = NULL;
    var_byte_converters = NUITKA_BOOL_UNASSIGNED;
    Py_XDECREF(var_usecols_as_list);
    var_usecols_as_list = NULL;
    Py_XDECREF(var_col_idx);
    var_col_idx = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    assert(var_fown != NUITKA_BOOL_UNASSIGNED);
    var_fown = NUITKA_BOOL_UNASSIGNED;
    CHECK_OBJECT(var_fh);
    Py_DECREF(var_fh);
    var_fh = NULL;
    CHECK_OBJECT(var_fencoding);
    Py_DECREF(var_fencoding);
    var_fencoding = NULL;
    Py_XDECREF(var_locale);
    var_locale = NULL;
    CHECK_OBJECT(var_flatten_dtype_internal);
    Py_DECREF(var_flatten_dtype_internal);
    var_flatten_dtype_internal = NULL;
    CHECK_OBJECT(var_pack_items);
    Py_DECREF(var_pack_items);
    var_pack_items = NULL;
    CHECK_OBJECT(var_split_line);
    Py_DECREF(var_split_line);
    var_split_line = NULL;
    CHECK_OBJECT(var_read_data);
    Py_DECREF(var_read_data);
    var_read_data = NULL;
    Py_XDECREF(var_defconv);
    var_defconv = NULL;
    Py_XDECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_first_vals);
    var_first_vals = NULL;
    CHECK_OBJECT(var_first_line);
    Py_DECREF(var_first_line);
    var_first_line = NULL;
    CHECK_OBJECT(var_N);
    Py_DECREF(var_N);
    var_N = NULL;
    CHECK_OBJECT(var_dtype_types);
    Py_DECREF(var_dtype_types);
    var_dtype_types = NULL;
    CHECK_OBJECT(var_packing);
    Py_DECREF(var_packing);
    var_packing = NULL;
    Py_XDECREF(var_conv);
    var_conv = NULL;
    Py_XDECREF(var_tobytes_first);
    var_tobytes_first = NULL;
    Py_XDECREF(var_X);
    var_X = NULL;
    Py_XDECREF(var_x);
    var_x = NULL;
    Py_XDECREF(var_nshape);
    var_nshape = NULL;
    Py_XDECREF(var_pos);
    var_pos = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_33 = exception_type;
    exception_keeper_value_33 = exception_value;
    exception_keeper_tb_33 = exception_tb;
    exception_keeper_lineno_33 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_fname);
    par_fname = NULL;
    Py_XDECREF(par_dtype);
    par_dtype = NULL;
    CHECK_OBJECT(par_comments);
    Py_DECREF(par_comments);
    par_comments = NULL;
    CHECK_OBJECT(par_delimiter);
    Py_DECREF(par_delimiter);
    par_delimiter = NULL;
    CHECK_OBJECT(par_converters);
    Py_DECREF(par_converters);
    par_converters = NULL;
    CHECK_OBJECT(par_usecols);
    Py_DECREF(par_usecols);
    par_usecols = NULL;
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);
    par_encoding = NULL;
    CHECK_OBJECT(var_regex_comments);
    Py_DECREF(var_regex_comments);
    var_regex_comments = NULL;
    Py_XDECREF(var_user_converters);
    var_user_converters = NULL;
    var_byte_converters = NUITKA_BOOL_UNASSIGNED;
    Py_XDECREF(var_usecols_as_list);
    var_usecols_as_list = NULL;
    Py_XDECREF(var_col_idx);
    var_col_idx = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    var_fown = NUITKA_BOOL_UNASSIGNED;
    CHECK_OBJECT(var_fh);
    Py_DECREF(var_fh);
    var_fh = NULL;
    CHECK_OBJECT(var_fencoding);
    Py_DECREF(var_fencoding);
    var_fencoding = NULL;
    Py_XDECREF(var_locale);
    var_locale = NULL;
    Py_XDECREF(var_flatten_dtype_internal);
    var_flatten_dtype_internal = NULL;
    CHECK_OBJECT(var_pack_items);
    Py_DECREF(var_pack_items);
    var_pack_items = NULL;
    CHECK_OBJECT(var_split_line);
    Py_DECREF(var_split_line);
    var_split_line = NULL;
    Py_XDECREF(var_read_data);
    var_read_data = NULL;
    Py_XDECREF(var_defconv);
    var_defconv = NULL;
    Py_XDECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_first_vals);
    var_first_vals = NULL;
    CHECK_OBJECT(var_first_line);
    Py_DECREF(var_first_line);
    var_first_line = NULL;
    CHECK_OBJECT(var_N);
    Py_DECREF(var_N);
    var_N = NULL;
    Py_XDECREF(var_dtype_types);
    var_dtype_types = NULL;
    CHECK_OBJECT(var_packing);
    Py_DECREF(var_packing);
    var_packing = NULL;
    Py_XDECREF(var_conv);
    var_conv = NULL;
    Py_XDECREF(var_tobytes_first);
    var_tobytes_first = NULL;
    Py_XDECREF(var_X);
    var_X = NULL;
    Py_XDECREF(var_x);
    var_x = NULL;
    Py_XDECREF(var_nshape);
    var_nshape = NULL;
    Py_XDECREF(var_pos);
    var_pos = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_33;
    exception_value = exception_keeper_value_33;
    exception_tb = exception_keeper_tb_33;
    exception_lineno = exception_keeper_lineno_33;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_skiprows);
    Py_DECREF(par_skiprows);
    CHECK_OBJECT(par_unpack);
    Py_DECREF(par_unpack);
    CHECK_OBJECT(par_ndmin);
    Py_DECREF(par_ndmin);
    CHECK_OBJECT(par_max_rows);
    Py_DECREF(par_max_rows);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_skiprows);
    Py_DECREF(par_skiprows);
    CHECK_OBJECT(par_unpack);
    Py_DECREF(par_unpack);
    CHECK_OBJECT(par_ndmin);
    Py_DECREF(par_ndmin);
    CHECK_OBJECT(par_max_rows);
    Py_DECREF(par_max_rows);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct numpy$lib$npyio$$$function__25_loadtxt$$$genexpr__1_genexpr_locals {
    PyObject *var_comment;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *numpy$lib$npyio$$$function__25_loadtxt$$$genexpr__1_genexpr_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

    // Heap access if used.
    struct numpy$lib$npyio$$$function__25_loadtxt$$$genexpr__1_genexpr_locals *generator_heap = (struct numpy$lib$npyio$$$function__25_loadtxt$$$genexpr__1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_comment = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_3c0761f242e5ce40534f1eab9a868a9e, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 0x340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(Nuitka_Cell_GET(generator->m_closure[0]));
        tmp_next_source_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 923;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_comment;
            generator_heap->var_comment = tmp_assign_source_2;
            Py_INCREF(generator_heap->var_comment);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[145]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[145]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 923;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(generator_heap->var_comment);
        tmp_args_element_name_1 = generator_heap->var_comment;
        generator->m_frame->m_frame.f_lineno = 923;
        tmp_expression_name_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[213], tmp_args_element_name_1);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 923;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 923;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 923;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_comment
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_comment);
    generator_heap->var_comment = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    Py_XDECREF(generator_heap->var_comment);
    generator_heap->var_comment = NULL;


    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__25_loadtxt$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        numpy$lib$npyio$$$function__25_loadtxt$$$genexpr__1_genexpr_context,
        module_numpy$lib$npyio,
        mod_consts[214],
#if PYTHON_VERSION >= 0x350
        mod_consts[215],
#endif
        codeobj_3c0761f242e5ce40534f1eab9a868a9e,
        closure,
        1,
        sizeof(struct numpy$lib$npyio$$$function__25_loadtxt$$$genexpr__1_genexpr_locals)
    );
}


static PyObject *impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__1_flatten_dtype_internal(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dt = python_pars[1];
    PyObject *var_shape = NULL;
    PyObject *var_packing = NULL;
    PyObject *var_dim = NULL;
    PyObject *var_types = NULL;
    PyObject *var_field = NULL;
    PyObject *var_tp = NULL;
    PyObject *var_bytes = NULL;
    PyObject *var_flat_dt = NULL;
    PyObject *var_flat_packing = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    struct Nuitka_FrameObject *frame_7e71276c952a2d8bf742ad0638b2b627;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    static struct Nuitka_FrameObject *cache_frame_7e71276c952a2d8bf742ad0638b2b627 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_7e71276c952a2d8bf742ad0638b2b627)) {
        Py_XDECREF(cache_frame_7e71276c952a2d8bf742ad0638b2b627);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7e71276c952a2d8bf742ad0638b2b627 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7e71276c952a2d8bf742ad0638b2b627 = MAKE_FUNCTION_FRAME(codeobj_7e71276c952a2d8bf742ad0638b2b627, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7e71276c952a2d8bf742ad0638b2b627->m_type_description == NULL);
    frame_7e71276c952a2d8bf742ad0638b2b627 = cache_frame_7e71276c952a2d8bf742ad0638b2b627;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7e71276c952a2d8bf742ad0638b2b627);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7e71276c952a2d8bf742ad0638b2b627) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_expression_name_1;
        CHECK_OBJECT(par_dt);
        tmp_expression_name_1 = par_dt;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[211]);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 984;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 == tmp_compexpr_right_1) ? true : false;
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_name_2;
        CHECK_OBJECT(par_dt);
        tmp_expression_name_2 = par_dt;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[196]);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_shape == NULL);
        var_shape = tmp_assign_source_1;
    }
    {
        bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_tmp_condition_result_2_object_1;
        CHECK_OBJECT(var_shape);
        tmp_len_arg_1 = var_shape;
        tmp_compexpr_left_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 989;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = mod_consts[16];
        tmp_tmp_condition_result_2_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        assert(!(tmp_tmp_condition_result_2_object_1 == NULL));
        tmp_condition_result_2 = CHECK_IF_TRUE(tmp_tmp_condition_result_2_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_2_object_1);
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_list_element_1;
        PyObject *tmp_expression_name_3;
        CHECK_OBJECT(par_dt);
        tmp_expression_name_3 = par_dt;
        tmp_list_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[216]);
        if (tmp_list_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 990;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = PyList_New(1);
        PyList_SET_ITEM(tmp_tuple_element_1, 0, tmp_list_element_1);
        tmp_return_value = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_1);
        tmp_tuple_element_1 = Py_None;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_1);
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_list_element_2;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(var_shape);
        tmp_expression_name_4 = var_shape;
        tmp_subscript_name_1 = mod_consts[217];
        tmp_tuple_element_2 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_4, tmp_subscript_name_1, -1);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_list_element_2 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_list_element_2, 0, tmp_tuple_element_2);
        tmp_tuple_element_2 = (PyObject *)&PyList_Type;
        PyTuple_SET_ITEM0(tmp_list_element_2, 1, tmp_tuple_element_2);
        tmp_assign_source_2 = PyList_New(1);
        PyList_SET_ITEM(tmp_assign_source_2, 0, tmp_list_element_2);
        assert(var_packing == NULL);
        var_packing = tmp_assign_source_2;
    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_tmp_condition_result_3_object_1;
        CHECK_OBJECT(var_shape);
        tmp_len_arg_2 = var_shape;
        tmp_compexpr_left_3 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_compexpr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 993;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = mod_consts[63];
        tmp_tmp_condition_result_3_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_left_3);
        assert(!(tmp_tmp_condition_result_3_object_1 == NULL));
        tmp_condition_result_3 = CHECK_IF_TRUE(tmp_tmp_condition_result_3_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_3_object_1);
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_expression_name_5;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT(par_dt);
        tmp_expression_name_6 = par_dt;
        tmp_expression_name_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_6, mod_consts[196]);
        if (tmp_expression_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 994;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = mod_consts[218];
        tmp_iter_arg_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_5, tmp_subscript_name_2);
        Py_DECREF(tmp_expression_name_5);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 994;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 994;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_4 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooooooo";
                exception_lineno = 994;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_5 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_dim;
            var_dim = tmp_assign_source_5;
            Py_INCREF(var_dim);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_list_element_3;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_expression_name_7;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_subscript_name_4;
        CHECK_OBJECT(var_dim);
        tmp_left_name_1 = var_dim;
        if (var_packing == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[219]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 995;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }

        tmp_expression_name_8 = var_packing;
        tmp_subscript_name_3 = mod_consts[16];
        tmp_expression_name_7 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_8, tmp_subscript_name_3, 0);
        if (tmp_expression_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 995;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        tmp_subscript_name_4 = mod_consts[16];
        tmp_right_name_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_7, tmp_subscript_name_4, 0);
        Py_DECREF(tmp_expression_name_7);
        if (tmp_right_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 995;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        tmp_tuple_element_3 = BINARY_OPERATION_MULT_OBJECT_OBJECT_OBJECT(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_tuple_element_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 995;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        tmp_list_element_3 = PyTuple_New(2);
        {
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            PyTuple_SET_ITEM(tmp_list_element_3, 0, tmp_tuple_element_3);
            if (var_packing == NULL) {

                FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[219]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 995;
                type_description_1 = "ooooooooooo";
                goto tuple_build_exception_1;
            }

            tmp_left_name_2 = var_packing;
            CHECK_OBJECT(var_dim);
            tmp_right_name_2 = var_dim;
            tmp_tuple_element_3 = BINARY_OPERATION_MULT_OBJECT_LIST_OBJECT(tmp_left_name_2, tmp_right_name_2);
            if (tmp_tuple_element_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 995;
                type_description_1 = "ooooooooooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_3);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_list_element_3);
        goto try_except_handler_2;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_assign_source_6 = PyList_New(1);
        PyList_SET_ITEM(tmp_assign_source_6, 0, tmp_list_element_3);
        {
            PyObject *old = var_packing;
            var_packing = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 994;
        type_description_1 = "ooooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    branch_no_3:;
    {
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_left_name_3;
        PyObject *tmp_list_element_4;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_right_name_3;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_expression_name_11;
        CHECK_OBJECT(par_dt);
        tmp_expression_name_9 = par_dt;
        tmp_list_element_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, mod_consts[216]);
        if (tmp_list_element_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 996;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_3 = PyList_New(1);
        PyList_SET_ITEM(tmp_left_name_3, 0, tmp_list_element_4);
        tmp_expression_name_10 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_10 == NULL)) {
            tmp_expression_name_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_name_3);

            exception_lineno = 996;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_10, mod_consts[220]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_name_3);

            exception_lineno = 996;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dt);
        tmp_expression_name_11 = par_dt;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, mod_consts[196]);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_name_3);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 996;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_7e71276c952a2d8bf742ad0638b2b627->m_frame.f_lineno = 996;
        tmp_int_arg_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_int_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_name_3);

            exception_lineno = 996;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_3 = PyNumber_Int(tmp_int_arg_1);
        Py_DECREF(tmp_int_arg_1);
        if (tmp_right_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_name_3);

            exception_lineno = 996;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_4 = BINARY_OPERATION_MULT_OBJECT_LIST_OBJECT(tmp_left_name_3, tmp_right_name_3);
        Py_DECREF(tmp_left_name_3);
        Py_DECREF(tmp_right_name_3);
        if (tmp_tuple_element_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 996;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_4);
        if (var_packing == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[219]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 996;
            type_description_1 = "ooooooooooo";
            goto tuple_build_exception_2;
        }

        tmp_tuple_element_4 = var_packing;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_4);
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        goto frame_return_exit_1;
    }
    branch_end_2:;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_7;
        tmp_assign_source_7 = PyList_New(0);
        assert(var_types == NULL);
        var_types = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        tmp_assign_source_8 = PyList_New(0);
        assert(var_packing == NULL);
        var_packing = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_expression_name_12;
        CHECK_OBJECT(par_dt);
        tmp_expression_name_12 = par_dt;
        tmp_iter_arg_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_12, mod_consts[211]);
        if (tmp_iter_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1000;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_9 = MAKE_ITERATOR(tmp_iter_arg_2);
        Py_DECREF(tmp_iter_arg_2);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1000;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_2__for_iterator == NULL);
        tmp_for_loop_2__for_iterator = tmp_assign_source_9;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT(tmp_for_loop_2__for_iterator);
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_10 = ITERATOR_NEXT(tmp_next_source_2);
        if (tmp_assign_source_10 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_2;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooooooo";
                exception_lineno = 1000;
                goto try_except_handler_3;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_10;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT(tmp_for_loop_2__iter_value);
        tmp_assign_source_11 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_field;
            var_field = tmp_assign_source_11;
            Py_INCREF(var_field);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_expression_name_13;
        PyObject *tmp_expression_name_14;
        PyObject *tmp_subscript_name_5;
        if (par_dt == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[221]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1001;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_4;
        }

        tmp_expression_name_14 = par_dt;
        tmp_expression_name_13 = LOOKUP_ATTRIBUTE(tmp_expression_name_14, mod_consts[222]);
        if (tmp_expression_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1001;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT(var_field);
        tmp_subscript_name_5 = var_field;
        tmp_iter_arg_3 = LOOKUP_SUBSCRIPT(tmp_expression_name_13, tmp_subscript_name_5);
        Py_DECREF(tmp_expression_name_13);
        if (tmp_iter_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1001;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_12 = MAKE_ITERATOR(tmp_iter_arg_3);
        Py_DECREF(tmp_iter_arg_3);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1001;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_12;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_13 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_13 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1001;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_13;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_14 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_14 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1001;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_14;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1001;
                    goto try_except_handler_5;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooooooo";
            exception_lineno = 1001;
            goto try_except_handler_5;
        }
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_4;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_3;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_15;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_15 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_tp;
            var_tp = tmp_assign_source_15;
            Py_INCREF(var_tp);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_16 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_bytes;
            var_bytes = tmp_assign_source_16;
            Py_INCREF(var_bytes);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_iter_arg_4;
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_2;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[28]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1002;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_6;
        }

        tmp_called_name_2 = par_self;
        CHECK_OBJECT(var_tp);
        tmp_args_element_name_2 = var_tp;
        frame_7e71276c952a2d8bf742ad0638b2b627->m_frame.f_lineno = 1002;
        tmp_iter_arg_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        if (tmp_iter_arg_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1002;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_6;
        }
        tmp_assign_source_17 = MAKE_ITERATOR(tmp_iter_arg_4);
        Py_DECREF(tmp_iter_arg_4);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1002;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__source_iter;
            tmp_tuple_unpack_2__source_iter = tmp_assign_source_17;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_18 = UNPACK_NEXT(tmp_unpack_3, 0, 2);
        if (tmp_assign_source_18 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1002;
            goto try_except_handler_7;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_1;
            tmp_tuple_unpack_2__element_1 = tmp_assign_source_18;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_19 = UNPACK_NEXT(tmp_unpack_4, 1, 2);
        if (tmp_assign_source_19 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1002;
            goto try_except_handler_7;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_2;
            tmp_tuple_unpack_2__element_2 = tmp_assign_source_19;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_2); assert(HAS_ITERNEXT(tmp_iterator_name_2));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_2)->tp_iternext)(tmp_iterator_name_2);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1002;
                    goto try_except_handler_7;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooooooo";
            exception_lineno = 1002;
            goto try_except_handler_7;
        }
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
    Py_DECREF(tmp_tuple_unpack_2__source_iter);
    tmp_tuple_unpack_2__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_6;
    // End of try:
    try_end_4:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_2__element_1);
    tmp_tuple_unpack_2__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_2__element_2);
    tmp_tuple_unpack_2__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_3;
    // End of try:
    try_end_5:;
    CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
    Py_DECREF(tmp_tuple_unpack_2__source_iter);
    tmp_tuple_unpack_2__source_iter = NULL;
    {
        PyObject *tmp_assign_source_20;
        CHECK_OBJECT(tmp_tuple_unpack_2__element_1);
        tmp_assign_source_20 = tmp_tuple_unpack_2__element_1;
        {
            PyObject *old = var_flat_dt;
            var_flat_dt = tmp_assign_source_20;
            Py_INCREF(var_flat_dt);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_2__element_1);
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_21;
        CHECK_OBJECT(tmp_tuple_unpack_2__element_2);
        tmp_assign_source_21 = tmp_tuple_unpack_2__element_2;
        {
            PyObject *old = var_flat_packing;
            var_flat_packing = tmp_assign_source_21;
            Py_INCREF(var_flat_packing);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_2__element_2);
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_3;
        if (var_types == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[223]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1003;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }

        tmp_called_instance_1 = var_types;
        CHECK_OBJECT(var_flat_dt);
        tmp_args_element_name_3 = var_flat_dt;
        frame_7e71276c952a2d8bf742ad0638b2b627->m_frame.f_lineno = 1003;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[224], tmp_args_element_name_3);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1003;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_expression_name_15;
        PyObject *tmp_tmp_condition_result_4_object_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_tp);
        tmp_expression_name_15 = var_tp;
        tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_15, mod_consts[199]);
        if (tmp_compexpr_left_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1005;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        tmp_compexpr_right_4 = mod_consts[16];
        tmp_tmp_condition_result_4_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
        Py_DECREF(tmp_compexpr_left_4);
        if (tmp_tmp_condition_result_4_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1005;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_tmp_condition_result_4_object_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_4_object_1);

            exception_lineno = 1005;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_4 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_4_object_1);
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_4;
        if (var_packing == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[219]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1006;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }

        tmp_called_instance_2 = var_packing;
        CHECK_OBJECT(var_flat_packing);
        tmp_args_element_name_4 = var_flat_packing;
        frame_7e71276c952a2d8bf742ad0638b2b627->m_frame.f_lineno = 1006;
        tmp_call_result_2 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[224], tmp_args_element_name_4);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1006;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        Py_DECREF(tmp_call_result_2);
    }
    goto branch_end_4;
    branch_no_4:;
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_expression_name_16;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_len_arg_3;
        if (var_packing == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[219]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1008;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }

        tmp_expression_name_16 = var_packing;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_16, mod_consts[29]);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1008;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT(var_flat_dt);
        tmp_len_arg_3 = var_flat_dt;
        tmp_tuple_element_5 = BUILTIN_LEN(tmp_len_arg_3);
        if (tmp_tuple_element_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_3);

            exception_lineno = 1008;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        tmp_args_element_name_5 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_args_element_name_5, 0, tmp_tuple_element_5);
        CHECK_OBJECT(var_flat_packing);
        tmp_tuple_element_5 = var_flat_packing;
        PyTuple_SET_ITEM0(tmp_args_element_name_5, 1, tmp_tuple_element_5);
        frame_7e71276c952a2d8bf742ad0638b2b627->m_frame.f_lineno = 1008;
        tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_5);
        Py_DECREF(tmp_called_name_3);
        Py_DECREF(tmp_args_element_name_5);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1008;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        Py_DECREF(tmp_call_result_3);
    }
    branch_end_4:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1000;
        type_description_1 = "ooooooooooo";
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;
    {
        PyObject *tmp_tuple_element_6;
        if (var_types == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[223]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1009;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = var_types;
        tmp_return_value = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_6);
        if (var_packing == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[219]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1009;
            type_description_1 = "ooooooooooo";
            goto tuple_build_exception_3;
        }

        tmp_tuple_element_6 = var_packing;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_6);
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        goto frame_return_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7e71276c952a2d8bf742ad0638b2b627);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_7e71276c952a2d8bf742ad0638b2b627);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7e71276c952a2d8bf742ad0638b2b627);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7e71276c952a2d8bf742ad0638b2b627, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7e71276c952a2d8bf742ad0638b2b627->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7e71276c952a2d8bf742ad0638b2b627, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7e71276c952a2d8bf742ad0638b2b627,
        type_description_1,
        par_self,
        par_dt,
        var_shape,
        var_packing,
        var_dim,
        var_types,
        var_field,
        var_tp,
        var_bytes,
        var_flat_dt,
        var_flat_packing
    );


    // Release cached frame if used for exception.
    if (frame_7e71276c952a2d8bf742ad0638b2b627 == cache_frame_7e71276c952a2d8bf742ad0638b2b627) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7e71276c952a2d8bf742ad0638b2b627);
        cache_frame_7e71276c952a2d8bf742ad0638b2b627 = NULL;
    }

    assertFrameObject(frame_7e71276c952a2d8bf742ad0638b2b627);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_shape);
    var_shape = NULL;
    Py_XDECREF(var_packing);
    var_packing = NULL;
    Py_XDECREF(var_dim);
    var_dim = NULL;
    Py_XDECREF(var_types);
    var_types = NULL;
    Py_XDECREF(var_field);
    var_field = NULL;
    Py_XDECREF(var_tp);
    var_tp = NULL;
    Py_XDECREF(var_bytes);
    var_bytes = NULL;
    Py_XDECREF(var_flat_dt);
    var_flat_dt = NULL;
    Py_XDECREF(var_flat_packing);
    var_flat_packing = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_shape);
    var_shape = NULL;
    Py_XDECREF(var_packing);
    var_packing = NULL;
    Py_XDECREF(var_dim);
    var_dim = NULL;
    Py_XDECREF(var_types);
    var_types = NULL;
    Py_XDECREF(var_field);
    var_field = NULL;
    Py_XDECREF(var_tp);
    var_tp = NULL;
    Py_XDECREF(var_bytes);
    var_bytes = NULL;
    Py_XDECREF(var_flat_dt);
    var_flat_dt = NULL;
    Py_XDECREF(var_flat_packing);
    var_flat_packing = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dt);
    Py_DECREF(par_dt);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dt);
    Py_DECREF(par_dt);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__2_pack_items(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_items = python_pars[1];
    PyObject *par_packing = python_pars[2];
    PyObject *var_start = NULL;
    PyObject *var_ret = NULL;
    PyObject *var_length = NULL;
    PyObject *var_subpacking = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_b4d18fb001a90dd499414d48b77fd0b0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_b4d18fb001a90dd499414d48b77fd0b0 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_b4d18fb001a90dd499414d48b77fd0b0)) {
        Py_XDECREF(cache_frame_b4d18fb001a90dd499414d48b77fd0b0);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b4d18fb001a90dd499414d48b77fd0b0 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b4d18fb001a90dd499414d48b77fd0b0 = MAKE_FUNCTION_FRAME(codeobj_b4d18fb001a90dd499414d48b77fd0b0, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b4d18fb001a90dd499414d48b77fd0b0->m_type_description == NULL);
    frame_b4d18fb001a90dd499414d48b77fd0b0 = cache_frame_b4d18fb001a90dd499414d48b77fd0b0;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b4d18fb001a90dd499414d48b77fd0b0);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b4d18fb001a90dd499414d48b77fd0b0) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(par_packing);
        tmp_compexpr_left_1 = par_packing;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 == tmp_compexpr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_items);
        tmp_expression_name_1 = par_items;
        tmp_subscript_name_1 = mod_consts[16];
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_1, tmp_subscript_name_1, 0);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1015;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT(par_packing);
        tmp_compexpr_left_2 = par_packing;
        tmp_compexpr_right_2 = (PyObject *)&PyTuple_Type;
        tmp_condition_result_2 = (tmp_compexpr_left_2 == tmp_compexpr_right_2) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_tuple_arg_1;
        CHECK_OBJECT(par_items);
        tmp_tuple_arg_1 = par_items;
        tmp_return_value = PySequence_Tuple(tmp_tuple_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1017;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT(par_packing);
        tmp_compexpr_left_3 = par_packing;
        tmp_compexpr_right_3 = (PyObject *)&PyList_Type;
        tmp_condition_result_3 = (tmp_compexpr_left_3 == tmp_compexpr_right_3) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_list_arg_1;
        CHECK_OBJECT(par_items);
        tmp_list_arg_1 = par_items;
        tmp_return_value = MAKE_LIST(tmp_list_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1019;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_3;
    branch_no_3:;
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = mod_consts[16];
        assert(var_start == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_start = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = PyList_New(0);
        assert(var_ret == NULL);
        var_ret = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(par_packing);
        tmp_iter_arg_1 = par_packing;
        tmp_assign_source_3 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1023;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_4 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooo";
                exception_lineno = 1023;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_5 = MAKE_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1023;
            type_description_1 = "ooooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_6 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooo";
            exception_lineno = 1023;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_7 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooo";
            exception_lineno = 1023;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooo";
                    exception_lineno = 1023;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooo";
            exception_lineno = 1023;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_length;
            var_length = tmp_assign_source_8;
            Py_INCREF(var_length);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_subpacking;
            var_subpacking = tmp_assign_source_9;
            Py_INCREF(var_subpacking);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_start_name_1;
        PyObject *tmp_stop_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_args_element_name_3;
        if (var_ret == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[225]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1024;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_expression_name_2 = var_ret;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[29]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1024;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_called_name_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[28]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1024;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_called_name_2 = par_self;
        if (par_items == NULL) {
            Py_DECREF(tmp_called_name_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[47]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1024;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_expression_name_3 = par_items;
        if (var_start == NULL) {
            Py_DECREF(tmp_called_name_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[226]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1024;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_start_name_1 = var_start;
        if (var_start == NULL) {
            Py_DECREF(tmp_called_name_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[226]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1024;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_left_name_1 = var_start;
        CHECK_OBJECT(var_length);
        tmp_right_name_1 = var_length;
        tmp_stop_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_1, tmp_right_name_1);
        if (tmp_stop_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 1024;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_subscript_name_2 = MAKE_SLICEOBJ2(tmp_start_name_1, tmp_stop_name_1);
        Py_DECREF(tmp_stop_name_1);
        assert(!(tmp_subscript_name_2 == NULL));
        tmp_args_element_name_2 = LOOKUP_SUBSCRIPT(tmp_expression_name_3, tmp_subscript_name_2);
        Py_DECREF(tmp_subscript_name_2);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 1024;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_subpacking);
        tmp_args_element_name_3 = var_subpacking;
        frame_b4d18fb001a90dd499414d48b77fd0b0->m_frame.f_lineno = 1024;
        {
            PyObject *call_args[] = {tmp_args_element_name_2, tmp_args_element_name_3};
            tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
        }

        Py_DECREF(tmp_args_element_name_2);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 1024;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        frame_b4d18fb001a90dd499414d48b77fd0b0->m_frame.f_lineno = 1024;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1024;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        if (var_start == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[226]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1025;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_left_name_2 = var_start;
        CHECK_OBJECT(var_length);
        tmp_right_name_2 = var_length;
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_name_2, tmp_right_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1025;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_10 = tmp_left_name_2;
        var_start = tmp_assign_source_10;

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1023;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        PyObject *tmp_tuple_arg_2;
        if (var_ret == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[225]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1026;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_arg_2 = var_ret;
        tmp_return_value = PySequence_Tuple(tmp_tuple_arg_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1026;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_3:;
    branch_end_2:;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b4d18fb001a90dd499414d48b77fd0b0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_b4d18fb001a90dd499414d48b77fd0b0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b4d18fb001a90dd499414d48b77fd0b0);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b4d18fb001a90dd499414d48b77fd0b0, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b4d18fb001a90dd499414d48b77fd0b0->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b4d18fb001a90dd499414d48b77fd0b0, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b4d18fb001a90dd499414d48b77fd0b0,
        type_description_1,
        par_self,
        par_items,
        par_packing,
        var_start,
        var_ret,
        var_length,
        var_subpacking
    );


    // Release cached frame if used for exception.
    if (frame_b4d18fb001a90dd499414d48b77fd0b0 == cache_frame_b4d18fb001a90dd499414d48b77fd0b0) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b4d18fb001a90dd499414d48b77fd0b0);
        cache_frame_b4d18fb001a90dd499414d48b77fd0b0 = NULL;
    }

    assertFrameObject(frame_b4d18fb001a90dd499414d48b77fd0b0);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_start);
    var_start = NULL;
    Py_XDECREF(var_ret);
    var_ret = NULL;
    Py_XDECREF(var_length);
    var_length = NULL;
    Py_XDECREF(var_subpacking);
    var_subpacking = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_start);
    var_start = NULL;
    Py_XDECREF(var_ret);
    var_ret = NULL;
    Py_XDECREF(var_length);
    var_length = NULL;
    Py_XDECREF(var_subpacking);
    var_subpacking = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_items);
    Py_DECREF(par_items);
    CHECK_OBJECT(par_packing);
    Py_DECREF(par_packing);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_items);
    Py_DECREF(par_items);
    CHECK_OBJECT(par_packing);
    Py_DECREF(par_packing);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__3_split_line(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_line = python_pars[0];
    struct Nuitka_FrameObject *frame_5367a775332636804cc182b3bd4e1852;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_5367a775332636804cc182b3bd4e1852 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_5367a775332636804cc182b3bd4e1852)) {
        Py_XDECREF(cache_frame_5367a775332636804cc182b3bd4e1852);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5367a775332636804cc182b3bd4e1852 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5367a775332636804cc182b3bd4e1852 = MAKE_FUNCTION_FRAME(codeobj_5367a775332636804cc182b3bd4e1852, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5367a775332636804cc182b3bd4e1852->m_type_description == NULL);
    frame_5367a775332636804cc182b3bd4e1852 = cache_frame_5367a775332636804cc182b3bd4e1852;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5367a775332636804cc182b3bd4e1852);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5367a775332636804cc182b3bd4e1852) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        tmp_called_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[144]);

        if (unlikely(tmp_called_name_1 == NULL)) {
            tmp_called_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[144]);
        }

        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1030;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_line);
        tmp_kw_call_arg_value_0_1 = par_line;
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1030;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_dict_value_0_1 = Nuitka_Cell_GET(self->m_closure[2]);
        frame_5367a775332636804cc182b3bd4e1852->m_frame.f_lineno = 1030;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_1, args, kw_values, mod_consts[157]);
        }

        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1030;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_line;
            assert(old != NULL);
            par_line = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[143]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1032;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_1 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 != tmp_compexpr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_name_1;
        PyObject *tmp_subscript_name_1;
        if (Nuitka_Cell_GET(self->m_closure[3]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[227]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1033;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_2 = Nuitka_Cell_GET(self->m_closure[3]);
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[111]);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1033;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_line);
        tmp_tuple_element_1 = par_line;
        tmp_args_name_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_args_name_1, 0, tmp_tuple_element_1);
        tmp_kwargs_name_1 = PyDict_Copy(mod_consts[228]);
        frame_5367a775332636804cc182b3bd4e1852->m_frame.f_lineno = 1033;
        tmp_expression_name_1 = CALL_FUNCTION(tmp_called_name_2, tmp_args_name_1, tmp_kwargs_name_1);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kwargs_name_1);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1033;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = mod_consts[16];
        tmp_assign_source_2 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_1, tmp_subscript_name_1, 0);
        Py_DECREF(tmp_expression_name_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1033;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_line;
            assert(old != NULL);
            par_line = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_line);
        tmp_called_instance_1 = par_line;
        frame_5367a775332636804cc182b3bd4e1852->m_frame.f_lineno = 1034;
        tmp_assign_source_3 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_1,
            mod_consts[229],
            PyTuple_GET_ITEM(mod_consts[230], 0)
        );

        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_line;
            assert(old != NULL);
            par_line = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_line);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_line);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1035;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(par_line);
        tmp_expression_name_3 = par_line;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[111]);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1036;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {
            Py_DECREF(tmp_called_name_3);
            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[231]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1036;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_1 = Nuitka_Cell_GET(self->m_closure[1]);
        frame_5367a775332636804cc182b3bd4e1852->m_frame.f_lineno = 1036;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_3);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1036;
            type_description_1 = "occcc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    tmp_return_value = PyList_New(0);
    goto frame_return_exit_1;
    branch_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5367a775332636804cc182b3bd4e1852);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_5367a775332636804cc182b3bd4e1852);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5367a775332636804cc182b3bd4e1852);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5367a775332636804cc182b3bd4e1852, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5367a775332636804cc182b3bd4e1852->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5367a775332636804cc182b3bd4e1852, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5367a775332636804cc182b3bd4e1852,
        type_description_1,
        par_line,
        self->m_closure[2],
        self->m_closure[0],
        self->m_closure[3],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_5367a775332636804cc182b3bd4e1852 == cache_frame_5367a775332636804cc182b3bd4e1852) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5367a775332636804cc182b3bd4e1852);
        cache_frame_5367a775332636804cc182b3bd4e1852 = NULL;
    }

    assertFrameObject(frame_5367a775332636804cc182b3bd4e1852);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_line);
    par_line = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_line);
    par_line = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_chunk_size = Nuitka_Cell_New1(python_pars[0]);
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        struct Nuitka_CellObject *tmp_closure_1[11];

        tmp_closure_1[0] = self->m_closure[0];
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_chunk_size;
        Py_INCREF(tmp_closure_1[1]);
        tmp_closure_1[2] = self->m_closure[1];
        Py_INCREF(tmp_closure_1[2]);
        tmp_closure_1[3] = self->m_closure[2];
        Py_INCREF(tmp_closure_1[3]);
        tmp_closure_1[4] = self->m_closure[3];
        Py_INCREF(tmp_closure_1[4]);
        tmp_closure_1[5] = self->m_closure[4];
        Py_INCREF(tmp_closure_1[5]);
        tmp_closure_1[6] = self->m_closure[5];
        Py_INCREF(tmp_closure_1[6]);
        tmp_closure_1[7] = self->m_closure[6];
        Py_INCREF(tmp_closure_1[7]);
        tmp_closure_1[8] = self->m_closure[7];
        Py_INCREF(tmp_closure_1[8]);
        tmp_closure_1[9] = self->m_closure[8];
        Py_INCREF(tmp_closure_1[9]);
        tmp_closure_1[10] = self->m_closure[9];
        Py_INCREF(tmp_closure_1[10]);

        tmp_return_value = MAKE_GENERATOR_numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data$$$genobj__1_read_data(tmp_closure_1);

        goto function_return_exit;
    }

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_chunk_size);
    Py_DECREF(par_chunk_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data$$$genobj__1_read_data_locals {
    PyObject *var_X;
    PyObject *var_line_iter;
    PyObject *var_i;
    PyObject *var_line;
    PyObject *var_vals;
    PyObject *var_line_num;
    PyObject *var_items;
    PyObject *outline_0_var_j;
    PyObject *outline_1_var_conv;
    PyObject *outline_1_var_val;
    PyObject *tmp_for_loop_1__for_iterator;
    PyObject *tmp_for_loop_1__iter_value;
    PyObject *tmp_listcomp$tuple_unpack_1__element_1;
    PyObject *tmp_listcomp$tuple_unpack_1__element_2;
    PyObject *tmp_listcomp$tuple_unpack_1__source_iter;
    PyObject *tmp_listcomp_1__$0;
    PyObject *tmp_listcomp_1__contraction;
    PyObject *tmp_listcomp_1__iter_value_0;
    PyObject *tmp_listcomp_2__$0;
    PyObject *tmp_listcomp_2__contraction;
    PyObject *tmp_listcomp_2__iter_value_0;
    PyObject *tmp_tuple_unpack_1__element_1;
    PyObject *tmp_tuple_unpack_1__element_2;
    PyObject *tmp_tuple_unpack_1__source_iter;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    struct Nuitka_FrameObject *frame_5e1cc2d20d86a11d012ff1e6be162027_2;
    char const *type_description_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    int exception_keeper_lineno_4;
    struct Nuitka_FrameObject *frame_dcc33c022ba0794259682c4d0b517d5f_3;
    char const *type_description_3;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    int exception_keeper_lineno_10;
};

static PyObject *numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data$$$genobj__1_read_data_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

    // Heap access if used.
    struct numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data$$$genobj__1_read_data_locals *generator_heap = (struct numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data$$$genobj__1_read_data_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 2: goto yield_return_2;
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_frame_5e1cc2d20d86a11d012ff1e6be162027_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_dcc33c022ba0794259682c4d0b517d5f_3 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_X = NULL;
    generator_heap->var_line_iter = NULL;
    generator_heap->var_i = NULL;
    generator_heap->var_line = NULL;
    generator_heap->var_vals = NULL;
    generator_heap->var_line_num = NULL;
    generator_heap->var_items = NULL;
    generator_heap->outline_0_var_j = NULL;
    generator_heap->outline_1_var_conv = NULL;
    generator_heap->outline_1_var_val = NULL;
    generator_heap->tmp_for_loop_1__for_iterator = NULL;
    generator_heap->tmp_for_loop_1__iter_value = NULL;
    generator_heap->tmp_listcomp$tuple_unpack_1__element_1 = NULL;
    generator_heap->tmp_listcomp$tuple_unpack_1__element_2 = NULL;
    generator_heap->tmp_listcomp$tuple_unpack_1__source_iter = NULL;
    generator_heap->tmp_listcomp_1__$0 = NULL;
    generator_heap->tmp_listcomp_1__contraction = NULL;
    generator_heap->tmp_listcomp_1__iter_value_0 = NULL;
    generator_heap->tmp_listcomp_2__$0 = NULL;
    generator_heap->tmp_listcomp_2__contraction = NULL;
    generator_heap->tmp_listcomp_2__iter_value_0 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;
    generator_heap->type_description_2 = NULL;
    generator_heap->type_description_3 = NULL;

    // Actual generator function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyList_New(0);
        assert(generator_heap->var_X == NULL);
        generator_heap->var_X = tmp_assign_source_1;
    }
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_37301346538005369406fb049bfd5aa7, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 0x340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_list_element_1;
        PyObject *tmp_args_element_name_2;
        tmp_expression_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[232]);

        if (unlikely(tmp_expression_name_1 == NULL)) {
            tmp_expression_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[232]);
        }

        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1053;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[233]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1053;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }
        if (Nuitka_Cell_GET(generator->m_closure[4]) == NULL) {
            Py_DECREF(tmp_called_name_1);
            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[234]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1053;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }

        tmp_list_element_1 = Nuitka_Cell_GET(generator->m_closure[4]);
        tmp_args_element_name_1 = PyList_New(1);
        PyList_SET_ITEM0(tmp_args_element_name_1, 0, tmp_list_element_1);
        if (Nuitka_Cell_GET(generator->m_closure[3]) == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_1);
            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[178]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1053;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_2 = Nuitka_Cell_GET(generator->m_closure[3]);
        generator->m_frame->m_frame.f_lineno = 1053;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1053;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }
        assert(generator_heap->var_line_iter == NULL);
        generator_heap->var_line_iter = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        tmp_expression_name_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[232]);

        if (unlikely(tmp_expression_name_2 == NULL)) {
            tmp_expression_name_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[232]);
        }

        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1054;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[235]);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1054;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(generator_heap->var_line_iter);
        tmp_args_element_name_3 = generator_heap->var_line_iter;
        if (Nuitka_Cell_GET(generator->m_closure[5]) == NULL) {
            Py_DECREF(tmp_called_name_2);
            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[236]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1054;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_4 = Nuitka_Cell_GET(generator->m_closure[5]);
        generator->m_frame->m_frame.f_lineno = 1054;
        {
            PyObject *call_args[] = {tmp_args_element_name_3, tmp_args_element_name_4};
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
        }

        Py_DECREF(tmp_called_name_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1054;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = generator_heap->var_line_iter;
            assert(old != NULL);
            generator_heap->var_line_iter = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_3;
        PyObject *tmp_args_element_name_5;
        tmp_called_name_3 = (PyObject *)&PyEnum_Type;
        CHECK_OBJECT(generator_heap->var_line_iter);
        tmp_args_element_name_5 = generator_heap->var_line_iter;
        generator->m_frame->m_frame.f_lineno = 1055;
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_5);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1055;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1055;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }
        assert(generator_heap->tmp_for_loop_1__for_iterator == NULL);
        generator_heap->tmp_for_loop_1__for_iterator = tmp_assign_source_4;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(generator_heap->tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = generator_heap->tmp_for_loop_1__for_iterator;
        tmp_assign_source_5 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_5 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "cooooooocccccccccc";
                generator_heap->exception_lineno = 1055;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_for_loop_1__iter_value;
            generator_heap->tmp_for_loop_1__iter_value = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(generator_heap->tmp_for_loop_1__iter_value);
        tmp_iter_arg_2 = generator_heap->tmp_for_loop_1__iter_value;
        tmp_assign_source_6 = MAKE_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1055;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_3;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__source_iter;
            generator_heap->tmp_tuple_unpack_1__source_iter = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_7 == NULL) {
            if (!ERROR_OCCURRED()) {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF(generator_heap->exception_type);
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            }


            generator_heap->type_description_1 = "cooooooocccccccccc";
            generator_heap->exception_lineno = 1055;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_1;
            generator_heap->tmp_tuple_unpack_1__element_1 = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_8 == NULL) {
            if (!ERROR_OCCURRED()) {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF(generator_heap->exception_type);
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            }


            generator_heap->type_description_1 = "cooooooocccccccccc";
            generator_heap->exception_lineno = 1055;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_2;
            generator_heap->tmp_tuple_unpack_1__element_2 = tmp_assign_source_8;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        generator_heap->tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(generator_heap->tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);

                    generator_heap->type_description_1 = "cooooooocccccccccc";
                    generator_heap->exception_lineno = 1055;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(generator_heap->tmp_iterator_attempt);

            generator_heap->exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            generator_heap->exception_value = mod_consts[94];
            Py_INCREF(generator_heap->exception_value);
            generator_heap->exception_tb = NULL;

            generator_heap->type_description_1 = "cooooooocccccccccc";
            generator_heap->exception_lineno = 1055;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
    Py_DECREF(generator_heap->tmp_tuple_unpack_1__source_iter);
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_1);
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_2);
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
    Py_DECREF(generator_heap->tmp_tuple_unpack_1__source_iter);
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__element_1);
        tmp_assign_source_9 = generator_heap->tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = generator_heap->var_i;
            generator_heap->var_i = tmp_assign_source_9;
            Py_INCREF(generator_heap->var_i);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_1);
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__element_2);
        tmp_assign_source_10 = generator_heap->tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = generator_heap->var_line;
            generator_heap->var_line = tmp_assign_source_10;
            Py_INCREF(generator_heap->var_line);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_2);
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_name_4;
        PyObject *tmp_args_element_name_6;
        if (Nuitka_Cell_GET(generator->m_closure[9]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[171]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1056;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }

        tmp_called_name_4 = Nuitka_Cell_GET(generator->m_closure[9]);
        CHECK_OBJECT(generator_heap->var_line);
        tmp_args_element_name_6 = generator_heap->var_line;
        generator->m_frame->m_frame.f_lineno = 1056;
        tmp_assign_source_11 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_4, tmp_args_element_name_6);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1056;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        {
            PyObject *old = generator_heap->var_vals;
            generator_heap->var_vals = tmp_assign_source_11;
            Py_XDECREF(old);
        }

    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_tmp_condition_result_1_object_1;
        CHECK_OBJECT(generator_heap->var_vals);
        tmp_len_arg_1 = generator_heap->var_vals;
        tmp_compexpr_left_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1057;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        tmp_compexpr_right_1 = mod_consts[16];
        tmp_tmp_condition_result_1_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        assert(!(tmp_tmp_condition_result_1_object_1 == NULL));
        tmp_condition_result_1 = CHECK_IF_TRUE(tmp_tmp_condition_result_1_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_1_object_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    goto loop_start_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(generator->m_closure[10]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[182]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1059;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(generator->m_closure[10]));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1059;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_12;
        // Tried code:
        {
            PyObject *tmp_assign_source_13;
            PyObject *tmp_iter_arg_3;
            if (Nuitka_Cell_GET(generator->m_closure[10]) == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[182]);
                generator_heap->exception_tb = NULL;
                NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                CHAIN_EXCEPTION(generator_heap->exception_value);

                generator_heap->exception_lineno = 1060;
                generator_heap->type_description_1 = "cooooooocccccccccc";
                goto try_except_handler_5;
            }

            tmp_iter_arg_3 = Nuitka_Cell_GET(generator->m_closure[10]);
            tmp_assign_source_13 = MAKE_ITERATOR(tmp_iter_arg_3);
            if (tmp_assign_source_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


                generator_heap->exception_lineno = 1060;
                generator_heap->type_description_1 = "cooooooocccccccccc";
                goto try_except_handler_5;
            }
            {
                PyObject *old = generator_heap->tmp_listcomp_1__$0;
                generator_heap->tmp_listcomp_1__$0 = tmp_assign_source_13;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_14;
            tmp_assign_source_14 = PyList_New(0);
            {
                PyObject *old = generator_heap->tmp_listcomp_1__contraction;
                generator_heap->tmp_listcomp_1__contraction = tmp_assign_source_14;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_5e1cc2d20d86a11d012ff1e6be162027_2)) {
            Py_XDECREF(cache_frame_5e1cc2d20d86a11d012ff1e6be162027_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5e1cc2d20d86a11d012ff1e6be162027_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5e1cc2d20d86a11d012ff1e6be162027_2 = MAKE_FUNCTION_FRAME(codeobj_5e1cc2d20d86a11d012ff1e6be162027, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5e1cc2d20d86a11d012ff1e6be162027_2->m_type_description == NULL);
        generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2 = cache_frame_5e1cc2d20d86a11d012ff1e6be162027_2;

        // Push the new frame as the currently active one.
        pushFrameStack(generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_2:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_15;
            CHECK_OBJECT(generator_heap->tmp_listcomp_1__$0);
            tmp_next_source_2 = generator_heap->tmp_listcomp_1__$0;
            tmp_assign_source_15 = ITERATOR_NEXT(tmp_next_source_2);
            if (tmp_assign_source_15 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_2;
                } else {

                    FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                    generator_heap->type_description_2 = "oo";
                    generator_heap->exception_lineno = 1060;
                    goto try_except_handler_6;
                }
            }

            {
                PyObject *old = generator_heap->tmp_listcomp_1__iter_value_0;
                generator_heap->tmp_listcomp_1__iter_value_0 = tmp_assign_source_15;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_16;
            CHECK_OBJECT(generator_heap->tmp_listcomp_1__iter_value_0);
            tmp_assign_source_16 = generator_heap->tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = generator_heap->outline_0_var_j;
                generator_heap->outline_0_var_j = tmp_assign_source_16;
                Py_INCREF(generator_heap->outline_0_var_j);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_expression_name_3;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT(generator_heap->tmp_listcomp_1__contraction);
            tmp_append_list_1 = generator_heap->tmp_listcomp_1__contraction;
            if (generator_heap->var_vals == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[237]);
                generator_heap->exception_tb = NULL;
                NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                CHAIN_EXCEPTION(generator_heap->exception_value);

                generator_heap->exception_lineno = 1060;
                generator_heap->type_description_2 = "oo";
                goto try_except_handler_6;
            }

            tmp_expression_name_3 = generator_heap->var_vals;
            CHECK_OBJECT(generator_heap->outline_0_var_j);
            tmp_subscript_name_1 = generator_heap->outline_0_var_j;
            tmp_append_value_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_3, tmp_subscript_name_1);
            if (tmp_append_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


                generator_heap->exception_lineno = 1060;
                generator_heap->type_description_2 = "oo";
                goto try_except_handler_6;
            }
            assert(PyList_Check(tmp_append_list_1));
            generator_heap->tmp_result = LIST_APPEND1(tmp_append_list_1, tmp_append_value_1);
            if (generator_heap->tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


                generator_heap->exception_lineno = 1060;
                generator_heap->type_description_2 = "oo";
                goto try_except_handler_6;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1060;
            generator_heap->type_description_2 = "oo";
            goto try_except_handler_6;
        }
        goto loop_start_2;
        loop_end_2:;
        CHECK_OBJECT(generator_heap->tmp_listcomp_1__contraction);
        tmp_assign_source_12 = generator_heap->tmp_listcomp_1__contraction;
        Py_INCREF(tmp_assign_source_12);
        goto try_return_handler_6;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT(generator_heap->tmp_listcomp_1__$0);
        Py_DECREF(generator_heap->tmp_listcomp_1__$0);
        generator_heap->tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(generator_heap->tmp_listcomp_1__contraction);
        Py_DECREF(generator_heap->tmp_listcomp_1__contraction);
        generator_heap->tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(generator_heap->tmp_listcomp_1__iter_value_0);
        generator_heap->tmp_listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_6:;
        generator_heap->exception_keeper_type_3 = generator_heap->exception_type;
        generator_heap->exception_keeper_value_3 = generator_heap->exception_value;
        generator_heap->exception_keeper_tb_3 = generator_heap->exception_tb;
        generator_heap->exception_keeper_lineno_3 = generator_heap->exception_lineno;
        generator_heap->exception_type = NULL;
        generator_heap->exception_value = NULL;
        generator_heap->exception_tb = NULL;
        generator_heap->exception_lineno = 0;

        CHECK_OBJECT(generator_heap->tmp_listcomp_1__$0);
        Py_DECREF(generator_heap->tmp_listcomp_1__$0);
        generator_heap->tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(generator_heap->tmp_listcomp_1__contraction);
        Py_DECREF(generator_heap->tmp_listcomp_1__contraction);
        generator_heap->tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(generator_heap->tmp_listcomp_1__iter_value_0);
        generator_heap->tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        generator_heap->exception_type = generator_heap->exception_keeper_type_3;
        generator_heap->exception_value = generator_heap->exception_keeper_value_3;
        generator_heap->exception_tb = generator_heap->exception_keeper_tb_3;
        generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_3;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_1:;
#if 0
        RESTORE_FRAME_EXCEPTION(generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_5;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2);
#endif

        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2, generator_heap->exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2,
            generator_heap->type_description_2,
            generator_heap->outline_0_var_j,
            generator_heap->var_vals
        );


        // Release cached frame if used for exception.
        if (generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2 == cache_frame_5e1cc2d20d86a11d012ff1e6be162027_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5e1cc2d20d86a11d012ff1e6be162027_2);
            cache_frame_5e1cc2d20d86a11d012ff1e6be162027_2 = NULL;
        }

        assertFrameObject(generator_heap->frame_5e1cc2d20d86a11d012ff1e6be162027_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        generator_heap->type_description_1 = "cooooooocccccccccc";
        goto try_except_handler_5;
        skip_nested_handling_1:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_5:;
        Py_XDECREF(generator_heap->outline_0_var_j);
        generator_heap->outline_0_var_j = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_5:;
        generator_heap->exception_keeper_type_4 = generator_heap->exception_type;
        generator_heap->exception_keeper_value_4 = generator_heap->exception_value;
        generator_heap->exception_keeper_tb_4 = generator_heap->exception_tb;
        generator_heap->exception_keeper_lineno_4 = generator_heap->exception_lineno;
        generator_heap->exception_type = NULL;
        generator_heap->exception_value = NULL;
        generator_heap->exception_tb = NULL;
        generator_heap->exception_lineno = 0;

        Py_XDECREF(generator_heap->outline_0_var_j);
        generator_heap->outline_0_var_j = NULL;
        // Re-raise.
        generator_heap->exception_type = generator_heap->exception_keeper_type_4;
        generator_heap->exception_value = generator_heap->exception_keeper_value_4;
        generator_heap->exception_tb = generator_heap->exception_keeper_tb_4;
        generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_4;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        generator_heap->exception_lineno = 1060;
        goto try_except_handler_2;
        outline_result_1:;
        {
            PyObject *old = generator_heap->var_vals;
            generator_heap->var_vals = tmp_assign_source_12;
            Py_XDECREF(old);
        }

    }
    branch_no_2:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_tmp_condition_result_3_object_1;
        int tmp_truth_name_2;
        if (generator_heap->var_vals == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[237]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1061;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }

        tmp_len_arg_2 = generator_heap->var_vals;
        tmp_compexpr_left_2 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1061;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        if (Nuitka_Cell_GET(generator->m_closure[0]) == NULL) {
            Py_DECREF(tmp_compexpr_left_2);
            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[238]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1061;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }

        tmp_compexpr_right_2 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_tmp_condition_result_3_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_tmp_condition_result_3_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1061;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_tmp_condition_result_3_object_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            Py_DECREF(tmp_tmp_condition_result_3_object_1);

            generator_heap->exception_lineno = 1061;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        tmp_condition_result_3 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_3_object_1);
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_left_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_1;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT(generator_heap->var_i);
        tmp_left_name_2 = generator_heap->var_i;
        if (Nuitka_Cell_GET(generator->m_closure[8]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[239]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1062;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }

        tmp_right_name_1 = Nuitka_Cell_GET(generator->m_closure[8]);
        tmp_left_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_2, tmp_right_name_1);
        if (tmp_left_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1062;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        tmp_right_name_2 = mod_consts[63];
        tmp_assign_source_17 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_1, tmp_right_name_2);
        Py_DECREF(tmp_left_name_1);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1062;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        {
            PyObject *old = generator_heap->var_line_num;
            generator_heap->var_line_num = tmp_assign_source_17;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        tmp_left_name_3 = mod_consts[240];
        CHECK_OBJECT(generator_heap->var_line_num);
        tmp_right_name_3 = generator_heap->var_line_num;
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_3, tmp_right_name_3);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1064;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        generator->m_frame->m_frame.f_lineno = 1063;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        generator_heap->exception_type = tmp_raise_type_1;
        generator_heap->exception_lineno = 1063;
        RAISE_EXCEPTION_WITH_TYPE(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
        generator_heap->type_description_1 = "cooooooocccccccccc";
        goto try_except_handler_2;
    }
    branch_no_3:;
    {
        PyObject *tmp_assign_source_18;
        // Tried code:
        {
            PyObject *tmp_assign_source_19;
            PyObject *tmp_iter_arg_4;
            PyObject *tmp_called_name_5;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_args_element_name_8;
            tmp_called_name_5 = (PyObject *)&PyZip_Type;
            if (Nuitka_Cell_GET(generator->m_closure[2]) == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[191]);
                generator_heap->exception_tb = NULL;
                NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                CHAIN_EXCEPTION(generator_heap->exception_value);

                generator_heap->exception_lineno = 1067;
                generator_heap->type_description_1 = "cooooooocccccccccc";
                goto try_except_handler_7;
            }

            tmp_args_element_name_7 = Nuitka_Cell_GET(generator->m_closure[2]);
            if (generator_heap->var_vals == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[237]);
                generator_heap->exception_tb = NULL;
                NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                CHAIN_EXCEPTION(generator_heap->exception_value);

                generator_heap->exception_lineno = 1067;
                generator_heap->type_description_1 = "cooooooocccccccccc";
                goto try_except_handler_7;
            }

            tmp_args_element_name_8 = generator_heap->var_vals;
            generator->m_frame->m_frame.f_lineno = 1067;
            {
                PyObject *call_args[] = {tmp_args_element_name_7, tmp_args_element_name_8};
                tmp_iter_arg_4 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_5, call_args);
            }

            if (tmp_iter_arg_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


                generator_heap->exception_lineno = 1067;
                generator_heap->type_description_1 = "cooooooocccccccccc";
                goto try_except_handler_7;
            }
            tmp_assign_source_19 = MAKE_ITERATOR(tmp_iter_arg_4);
            Py_DECREF(tmp_iter_arg_4);
            if (tmp_assign_source_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


                generator_heap->exception_lineno = 1067;
                generator_heap->type_description_1 = "cooooooocccccccccc";
                goto try_except_handler_7;
            }
            {
                PyObject *old = generator_heap->tmp_listcomp_2__$0;
                generator_heap->tmp_listcomp_2__$0 = tmp_assign_source_19;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_20;
            tmp_assign_source_20 = PyList_New(0);
            {
                PyObject *old = generator_heap->tmp_listcomp_2__contraction;
                generator_heap->tmp_listcomp_2__contraction = tmp_assign_source_20;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_dcc33c022ba0794259682c4d0b517d5f_3)) {
            Py_XDECREF(cache_frame_dcc33c022ba0794259682c4d0b517d5f_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_dcc33c022ba0794259682c4d0b517d5f_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_dcc33c022ba0794259682c4d0b517d5f_3 = MAKE_FUNCTION_FRAME(codeobj_dcc33c022ba0794259682c4d0b517d5f, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_dcc33c022ba0794259682c4d0b517d5f_3->m_type_description == NULL);
        generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3 = cache_frame_dcc33c022ba0794259682c4d0b517d5f_3;

        // Push the new frame as the currently active one.
        pushFrameStack(generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_3:;
        {
            PyObject *tmp_next_source_3;
            PyObject *tmp_assign_source_21;
            CHECK_OBJECT(generator_heap->tmp_listcomp_2__$0);
            tmp_next_source_3 = generator_heap->tmp_listcomp_2__$0;
            tmp_assign_source_21 = ITERATOR_NEXT(tmp_next_source_3);
            if (tmp_assign_source_21 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_3;
                } else {

                    FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                    generator_heap->type_description_2 = "oo";
                    generator_heap->exception_lineno = 1067;
                    goto try_except_handler_8;
                }
            }

            {
                PyObject *old = generator_heap->tmp_listcomp_2__iter_value_0;
                generator_heap->tmp_listcomp_2__iter_value_0 = tmp_assign_source_21;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_22;
            PyObject *tmp_iter_arg_5;
            CHECK_OBJECT(generator_heap->tmp_listcomp_2__iter_value_0);
            tmp_iter_arg_5 = generator_heap->tmp_listcomp_2__iter_value_0;
            tmp_assign_source_22 = MAKE_ITERATOR(tmp_iter_arg_5);
            if (tmp_assign_source_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


                generator_heap->exception_lineno = 1067;
                generator_heap->type_description_2 = "oo";
                goto try_except_handler_9;
            }
            {
                PyObject *old = generator_heap->tmp_listcomp$tuple_unpack_1__source_iter;
                generator_heap->tmp_listcomp$tuple_unpack_1__source_iter = tmp_assign_source_22;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_23;
            PyObject *tmp_unpack_3;
            CHECK_OBJECT(generator_heap->tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_unpack_3 = generator_heap->tmp_listcomp$tuple_unpack_1__source_iter;
            tmp_assign_source_23 = UNPACK_NEXT(tmp_unpack_3, 0, 2);
            if (tmp_assign_source_23 == NULL) {
                if (!ERROR_OCCURRED()) {
                    generator_heap->exception_type = PyExc_StopIteration;
                    Py_INCREF(generator_heap->exception_type);
                    generator_heap->exception_value = NULL;
                    generator_heap->exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                }


                generator_heap->type_description_2 = "oo";
                generator_heap->exception_lineno = 1067;
                goto try_except_handler_10;
            }
            {
                PyObject *old = generator_heap->tmp_listcomp$tuple_unpack_1__element_1;
                generator_heap->tmp_listcomp$tuple_unpack_1__element_1 = tmp_assign_source_23;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_24;
            PyObject *tmp_unpack_4;
            CHECK_OBJECT(generator_heap->tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_unpack_4 = generator_heap->tmp_listcomp$tuple_unpack_1__source_iter;
            tmp_assign_source_24 = UNPACK_NEXT(tmp_unpack_4, 1, 2);
            if (tmp_assign_source_24 == NULL) {
                if (!ERROR_OCCURRED()) {
                    generator_heap->exception_type = PyExc_StopIteration;
                    Py_INCREF(generator_heap->exception_type);
                    generator_heap->exception_value = NULL;
                    generator_heap->exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                }


                generator_heap->type_description_2 = "oo";
                generator_heap->exception_lineno = 1067;
                goto try_except_handler_10;
            }
            {
                PyObject *old = generator_heap->tmp_listcomp$tuple_unpack_1__element_2;
                generator_heap->tmp_listcomp$tuple_unpack_1__element_2 = tmp_assign_source_24;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_2;
            CHECK_OBJECT(generator_heap->tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_iterator_name_2 = generator_heap->tmp_listcomp$tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_2); assert(HAS_ITERNEXT(tmp_iterator_name_2));

            generator_heap->tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_2)->tp_iternext)(tmp_iterator_name_2);

            if (likely(generator_heap->tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);

                        generator_heap->type_description_2 = "oo";
                        generator_heap->exception_lineno = 1067;
                        goto try_except_handler_10;
                    }
                }
            } else {
                Py_DECREF(generator_heap->tmp_iterator_attempt);

                generator_heap->exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                generator_heap->exception_value = mod_consts[94];
                Py_INCREF(generator_heap->exception_value);
                generator_heap->exception_tb = NULL;

                generator_heap->type_description_2 = "oo";
                generator_heap->exception_lineno = 1067;
                goto try_except_handler_10;
            }
        }
        goto try_end_3;
        // Exception handler code:
        try_except_handler_10:;
        generator_heap->exception_keeper_type_5 = generator_heap->exception_type;
        generator_heap->exception_keeper_value_5 = generator_heap->exception_value;
        generator_heap->exception_keeper_tb_5 = generator_heap->exception_tb;
        generator_heap->exception_keeper_lineno_5 = generator_heap->exception_lineno;
        generator_heap->exception_type = NULL;
        generator_heap->exception_value = NULL;
        generator_heap->exception_tb = NULL;
        generator_heap->exception_lineno = 0;

        CHECK_OBJECT(generator_heap->tmp_listcomp$tuple_unpack_1__source_iter);
        Py_DECREF(generator_heap->tmp_listcomp$tuple_unpack_1__source_iter);
        generator_heap->tmp_listcomp$tuple_unpack_1__source_iter = NULL;
        // Re-raise.
        generator_heap->exception_type = generator_heap->exception_keeper_type_5;
        generator_heap->exception_value = generator_heap->exception_keeper_value_5;
        generator_heap->exception_tb = generator_heap->exception_keeper_tb_5;
        generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_5;

        goto try_except_handler_9;
        // End of try:
        try_end_3:;
        goto try_end_4;
        // Exception handler code:
        try_except_handler_9:;
        generator_heap->exception_keeper_type_6 = generator_heap->exception_type;
        generator_heap->exception_keeper_value_6 = generator_heap->exception_value;
        generator_heap->exception_keeper_tb_6 = generator_heap->exception_tb;
        generator_heap->exception_keeper_lineno_6 = generator_heap->exception_lineno;
        generator_heap->exception_type = NULL;
        generator_heap->exception_value = NULL;
        generator_heap->exception_tb = NULL;
        generator_heap->exception_lineno = 0;

        Py_XDECREF(generator_heap->tmp_listcomp$tuple_unpack_1__element_1);
        generator_heap->tmp_listcomp$tuple_unpack_1__element_1 = NULL;
        Py_XDECREF(generator_heap->tmp_listcomp$tuple_unpack_1__element_2);
        generator_heap->tmp_listcomp$tuple_unpack_1__element_2 = NULL;
        // Re-raise.
        generator_heap->exception_type = generator_heap->exception_keeper_type_6;
        generator_heap->exception_value = generator_heap->exception_keeper_value_6;
        generator_heap->exception_tb = generator_heap->exception_keeper_tb_6;
        generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_6;

        goto try_except_handler_8;
        // End of try:
        try_end_4:;
        CHECK_OBJECT(generator_heap->tmp_listcomp$tuple_unpack_1__source_iter);
        Py_DECREF(generator_heap->tmp_listcomp$tuple_unpack_1__source_iter);
        generator_heap->tmp_listcomp$tuple_unpack_1__source_iter = NULL;
        {
            PyObject *tmp_assign_source_25;
            CHECK_OBJECT(generator_heap->tmp_listcomp$tuple_unpack_1__element_1);
            tmp_assign_source_25 = generator_heap->tmp_listcomp$tuple_unpack_1__element_1;
            {
                PyObject *old = generator_heap->outline_1_var_conv;
                generator_heap->outline_1_var_conv = tmp_assign_source_25;
                Py_INCREF(generator_heap->outline_1_var_conv);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(generator_heap->tmp_listcomp$tuple_unpack_1__element_1);
        generator_heap->tmp_listcomp$tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_26;
            CHECK_OBJECT(generator_heap->tmp_listcomp$tuple_unpack_1__element_2);
            tmp_assign_source_26 = generator_heap->tmp_listcomp$tuple_unpack_1__element_2;
            {
                PyObject *old = generator_heap->outline_1_var_val;
                generator_heap->outline_1_var_val = tmp_assign_source_26;
                Py_INCREF(generator_heap->outline_1_var_val);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(generator_heap->tmp_listcomp$tuple_unpack_1__element_2);
        generator_heap->tmp_listcomp$tuple_unpack_1__element_2 = NULL;

        {
            PyObject *tmp_append_list_2;
            PyObject *tmp_append_value_2;
            PyObject *tmp_called_name_6;
            PyObject *tmp_args_element_name_9;
            CHECK_OBJECT(generator_heap->tmp_listcomp_2__contraction);
            tmp_append_list_2 = generator_heap->tmp_listcomp_2__contraction;
            CHECK_OBJECT(generator_heap->outline_1_var_conv);
            tmp_called_name_6 = generator_heap->outline_1_var_conv;
            CHECK_OBJECT(generator_heap->outline_1_var_val);
            tmp_args_element_name_9 = generator_heap->outline_1_var_val;
            generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3->m_frame.f_lineno = 1067;
            tmp_append_value_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_6, tmp_args_element_name_9);
            if (tmp_append_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


                generator_heap->exception_lineno = 1067;
                generator_heap->type_description_2 = "oo";
                goto try_except_handler_8;
            }
            assert(PyList_Check(tmp_append_list_2));
            generator_heap->tmp_result = LIST_APPEND1(tmp_append_list_2, tmp_append_value_2);
            if (generator_heap->tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


                generator_heap->exception_lineno = 1067;
                generator_heap->type_description_2 = "oo";
                goto try_except_handler_8;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1067;
            generator_heap->type_description_2 = "oo";
            goto try_except_handler_8;
        }
        goto loop_start_3;
        loop_end_3:;
        CHECK_OBJECT(generator_heap->tmp_listcomp_2__contraction);
        tmp_assign_source_18 = generator_heap->tmp_listcomp_2__contraction;
        Py_INCREF(tmp_assign_source_18);
        goto try_return_handler_8;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_8:;
        CHECK_OBJECT(generator_heap->tmp_listcomp_2__$0);
        Py_DECREF(generator_heap->tmp_listcomp_2__$0);
        generator_heap->tmp_listcomp_2__$0 = NULL;
        CHECK_OBJECT(generator_heap->tmp_listcomp_2__contraction);
        Py_DECREF(generator_heap->tmp_listcomp_2__contraction);
        generator_heap->tmp_listcomp_2__contraction = NULL;
        Py_XDECREF(generator_heap->tmp_listcomp_2__iter_value_0);
        generator_heap->tmp_listcomp_2__iter_value_0 = NULL;
        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_8:;
        generator_heap->exception_keeper_type_7 = generator_heap->exception_type;
        generator_heap->exception_keeper_value_7 = generator_heap->exception_value;
        generator_heap->exception_keeper_tb_7 = generator_heap->exception_tb;
        generator_heap->exception_keeper_lineno_7 = generator_heap->exception_lineno;
        generator_heap->exception_type = NULL;
        generator_heap->exception_value = NULL;
        generator_heap->exception_tb = NULL;
        generator_heap->exception_lineno = 0;

        CHECK_OBJECT(generator_heap->tmp_listcomp_2__$0);
        Py_DECREF(generator_heap->tmp_listcomp_2__$0);
        generator_heap->tmp_listcomp_2__$0 = NULL;
        CHECK_OBJECT(generator_heap->tmp_listcomp_2__contraction);
        Py_DECREF(generator_heap->tmp_listcomp_2__contraction);
        generator_heap->tmp_listcomp_2__contraction = NULL;
        Py_XDECREF(generator_heap->tmp_listcomp_2__iter_value_0);
        generator_heap->tmp_listcomp_2__iter_value_0 = NULL;
        // Re-raise.
        generator_heap->exception_type = generator_heap->exception_keeper_type_7;
        generator_heap->exception_value = generator_heap->exception_keeper_value_7;
        generator_heap->exception_tb = generator_heap->exception_keeper_tb_7;
        generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_7;

        goto frame_exception_exit_3;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION(generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_7;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3);
#endif

        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3, generator_heap->exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3,
            generator_heap->type_description_2,
            generator_heap->outline_1_var_conv,
            generator_heap->outline_1_var_val
        );


        // Release cached frame if used for exception.
        if (generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3 == cache_frame_dcc33c022ba0794259682c4d0b517d5f_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_dcc33c022ba0794259682c4d0b517d5f_3);
            cache_frame_dcc33c022ba0794259682c4d0b517d5f_3 = NULL;
        }

        assertFrameObject(generator_heap->frame_dcc33c022ba0794259682c4d0b517d5f_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;
        generator_heap->type_description_1 = "cooooooocccccccccc";
        goto try_except_handler_7;
        skip_nested_handling_2:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        Py_XDECREF(generator_heap->outline_1_var_conv);
        generator_heap->outline_1_var_conv = NULL;
        Py_XDECREF(generator_heap->outline_1_var_val);
        generator_heap->outline_1_var_val = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_7:;
        generator_heap->exception_keeper_type_8 = generator_heap->exception_type;
        generator_heap->exception_keeper_value_8 = generator_heap->exception_value;
        generator_heap->exception_keeper_tb_8 = generator_heap->exception_tb;
        generator_heap->exception_keeper_lineno_8 = generator_heap->exception_lineno;
        generator_heap->exception_type = NULL;
        generator_heap->exception_value = NULL;
        generator_heap->exception_tb = NULL;
        generator_heap->exception_lineno = 0;

        Py_XDECREF(generator_heap->outline_1_var_conv);
        generator_heap->outline_1_var_conv = NULL;
        Py_XDECREF(generator_heap->outline_1_var_val);
        generator_heap->outline_1_var_val = NULL;
        // Re-raise.
        generator_heap->exception_type = generator_heap->exception_keeper_type_8;
        generator_heap->exception_value = generator_heap->exception_keeper_value_8;
        generator_heap->exception_tb = generator_heap->exception_keeper_tb_8;
        generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_8;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        generator_heap->exception_lineno = 1067;
        goto try_except_handler_2;
        outline_result_2:;
        {
            PyObject *old = generator_heap->var_items;
            generator_heap->var_items = tmp_assign_source_18;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_called_name_7;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_args_element_name_11;
        if (Nuitka_Cell_GET(generator->m_closure[6]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[168]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1070;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }

        tmp_called_name_7 = Nuitka_Cell_GET(generator->m_closure[6]);
        CHECK_OBJECT(generator_heap->var_items);
        tmp_args_element_name_10 = generator_heap->var_items;
        if (Nuitka_Cell_GET(generator->m_closure[7]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[219]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1070;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }

        tmp_args_element_name_11 = Nuitka_Cell_GET(generator->m_closure[7]);
        generator->m_frame->m_frame.f_lineno = 1070;
        {
            PyObject *call_args[] = {tmp_args_element_name_10, tmp_args_element_name_11};
            tmp_assign_source_27 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_7, call_args);
        }

        if (tmp_assign_source_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1070;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        {
            PyObject *old = generator_heap->var_items;
            assert(old != NULL);
            generator_heap->var_items = tmp_assign_source_27;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_12;
        if (generator_heap->var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[194]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1071;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }

        tmp_called_instance_1 = generator_heap->var_X;
        CHECK_OBJECT(generator_heap->var_items);
        tmp_args_element_name_12 = generator_heap->var_items;
        generator->m_frame->m_frame.f_lineno = 1071;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[29], tmp_args_element_name_12);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1071;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_len_arg_3;
        PyObject *tmp_tmp_condition_result_4_object_1;
        int tmp_truth_name_3;
        if (generator_heap->var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[194]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1072;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }

        tmp_len_arg_3 = generator_heap->var_X;
        tmp_compexpr_left_3 = BUILTIN_LEN(tmp_len_arg_3);
        if (tmp_compexpr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1072;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        if (Nuitka_Cell_GET(generator->m_closure[1]) == NULL) {
            Py_DECREF(tmp_compexpr_left_3);
            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[241]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1072;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }

        tmp_compexpr_right_3 = Nuitka_Cell_GET(generator->m_closure[1]);
        tmp_tmp_condition_result_4_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_left_3);
        if (tmp_tmp_condition_result_4_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1072;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_tmp_condition_result_4_object_1);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            Py_DECREF(tmp_tmp_condition_result_4_object_1);

            generator_heap->exception_lineno = 1072;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        tmp_condition_result_4 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_4_object_1);
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_expression_name_4;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if (generator_heap->var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[194]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1073;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }

        tmp_expression_name_4 = generator_heap->var_X;
        Py_INCREF(tmp_expression_name_4);
        generator->m_yield_return_index = 1;
        return tmp_expression_name_4;
        yield_return_1:
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1073;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    {
        PyObject *tmp_assign_source_28;
        tmp_assign_source_28 = PyList_New(0);
        {
            PyObject *old = generator_heap->var_X;
            generator_heap->var_X = tmp_assign_source_28;
            Py_XDECREF(old);
        }

    }
    branch_no_4:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 1055;
        generator_heap->type_description_1 = "cooooooocccccccccc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_9 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_9 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_9 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_9 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_for_loop_1__iter_value);
    generator_heap->tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(generator_heap->tmp_for_loop_1__for_iterator);
    Py_DECREF(generator_heap->tmp_for_loop_1__for_iterator);
    generator_heap->tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_9;
    generator_heap->exception_value = generator_heap->exception_keeper_value_9;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_9;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF(generator_heap->tmp_for_loop_1__iter_value);
    generator_heap->tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(generator_heap->tmp_for_loop_1__for_iterator);
    Py_DECREF(generator_heap->tmp_for_loop_1__for_iterator);
    generator_heap->tmp_for_loop_1__for_iterator = NULL;
    {
        nuitka_bool tmp_condition_result_5;
        int tmp_truth_name_4;
        if (generator_heap->var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[194]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1075;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_4 = CHECK_IF_TRUE(generator_heap->var_X);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1075;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_expression_name_5;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_2;
        if (generator_heap->var_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[194]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 1076;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_5 = generator_heap->var_X;
        Py_INCREF(tmp_expression_name_5);
        generator->m_yield_return_index = 2;
        return tmp_expression_name_5;
        yield_return_2:
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1076;
            generator_heap->type_description_1 = "cooooooocccccccccc";
            goto frame_exception_exit_1;
        }
        tmp_yield_result_2 = yield_return_value;
    }
    branch_no_5:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_3;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            generator->m_closure[1],
            generator_heap->var_X,
            generator_heap->var_line_iter,
            generator_heap->var_i,
            generator_heap->var_line,
            generator_heap->var_vals,
            generator_heap->var_line_num,
            generator_heap->var_items,
            generator->m_closure[4],
            generator->m_closure[3],
            generator->m_closure[5],
            generator->m_closure[9],
            generator->m_closure[10],
            generator->m_closure[0],
            generator->m_closure[8],
            generator->m_closure[2],
            generator->m_closure[6],
            generator->m_closure[7]
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_3:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_10 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_10 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_10 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_10 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_X);
    generator_heap->var_X = NULL;
    Py_XDECREF(generator_heap->var_line_iter);
    generator_heap->var_line_iter = NULL;
    Py_XDECREF(generator_heap->var_i);
    generator_heap->var_i = NULL;
    Py_XDECREF(generator_heap->var_line);
    generator_heap->var_line = NULL;
    Py_XDECREF(generator_heap->var_vals);
    generator_heap->var_vals = NULL;
    Py_XDECREF(generator_heap->var_line_num);
    generator_heap->var_line_num = NULL;
    Py_XDECREF(generator_heap->var_items);
    generator_heap->var_items = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_10;
    generator_heap->exception_value = generator_heap->exception_keeper_value_10;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_10;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_10;

    goto function_exception_exit;
    // End of try:
    try_end_6:;
    Py_XDECREF(generator_heap->var_X);
    generator_heap->var_X = NULL;
    CHECK_OBJECT(generator_heap->var_line_iter);
    Py_DECREF(generator_heap->var_line_iter);
    generator_heap->var_line_iter = NULL;
    Py_XDECREF(generator_heap->var_i);
    generator_heap->var_i = NULL;
    Py_XDECREF(generator_heap->var_line);
    generator_heap->var_line = NULL;
    Py_XDECREF(generator_heap->var_vals);
    generator_heap->var_vals = NULL;
    Py_XDECREF(generator_heap->var_line_num);
    generator_heap->var_line_num = NULL;
    Py_XDECREF(generator_heap->var_items);
    generator_heap->var_items = NULL;


    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data$$$genobj__1_read_data(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data$$$genobj__1_read_data_context,
        module_numpy$lib$npyio,
        mod_consts[174],
#if PYTHON_VERSION >= 0x350
        mod_consts[175],
#endif
        codeobj_37301346538005369406fb049bfd5aa7,
        closure,
        11,
        sizeof(struct numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data$$$genobj__1_read_data_locals)
    );
}


static PyObject *impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__5_tobytes_first(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[0];
    PyObject *par_conv = python_pars[1];
    struct Nuitka_FrameObject *frame_b731066c572840eb56efb7bda1cd137e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_b731066c572840eb56efb7bda1cd137e = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b731066c572840eb56efb7bda1cd137e)) {
        Py_XDECREF(cache_frame_b731066c572840eb56efb7bda1cd137e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b731066c572840eb56efb7bda1cd137e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b731066c572840eb56efb7bda1cd137e = MAKE_FUNCTION_FRAME(codeobj_b731066c572840eb56efb7bda1cd137e, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b731066c572840eb56efb7bda1cd137e->m_type_description == NULL);
    frame_b731066c572840eb56efb7bda1cd137e = cache_frame_b731066c572840eb56efb7bda1cd137e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b731066c572840eb56efb7bda1cd137e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b731066c572840eb56efb7bda1cd137e) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_type_arg_1;
        CHECK_OBJECT(par_x);
        tmp_type_arg_1 = par_x;
        tmp_compexpr_left_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        assert(!(tmp_compexpr_left_1 == NULL));
        tmp_compexpr_right_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[142]);

        if (unlikely(tmp_compexpr_right_1 == NULL)) {
            tmp_compexpr_right_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
        }

        if (tmp_compexpr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_1);

            exception_lineno = 1124;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_compexpr_left_1 == tmp_compexpr_right_1) ? true : false;
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(par_conv);
        tmp_called_name_1 = par_conv;
        CHECK_OBJECT(par_x);
        tmp_args_element_name_1 = par_x;
        frame_b731066c572840eb56efb7bda1cd137e->m_frame.f_lineno = 1125;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1125;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_conv);
        tmp_called_name_2 = par_conv;
        CHECK_OBJECT(par_x);
        tmp_called_instance_1 = par_x;
        frame_b731066c572840eb56efb7bda1cd137e->m_frame.f_lineno = 1126;
        tmp_args_element_name_2 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_1,
            mod_consts[242],
            PyTuple_GET_ITEM(mod_consts[243], 0)
        );

        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1126;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_b731066c572840eb56efb7bda1cd137e->m_frame.f_lineno = 1126;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1126;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b731066c572840eb56efb7bda1cd137e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_b731066c572840eb56efb7bda1cd137e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b731066c572840eb56efb7bda1cd137e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b731066c572840eb56efb7bda1cd137e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b731066c572840eb56efb7bda1cd137e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b731066c572840eb56efb7bda1cd137e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b731066c572840eb56efb7bda1cd137e,
        type_description_1,
        par_x,
        par_conv
    );


    // Release cached frame if used for exception.
    if (frame_b731066c572840eb56efb7bda1cd137e == cache_frame_b731066c572840eb56efb7bda1cd137e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b731066c572840eb56efb7bda1cd137e);
        cache_frame_b731066c572840eb56efb7bda1cd137e = NULL;
    }

    assertFrameObject(frame_b731066c572840eb56efb7bda1cd137e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_conv);
    Py_DECREF(par_conv);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_conv);
    Py_DECREF(par_conv);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__6_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[0];
    struct Nuitka_FrameObject *frame_da5318f4e4c63064b0eb10d014c7282c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_da5318f4e4c63064b0eb10d014c7282c = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_da5318f4e4c63064b0eb10d014c7282c)) {
        Py_XDECREF(cache_frame_da5318f4e4c63064b0eb10d014c7282c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_da5318f4e4c63064b0eb10d014c7282c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_da5318f4e4c63064b0eb10d014c7282c = MAKE_FUNCTION_FRAME(codeobj_da5318f4e4c63064b0eb10d014c7282c, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_da5318f4e4c63064b0eb10d014c7282c->m_type_description == NULL);
    frame_da5318f4e4c63064b0eb10d014c7282c = cache_frame_da5318f4e4c63064b0eb10d014c7282c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_da5318f4e4c63064b0eb10d014c7282c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_da5318f4e4c63064b0eb10d014c7282c) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(par_x);
        tmp_expression_name_1 = par_x;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[242]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1132;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {
            Py_DECREF(tmp_called_name_1);
            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[160]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1132;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_1 = Nuitka_Cell_GET(self->m_closure[0]);
        frame_da5318f4e4c63064b0eb10d014c7282c->m_frame.f_lineno = 1132;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1132;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_da5318f4e4c63064b0eb10d014c7282c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_da5318f4e4c63064b0eb10d014c7282c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_da5318f4e4c63064b0eb10d014c7282c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_da5318f4e4c63064b0eb10d014c7282c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_da5318f4e4c63064b0eb10d014c7282c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_da5318f4e4c63064b0eb10d014c7282c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_da5318f4e4c63064b0eb10d014c7282c,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_da5318f4e4c63064b0eb10d014c7282c == cache_frame_da5318f4e4c63064b0eb10d014c7282c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_da5318f4e4c63064b0eb10d014c7282c);
        cache_frame_da5318f4e4c63064b0eb10d014c7282c = NULL;
    }

    assertFrameObject(frame_da5318f4e4c63064b0eb10d014c7282c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__26__savetxt_dispatcher(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_fname = python_pars[0];
    PyObject *par_X = python_pars[1];
    PyObject *par_fmt = python_pars[2];
    PyObject *par_delimiter = python_pars[3];
    PyObject *par_newline = python_pars[4];
    PyObject *par_header = python_pars[5];
    PyObject *par_footer = python_pars[6];
    PyObject *par_comments = python_pars[7];
    PyObject *par_encoding = python_pars[8];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(par_X);
        tmp_tuple_element_1 = par_X;
        tmp_return_value = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
        goto function_return_exit;
    }

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_fname);
    Py_DECREF(par_fname);
    CHECK_OBJECT(par_X);
    Py_DECREF(par_X);
    CHECK_OBJECT(par_fmt);
    Py_DECREF(par_fmt);
    CHECK_OBJECT(par_delimiter);
    Py_DECREF(par_delimiter);
    CHECK_OBJECT(par_newline);
    Py_DECREF(par_newline);
    CHECK_OBJECT(par_header);
    Py_DECREF(par_header);
    CHECK_OBJECT(par_footer);
    Py_DECREF(par_footer);
    CHECK_OBJECT(par_comments);
    Py_DECREF(par_comments);
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__27_savetxt(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_fname = python_pars[0];
    PyObject *par_X = python_pars[1];
    PyObject *par_fmt = python_pars[2];
    PyObject *par_delimiter = python_pars[3];
    PyObject *par_newline = python_pars[4];
    PyObject *par_header = python_pars[5];
    PyObject *par_footer = python_pars[6];
    PyObject *par_comments = python_pars[7];
    PyObject *par_encoding = python_pars[8];
    PyObject *var_WriteWrap = NULL;
    nuitka_bool var_own_fh = NUITKA_BOOL_UNASSIGNED;
    PyObject *var_fh = NULL;
    PyObject *var_ncol = NULL;
    PyObject *var_iscomplex_X = NULL;
    PyObject *var_format = NULL;
    PyObject *var_n_fmt_chars = NULL;
    PyObject *var_error = NULL;
    PyObject *var_row = NULL;
    PyObject *var_row2 = NULL;
    PyObject *var_number = NULL;
    PyObject *var_s = NULL;
    PyObject *var_v = NULL;
    PyObject *outline_0_var___class__ = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    struct Nuitka_FrameObject *frame_1ae4e77edcdc6c9918e5fa6a831d799e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    bool tmp_result;
    PyObject *locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_a8612185bdaa1933e5865d344e29b661_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a8612185bdaa1933e5865d344e29b661_2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    static struct Nuitka_FrameObject *cache_frame_1ae4e77edcdc6c9918e5fa6a831d799e = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_1ae4e77edcdc6c9918e5fa6a831d799e)) {
        Py_XDECREF(cache_frame_1ae4e77edcdc6c9918e5fa6a831d799e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1ae4e77edcdc6c9918e5fa6a831d799e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1ae4e77edcdc6c9918e5fa6a831d799e = MAKE_FUNCTION_FRAME(codeobj_1ae4e77edcdc6c9918e5fa6a831d799e, module_numpy$lib$npyio, sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_type_description == NULL);
    frame_1ae4e77edcdc6c9918e5fa6a831d799e = cache_frame_1ae4e77edcdc6c9918e5fa6a831d799e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1ae4e77edcdc6c9918e5fa6a831d799e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1ae4e77edcdc6c9918e5fa6a831d799e) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(par_fmt);
        tmp_isinstance_inst_1 = par_fmt;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[142]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1315;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1315;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_called_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[135]);

        if (unlikely(tmp_called_name_1 == NULL)) {
            tmp_called_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[135]);
        }

        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1316;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_fmt);
        tmp_args_element_name_1 = par_fmt;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1316;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1316;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_fmt;
            assert(old != NULL);
            par_fmt = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_2;
        tmp_called_name_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[135]);

        if (unlikely(tmp_called_name_2 == NULL)) {
            tmp_called_name_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[135]);
        }

        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1317;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_delimiter);
        tmp_args_element_name_2 = par_delimiter;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1317;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1317;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_delimiter;
            assert(old != NULL);
            par_delimiter = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = PyDict_New();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_3;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_metaclass_name_1;
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_arg_name_1;
        PyObject *tmp_dict_arg_name_2;
        PyObject *tmp_key_name_2;
        PyObject *tmp_bases_name_1;
        tmp_key_name_1 = mod_consts[244];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_name_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_name_1, tmp_key_name_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_name_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_name_2 = mod_consts[244];
        tmp_metaclass_name_1 = DICT_GET_ITEM_WITH_ERROR(tmp_dict_arg_name_2, tmp_key_name_2);
        if (tmp_metaclass_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1319;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_2;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_name_1);
        condexpr_end_1:;
        tmp_bases_name_1 = mod_consts[245];
        tmp_assign_source_4 = SELECT_METACLASS(tmp_metaclass_name_1, tmp_bases_name_1);
        Py_DECREF(tmp_metaclass_name_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1319;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_key_name_3;
        PyObject *tmp_dict_arg_name_3;
        tmp_key_name_3 = mod_consts[244];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_name_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_name_3, tmp_key_name_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
    tmp_dictdel_key = mod_consts[244];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1319;
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_2;
    }
    branch_no_2:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_expression_name_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_name_1 = tmp_class_creation_1__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_name_1, mod_consts[246]);
        tmp_condition_result_4 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_name_3;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_args_name_1;
        PyObject *tmp_kwargs_name_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_name_2 = tmp_class_creation_1__metaclass;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[246]);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1319;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_2;
        }
        tmp_args_name_1 = mod_consts[247];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kwargs_name_1 = tmp_class_creation_1__class_decl_dict;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1319;
        tmp_assign_source_5 = CALL_FUNCTION(tmp_called_name_3, tmp_args_name_1, tmp_kwargs_name_1);
        Py_DECREF(tmp_called_name_3);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1319;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_5;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_expression_name_3;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_name_3 = tmp_class_creation_1__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_name_3, mod_consts[248]);
        tmp_operand_name_1 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1319;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_5 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        tmp_raise_type_1 = PyExc_TypeError;
        tmp_left_name_1 = mod_consts[249];
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
        tmp_getattr_attr_1 = mod_consts[250];
        tmp_getattr_default_1 = mod_consts[251];
        tmp_tuple_element_1 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1319;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_2;
        }
        tmp_right_name_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_name_4;
            PyObject *tmp_type_arg_1;
            PyTuple_SET_ITEM(tmp_right_name_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_type_arg_1 = tmp_class_creation_1__prepared;
            tmp_expression_name_4 = BUILTIN_TYPE1(tmp_type_arg_1);
            assert(!(tmp_expression_name_4 == NULL));
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, mod_consts[250]);
            Py_DECREF(tmp_expression_name_4);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1319;
                type_description_1 = "oooooooooobooooooooooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_name_1, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_right_name_1);
        goto try_except_handler_2;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_raise_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1319;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_2;
        }
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 1319;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_2;
    }
    branch_no_4:;
    goto branch_end_3;
    branch_no_3:;
    {
        PyObject *tmp_assign_source_6;
        tmp_assign_source_6 = PyDict_New();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_6;
    }
    branch_end_3:;
    {
        PyObject *tmp_assign_source_7;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[252];
        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319, mod_consts[253], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1319;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_4;
        }
        tmp_dictset_value = mod_consts[254];
        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319, mod_consts[255], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1319;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_4;
        }
        tmp_dictset_value = mod_consts[256];
        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319, mod_consts[257], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1319;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_4;
        }
        if (isFrameUnusable(cache_frame_a8612185bdaa1933e5865d344e29b661_2)) {
            Py_XDECREF(cache_frame_a8612185bdaa1933e5865d344e29b661_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a8612185bdaa1933e5865d344e29b661_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a8612185bdaa1933e5865d344e29b661_2 = MAKE_FUNCTION_FRAME(codeobj_a8612185bdaa1933e5865d344e29b661, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a8612185bdaa1933e5865d344e29b661_2->m_type_description == NULL);
        frame_a8612185bdaa1933e5865d344e29b661_2 = cache_frame_a8612185bdaa1933e5865d344e29b661_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a8612185bdaa1933e5865d344e29b661_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a8612185bdaa1933e5865d344e29b661_2) == 2); // Frame stack

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__1___init__();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319, mod_consts[258], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1323;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__2_close();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319, mod_consts[35], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1328;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__3_write();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319, mod_consts[77], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1331;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__4_write_bytes();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319, mod_consts[262], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1334;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__5_write_normal();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319, mod_consts[264], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1340;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__6_first_write();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319, mod_consts[266], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1343;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a8612185bdaa1933e5865d344e29b661_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a8612185bdaa1933e5865d344e29b661_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a8612185bdaa1933e5865d344e29b661_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a8612185bdaa1933e5865d344e29b661_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a8612185bdaa1933e5865d344e29b661_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a8612185bdaa1933e5865d344e29b661_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a8612185bdaa1933e5865d344e29b661_2 == cache_frame_a8612185bdaa1933e5865d344e29b661_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a8612185bdaa1933e5865d344e29b661_2);
            cache_frame_a8612185bdaa1933e5865d344e29b661_2 = NULL;
        }

        assertFrameObject(frame_a8612185bdaa1933e5865d344e29b661_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_4;
        skip_nested_handling_1:;
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_called_name_4;
            PyObject *tmp_args_name_2;
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_kwargs_name_2;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_name_4 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_2 = mod_consts[268];
            tmp_args_name_2 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_name_2, 0, tmp_tuple_element_2);
            tmp_tuple_element_2 = mod_consts[245];
            PyTuple_SET_ITEM0(tmp_args_name_2, 1, tmp_tuple_element_2);
            tmp_tuple_element_2 = locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319;
            PyTuple_SET_ITEM0(tmp_args_name_2, 2, tmp_tuple_element_2);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kwargs_name_2 = tmp_class_creation_1__class_decl_dict;
            frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1319;
            tmp_assign_source_8 = CALL_FUNCTION(tmp_called_name_4, tmp_args_name_2, tmp_kwargs_name_2);
            Py_DECREF(tmp_args_name_2);
            if (tmp_assign_source_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1319;
                type_description_1 = "oooooooooobooooooooooo";
                goto try_except_handler_4;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_8;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_7 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_7);
        goto try_return_handler_4;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_4:;
        Py_DECREF(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319);
        locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319 = NULL;
        goto try_return_handler_3;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319);
        locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 1319;
        goto try_except_handler_2;
        outline_result_1:;
        assert(var_WriteWrap == NULL);
        var_WriteWrap = tmp_assign_source_7;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    {
        nuitka_bool tmp_assign_source_9;
        tmp_assign_source_9 = NUITKA_BOOL_FALSE;
        var_own_fh = tmp_assign_source_9;
    }
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        CHECK_OBJECT(par_fname);
        tmp_isinstance_inst_2 = par_fname;
        tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[153]);

        if (unlikely(tmp_isinstance_cls_2 == NULL)) {
            tmp_isinstance_cls_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[153]);
        }

        if (tmp_isinstance_cls_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1353;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1353;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_name_5;
        PyObject *tmp_args_element_name_3;
        tmp_called_name_5 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[14]);

        if (unlikely(tmp_called_name_5 == NULL)) {
            tmp_called_name_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[14]);
        }

        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1354;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_fname);
        tmp_args_element_name_3 = par_fname;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1354;
        tmp_assign_source_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_5, tmp_args_element_name_3);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1354;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_fname;
            assert(old != NULL);
            par_fname = tmp_assign_source_10;
            Py_DECREF(old);
        }

    }
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_called_name_6;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_4;
        int tmp_truth_name_1;
        tmp_called_name_6 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[108]);

        if (unlikely(tmp_called_name_6 == NULL)) {
            tmp_called_name_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[108]);
        }

        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1355;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        if (par_fname == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[269]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1355;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_4 = par_fname;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1355;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_6, tmp_args_element_name_4);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1355;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 1355;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_1);
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_open_filename_1;
        PyObject *tmp_open_mode_1;
        PyObject *tmp_call_result_2;
        if (par_fname == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[269]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1357;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_open_filename_1 = par_fname;
        tmp_open_mode_1 = mod_consts[270];
        tmp_called_instance_1 = BUILTIN_OPEN(tmp_open_filename_1, tmp_open_mode_1, NULL, NULL, NULL, NULL, NULL, NULL);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1357;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1357;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[35]);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1357;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_name_7;
        PyObject *tmp_expression_name_5;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_expression_name_7;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        tmp_expression_name_7 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_7 == NULL)) {
            tmp_expression_name_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1358;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_name_6 = LOOKUP_ATTRIBUTE(tmp_expression_name_7, mod_consts[154]);
        if (tmp_expression_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1358;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_name_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_6, mod_consts[155]);
        Py_DECREF(tmp_expression_name_6);
        if (tmp_expression_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1358;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, mod_consts[39]);
        Py_DECREF(tmp_expression_name_5);
        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1358;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        if (par_fname == NULL) {
            Py_DECREF(tmp_called_name_7);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[269]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1358;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_arg_value_0_1 = par_fname;
        tmp_kw_call_arg_value_1_1 = mod_consts[270];
        CHECK_OBJECT(par_encoding);
        tmp_kw_call_dict_value_0_1 = par_encoding;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1358;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_assign_source_11 = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tmp_called_name_7, args, kw_values, mod_consts[157]);
        }

        Py_DECREF(tmp_called_name_7);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1358;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_fh == NULL);
        var_fh = tmp_assign_source_11;
    }
    {
        nuitka_bool tmp_assign_source_12;
        tmp_assign_source_12 = NUITKA_BOOL_TRUE;
        var_own_fh = tmp_assign_source_12;
    }
    goto branch_end_6;
    branch_no_6:;
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_attribute_name_1;
        if (par_fname == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[269]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1360;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_8 = par_fname;
        tmp_attribute_name_1 = mod_consts[77];
        tmp_res = BUILTIN_HASATTR_BOOL(tmp_expression_name_8, tmp_attribute_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1360;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_called_name_8;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        CHECK_OBJECT(var_WriteWrap);
        tmp_called_name_8 = var_WriteWrap;
        if (par_fname == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[269]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1362;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_5 = par_fname;
        CHECK_OBJECT(par_encoding);
        tmp_or_left_value_1 = par_encoding;
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1362;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        tmp_or_right_value_1 = mod_consts[158];
        tmp_args_element_name_6 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_args_element_name_6 = tmp_or_left_value_1;
        or_end_1:;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1362;
        {
            PyObject *call_args[] = {tmp_args_element_name_5, tmp_args_element_name_6};
            tmp_assign_source_13 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_8, call_args);
        }

        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1362;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_fh == NULL);
        var_fh = tmp_assign_source_13;
    }
    goto branch_end_7;
    branch_no_7:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = mod_consts[271];
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1364;
        tmp_raise_type_2 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_2 == NULL));
        exception_type = tmp_raise_type_2;
        exception_lineno = 1364;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooobooooooooooo";
        goto frame_exception_exit_1;
    }
    branch_end_7:;
    branch_end_6:;
    // Tried code:
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_7;
        tmp_called_instance_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_called_instance_2 == NULL)) {
            tmp_called_instance_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1367;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(par_X);
        tmp_args_element_name_7 = par_X;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1367;
        tmp_assign_source_14 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[272], tmp_args_element_name_7);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1367;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = par_X;
            assert(old != NULL);
            par_X = tmp_assign_source_14;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_9;
        int tmp_or_left_truth_2;
        nuitka_bool tmp_or_left_value_2;
        nuitka_bool tmp_or_right_value_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_tmp_or_left_value_2_object_1;
        int tmp_truth_name_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_tmp_or_right_value_2_object_1;
        int tmp_truth_name_3;
        CHECK_OBJECT(par_X);
        tmp_expression_name_9 = par_X;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, mod_consts[199]);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1370;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_compexpr_right_1 = mod_consts[16];
        tmp_tmp_or_left_value_2_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_tmp_or_left_value_2_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1370;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_tmp_or_left_value_2_object_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_or_left_value_2_object_1);

            exception_lineno = 1370;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_or_left_value_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_or_left_value_2_object_1);
        tmp_or_left_truth_2 = tmp_or_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1370;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        if (tmp_or_left_truth_2 == 1) {
            goto or_left_2;
        } else {
            goto or_right_2;
        }
        or_right_2:;
        CHECK_OBJECT(par_X);
        tmp_expression_name_10 = par_X;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_10, mod_consts[199]);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1370;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_compexpr_right_2 = mod_consts[208];
        tmp_tmp_or_right_value_2_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_tmp_or_right_value_2_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1370;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_tmp_or_right_value_2_object_1);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_or_right_value_2_object_1);

            exception_lineno = 1370;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_or_right_value_2 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_or_right_value_2_object_1);
        tmp_condition_result_9 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        tmp_condition_result_9 = tmp_or_left_value_2;
        or_end_2:;
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_make_exception_arg_2;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_expression_name_11;
        tmp_left_name_2 = mod_consts[273];
        CHECK_OBJECT(par_X);
        tmp_expression_name_11 = par_X;
        tmp_right_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, mod_consts[199]);
        if (tmp_right_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1372;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_make_exception_arg_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_2, tmp_right_name_2);
        Py_DECREF(tmp_right_name_2);
        if (tmp_make_exception_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1372;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1371;
        tmp_raise_type_3 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_2);
        Py_DECREF(tmp_make_exception_arg_2);
        assert(!(tmp_raise_type_3 == NULL));
        exception_type = tmp_raise_type_3;
        exception_lineno = 1371;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_5;
    }
    goto branch_end_8;
    branch_no_8:;
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_expression_name_12;
        PyObject *tmp_tmp_condition_result_10_object_1;
        int tmp_truth_name_4;
        CHECK_OBJECT(par_X);
        tmp_expression_name_12 = par_X;
        tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_12, mod_consts[199]);
        if (tmp_compexpr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1373;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_compexpr_right_3 = mod_consts[63];
        tmp_tmp_condition_result_10_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_left_3);
        if (tmp_tmp_condition_result_10_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1373;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_tmp_condition_result_10_object_1);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_10_object_1);

            exception_lineno = 1373;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_10 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_10_object_1);
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    {
        bool tmp_condition_result_11;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_expression_name_13;
        PyObject *tmp_expression_name_14;
        CHECK_OBJECT(par_X);
        tmp_expression_name_14 = par_X;
        tmp_expression_name_13 = LOOKUP_ATTRIBUTE(tmp_expression_name_14, mod_consts[176]);
        if (tmp_expression_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1375;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_13, mod_consts[211]);
        Py_DECREF(tmp_expression_name_13);
        if (tmp_compexpr_left_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1375;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_compexpr_right_4 = Py_None;
        tmp_condition_result_11 = (tmp_compexpr_left_4 == tmp_compexpr_right_4) ? true : false;
        Py_DECREF(tmp_compexpr_left_4);
        if (tmp_condition_result_11 != false) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_expression_name_15;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_args_element_name_8;
        tmp_called_instance_3 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_called_instance_3 == NULL)) {
            tmp_called_instance_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1376;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(par_X);
        tmp_args_element_name_8 = par_X;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1376;
        tmp_expression_name_15 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_3, mod_consts[209], tmp_args_element_name_8);
        if (tmp_expression_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1376;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_assign_source_15 = LOOKUP_ATTRIBUTE(tmp_expression_name_15, mod_consts[210]);
        Py_DECREF(tmp_expression_name_15);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1376;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = par_X;
            assert(old != NULL);
            par_X = tmp_assign_source_15;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_16;
        tmp_assign_source_16 = mod_consts[63];
        assert(var_ncol == NULL);
        Py_INCREF(tmp_assign_source_16);
        var_ncol = tmp_assign_source_16;
    }
    goto branch_end_10;
    branch_no_10:;
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_name_16;
        PyObject *tmp_expression_name_17;
        CHECK_OBJECT(par_X);
        tmp_expression_name_17 = par_X;
        tmp_expression_name_16 = LOOKUP_ATTRIBUTE(tmp_expression_name_17, mod_consts[176]);
        if (tmp_expression_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1381;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_16, mod_consts[211]);
        Py_DECREF(tmp_expression_name_16);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1381;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_assign_source_17 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1381;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        assert(var_ncol == NULL);
        var_ncol = tmp_assign_source_17;
    }
    branch_end_10:;
    goto branch_end_9;
    branch_no_9:;
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_expression_name_18;
        PyObject *tmp_expression_name_19;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_X);
        tmp_expression_name_19 = par_X;
        tmp_expression_name_18 = LOOKUP_ATTRIBUTE(tmp_expression_name_19, mod_consts[196]);
        if (tmp_expression_name_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1383;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_subscript_name_1 = mod_consts[63];
        tmp_assign_source_18 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_18, tmp_subscript_name_1, 1);
        Py_DECREF(tmp_expression_name_18);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1383;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        assert(var_ncol == NULL);
        var_ncol = tmp_assign_source_18;
    }
    branch_end_9:;
    branch_end_8:;
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_called_name_9;
        PyObject *tmp_expression_name_20;
        PyObject *tmp_args_element_name_9;
        tmp_expression_name_20 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_20 == NULL)) {
            tmp_expression_name_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1385;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_called_name_9 = LOOKUP_ATTRIBUTE(tmp_expression_name_20, mod_consts[274]);
        if (tmp_called_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1385;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        if (par_X == NULL) {
            Py_DECREF(tmp_called_name_9);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1385;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }

        tmp_args_element_name_9 = par_X;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1385;
        tmp_assign_source_19 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_9, tmp_args_element_name_9);
        Py_DECREF(tmp_called_name_9);
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1385;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        assert(var_iscomplex_X == NULL);
        var_iscomplex_X = tmp_assign_source_19;
    }
    {
        bool tmp_condition_result_12;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_type_arg_2;
        CHECK_OBJECT(par_fmt);
        tmp_type_arg_2 = par_fmt;
        tmp_compexpr_left_5 = BUILTIN_TYPE1(tmp_type_arg_2);
        assert(!(tmp_compexpr_left_5 == NULL));
        tmp_compexpr_right_5 = mod_consts[275];
        tmp_res = PySequence_Contains(tmp_compexpr_right_5, tmp_compexpr_left_5);
        Py_DECREF(tmp_compexpr_left_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1388;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_12 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_12 != false) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_tmp_condition_result_13_object_1;
        int tmp_truth_name_5;
        CHECK_OBJECT(par_fmt);
        tmp_len_arg_2 = par_fmt;
        tmp_compexpr_left_6 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_compexpr_left_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1389;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        if (var_ncol == NULL) {
            Py_DECREF(tmp_compexpr_left_6);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[276]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1389;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }

        tmp_compexpr_right_6 = var_ncol;
        tmp_tmp_condition_result_13_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_6, tmp_compexpr_right_6);
        Py_DECREF(tmp_compexpr_left_6);
        if (tmp_tmp_condition_result_13_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1389;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_tmp_condition_result_13_object_1);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_13_object_1);

            exception_lineno = 1389;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_13 = tmp_truth_name_5 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_13_object_1);
        if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
            goto branch_yes_12;
        } else {
            goto branch_no_12;
        }
    }
    branch_yes_12:;
    {
        PyObject *tmp_raise_type_4;
        PyObject *tmp_make_exception_arg_3;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_unicode_arg_1;
        tmp_left_name_3 = mod_consts[277];
        CHECK_OBJECT(par_fmt);
        tmp_unicode_arg_1 = par_fmt;
        tmp_right_name_3 = PyObject_Unicode(tmp_unicode_arg_1);
        if (tmp_right_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1390;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_make_exception_arg_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_3, tmp_right_name_3);
        Py_DECREF(tmp_right_name_3);
        if (tmp_make_exception_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1390;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1390;
        tmp_raise_type_4 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_AttributeError, tmp_make_exception_arg_3);
        Py_DECREF(tmp_make_exception_arg_3);
        assert(!(tmp_raise_type_4 == NULL));
        exception_type = tmp_raise_type_4;
        exception_lineno = 1390;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_5;
    }
    branch_no_12:;
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_called_name_10;
        PyObject *tmp_expression_name_21;
        PyObject *tmp_called_name_11;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_called_name_12;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_args_element_name_13;
        tmp_called_name_11 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[135]);

        if (unlikely(tmp_called_name_11 == NULL)) {
            tmp_called_name_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[135]);
        }

        if (tmp_called_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1391;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(par_delimiter);
        tmp_args_element_name_10 = par_delimiter;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1391;
        tmp_expression_name_21 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_11, tmp_args_element_name_10);
        if (tmp_expression_name_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1391;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_called_name_10 = LOOKUP_ATTRIBUTE(tmp_expression_name_21, mod_consts[148]);
        Py_DECREF(tmp_expression_name_21);
        if (tmp_called_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1391;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_called_name_12 = (PyObject *)&PyMap_Type;
        tmp_args_element_name_12 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[135]);

        if (unlikely(tmp_args_element_name_12 == NULL)) {
            tmp_args_element_name_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[135]);
        }

        if (tmp_args_element_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_10);

            exception_lineno = 1391;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(par_fmt);
        tmp_args_element_name_13 = par_fmt;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1391;
        {
            PyObject *call_args[] = {tmp_args_element_name_12, tmp_args_element_name_13};
            tmp_args_element_name_11 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_12, call_args);
        }

        if (tmp_args_element_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_10);

            exception_lineno = 1391;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1391;
        tmp_assign_source_20 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_10, tmp_args_element_name_11);
        Py_DECREF(tmp_called_name_10);
        Py_DECREF(tmp_args_element_name_11);
        if (tmp_assign_source_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1391;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        assert(var_format == NULL);
        var_format = tmp_assign_source_20;
    }
    goto branch_end_11;
    branch_no_11:;
    {
        nuitka_bool tmp_condition_result_14;
        PyObject *tmp_isinstance_inst_3;
        PyObject *tmp_isinstance_cls_3;
        CHECK_OBJECT(par_fmt);
        tmp_isinstance_inst_3 = par_fmt;
        tmp_isinstance_cls_3 = (PyObject *)&PyUnicode_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_3, tmp_isinstance_cls_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_14 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_called_instance_4;
        CHECK_OBJECT(par_fmt);
        tmp_called_instance_4 = par_fmt;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1393;
        tmp_assign_source_21 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_4,
            mod_consts[278],
            PyTuple_GET_ITEM(mod_consts[279], 0)
        );

        if (tmp_assign_source_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1393;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        assert(var_n_fmt_chars == NULL);
        var_n_fmt_chars = tmp_assign_source_21;
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_make_exception_arg_4;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        tmp_left_name_4 = mod_consts[280];
        CHECK_OBJECT(par_fmt);
        tmp_right_name_4 = par_fmt;
        tmp_make_exception_arg_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_4, tmp_right_name_4);
        if (tmp_make_exception_arg_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1394;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1394;
        tmp_assign_source_22 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_4);
        Py_DECREF(tmp_make_exception_arg_4);
        assert(!(tmp_assign_source_22 == NULL));
        assert(var_error == NULL);
        var_error = tmp_assign_source_22;
    }
    {
        nuitka_bool tmp_condition_result_15;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        PyObject *tmp_tmp_condition_result_15_object_1;
        int tmp_truth_name_6;
        CHECK_OBJECT(var_n_fmt_chars);
        tmp_compexpr_left_7 = var_n_fmt_chars;
        tmp_compexpr_right_7 = mod_consts[63];
        tmp_tmp_condition_result_15_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_7, tmp_compexpr_right_7);
        if (tmp_tmp_condition_result_15_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1395;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_tmp_condition_result_15_object_1);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_15_object_1);

            exception_lineno = 1395;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_15 = tmp_truth_name_6 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_15_object_1);
        if (tmp_condition_result_15 == NUITKA_BOOL_TRUE) {
            goto branch_yes_14;
        } else {
            goto branch_no_14;
        }
    }
    branch_yes_14:;
    {
        nuitka_bool tmp_condition_result_16;
        int tmp_truth_name_7;
        CHECK_OBJECT(var_iscomplex_X);
        tmp_truth_name_7 = CHECK_IF_TRUE(var_iscomplex_X);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1396;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_16 = tmp_truth_name_7 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
    }
    branch_yes_15:;
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_left_name_5;
        PyObject *tmp_list_element_1;
        PyObject *tmp_left_name_6;
        PyObject *tmp_right_name_5;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_right_name_6;
        tmp_left_name_6 = mod_consts[281];
        CHECK_OBJECT(par_fmt);
        tmp_tuple_element_3 = par_fmt;
        tmp_right_name_5 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_right_name_5, 0, tmp_tuple_element_3);
        CHECK_OBJECT(par_fmt);
        tmp_tuple_element_3 = par_fmt;
        PyTuple_SET_ITEM0(tmp_right_name_5, 1, tmp_tuple_element_3);
        tmp_list_element_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_6, tmp_right_name_5);
        Py_DECREF(tmp_right_name_5);
        if (tmp_list_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1397;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_left_name_5 = PyList_New(1);
        PyList_SET_ITEM(tmp_left_name_5, 0, tmp_list_element_1);
        if (var_ncol == NULL) {
            Py_DECREF(tmp_left_name_5);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[276]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1397;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }

        tmp_right_name_6 = var_ncol;
        tmp_assign_source_23 = BINARY_OPERATION_MULT_OBJECT_LIST_OBJECT(tmp_left_name_5, tmp_right_name_6);
        Py_DECREF(tmp_left_name_5);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1397;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = par_fmt;
            assert(old != NULL);
            par_fmt = tmp_assign_source_23;
            Py_DECREF(old);
        }

    }
    goto branch_end_15;
    branch_no_15:;
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_left_name_7;
        PyObject *tmp_list_element_2;
        PyObject *tmp_right_name_7;
        CHECK_OBJECT(par_fmt);
        tmp_list_element_2 = par_fmt;
        tmp_left_name_7 = PyList_New(1);
        PyList_SET_ITEM0(tmp_left_name_7, 0, tmp_list_element_2);
        if (var_ncol == NULL) {
            Py_DECREF(tmp_left_name_7);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[276]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1399;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }

        tmp_right_name_7 = var_ncol;
        tmp_assign_source_24 = BINARY_OPERATION_MULT_OBJECT_LIST_OBJECT(tmp_left_name_7, tmp_right_name_7);
        Py_DECREF(tmp_left_name_7);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1399;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = par_fmt;
            assert(old != NULL);
            par_fmt = tmp_assign_source_24;
            Py_DECREF(old);
        }

    }
    branch_end_15:;
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_args_element_name_14;
        CHECK_OBJECT(par_delimiter);
        tmp_called_instance_5 = par_delimiter;
        CHECK_OBJECT(par_fmt);
        tmp_args_element_name_14 = par_fmt;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1400;
        tmp_assign_source_25 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_5, mod_consts[148], tmp_args_element_name_14);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1400;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        assert(var_format == NULL);
        var_format = tmp_assign_source_25;
    }
    goto branch_end_14;
    branch_no_14:;
    {
        nuitka_bool tmp_condition_result_17;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_8;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        PyObject *tmp_left_name_8;
        PyObject *tmp_right_name_8;
        CHECK_OBJECT(var_iscomplex_X);
        tmp_truth_name_8 = CHECK_IF_TRUE(var_iscomplex_X);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1401;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_left_value_1 = tmp_truth_name_8 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1401;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_n_fmt_chars);
        tmp_compexpr_left_8 = var_n_fmt_chars;
        tmp_left_name_8 = mod_consts[208];
        if (var_ncol == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[276]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1401;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }

        tmp_right_name_8 = var_ncol;
        tmp_compexpr_right_8 = BINARY_OPERATION_MULT_OBJECT_LONG_OBJECT(tmp_left_name_8, tmp_right_name_8);
        if (tmp_compexpr_right_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1401;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_right_value_1 = RICH_COMPARE_NE_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_8, tmp_compexpr_right_8);
        Py_DECREF(tmp_compexpr_right_8);
        if (tmp_and_right_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1401;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_17 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_17 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_17 == NUITKA_BOOL_TRUE) {
            goto branch_yes_16;
        } else {
            goto branch_no_16;
        }
        assert(tmp_condition_result_17 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_16:;
    {
        PyObject *tmp_raise_type_5;
        CHECK_OBJECT(var_error);
        tmp_raise_type_5 = var_error;
        exception_type = tmp_raise_type_5;
        Py_INCREF(tmp_raise_type_5);
        exception_lineno = 1402;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_5;
    }
    goto branch_end_16;
    branch_no_16:;
    {
        nuitka_bool tmp_condition_result_18;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        CHECK_OBJECT(var_iscomplex_X);
        tmp_operand_name_2 = var_iscomplex_X;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1403;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_left_value_2 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1403;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT(var_n_fmt_chars);
        tmp_compexpr_left_9 = var_n_fmt_chars;
        if (var_ncol == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[276]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1403;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }

        tmp_compexpr_right_9 = var_ncol;
        tmp_and_right_value_2 = RICH_COMPARE_NE_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_9, tmp_compexpr_right_9);
        if (tmp_and_right_value_2 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1403;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_18 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_18 = tmp_and_left_value_2;
        and_end_2:;
        if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
            goto branch_yes_17;
        } else {
            goto branch_no_17;
        }
        assert(tmp_condition_result_18 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_17:;
    {
        PyObject *tmp_raise_type_6;
        CHECK_OBJECT(var_error);
        tmp_raise_type_6 = var_error;
        exception_type = tmp_raise_type_6;
        Py_INCREF(tmp_raise_type_6);
        exception_lineno = 1404;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_5;
    }
    goto branch_end_17;
    branch_no_17:;
    {
        PyObject *tmp_assign_source_26;
        CHECK_OBJECT(par_fmt);
        tmp_assign_source_26 = par_fmt;
        assert(var_format == NULL);
        Py_INCREF(tmp_assign_source_26);
        var_format = tmp_assign_source_26;
    }
    branch_end_17:;
    branch_end_16:;
    branch_end_14:;
    goto branch_end_13;
    branch_no_13:;
    {
        PyObject *tmp_raise_type_7;
        PyObject *tmp_make_exception_arg_5;
        PyObject *tmp_left_name_9;
        PyObject *tmp_right_name_9;
        PyObject *tmp_tuple_element_4;
        tmp_left_name_9 = mod_consts[282];
        CHECK_OBJECT(par_fmt);
        tmp_tuple_element_4 = par_fmt;
        tmp_right_name_9 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_right_name_9, 0, tmp_tuple_element_4);
        tmp_make_exception_arg_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_9, tmp_right_name_9);
        Py_DECREF(tmp_right_name_9);
        if (tmp_make_exception_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1408;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1408;
        tmp_raise_type_7 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_5);
        Py_DECREF(tmp_make_exception_arg_5);
        assert(!(tmp_raise_type_7 == NULL));
        exception_type = tmp_raise_type_7;
        exception_lineno = 1408;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_5;
    }
    branch_end_13:;
    branch_end_11:;
    {
        bool tmp_condition_result_19;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        PyObject *tmp_len_arg_3;
        PyObject *tmp_tmp_condition_result_19_object_1;
        CHECK_OBJECT(par_header);
        tmp_len_arg_3 = par_header;
        tmp_compexpr_left_10 = BUILTIN_LEN(tmp_len_arg_3);
        if (tmp_compexpr_left_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1410;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_compexpr_right_10 = mod_consts[16];
        tmp_tmp_condition_result_19_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_10, tmp_compexpr_right_10);
        Py_DECREF(tmp_compexpr_left_10);
        assert(!(tmp_tmp_condition_result_19_object_1 == NULL));
        tmp_condition_result_19 = CHECK_IF_TRUE(tmp_tmp_condition_result_19_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_19_object_1);
        if (tmp_condition_result_19 != false) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_called_name_13;
        PyObject *tmp_expression_name_22;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_args_element_name_16;
        PyObject *tmp_left_name_10;
        PyObject *tmp_right_name_10;
        CHECK_OBJECT(par_header);
        tmp_expression_name_22 = par_header;
        tmp_called_name_13 = LOOKUP_ATTRIBUTE(tmp_expression_name_22, mod_consts[140]);
        if (tmp_called_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1411;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_args_element_name_15 = mod_consts[283];
        tmp_left_name_10 = mod_consts[283];
        CHECK_OBJECT(par_comments);
        tmp_right_name_10 = par_comments;
        tmp_args_element_name_16 = BINARY_OPERATION_ADD_OBJECT_UNICODE_OBJECT(tmp_left_name_10, tmp_right_name_10);
        if (tmp_args_element_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_13);

            exception_lineno = 1411;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1411;
        {
            PyObject *call_args[] = {tmp_args_element_name_15, tmp_args_element_name_16};
            tmp_assign_source_27 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_13, call_args);
        }

        Py_DECREF(tmp_called_name_13);
        Py_DECREF(tmp_args_element_name_16);
        if (tmp_assign_source_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1411;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = par_header;
            assert(old != NULL);
            par_header = tmp_assign_source_27;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_14;
        PyObject *tmp_expression_name_23;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_17;
        PyObject *tmp_left_name_11;
        PyObject *tmp_left_name_12;
        PyObject *tmp_right_name_11;
        PyObject *tmp_right_name_12;
        if (var_fh == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[178]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1412;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }

        tmp_expression_name_23 = var_fh;
        tmp_called_name_14 = LOOKUP_ATTRIBUTE(tmp_expression_name_23, mod_consts[77]);
        if (tmp_called_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1412;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(par_comments);
        tmp_left_name_12 = par_comments;
        CHECK_OBJECT(par_header);
        tmp_right_name_11 = par_header;
        tmp_left_name_11 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_12, tmp_right_name_11);
        if (tmp_left_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_14);

            exception_lineno = 1412;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(par_newline);
        tmp_right_name_12 = par_newline;
        tmp_args_element_name_17 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_11, tmp_right_name_12);
        Py_DECREF(tmp_left_name_11);
        if (tmp_args_element_name_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_14);

            exception_lineno = 1412;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1412;
        tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_14, tmp_args_element_name_17);
        Py_DECREF(tmp_called_name_14);
        Py_DECREF(tmp_args_element_name_17);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1412;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        Py_DECREF(tmp_call_result_3);
    }
    branch_no_18:;
    {
        nuitka_bool tmp_condition_result_20;
        int tmp_truth_name_9;
        CHECK_OBJECT(var_iscomplex_X);
        tmp_truth_name_9 = CHECK_IF_TRUE(var_iscomplex_X);
        if (tmp_truth_name_9 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1413;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_20 = tmp_truth_name_9 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_20 == NUITKA_BOOL_TRUE) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_iter_arg_1;
        if (par_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1414;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }

        tmp_iter_arg_1 = par_X;
        tmp_assign_source_28 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1414;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_28;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_29;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_29 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_29 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooobooooooooooo";
                exception_lineno = 1414;
                goto try_except_handler_6;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_29;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_30;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_30 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_row;
            var_row = tmp_assign_source_30;
            Py_INCREF(var_row);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_31;
        tmp_assign_source_31 = PyList_New(0);
        {
            PyObject *old = var_row2;
            var_row2 = tmp_assign_source_31;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(var_row);
        tmp_iter_arg_2 = var_row;
        tmp_assign_source_32 = MAKE_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1416;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = tmp_for_loop_2__for_iterator;
            tmp_for_loop_2__for_iterator = tmp_assign_source_32;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_33;
        CHECK_OBJECT(tmp_for_loop_2__for_iterator);
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_33 = ITERATOR_NEXT(tmp_next_source_2);
        if (tmp_assign_source_33 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_2;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooobooooooooooo";
                exception_lineno = 1416;
                goto try_except_handler_7;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_33;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_34;
        CHECK_OBJECT(tmp_for_loop_2__iter_value);
        tmp_assign_source_34 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_number;
            var_number = tmp_assign_source_34;
            Py_INCREF(var_number);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_15;
        PyObject *tmp_expression_name_24;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_18;
        PyObject *tmp_expression_name_25;
        if (var_row2 == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[284]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1417;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_7;
        }

        tmp_expression_name_24 = var_row2;
        tmp_called_name_15 = LOOKUP_ATTRIBUTE(tmp_expression_name_24, mod_consts[29]);
        if (tmp_called_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1417;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT(var_number);
        tmp_expression_name_25 = var_number;
        tmp_args_element_name_18 = LOOKUP_ATTRIBUTE(tmp_expression_name_25, mod_consts[285]);
        if (tmp_args_element_name_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_15);

            exception_lineno = 1417;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_7;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1417;
        tmp_call_result_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_15, tmp_args_element_name_18);
        Py_DECREF(tmp_called_name_15);
        Py_DECREF(tmp_args_element_name_18);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1417;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_7;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_name_16;
        PyObject *tmp_expression_name_26;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_19;
        PyObject *tmp_expression_name_27;
        if (var_row2 == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[284]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1418;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_7;
        }

        tmp_expression_name_26 = var_row2;
        tmp_called_name_16 = LOOKUP_ATTRIBUTE(tmp_expression_name_26, mod_consts[29]);
        if (tmp_called_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1418;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT(var_number);
        tmp_expression_name_27 = var_number;
        tmp_args_element_name_19 = LOOKUP_ATTRIBUTE(tmp_expression_name_27, mod_consts[286]);
        if (tmp_args_element_name_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_16);

            exception_lineno = 1418;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_7;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1418;
        tmp_call_result_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_16, tmp_args_element_name_19);
        Py_DECREF(tmp_called_name_16);
        Py_DECREF(tmp_args_element_name_19);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1418;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_7;
        }
        Py_DECREF(tmp_call_result_5);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1416;
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_7;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_6;
    // End of try:
    try_end_2:;
    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;
    {
        PyObject *tmp_assign_source_35;
        PyObject *tmp_left_name_13;
        PyObject *tmp_left_name_14;
        PyObject *tmp_right_name_13;
        PyObject *tmp_tuple_arg_1;
        PyObject *tmp_right_name_14;
        if (var_format == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[41]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1419;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_6;
        }

        tmp_left_name_14 = var_format;
        if (var_row2 == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[284]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1419;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_6;
        }

        tmp_tuple_arg_1 = var_row2;
        tmp_right_name_13 = PySequence_Tuple(tmp_tuple_arg_1);
        if (tmp_right_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1419;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_6;
        }
        tmp_left_name_13 = BINARY_OPERATION_MOD_OBJECT_OBJECT_TUPLE(tmp_left_name_14, tmp_right_name_13);
        Py_DECREF(tmp_right_name_13);
        if (tmp_left_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1419;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_6;
        }
        if (par_newline == NULL) {
            Py_DECREF(tmp_left_name_13);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[287]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1419;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_6;
        }

        tmp_right_name_14 = par_newline;
        tmp_assign_source_35 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_13, tmp_right_name_14);
        Py_DECREF(tmp_left_name_13);
        if (tmp_assign_source_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1419;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = var_s;
            var_s = tmp_assign_source_35;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_17;
        PyObject *tmp_expression_name_28;
        PyObject *tmp_call_result_6;
        PyObject *tmp_args_element_name_20;
        PyObject *tmp_called_instance_6;
        if (var_fh == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[178]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1420;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_6;
        }

        tmp_expression_name_28 = var_fh;
        tmp_called_name_17 = LOOKUP_ATTRIBUTE(tmp_expression_name_28, mod_consts[77]);
        if (tmp_called_name_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1420;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT(var_s);
        tmp_called_instance_6 = var_s;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1420;
        tmp_args_element_name_20 = CALL_METHOD_WITH_ARGS2(
            tmp_called_instance_6,
            mod_consts[140],
            &PyTuple_GET_ITEM(mod_consts[141], 0)
        );

        if (tmp_args_element_name_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_17);

            exception_lineno = 1420;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_6;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1420;
        tmp_call_result_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_17, tmp_args_element_name_20);
        Py_DECREF(tmp_called_name_17);
        Py_DECREF(tmp_args_element_name_20);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1420;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_6;
        }
        Py_DECREF(tmp_call_result_6);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1414;
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_6;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_5;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    goto branch_end_19;
    branch_no_19:;
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_iter_arg_3;
        if (par_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1422;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }

        tmp_iter_arg_3 = par_X;
        tmp_assign_source_36 = MAKE_ITERATOR(tmp_iter_arg_3);
        if (tmp_assign_source_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1422;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        assert(tmp_for_loop_3__for_iterator == NULL);
        tmp_for_loop_3__for_iterator = tmp_assign_source_36;
    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_37;
        CHECK_OBJECT(tmp_for_loop_3__for_iterator);
        tmp_next_source_3 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_37 = ITERATOR_NEXT(tmp_next_source_3);
        if (tmp_assign_source_37 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_3;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooobooooooooooo";
                exception_lineno = 1422;
                goto try_except_handler_8;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_37;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_38;
        CHECK_OBJECT(tmp_for_loop_3__iter_value);
        tmp_assign_source_38 = tmp_for_loop_3__iter_value;
        {
            PyObject *old = var_row;
            var_row = tmp_assign_source_38;
            Py_INCREF(var_row);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_left_name_15;
        PyObject *tmp_left_name_16;
        PyObject *tmp_right_name_15;
        PyObject *tmp_tuple_arg_2;
        PyObject *tmp_right_name_16;
        if (var_format == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[41]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1424;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_9;
        }

        tmp_left_name_16 = var_format;
        CHECK_OBJECT(var_row);
        tmp_tuple_arg_2 = var_row;
        tmp_right_name_15 = PySequence_Tuple(tmp_tuple_arg_2);
        if (tmp_right_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1424;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_9;
        }
        tmp_left_name_15 = BINARY_OPERATION_MOD_OBJECT_OBJECT_TUPLE(tmp_left_name_16, tmp_right_name_15);
        Py_DECREF(tmp_right_name_15);
        if (tmp_left_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1424;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_9;
        }
        if (par_newline == NULL) {
            Py_DECREF(tmp_left_name_15);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[287]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1424;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_9;
        }

        tmp_right_name_16 = par_newline;
        tmp_assign_source_39 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_15, tmp_right_name_16);
        Py_DECREF(tmp_left_name_15);
        if (tmp_assign_source_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1424;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_9;
        }
        {
            PyObject *old = var_v;
            var_v = tmp_assign_source_39;
            Py_XDECREF(old);
        }

    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_1, &exception_preserved_value_1, &exception_preserved_tb_1);

    if (exception_keeper_tb_6 == NULL) {
        exception_keeper_tb_6 = MAKE_TRACEBACK(frame_1ae4e77edcdc6c9918e5fa6a831d799e, exception_keeper_lineno_6);
    } else if (exception_keeper_lineno_6 != 0) {
        exception_keeper_tb_6 = ADD_TRACEBACK(exception_keeper_tb_6, frame_1ae4e77edcdc6c9918e5fa6a831d799e, exception_keeper_lineno_6);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_6, &exception_keeper_value_6, &exception_keeper_tb_6);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_6, exception_keeper_tb_6);
    PUBLISH_EXCEPTION(&exception_keeper_type_6, &exception_keeper_value_6, &exception_keeper_tb_6);
    // Tried code:
    {
        bool tmp_condition_result_21;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        tmp_compexpr_left_11 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_11 = PyExc_TypeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_11, tmp_compexpr_right_11);
        assert(!(tmp_res == -1));
        tmp_condition_result_21 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_21 != false) {
            goto branch_yes_20;
        } else {
            goto branch_no_20;
        }
    }
    branch_yes_20:;
    {
        PyObject *tmp_raise_type_8;
        PyObject *tmp_make_exception_arg_6;
        PyObject *tmp_left_name_17;
        PyObject *tmp_right_name_17;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_unicode_arg_2;
        PyObject *tmp_expression_name_29;
        tmp_left_name_17 = mod_consts[288];
        if (par_X == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[194]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1428;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_10;
        }

        tmp_expression_name_29 = par_X;
        tmp_unicode_arg_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_29, mod_consts[176]);
        if (tmp_unicode_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1428;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_10;
        }
        tmp_tuple_element_5 = PyObject_Unicode(tmp_unicode_arg_2);
        Py_DECREF(tmp_unicode_arg_2);
        if (tmp_tuple_element_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1428;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_10;
        }
        tmp_right_name_17 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_17, 0, tmp_tuple_element_5);
        if (var_format == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[41]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1428;
            type_description_1 = "oooooooooobooooooooooo";
            goto tuple_build_exception_2;
        }

        tmp_tuple_element_5 = var_format;
        PyTuple_SET_ITEM0(tmp_right_name_17, 1, tmp_tuple_element_5);
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_right_name_17);
        goto try_except_handler_10;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        tmp_make_exception_arg_6 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_17, tmp_right_name_17);
        Py_DECREF(tmp_right_name_17);
        if (tmp_make_exception_arg_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1428;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_10;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1426;
        tmp_raise_type_8 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_TypeError, tmp_make_exception_arg_6);
        Py_DECREF(tmp_make_exception_arg_6);
        assert(!(tmp_raise_type_8 == NULL));
        exception_type = tmp_raise_type_8;
        exception_lineno = 1426;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_10;
    }
    goto branch_end_20;
    branch_no_20:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1423;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame) frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooobooooooooooo";
    goto try_except_handler_10;
    branch_end_20:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto try_except_handler_8;
    // End of try:
    // End of try:
    try_end_4:;
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_call_result_7;
        PyObject *tmp_args_element_name_21;
        if (var_fh == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[178]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1429;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_8;
        }

        tmp_called_instance_7 = var_fh;
        CHECK_OBJECT(var_v);
        tmp_args_element_name_21 = var_v;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1429;
        tmp_call_result_7 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_7, mod_consts[77], tmp_args_element_name_21);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1429;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_8;
        }
        Py_DECREF(tmp_call_result_7);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1422;
        type_description_1 = "oooooooooobooooooooooo";
        goto try_except_handler_8;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto try_except_handler_5;
    // End of try:
    try_end_5:;
    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;
    branch_end_19:;
    {
        bool tmp_condition_result_22;
        PyObject *tmp_compexpr_left_12;
        PyObject *tmp_compexpr_right_12;
        PyObject *tmp_len_arg_4;
        PyObject *tmp_tmp_condition_result_22_object_1;
        CHECK_OBJECT(par_footer);
        tmp_len_arg_4 = par_footer;
        tmp_compexpr_left_12 = BUILTIN_LEN(tmp_len_arg_4);
        if (tmp_compexpr_left_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1431;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_compexpr_right_12 = mod_consts[16];
        tmp_tmp_condition_result_22_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_12, tmp_compexpr_right_12);
        Py_DECREF(tmp_compexpr_left_12);
        assert(!(tmp_tmp_condition_result_22_object_1 == NULL));
        tmp_condition_result_22 = CHECK_IF_TRUE(tmp_tmp_condition_result_22_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_22_object_1);
        if (tmp_condition_result_22 != false) {
            goto branch_yes_21;
        } else {
            goto branch_no_21;
        }
    }
    branch_yes_21:;
    {
        PyObject *tmp_assign_source_40;
        PyObject *tmp_called_name_18;
        PyObject *tmp_expression_name_30;
        PyObject *tmp_args_element_name_22;
        PyObject *tmp_args_element_name_23;
        PyObject *tmp_left_name_18;
        PyObject *tmp_right_name_18;
        CHECK_OBJECT(par_footer);
        tmp_expression_name_30 = par_footer;
        tmp_called_name_18 = LOOKUP_ATTRIBUTE(tmp_expression_name_30, mod_consts[140]);
        if (tmp_called_name_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1432;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        tmp_args_element_name_22 = mod_consts[283];
        tmp_left_name_18 = mod_consts[283];
        CHECK_OBJECT(par_comments);
        tmp_right_name_18 = par_comments;
        tmp_args_element_name_23 = BINARY_OPERATION_ADD_OBJECT_UNICODE_OBJECT(tmp_left_name_18, tmp_right_name_18);
        if (tmp_args_element_name_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_18);

            exception_lineno = 1432;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1432;
        {
            PyObject *call_args[] = {tmp_args_element_name_22, tmp_args_element_name_23};
            tmp_assign_source_40 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_18, call_args);
        }

        Py_DECREF(tmp_called_name_18);
        Py_DECREF(tmp_args_element_name_23);
        if (tmp_assign_source_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1432;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = par_footer;
            assert(old != NULL);
            par_footer = tmp_assign_source_40;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_19;
        PyObject *tmp_expression_name_31;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_element_name_24;
        PyObject *tmp_left_name_19;
        PyObject *tmp_left_name_20;
        PyObject *tmp_right_name_19;
        PyObject *tmp_right_name_20;
        if (var_fh == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[178]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1433;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }

        tmp_expression_name_31 = var_fh;
        tmp_called_name_19 = LOOKUP_ATTRIBUTE(tmp_expression_name_31, mod_consts[77]);
        if (tmp_called_name_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1433;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(par_comments);
        tmp_left_name_20 = par_comments;
        CHECK_OBJECT(par_footer);
        tmp_right_name_19 = par_footer;
        tmp_left_name_19 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_20, tmp_right_name_19);
        if (tmp_left_name_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_19);

            exception_lineno = 1433;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        if (par_newline == NULL) {
            Py_DECREF(tmp_called_name_19);
            Py_DECREF(tmp_left_name_19);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[287]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1433;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }

        tmp_right_name_20 = par_newline;
        tmp_args_element_name_24 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_19, tmp_right_name_20);
        Py_DECREF(tmp_left_name_19);
        if (tmp_args_element_name_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_19);

            exception_lineno = 1433;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1433;
        tmp_call_result_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_19, tmp_args_element_name_24);
        Py_DECREF(tmp_called_name_19);
        Py_DECREF(tmp_args_element_name_24);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1433;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_5;
        }
        Py_DECREF(tmp_call_result_8);
    }
    branch_no_21:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 2.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_2, &exception_preserved_value_2, &exception_preserved_tb_2);

    if (exception_keeper_tb_9 == NULL) {
        exception_keeper_tb_9 = MAKE_TRACEBACK(frame_1ae4e77edcdc6c9918e5fa6a831d799e, exception_keeper_lineno_9);
    } else if (exception_keeper_lineno_9 != 0) {
        exception_keeper_tb_9 = ADD_TRACEBACK(exception_keeper_tb_9, frame_1ae4e77edcdc6c9918e5fa6a831d799e, exception_keeper_lineno_9);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_9, exception_keeper_tb_9);
    PUBLISH_EXCEPTION(&exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9);
    // Tried code:
    {
        bool tmp_condition_result_23;
        assert(var_own_fh != NUITKA_BOOL_UNASSIGNED);
        tmp_condition_result_23 = var_own_fh == NUITKA_BOOL_TRUE;
        if (tmp_condition_result_23 != false) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    {
        PyObject *tmp_called_instance_8;
        PyObject *tmp_call_result_9;
        if (var_fh == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[178]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1436;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_11;
        }

        tmp_called_instance_8 = var_fh;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1436;
        tmp_call_result_9 = CALL_METHOD_NO_ARGS(tmp_called_instance_8, mod_consts[35]);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1436;
            type_description_1 = "oooooooooobooooooooooo";
            goto try_except_handler_11;
        }
        Py_DECREF(tmp_call_result_9);
    }
    branch_no_22:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1366;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame) frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooobooooooooooo";
    goto try_except_handler_11;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 2.
    SET_CURRENT_EXCEPTION(exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2);

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_6:;
    {
        bool tmp_condition_result_24;
        assert(var_own_fh != NUITKA_BOOL_UNASSIGNED);
        tmp_condition_result_24 = var_own_fh == NUITKA_BOOL_TRUE;
        if (tmp_condition_result_24 != false) {
            goto branch_yes_23;
        } else {
            goto branch_no_23;
        }
    }
    branch_yes_23:;
    {
        PyObject *tmp_called_instance_9;
        PyObject *tmp_call_result_10;
        if (var_fh == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[178]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1436;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_9 = var_fh;
        frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame.f_lineno = 1436;
        tmp_call_result_10 = CALL_METHOD_NO_ARGS(tmp_called_instance_9, mod_consts[35]);
        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1436;
            type_description_1 = "oooooooooobooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_10);
    }
    branch_no_23:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1ae4e77edcdc6c9918e5fa6a831d799e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1ae4e77edcdc6c9918e5fa6a831d799e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1ae4e77edcdc6c9918e5fa6a831d799e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1ae4e77edcdc6c9918e5fa6a831d799e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1ae4e77edcdc6c9918e5fa6a831d799e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1ae4e77edcdc6c9918e5fa6a831d799e,
        type_description_1,
        par_fname,
        par_X,
        par_fmt,
        par_delimiter,
        par_newline,
        par_header,
        par_footer,
        par_comments,
        par_encoding,
        var_WriteWrap,
        (int)var_own_fh,
        var_fh,
        var_ncol,
        var_iscomplex_X,
        var_format,
        var_n_fmt_chars,
        var_error,
        var_row,
        var_row2,
        var_number,
        var_s,
        var_v
    );


    // Release cached frame if used for exception.
    if (frame_1ae4e77edcdc6c9918e5fa6a831d799e == cache_frame_1ae4e77edcdc6c9918e5fa6a831d799e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1ae4e77edcdc6c9918e5fa6a831d799e);
        cache_frame_1ae4e77edcdc6c9918e5fa6a831d799e = NULL;
    }

    assertFrameObject(frame_1ae4e77edcdc6c9918e5fa6a831d799e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_fname);
    par_fname = NULL;
    Py_XDECREF(par_X);
    par_X = NULL;
    Py_XDECREF(par_fmt);
    par_fmt = NULL;
    CHECK_OBJECT(par_delimiter);
    Py_DECREF(par_delimiter);
    par_delimiter = NULL;
    Py_XDECREF(par_header);
    par_header = NULL;
    Py_XDECREF(par_footer);
    par_footer = NULL;
    Py_XDECREF(var_WriteWrap);
    var_WriteWrap = NULL;
    assert(var_own_fh != NUITKA_BOOL_UNASSIGNED);
    var_own_fh = NUITKA_BOOL_UNASSIGNED;
    Py_XDECREF(var_fh);
    var_fh = NULL;
    Py_XDECREF(var_ncol);
    var_ncol = NULL;
    CHECK_OBJECT(var_iscomplex_X);
    Py_DECREF(var_iscomplex_X);
    var_iscomplex_X = NULL;
    Py_XDECREF(var_format);
    var_format = NULL;
    Py_XDECREF(var_n_fmt_chars);
    var_n_fmt_chars = NULL;
    Py_XDECREF(var_error);
    var_error = NULL;
    Py_XDECREF(var_row);
    var_row = NULL;
    Py_XDECREF(var_row2);
    var_row2 = NULL;
    Py_XDECREF(var_number);
    var_number = NULL;
    Py_XDECREF(var_s);
    var_s = NULL;
    Py_XDECREF(var_v);
    var_v = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_fname);
    par_fname = NULL;
    Py_XDECREF(par_X);
    par_X = NULL;
    Py_XDECREF(par_fmt);
    par_fmt = NULL;
    Py_XDECREF(par_delimiter);
    par_delimiter = NULL;
    Py_XDECREF(par_header);
    par_header = NULL;
    Py_XDECREF(par_footer);
    par_footer = NULL;
    Py_XDECREF(var_WriteWrap);
    var_WriteWrap = NULL;
    var_own_fh = NUITKA_BOOL_UNASSIGNED;
    Py_XDECREF(var_fh);
    var_fh = NULL;
    Py_XDECREF(var_ncol);
    var_ncol = NULL;
    Py_XDECREF(var_iscomplex_X);
    var_iscomplex_X = NULL;
    Py_XDECREF(var_format);
    var_format = NULL;
    Py_XDECREF(var_n_fmt_chars);
    var_n_fmt_chars = NULL;
    Py_XDECREF(var_error);
    var_error = NULL;
    Py_XDECREF(var_row);
    var_row = NULL;
    Py_XDECREF(var_row2);
    var_row2 = NULL;
    Py_XDECREF(var_number);
    var_number = NULL;
    Py_XDECREF(var_s);
    var_s = NULL;
    Py_XDECREF(var_v);
    var_v = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    Py_XDECREF(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319);

    CHECK_OBJECT(par_newline);
    Py_DECREF(par_newline);
    CHECK_OBJECT(par_comments);
    Py_DECREF(par_comments);
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    Py_XDECREF(locals_numpy$lib$npyio$$$function__27_savetxt$$$class__1_WriteWrap_1319);

    CHECK_OBJECT(par_newline);
    Py_DECREF(par_newline);
    CHECK_OBJECT(par_comments);
    Py_DECREF(par_comments);
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__27_savetxt$$$function__1___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_fh = python_pars[1];
    PyObject *par_encoding = python_pars[2];
    struct Nuitka_FrameObject *frame_51c964b522699247064b7acc38fee7c6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_51c964b522699247064b7acc38fee7c6 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_51c964b522699247064b7acc38fee7c6)) {
        Py_XDECREF(cache_frame_51c964b522699247064b7acc38fee7c6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_51c964b522699247064b7acc38fee7c6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_51c964b522699247064b7acc38fee7c6 = MAKE_FUNCTION_FRAME(codeobj_51c964b522699247064b7acc38fee7c6, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_51c964b522699247064b7acc38fee7c6->m_type_description == NULL);
    frame_51c964b522699247064b7acc38fee7c6 = cache_frame_51c964b522699247064b7acc38fee7c6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_51c964b522699247064b7acc38fee7c6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_51c964b522699247064b7acc38fee7c6) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_fh);
        tmp_assattr_value_1 = par_fh;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[178], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1324;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_encoding);
        tmp_assattr_value_2 = par_encoding;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[51], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1325;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_assattr_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[266]);
        if (tmp_assattr_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1326;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[290], tmp_assattr_value_3);
        Py_DECREF(tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1326;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51c964b522699247064b7acc38fee7c6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51c964b522699247064b7acc38fee7c6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_51c964b522699247064b7acc38fee7c6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_51c964b522699247064b7acc38fee7c6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_51c964b522699247064b7acc38fee7c6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_51c964b522699247064b7acc38fee7c6,
        type_description_1,
        par_self,
        par_fh,
        par_encoding
    );


    // Release cached frame if used for exception.
    if (frame_51c964b522699247064b7acc38fee7c6 == cache_frame_51c964b522699247064b7acc38fee7c6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_51c964b522699247064b7acc38fee7c6);
        cache_frame_51c964b522699247064b7acc38fee7c6 = NULL;
    }

    assertFrameObject(frame_51c964b522699247064b7acc38fee7c6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_fh);
    Py_DECREF(par_fh);
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_fh);
    Py_DECREF(par_fh);
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__27_savetxt$$$function__2_close(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_d6d98bb061ea83d47c15a67ce1843b33;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d6d98bb061ea83d47c15a67ce1843b33 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d6d98bb061ea83d47c15a67ce1843b33)) {
        Py_XDECREF(cache_frame_d6d98bb061ea83d47c15a67ce1843b33);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d6d98bb061ea83d47c15a67ce1843b33 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d6d98bb061ea83d47c15a67ce1843b33 = MAKE_FUNCTION_FRAME(codeobj_d6d98bb061ea83d47c15a67ce1843b33, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d6d98bb061ea83d47c15a67ce1843b33->m_type_description == NULL);
    frame_d6d98bb061ea83d47c15a67ce1843b33 = cache_frame_d6d98bb061ea83d47c15a67ce1843b33;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d6d98bb061ea83d47c15a67ce1843b33);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d6d98bb061ea83d47c15a67ce1843b33) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[178]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1329;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_d6d98bb061ea83d47c15a67ce1843b33->m_frame.f_lineno = 1329;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[35]);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1329;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d6d98bb061ea83d47c15a67ce1843b33);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d6d98bb061ea83d47c15a67ce1843b33);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d6d98bb061ea83d47c15a67ce1843b33, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d6d98bb061ea83d47c15a67ce1843b33->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d6d98bb061ea83d47c15a67ce1843b33, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d6d98bb061ea83d47c15a67ce1843b33,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_d6d98bb061ea83d47c15a67ce1843b33 == cache_frame_d6d98bb061ea83d47c15a67ce1843b33) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d6d98bb061ea83d47c15a67ce1843b33);
        cache_frame_d6d98bb061ea83d47c15a67ce1843b33 = NULL;
    }

    assertFrameObject(frame_d6d98bb061ea83d47c15a67ce1843b33);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__27_savetxt$$$function__3_write(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_v = python_pars[1];
    struct Nuitka_FrameObject *frame_e63b9958f8928d9d4d831ae4c8d41e3c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e63b9958f8928d9d4d831ae4c8d41e3c = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e63b9958f8928d9d4d831ae4c8d41e3c)) {
        Py_XDECREF(cache_frame_e63b9958f8928d9d4d831ae4c8d41e3c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e63b9958f8928d9d4d831ae4c8d41e3c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e63b9958f8928d9d4d831ae4c8d41e3c = MAKE_FUNCTION_FRAME(codeobj_e63b9958f8928d9d4d831ae4c8d41e3c, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e63b9958f8928d9d4d831ae4c8d41e3c->m_type_description == NULL);
    frame_e63b9958f8928d9d4d831ae4c8d41e3c = cache_frame_e63b9958f8928d9d4d831ae4c8d41e3c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e63b9958f8928d9d4d831ae4c8d41e3c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e63b9958f8928d9d4d831ae4c8d41e3c) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_v);
        tmp_args_element_name_1 = par_v;
        frame_e63b9958f8928d9d4d831ae4c8d41e3c->m_frame.f_lineno = 1332;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[290], tmp_args_element_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1332;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e63b9958f8928d9d4d831ae4c8d41e3c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e63b9958f8928d9d4d831ae4c8d41e3c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e63b9958f8928d9d4d831ae4c8d41e3c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e63b9958f8928d9d4d831ae4c8d41e3c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e63b9958f8928d9d4d831ae4c8d41e3c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e63b9958f8928d9d4d831ae4c8d41e3c,
        type_description_1,
        par_self,
        par_v
    );


    // Release cached frame if used for exception.
    if (frame_e63b9958f8928d9d4d831ae4c8d41e3c == cache_frame_e63b9958f8928d9d4d831ae4c8d41e3c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e63b9958f8928d9d4d831ae4c8d41e3c);
        cache_frame_e63b9958f8928d9d4d831ae4c8d41e3c = NULL;
    }

    assertFrameObject(frame_e63b9958f8928d9d4d831ae4c8d41e3c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_v);
    Py_DECREF(par_v);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_v);
    Py_DECREF(par_v);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__27_savetxt$$$function__4_write_bytes(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_v = python_pars[1];
    struct Nuitka_FrameObject *frame_4f469ce220d3d4a8e430fc24c476d69a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_4f469ce220d3d4a8e430fc24c476d69a = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4f469ce220d3d4a8e430fc24c476d69a)) {
        Py_XDECREF(cache_frame_4f469ce220d3d4a8e430fc24c476d69a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4f469ce220d3d4a8e430fc24c476d69a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4f469ce220d3d4a8e430fc24c476d69a = MAKE_FUNCTION_FRAME(codeobj_4f469ce220d3d4a8e430fc24c476d69a, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4f469ce220d3d4a8e430fc24c476d69a->m_type_description == NULL);
    frame_4f469ce220d3d4a8e430fc24c476d69a = cache_frame_4f469ce220d3d4a8e430fc24c476d69a;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4f469ce220d3d4a8e430fc24c476d69a);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4f469ce220d3d4a8e430fc24c476d69a) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(par_v);
        tmp_isinstance_inst_1 = par_v;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[142]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1335;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1335;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[178]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1336;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_v);
        tmp_args_element_name_1 = par_v;
        frame_4f469ce220d3d4a8e430fc24c476d69a->m_frame.f_lineno = 1336;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[77], tmp_args_element_name_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1336;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_expression_name_5;
        CHECK_OBJECT(par_self);
        tmp_expression_name_3 = par_self;
        tmp_expression_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[178]);
        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1338;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[77]);
        Py_DECREF(tmp_expression_name_2);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1338;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_v);
        tmp_expression_name_4 = par_v;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, mod_consts[242]);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 1338;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_name_5 = par_self;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, mod_consts[51]);
        if (tmp_args_element_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 1338;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_4f469ce220d3d4a8e430fc24c476d69a->m_frame.f_lineno = 1338;
        tmp_args_element_name_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_3);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_3);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 1338;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_4f469ce220d3d4a8e430fc24c476d69a->m_frame.f_lineno = 1338;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1338;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4f469ce220d3d4a8e430fc24c476d69a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4f469ce220d3d4a8e430fc24c476d69a);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4f469ce220d3d4a8e430fc24c476d69a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4f469ce220d3d4a8e430fc24c476d69a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4f469ce220d3d4a8e430fc24c476d69a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4f469ce220d3d4a8e430fc24c476d69a,
        type_description_1,
        par_self,
        par_v
    );


    // Release cached frame if used for exception.
    if (frame_4f469ce220d3d4a8e430fc24c476d69a == cache_frame_4f469ce220d3d4a8e430fc24c476d69a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4f469ce220d3d4a8e430fc24c476d69a);
        cache_frame_4f469ce220d3d4a8e430fc24c476d69a = NULL;
    }

    assertFrameObject(frame_4f469ce220d3d4a8e430fc24c476d69a);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_v);
    Py_DECREF(par_v);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_v);
    Py_DECREF(par_v);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__27_savetxt$$$function__5_write_normal(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_v = python_pars[1];
    struct Nuitka_FrameObject *frame_049731c7a8a148b6349c8849ed44c30e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_049731c7a8a148b6349c8849ed44c30e = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_049731c7a8a148b6349c8849ed44c30e)) {
        Py_XDECREF(cache_frame_049731c7a8a148b6349c8849ed44c30e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_049731c7a8a148b6349c8849ed44c30e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_049731c7a8a148b6349c8849ed44c30e = MAKE_FUNCTION_FRAME(codeobj_049731c7a8a148b6349c8849ed44c30e, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_049731c7a8a148b6349c8849ed44c30e->m_type_description == NULL);
    frame_049731c7a8a148b6349c8849ed44c30e = cache_frame_049731c7a8a148b6349c8849ed44c30e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_049731c7a8a148b6349c8849ed44c30e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_049731c7a8a148b6349c8849ed44c30e) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT(par_self);
        tmp_expression_name_2 = par_self;
        tmp_expression_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[178]);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1341;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[77]);
        Py_DECREF(tmp_expression_name_1);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1341;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[134]);

        if (unlikely(tmp_called_name_2 == NULL)) {
            tmp_called_name_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[134]);
        }

        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 1341;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_v);
        tmp_args_element_name_2 = par_v;
        frame_049731c7a8a148b6349c8849ed44c30e->m_frame.f_lineno = 1341;
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 1341;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_049731c7a8a148b6349c8849ed44c30e->m_frame.f_lineno = 1341;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1341;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_049731c7a8a148b6349c8849ed44c30e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_049731c7a8a148b6349c8849ed44c30e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_049731c7a8a148b6349c8849ed44c30e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_049731c7a8a148b6349c8849ed44c30e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_049731c7a8a148b6349c8849ed44c30e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_049731c7a8a148b6349c8849ed44c30e,
        type_description_1,
        par_self,
        par_v
    );


    // Release cached frame if used for exception.
    if (frame_049731c7a8a148b6349c8849ed44c30e == cache_frame_049731c7a8a148b6349c8849ed44c30e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_049731c7a8a148b6349c8849ed44c30e);
        cache_frame_049731c7a8a148b6349c8849ed44c30e = NULL;
    }

    assertFrameObject(frame_049731c7a8a148b6349c8849ed44c30e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_v);
    Py_DECREF(par_v);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_v);
    Py_DECREF(par_v);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__27_savetxt$$$function__6_first_write(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_v = python_pars[1];
    struct Nuitka_FrameObject *frame_958559edcfc230371fd60661b971e2eb;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_958559edcfc230371fd60661b971e2eb = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_958559edcfc230371fd60661b971e2eb)) {
        Py_XDECREF(cache_frame_958559edcfc230371fd60661b971e2eb);

#if _DEBUG_REFCOUNTS
        if (cache_frame_958559edcfc230371fd60661b971e2eb == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_958559edcfc230371fd60661b971e2eb = MAKE_FUNCTION_FRAME(codeobj_958559edcfc230371fd60661b971e2eb, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_958559edcfc230371fd60661b971e2eb->m_type_description == NULL);
    frame_958559edcfc230371fd60661b971e2eb = cache_frame_958559edcfc230371fd60661b971e2eb;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_958559edcfc230371fd60661b971e2eb);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_958559edcfc230371fd60661b971e2eb) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_v);
        tmp_args_element_name_1 = par_v;
        frame_958559edcfc230371fd60661b971e2eb->m_frame.f_lineno = 1345;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[264], tmp_args_element_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1345;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_assattr_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[264]);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1346;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[77], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1346;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_1, &exception_preserved_value_1, &exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_958559edcfc230371fd60661b971e2eb, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_958559edcfc230371fd60661b971e2eb, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_1, exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_TypeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_1, tmp_compexpr_right_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT(par_self);
        tmp_expression_name_2 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[262]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1349;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        if (par_v == NULL) {
            Py_DECREF(tmp_called_name_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[291]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1349;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }

        tmp_args_element_name_2 = par_v;
        frame_958559edcfc230371fd60661b971e2eb->m_frame.f_lineno = 1349;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_1);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1349;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_self);
        tmp_expression_name_3 = par_self;
        tmp_assattr_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[262]);
        if (tmp_assattr_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1350;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[77], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1350;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1344;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_958559edcfc230371fd60661b971e2eb->m_frame) frame_958559edcfc230371fd60661b971e2eb->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oo";
    goto try_except_handler_2;
    branch_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    goto try_end_1;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_958559edcfc230371fd60661b971e2eb);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_958559edcfc230371fd60661b971e2eb);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_958559edcfc230371fd60661b971e2eb, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_958559edcfc230371fd60661b971e2eb->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_958559edcfc230371fd60661b971e2eb, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_958559edcfc230371fd60661b971e2eb,
        type_description_1,
        par_self,
        par_v
    );


    // Release cached frame if used for exception.
    if (frame_958559edcfc230371fd60661b971e2eb == cache_frame_958559edcfc230371fd60661b971e2eb) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_958559edcfc230371fd60661b971e2eb);
        cache_frame_958559edcfc230371fd60661b971e2eb = NULL;
    }

    assertFrameObject(frame_958559edcfc230371fd60661b971e2eb);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_v);
    Py_DECREF(par_v);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_v);
    Py_DECREF(par_v);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__28_fromregex(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_file = python_pars[0];
    PyObject *par_regexp = python_pars[1];
    PyObject *par_dtype = python_pars[2];
    PyObject *par_encoding = python_pars[3];
    nuitka_bool var_own_fh = NUITKA_BOOL_UNASSIGNED;
    PyObject *var_content = NULL;
    PyObject *var_seq = NULL;
    PyObject *var_newdtype = NULL;
    PyObject *var_output = NULL;
    struct Nuitka_FrameObject *frame_7bcdd43aa61ece872390d47a883072f6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_7bcdd43aa61ece872390d47a883072f6 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    {
        nuitka_bool tmp_assign_source_1;
        tmp_assign_source_1 = NUITKA_BOOL_FALSE;
        var_own_fh = tmp_assign_source_1;
    }
    // Tried code:
    if (isFrameUnusable(cache_frame_7bcdd43aa61ece872390d47a883072f6)) {
        Py_XDECREF(cache_frame_7bcdd43aa61ece872390d47a883072f6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7bcdd43aa61ece872390d47a883072f6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7bcdd43aa61ece872390d47a883072f6 = MAKE_FUNCTION_FRAME(codeobj_7bcdd43aa61ece872390d47a883072f6, module_numpy$lib$npyio, sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7bcdd43aa61ece872390d47a883072f6->m_type_description == NULL);
    frame_7bcdd43aa61ece872390d47a883072f6 = cache_frame_7bcdd43aa61ece872390d47a883072f6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7bcdd43aa61ece872390d47a883072f6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7bcdd43aa61ece872390d47a883072f6) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT(par_file);
        tmp_expression_name_1 = par_file;
        tmp_attribute_name_1 = mod_consts[13];
        tmp_res = BUILTIN_HASATTR_BOOL(tmp_expression_name_1, tmp_attribute_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1500;
            type_description_1 = "ooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1500;
            type_description_1 = "ooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        tmp_expression_name_4 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_4 == NULL)) {
            tmp_expression_name_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1501;
            type_description_1 = "ooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, mod_consts[154]);
        if (tmp_expression_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1501;
            type_description_1 = "ooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[155]);
        Py_DECREF(tmp_expression_name_3);
        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1501;
            type_description_1 = "ooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[39]);
        Py_DECREF(tmp_expression_name_2);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1501;
            type_description_1 = "ooooboooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_file);
        tmp_kw_call_arg_value_0_1 = par_file;
        tmp_kw_call_arg_value_1_1 = mod_consts[156];
        CHECK_OBJECT(par_encoding);
        tmp_kw_call_dict_value_0_1 = par_encoding;
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1501;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tmp_called_name_1, args, kw_values, mod_consts[157]);
        }

        Py_DECREF(tmp_called_name_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1501;
            type_description_1 = "ooooboooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_file;
            assert(old != NULL);
            par_file = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_assign_source_3;
        tmp_assign_source_3 = NUITKA_BOOL_TRUE;
        var_own_fh = tmp_assign_source_3;
    }
    branch_no_1:;
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_name_5;
        CHECK_OBJECT(par_dtype);
        tmp_isinstance_inst_1 = par_dtype;
        tmp_expression_name_5 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_5 == NULL)) {
            tmp_expression_name_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1505;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, mod_consts[176]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1505;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1505;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_operand_name_2 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1505;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1506;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_dtype);
        tmp_args_element_name_1 = par_dtype;
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1506;
        tmp_assign_source_4 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[176], tmp_args_element_name_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1506;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = par_dtype;
            assert(old != NULL);
            par_dtype = tmp_assign_source_4;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(par_file);
        tmp_called_instance_2 = par_file;
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1508;
        tmp_assign_source_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, mod_consts[13]);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1508;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        assert(var_content == NULL);
        var_content = tmp_assign_source_5;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        PyObject *tmp_isinstance_inst_3;
        PyObject *tmp_isinstance_cls_3;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_expression_name_7;
        CHECK_OBJECT(var_content);
        tmp_isinstance_inst_2 = var_content;
        tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[142]);

        if (unlikely(tmp_isinstance_cls_2 == NULL)) {
            tmp_isinstance_cls_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
        }

        if (tmp_isinstance_cls_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1509;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1509;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_and_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1509;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_regexp);
        tmp_isinstance_inst_3 = par_regexp;
        tmp_expression_name_7 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_7 == NULL)) {
            tmp_expression_name_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1509;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_expression_name_6 = LOOKUP_ATTRIBUTE(tmp_expression_name_7, mod_consts[292]);
        if (tmp_expression_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1509;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_isinstance_cls_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_6, mod_consts[293]);
        Py_DECREF(tmp_expression_name_6);
        if (tmp_isinstance_cls_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1509;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_3, tmp_isinstance_cls_3);
        Py_DECREF(tmp_isinstance_cls_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1509;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_3 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_3 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_2;
        tmp_called_name_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[132]);

        if (unlikely(tmp_called_name_2 == NULL)) {
            tmp_called_name_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[132]);
        }

        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1510;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_regexp);
        tmp_args_element_name_2 = par_regexp;
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1510;
        tmp_assign_source_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1510;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = par_regexp;
            assert(old != NULL);
            par_regexp = tmp_assign_source_6;
            Py_DECREF(old);
        }

    }
    goto branch_end_3;
    branch_no_3:;
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_isinstance_inst_4;
        PyObject *tmp_isinstance_cls_4;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_isinstance_inst_5;
        PyObject *tmp_isinstance_cls_5;
        CHECK_OBJECT(var_content);
        tmp_isinstance_inst_4 = var_content;
        tmp_expression_name_9 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_9 == NULL)) {
            tmp_expression_name_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1511;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_expression_name_8 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, mod_consts[292]);
        if (tmp_expression_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1511;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_isinstance_cls_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, mod_consts[293]);
        Py_DECREF(tmp_expression_name_8);
        if (tmp_isinstance_cls_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1511;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_4, tmp_isinstance_cls_4);
        Py_DECREF(tmp_isinstance_cls_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1511;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_and_left_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1511;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT(par_regexp);
        tmp_isinstance_inst_5 = par_regexp;
        tmp_isinstance_cls_5 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[142]);

        if (unlikely(tmp_isinstance_cls_5 == NULL)) {
            tmp_isinstance_cls_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
        }

        if (tmp_isinstance_cls_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1511;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_5, tmp_isinstance_cls_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1511;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_and_right_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_4 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_4 = tmp_and_left_value_2;
        and_end_2:;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_name_3;
        PyObject *tmp_args_element_name_3;
        tmp_called_name_3 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[135]);

        if (unlikely(tmp_called_name_3 == NULL)) {
            tmp_called_name_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[135]);
        }

        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1512;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_regexp);
        tmp_args_element_name_3 = par_regexp;
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1512;
        tmp_assign_source_7 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_3);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1512;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = par_regexp;
            assert(old != NULL);
            par_regexp = tmp_assign_source_7;
            Py_DECREF(old);
        }

    }
    branch_no_4:;
    branch_end_3:;
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_operand_name_3;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_attribute_name_2;
        if (par_regexp == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[294]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1514;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }

        tmp_expression_name_10 = par_regexp;
        tmp_attribute_name_2 = mod_consts[295];
        tmp_res = BUILTIN_HASATTR_BOOL(tmp_expression_name_10, tmp_attribute_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1514;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_operand_name_3 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1514;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_5 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_name_4;
        PyObject *tmp_expression_name_11;
        PyObject *tmp_args_element_name_4;
        tmp_expression_name_11 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[145]);

        if (unlikely(tmp_expression_name_11 == NULL)) {
            tmp_expression_name_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[145]);
        }

        if (tmp_expression_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1515;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, mod_consts[146]);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1515;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        if (par_regexp == NULL) {
            Py_DECREF(tmp_called_name_4);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[294]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1515;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }

        tmp_args_element_name_4 = par_regexp;
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1515;
        tmp_assign_source_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_4, tmp_args_element_name_4);
        Py_DECREF(tmp_called_name_4);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1515;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = par_regexp;
            par_regexp = tmp_assign_source_8;
            Py_XDECREF(old);
        }

    }
    branch_no_5:;
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_args_element_name_5;
        if (par_regexp == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[294]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1516;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }

        tmp_called_instance_3 = par_regexp;
        CHECK_OBJECT(var_content);
        tmp_args_element_name_5 = var_content;
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1516;
        tmp_assign_source_9 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_3, mod_consts[296], tmp_args_element_name_5);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1516;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        assert(var_seq == NULL);
        var_seq = tmp_assign_source_9;
    }
    {
        nuitka_bool tmp_condition_result_6;
        int tmp_and_left_truth_3;
        nuitka_bool tmp_and_left_value_3;
        nuitka_bool tmp_and_right_value_3;
        int tmp_truth_name_1;
        PyObject *tmp_operand_name_4;
        PyObject *tmp_isinstance_inst_6;
        PyObject *tmp_isinstance_cls_6;
        PyObject *tmp_expression_name_12;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(var_seq);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_seq);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1517;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_and_left_value_3 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1517;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        if (tmp_and_left_truth_3 == 1) {
            goto and_right_3;
        } else {
            goto and_left_3;
        }
        and_right_3:;
        CHECK_OBJECT(var_seq);
        tmp_expression_name_12 = var_seq;
        tmp_subscript_name_1 = mod_consts[16];
        tmp_isinstance_inst_6 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_12, tmp_subscript_name_1, 0);
        if (tmp_isinstance_inst_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1517;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_isinstance_cls_6 = (PyObject *)&PyTuple_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_6, tmp_isinstance_cls_6);
        Py_DECREF(tmp_isinstance_inst_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1517;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_operand_name_4 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1517;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_and_right_value_3 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_6 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_condition_result_6 = tmp_and_left_value_3;
        and_end_3:;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_name_5;
        PyObject *tmp_expression_name_13;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_expression_name_14;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_expression_name_15;
        PyObject *tmp_expression_name_16;
        PyObject *tmp_subscript_name_3;
        tmp_expression_name_13 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_13 == NULL)) {
            tmp_expression_name_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1521;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_13, mod_consts[176]);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1521;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_dtype);
        tmp_expression_name_14 = par_dtype;
        CHECK_OBJECT(par_dtype);
        tmp_expression_name_16 = par_dtype;
        tmp_expression_name_15 = LOOKUP_ATTRIBUTE(tmp_expression_name_16, mod_consts[211]);
        if (tmp_expression_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_5);

            exception_lineno = 1521;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_subscript_name_3 = mod_consts[16];
        tmp_subscript_name_2 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_15, tmp_subscript_name_3, 0);
        Py_DECREF(tmp_expression_name_15);
        if (tmp_subscript_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_5);

            exception_lineno = 1521;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_args_element_name_6 = LOOKUP_SUBSCRIPT(tmp_expression_name_14, tmp_subscript_name_2);
        Py_DECREF(tmp_subscript_name_2);
        if (tmp_args_element_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_5);

            exception_lineno = 1521;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1521;
        tmp_assign_source_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_5, tmp_args_element_name_6);
        Py_DECREF(tmp_called_name_5);
        Py_DECREF(tmp_args_element_name_6);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1521;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        assert(var_newdtype == NULL);
        var_newdtype = tmp_assign_source_10;
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_name_6;
        PyObject *tmp_expression_name_17;
        PyObject *tmp_kw_call_arg_value_0_2;
        PyObject *tmp_kw_call_dict_value_0_2;
        tmp_expression_name_17 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_17 == NULL)) {
            tmp_expression_name_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1522;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_expression_name_17, mod_consts[195]);
        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1522;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_seq);
        tmp_kw_call_arg_value_0_2 = var_seq;
        CHECK_OBJECT(var_newdtype);
        tmp_kw_call_dict_value_0_2 = var_newdtype;
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1522;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_2};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_2};
            tmp_assign_source_11 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_6, args, kw_values, mod_consts[297]);
        }

        Py_DECREF(tmp_called_name_6);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1522;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        assert(var_output == NULL);
        var_output = tmp_assign_source_11;
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_dtype);
        tmp_assattr_value_1 = par_dtype;
        CHECK_OBJECT(var_output);
        tmp_assattr_target_1 = var_output;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[176], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1523;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
    }
    goto branch_end_6;
    branch_no_6:;
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_name_7;
        PyObject *tmp_expression_name_18;
        PyObject *tmp_kw_call_arg_value_0_3;
        PyObject *tmp_kw_call_dict_value_0_3;
        tmp_expression_name_18 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_18 == NULL)) {
            tmp_expression_name_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1525;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_expression_name_18, mod_consts[195]);
        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1525;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_seq);
        tmp_kw_call_arg_value_0_3 = var_seq;
        CHECK_OBJECT(par_dtype);
        tmp_kw_call_dict_value_0_3 = par_dtype;
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1525;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_3};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_3};
            tmp_assign_source_12 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_7, args, kw_values, mod_consts[297]);
        }

        Py_DECREF(tmp_called_name_7);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1525;
            type_description_1 = "ooooboooo";
            goto try_except_handler_2;
        }
        assert(var_output == NULL);
        var_output = tmp_assign_source_12;
    }
    branch_end_6:;
    CHECK_OBJECT(var_output);
    tmp_return_value = var_output;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_2;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    {
        bool tmp_condition_result_7;
        assert(var_own_fh != NUITKA_BOOL_UNASSIGNED);
        tmp_condition_result_7 = var_own_fh == NUITKA_BOOL_TRUE;
        if (tmp_condition_result_7 != false) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_file);
        tmp_called_instance_4 = par_file;
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1530;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_4, mod_consts[35]);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1530;
            type_description_1 = "ooooboooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_7:;
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_1, &exception_preserved_value_1, &exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_7bcdd43aa61ece872390d47a883072f6, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_7bcdd43aa61ece872390d47a883072f6, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_1, exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        bool tmp_condition_result_8;
        assert(var_own_fh != NUITKA_BOOL_UNASSIGNED);
        tmp_condition_result_8 = var_own_fh == NUITKA_BOOL_TRUE;
        if (tmp_condition_result_8 != false) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_2;
        if (par_file == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[70]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1530;
            type_description_1 = "ooooboooo";
            goto try_except_handler_3;
        }

        tmp_called_instance_5 = par_file;
        frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = 1530;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, mod_consts[35]);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1530;
            type_description_1 = "ooooboooo";
            goto try_except_handler_3;
        }
        Py_DECREF(tmp_call_result_2);
    }
    branch_no_8:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1504;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_7bcdd43aa61ece872390d47a883072f6->m_frame) frame_7bcdd43aa61ece872390d47a883072f6->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooboooo";
    goto try_except_handler_3;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7bcdd43aa61ece872390d47a883072f6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_7bcdd43aa61ece872390d47a883072f6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7bcdd43aa61ece872390d47a883072f6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7bcdd43aa61ece872390d47a883072f6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7bcdd43aa61ece872390d47a883072f6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7bcdd43aa61ece872390d47a883072f6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7bcdd43aa61ece872390d47a883072f6,
        type_description_1,
        par_file,
        par_regexp,
        par_dtype,
        par_encoding,
        (int)var_own_fh,
        var_content,
        var_seq,
        var_newdtype,
        var_output
    );


    // Release cached frame if used for exception.
    if (frame_7bcdd43aa61ece872390d47a883072f6 == cache_frame_7bcdd43aa61ece872390d47a883072f6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7bcdd43aa61ece872390d47a883072f6);
        cache_frame_7bcdd43aa61ece872390d47a883072f6 = NULL;
    }

    assertFrameObject(frame_7bcdd43aa61ece872390d47a883072f6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_file);
    Py_DECREF(par_file);
    par_file = NULL;
    Py_XDECREF(par_regexp);
    par_regexp = NULL;
    Py_XDECREF(par_dtype);
    par_dtype = NULL;
    assert(var_own_fh != NUITKA_BOOL_UNASSIGNED);
    var_own_fh = NUITKA_BOOL_UNASSIGNED;
    CHECK_OBJECT(var_content);
    Py_DECREF(var_content);
    var_content = NULL;
    Py_XDECREF(var_seq);
    var_seq = NULL;
    Py_XDECREF(var_newdtype);
    var_newdtype = NULL;
    CHECK_OBJECT(var_output);
    Py_DECREF(var_output);
    var_output = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_file);
    par_file = NULL;
    Py_XDECREF(par_regexp);
    par_regexp = NULL;
    Py_XDECREF(par_dtype);
    par_dtype = NULL;
    var_own_fh = NUITKA_BOOL_UNASSIGNED;
    Py_XDECREF(var_content);
    var_content = NULL;
    Py_XDECREF(var_seq);
    var_seq = NULL;
    Py_XDECREF(var_newdtype);
    var_newdtype = NULL;
    Py_XDECREF(var_output);
    var_output = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__29_genfromtxt(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_fname = python_pars[0];
    PyObject *par_dtype = python_pars[1];
    PyObject *par_comments = python_pars[2];
    PyObject *par_delimiter = python_pars[3];
    PyObject *par_skip_header = python_pars[4];
    PyObject *par_skip_footer = python_pars[5];
    PyObject *par_converters = python_pars[6];
    PyObject *par_missing_values = python_pars[7];
    PyObject *par_filling_values = python_pars[8];
    PyObject *par_usecols = python_pars[9];
    PyObject *par_names = python_pars[10];
    PyObject *par_excludelist = python_pars[11];
    PyObject *par_deletechars = python_pars[12];
    PyObject *par_replace_space = python_pars[13];
    PyObject *par_autostrip = python_pars[14];
    PyObject *par_case_sensitive = python_pars[15];
    PyObject *par_defaultfmt = python_pars[16];
    PyObject *par_unpack = python_pars[17];
    PyObject *par_usemask = python_pars[18];
    PyObject *par_loose = python_pars[19];
    PyObject *par_invalid_raise = python_pars[20];
    PyObject *par_max_rows = python_pars[21];
    PyObject *par_encoding = python_pars[22];
    PyObject *var_MaskedArray = NULL;
    PyObject *var_make_mask_descr = NULL;
    PyObject *var_user_converters = NULL;
    nuitka_bool var_byte_converters = NUITKA_BOOL_UNASSIGNED;
    PyObject *var_fid = NULL;
    PyObject *var_fid_ctx = NULL;
    PyObject *var_fhd = NULL;
    PyObject *var_split_line = NULL;
    PyObject *var_validate_names = NULL;
    struct Nuitka_CellObject *var_i = Nuitka_Cell_Empty();
    PyObject *var_first_values = NULL;
    PyObject *var_first_line = NULL;
    PyObject *var_fval = NULL;
    PyObject *var_nbcols = NULL;
    PyObject *var_current = NULL;
    PyObject *var_descr = NULL;
    PyObject *var_user_missing_values = NULL;
    PyObject *var_key = NULL;
    PyObject *var_val = NULL;
    PyObject *var_miss = NULL;
    PyObject *var_value = NULL;
    PyObject *var_entry = NULL;
    PyObject *var_user_value = NULL;
    PyObject *var_user_filling_values = NULL;
    PyObject *var_n = NULL;
    PyObject *var_dtype_flat = NULL;
    PyObject *var_zipit = NULL;
    PyObject *var_uc_update = NULL;
    PyObject *var_j = NULL;
    PyObject *var_conv = NULL;
    PyObject *var_testing_value = NULL;
    PyObject *var_user_conv = NULL;
    PyObject *var_tobytes_first = NULL;
    PyObject *var_rows = NULL;
    PyObject *var_append_to_rows = NULL;
    PyObject *var_masks = NULL;
    PyObject *var_append_to_masks = NULL;
    PyObject *var_invalid = NULL;
    PyObject *var_append_to_invalid = NULL;
    PyObject *var_line = NULL;
    PyObject *var_values = NULL;
    PyObject *var_nbvalues = NULL;
    PyObject *var_converter = NULL;
    PyObject *var_current_column = NULL;
    PyObject *var_errmsg = NULL;
    PyObject *var_nbinvalid = NULL;
    PyObject *var_nbrows = NULL;
    PyObject *var_template = NULL;
    PyObject *var_nbinvalid_skipped = NULL;
    PyObject *var_data = NULL;
    PyObject *var_column_types = NULL;
    struct Nuitka_CellObject *var_strcolidx = Nuitka_Cell_Empty();
    PyObject *var_encode_unicode_cols = NULL;
    PyObject *var_sized_column_types = NULL;
    PyObject *var_col_type = NULL;
    PyObject *var_n_chars = NULL;
    PyObject *var_base = NULL;
    PyObject *var_uniform_type = NULL;
    PyObject *var_ddtype = NULL;
    PyObject *var_mdtype = NULL;
    PyObject *var_output = NULL;
    PyObject *var_outputmask = NULL;
    PyObject *var_rowmasks = NULL;
    PyObject *var_ishomogeneous = NULL;
    PyObject *var_ttype = NULL;
    PyObject *var_name = NULL;
    PyObject *var_mval = NULL;
    PyObject *outline_0_var__ = NULL;
    PyObject *outline_1_var__ = NULL;
    PyObject *outline_2_var__ = NULL;
    PyObject *outline_3_var__ = NULL;
    PyObject *outline_4_var__ = NULL;
    PyObject *outline_5_var__ = NULL;
    PyObject *outline_6_var__ = NULL;
    PyObject *outline_7_var_miss = NULL;
    PyObject *outline_7_var_fill = NULL;
    PyObject *outline_8_var_dt = NULL;
    PyObject *outline_8_var_miss = NULL;
    PyObject *outline_8_var_fill = NULL;
    PyObject *outline_9_var_miss = NULL;
    PyObject *outline_9_var_fill = NULL;
    PyObject *outline_10_var__ = NULL;
    PyObject *outline_11_var_v = NULL;
    PyObject *outline_11_var_m = NULL;
    PyObject *outline_12_var__m = NULL;
    PyObject *outline_13_var__ = NULL;
    PyObject *outline_14_var_i = NULL;
    PyObject *outline_14_var_nb = NULL;
    PyObject *outline_15_var_i = NULL;
    PyObject *outline_15_var_conv = NULL;
    PyObject *outline_16_var__r = NULL;
    PyObject *outline_17_var_i = NULL;
    PyObject *outline_17_var_conv = NULL;
    PyObject *outline_18_var__r = NULL;
    PyObject *outline_19_var_conv = NULL;
    PyObject *outline_20_var_i = NULL;
    PyObject *outline_20_var_v = NULL;
    PyObject *outline_21_var_r = NULL;
    PyObject *outline_22_var_c = NULL;
    PyObject *outline_22_var_c_type = NULL;
    PyObject *outline_23_var_i = NULL;
    PyObject *outline_23_var_dt = NULL;
    PyObject *outline_24_var_i = NULL;
    PyObject *outline_24_var_dt = NULL;
    PyObject *outline_25_var__ = NULL;
    PyObject *outline_26_var_t = NULL;
    PyObject *outline_27_var_conv = NULL;
    PyObject *outline_28_var__ = NULL;
    PyObject *outline_29_var__ = NULL;
    PyObject *tmp_for_loop_10__for_iterator = NULL;
    PyObject *tmp_for_loop_10__iter_value = NULL;
    PyObject *tmp_for_loop_11__for_iterator = NULL;
    PyObject *tmp_for_loop_11__iter_value = NULL;
    PyObject *tmp_for_loop_12__for_iterator = NULL;
    PyObject *tmp_for_loop_12__iter_value = NULL;
    PyObject *tmp_for_loop_13__for_iterator = NULL;
    PyObject *tmp_for_loop_13__iter_value = NULL;
    PyObject *tmp_for_loop_14__for_iterator = NULL;
    PyObject *tmp_for_loop_14__iter_value = NULL;
    PyObject *tmp_for_loop_15__for_iterator = NULL;
    PyObject *tmp_for_loop_15__iter_value = NULL;
    PyObject *tmp_for_loop_16__for_iterator = NULL;
    PyObject *tmp_for_loop_16__iter_value = NULL;
    PyObject *tmp_for_loop_17__for_iterator = NULL;
    PyObject *tmp_for_loop_17__iter_value = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *tmp_for_loop_6__for_iterator = NULL;
    PyObject *tmp_for_loop_6__iter_value = NULL;
    PyObject *tmp_for_loop_7__for_iterator = NULL;
    PyObject *tmp_for_loop_7__iter_value = NULL;
    PyObject *tmp_for_loop_8__for_iterator = NULL;
    PyObject *tmp_for_loop_8__iter_value = NULL;
    PyObject *tmp_for_loop_9__for_iterator = NULL;
    PyObject *tmp_for_loop_9__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_genexpr_2__$0 = NULL;
    PyObject *tmp_genexpr_3__$0 = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_inplace_assign_subscr_1__subscript = NULL;
    PyObject *tmp_inplace_assign_subscr_1__target = NULL;
    PyObject *tmp_inplace_assign_subscr_1__value = NULL;
    PyObject *tmp_listcomp$listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp$listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_listcomp$listcomp_2__$0 = NULL;
    PyObject *tmp_listcomp$listcomp_2__contraction = NULL;
    PyObject *tmp_listcomp$listcomp_2__iter_value_0 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_10__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_10__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_10__source_iter = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_listcomp$tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_2__element_3 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_listcomp$tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_listcomp$tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_4__source_iter = NULL;
    PyObject *tmp_listcomp$tuple_unpack_5__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_5__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_5__source_iter = NULL;
    PyObject *tmp_listcomp$tuple_unpack_6__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_6__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_6__source_iter = NULL;
    PyObject *tmp_listcomp$tuple_unpack_7__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_7__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_7__source_iter = NULL;
    PyObject *tmp_listcomp$tuple_unpack_8__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_8__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_8__source_iter = NULL;
    PyObject *tmp_listcomp$tuple_unpack_9__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_9__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_9__source_iter = NULL;
    PyObject *tmp_listcomp_10__$0 = NULL;
    PyObject *tmp_listcomp_10__contraction = NULL;
    PyObject *tmp_listcomp_10__iter_value_0 = NULL;
    PyObject *tmp_listcomp_11__$0 = NULL;
    PyObject *tmp_listcomp_11__contraction = NULL;
    PyObject *tmp_listcomp_11__iter_value_0 = NULL;
    PyObject *tmp_listcomp_12__$0 = NULL;
    PyObject *tmp_listcomp_12__contraction = NULL;
    PyObject *tmp_listcomp_12__iter_value_0 = NULL;
    PyObject *tmp_listcomp_13__$0 = NULL;
    PyObject *tmp_listcomp_13__contraction = NULL;
    PyObject *tmp_listcomp_13__iter_value_0 = NULL;
    PyObject *tmp_listcomp_14__$0 = NULL;
    PyObject *tmp_listcomp_14__contraction = NULL;
    PyObject *tmp_listcomp_14__iter_value_0 = NULL;
    PyObject *tmp_listcomp_15__$0 = NULL;
    PyObject *tmp_listcomp_15__contraction = NULL;
    PyObject *tmp_listcomp_15__iter_value_0 = NULL;
    PyObject *tmp_listcomp_16__$0 = NULL;
    PyObject *tmp_listcomp_16__contraction = NULL;
    PyObject *tmp_listcomp_16__iter_value_0 = NULL;
    PyObject *tmp_listcomp_17__$0 = NULL;
    PyObject *tmp_listcomp_17__contraction = NULL;
    PyObject *tmp_listcomp_17__iter_value_0 = NULL;
    PyObject *tmp_listcomp_18__$0 = NULL;
    PyObject *tmp_listcomp_18__contraction = NULL;
    PyObject *tmp_listcomp_18__iter_value_0 = NULL;
    PyObject *tmp_listcomp_19__$0 = NULL;
    PyObject *tmp_listcomp_19__contraction = NULL;
    PyObject *tmp_listcomp_19__iter_value_0 = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_listcomp_20__$0 = NULL;
    PyObject *tmp_listcomp_20__contraction = NULL;
    PyObject *tmp_listcomp_20__iter_value_0 = NULL;
    PyObject *tmp_listcomp_21__$0 = NULL;
    PyObject *tmp_listcomp_21__contraction = NULL;
    PyObject *tmp_listcomp_21__iter_value_0 = NULL;
    PyObject *tmp_listcomp_22__$0 = NULL;
    PyObject *tmp_listcomp_22__contraction = NULL;
    PyObject *tmp_listcomp_22__iter_value_0 = NULL;
    PyObject *tmp_listcomp_23__$0 = NULL;
    PyObject *tmp_listcomp_23__contraction = NULL;
    PyObject *tmp_listcomp_23__iter_value_0 = NULL;
    PyObject *tmp_listcomp_24__$0 = NULL;
    PyObject *tmp_listcomp_24__contraction = NULL;
    PyObject *tmp_listcomp_24__iter_value_0 = NULL;
    PyObject *tmp_listcomp_25__$0 = NULL;
    PyObject *tmp_listcomp_25__contraction = NULL;
    PyObject *tmp_listcomp_25__iter_value_0 = NULL;
    PyObject *tmp_listcomp_26__$0 = NULL;
    PyObject *tmp_listcomp_26__contraction = NULL;
    PyObject *tmp_listcomp_26__iter_value_0 = NULL;
    PyObject *tmp_listcomp_27__$0 = NULL;
    PyObject *tmp_listcomp_27__contraction = NULL;
    PyObject *tmp_listcomp_27__iter_value_0 = NULL;
    PyObject *tmp_listcomp_2__$0 = NULL;
    PyObject *tmp_listcomp_2__contraction = NULL;
    PyObject *tmp_listcomp_2__iter_value_0 = NULL;
    PyObject *tmp_listcomp_3__$0 = NULL;
    PyObject *tmp_listcomp_3__contraction = NULL;
    PyObject *tmp_listcomp_3__iter_value_0 = NULL;
    PyObject *tmp_listcomp_4__$0 = NULL;
    PyObject *tmp_listcomp_4__contraction = NULL;
    PyObject *tmp_listcomp_4__iter_value_0 = NULL;
    PyObject *tmp_listcomp_5__$0 = NULL;
    PyObject *tmp_listcomp_5__contraction = NULL;
    PyObject *tmp_listcomp_5__iter_value_0 = NULL;
    PyObject *tmp_listcomp_6__$0 = NULL;
    PyObject *tmp_listcomp_6__contraction = NULL;
    PyObject *tmp_listcomp_6__iter_value_0 = NULL;
    PyObject *tmp_listcomp_7__$0 = NULL;
    PyObject *tmp_listcomp_7__contraction = NULL;
    PyObject *tmp_listcomp_7__iter_value_0 = NULL;
    PyObject *tmp_listcomp_8__$0 = NULL;
    PyObject *tmp_listcomp_8__contraction = NULL;
    PyObject *tmp_listcomp_8__iter_value_0 = NULL;
    PyObject *tmp_listcomp_9__$0 = NULL;
    PyObject *tmp_listcomp_9__contraction = NULL;
    PyObject *tmp_listcomp_9__iter_value_0 = NULL;
    PyObject *tmp_setcontraction$tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_setcontraction$tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_setcontraction$tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_setcontraction_1__$0 = NULL;
    PyObject *tmp_setcontraction_1__contraction = NULL;
    PyObject *tmp_setcontraction_1__iter_value_0 = NULL;
    nuitka_bool tmp_try_except_1__unhandled_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_tuple_unpack_10__element_1 = NULL;
    PyObject *tmp_tuple_unpack_10__source_iter = NULL;
    PyObject *tmp_tuple_unpack_11__element_1 = NULL;
    PyObject *tmp_tuple_unpack_11__element_2 = NULL;
    PyObject *tmp_tuple_unpack_11__source_iter = NULL;
    PyObject *tmp_tuple_unpack_12__element_1 = NULL;
    PyObject *tmp_tuple_unpack_12__element_2 = NULL;
    PyObject *tmp_tuple_unpack_12__source_iter = NULL;
    PyObject *tmp_tuple_unpack_13__element_1 = NULL;
    PyObject *tmp_tuple_unpack_13__element_2 = NULL;
    PyObject *tmp_tuple_unpack_13__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    PyObject *tmp_tuple_unpack_5__element_1 = NULL;
    PyObject *tmp_tuple_unpack_5__element_2 = NULL;
    PyObject *tmp_tuple_unpack_5__source_iter = NULL;
    PyObject *tmp_tuple_unpack_6__element_1 = NULL;
    PyObject *tmp_tuple_unpack_6__element_2 = NULL;
    PyObject *tmp_tuple_unpack_6__source_iter = NULL;
    PyObject *tmp_tuple_unpack_7__element_1 = NULL;
    PyObject *tmp_tuple_unpack_7__element_2 = NULL;
    PyObject *tmp_tuple_unpack_7__source_iter = NULL;
    PyObject *tmp_tuple_unpack_8__element_1 = NULL;
    PyObject *tmp_tuple_unpack_8__element_2 = NULL;
    PyObject *tmp_tuple_unpack_8__source_iter = NULL;
    PyObject *tmp_tuple_unpack_9__element_1 = NULL;
    PyObject *tmp_tuple_unpack_9__element_2 = NULL;
    PyObject *tmp_tuple_unpack_9__source_iter = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_37c571cd74ad2fdf61d5caff50be6f52;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_res;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    struct Nuitka_FrameObject *frame_c380f76ca12aa0536963b346076e2359_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    static struct Nuitka_FrameObject *cache_frame_c380f76ca12aa0536963b346076e2359_2 = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_preserved_type_4;
    PyObject *exception_preserved_value_4;
    PyTracebackObject *exception_preserved_tb_4;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_preserved_type_3;
    PyObject *exception_preserved_value_3;
    PyTracebackObject *exception_preserved_tb_3;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    struct Nuitka_FrameObject *frame_2b596903130a043d4473e80c3b7d1327_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    static struct Nuitka_FrameObject *cache_frame_2b596903130a043d4473e80c3b7d1327_3 = NULL;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    struct Nuitka_FrameObject *frame_83cebef9552bc5e292295f67af9c6efd_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    static struct Nuitka_FrameObject *cache_frame_83cebef9552bc5e292295f67af9c6efd_4 = NULL;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    struct Nuitka_FrameObject *frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    static struct Nuitka_FrameObject *cache_frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5 = NULL;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    struct Nuitka_FrameObject *frame_6c1a8339bb477bbe8ef692504f74310c_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    static struct Nuitka_FrameObject *cache_frame_6c1a8339bb477bbe8ef692504f74310c_6 = NULL;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    struct Nuitka_FrameObject *frame_859827a834425b584d481d21594f17c1_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    static struct Nuitka_FrameObject *cache_frame_859827a834425b584d481d21594f17c1_7 = NULL;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_preserved_type_5;
    PyObject *exception_preserved_value_5;
    PyTracebackObject *exception_preserved_tb_5;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *exception_preserved_type_6;
    PyObject *exception_preserved_value_6;
    PyTracebackObject *exception_preserved_tb_6;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    struct Nuitka_FrameObject *frame_1c4d467ae28cbd847f4f7e781387400f_8;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    static struct Nuitka_FrameObject *cache_frame_1c4d467ae28cbd847f4f7e781387400f_8 = NULL;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *exception_preserved_type_7;
    PyObject *exception_preserved_value_7;
    PyTracebackObject *exception_preserved_tb_7;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *exception_preserved_type_8;
    PyObject *exception_preserved_value_8;
    PyTracebackObject *exception_preserved_tb_8;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    struct Nuitka_FrameObject *frame_6ca4a6654d5b785088184b5bae7a118f_9;
    NUITKA_MAY_BE_UNUSED char const *type_description_9 = NULL;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_49;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_50;
    static struct Nuitka_FrameObject *cache_frame_6ca4a6654d5b785088184b5bae7a118f_9 = NULL;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_51;
    struct Nuitka_FrameObject *frame_bc9829d011bfeb1390ef1732dd00886d_10;
    NUITKA_MAY_BE_UNUSED char const *type_description_10 = NULL;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_53;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_54;
    static struct Nuitka_FrameObject *cache_frame_bc9829d011bfeb1390ef1732dd00886d_10 = NULL;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_55;
    struct Nuitka_FrameObject *frame_78a8dba6d77a7a8c47a1383725ec744d_11;
    NUITKA_MAY_BE_UNUSED char const *type_description_11 = NULL;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_56;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_57;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_58;
    static struct Nuitka_FrameObject *cache_frame_78a8dba6d77a7a8c47a1383725ec744d_11 = NULL;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_59;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_60;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_61;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_62;
    PyObject *exception_preserved_type_9;
    PyObject *exception_preserved_value_9;
    PyTracebackObject *exception_preserved_tb_9;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_63;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_64;
    PyObject *exception_preserved_type_10;
    PyObject *exception_preserved_value_10;
    PyTracebackObject *exception_preserved_tb_10;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_65;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_66;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_67;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_68;
    struct Nuitka_FrameObject *frame_60e90acd62b857a138258b951b783c8f_12;
    NUITKA_MAY_BE_UNUSED char const *type_description_12 = NULL;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_69;
    static struct Nuitka_FrameObject *cache_frame_60e90acd62b857a138258b951b783c8f_12 = NULL;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_70;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_71;
    PyObject *exception_preserved_type_11;
    PyObject *exception_preserved_value_11;
    PyTracebackObject *exception_preserved_tb_11;
    PyObject *exception_keeper_type_72;
    PyObject *exception_keeper_value_72;
    PyTracebackObject *exception_keeper_tb_72;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_72;
    struct Nuitka_FrameObject *frame_62f242fb3036b9aad5dd90e51b1b762f_13;
    NUITKA_MAY_BE_UNUSED char const *type_description_13 = NULL;
    PyObject *exception_keeper_type_73;
    PyObject *exception_keeper_value_73;
    PyTracebackObject *exception_keeper_tb_73;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_73;
    PyObject *exception_keeper_type_74;
    PyObject *exception_keeper_value_74;
    PyTracebackObject *exception_keeper_tb_74;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_74;
    PyObject *exception_keeper_type_75;
    PyObject *exception_keeper_value_75;
    PyTracebackObject *exception_keeper_tb_75;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_75;
    static struct Nuitka_FrameObject *cache_frame_62f242fb3036b9aad5dd90e51b1b762f_13 = NULL;
    PyObject *exception_keeper_type_76;
    PyObject *exception_keeper_value_76;
    PyTracebackObject *exception_keeper_tb_76;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_76;
    PyObject *exception_keeper_type_77;
    PyObject *exception_keeper_value_77;
    PyTracebackObject *exception_keeper_tb_77;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_77;
    PyObject *exception_keeper_type_78;
    PyObject *exception_keeper_value_78;
    PyTracebackObject *exception_keeper_tb_78;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_78;
    PyObject *exception_preserved_type_12;
    PyObject *exception_preserved_value_12;
    PyTracebackObject *exception_preserved_tb_12;
    PyObject *exception_keeper_type_79;
    PyObject *exception_keeper_value_79;
    PyTracebackObject *exception_keeper_tb_79;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_79;
    PyObject *exception_keeper_type_80;
    PyObject *exception_keeper_value_80;
    PyTracebackObject *exception_keeper_tb_80;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_80;
    PyObject *exception_keeper_type_81;
    PyObject *exception_keeper_value_81;
    PyTracebackObject *exception_keeper_tb_81;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_81;
    PyObject *exception_keeper_type_82;
    PyObject *exception_keeper_value_82;
    PyTracebackObject *exception_keeper_tb_82;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_82;
    PyObject *exception_keeper_type_83;
    PyObject *exception_keeper_value_83;
    PyTracebackObject *exception_keeper_tb_83;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_83;
    struct Nuitka_FrameObject *frame_f63664256a3aadad9ae4696875b678c8_14;
    NUITKA_MAY_BE_UNUSED char const *type_description_14 = NULL;
    PyObject *exception_keeper_type_84;
    PyObject *exception_keeper_value_84;
    PyTracebackObject *exception_keeper_tb_84;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_84;
    static struct Nuitka_FrameObject *cache_frame_f63664256a3aadad9ae4696875b678c8_14 = NULL;
    PyObject *exception_keeper_type_85;
    PyObject *exception_keeper_value_85;
    PyTracebackObject *exception_keeper_tb_85;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_85;
    PyObject *exception_keeper_type_86;
    PyObject *exception_keeper_value_86;
    PyTracebackObject *exception_keeper_tb_86;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_86;
    PyObject *exception_preserved_type_14;
    PyObject *exception_preserved_value_14;
    PyTracebackObject *exception_preserved_tb_14;
    PyObject *exception_keeper_type_87;
    PyObject *exception_keeper_value_87;
    PyTracebackObject *exception_keeper_tb_87;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_87;
    PyObject *exception_keeper_type_88;
    PyObject *exception_keeper_value_88;
    PyTracebackObject *exception_keeper_tb_88;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_88;
    PyObject *exception_keeper_type_89;
    PyObject *exception_keeper_value_89;
    PyTracebackObject *exception_keeper_tb_89;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_89;
    PyObject *exception_preserved_type_13;
    PyObject *exception_preserved_value_13;
    PyTracebackObject *exception_preserved_tb_13;
    PyObject *exception_keeper_type_90;
    PyObject *exception_keeper_value_90;
    PyTracebackObject *exception_keeper_tb_90;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_90;
    PyObject *exception_keeper_type_91;
    PyObject *exception_keeper_value_91;
    PyTracebackObject *exception_keeper_tb_91;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_91;
    PyObject *exception_keeper_type_92;
    PyObject *exception_keeper_value_92;
    PyTracebackObject *exception_keeper_tb_92;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_92;
    PyObject *exception_keeper_type_93;
    PyObject *exception_keeper_value_93;
    PyTracebackObject *exception_keeper_tb_93;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_93;
    struct Nuitka_FrameObject *frame_706481369d52597022642401acff5ca9_15;
    NUITKA_MAY_BE_UNUSED char const *type_description_15 = NULL;
    PyObject *exception_keeper_type_94;
    PyObject *exception_keeper_value_94;
    PyTracebackObject *exception_keeper_tb_94;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_94;
    static struct Nuitka_FrameObject *cache_frame_706481369d52597022642401acff5ca9_15 = NULL;
    PyObject *exception_keeper_type_95;
    PyObject *exception_keeper_value_95;
    PyTracebackObject *exception_keeper_tb_95;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_95;
    struct Nuitka_FrameObject *frame_3f75580b5c7727486225c0616b57f205_16;
    NUITKA_MAY_BE_UNUSED char const *type_description_16 = NULL;
    PyObject *exception_keeper_type_96;
    PyObject *exception_keeper_value_96;
    PyTracebackObject *exception_keeper_tb_96;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_96;
    PyObject *exception_keeper_type_97;
    PyObject *exception_keeper_value_97;
    PyTracebackObject *exception_keeper_tb_97;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_97;
    PyObject *exception_keeper_type_98;
    PyObject *exception_keeper_value_98;
    PyTracebackObject *exception_keeper_tb_98;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_98;
    static struct Nuitka_FrameObject *cache_frame_3f75580b5c7727486225c0616b57f205_16 = NULL;
    PyObject *exception_keeper_type_99;
    PyObject *exception_keeper_value_99;
    PyTracebackObject *exception_keeper_tb_99;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_99;
    struct Nuitka_FrameObject *frame_e3ff8c276e03c8e1a880bb9b87817f26_17;
    NUITKA_MAY_BE_UNUSED char const *type_description_17 = NULL;
    PyObject *exception_keeper_type_100;
    PyObject *exception_keeper_value_100;
    PyTracebackObject *exception_keeper_tb_100;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_100;
    PyObject *exception_keeper_type_101;
    PyObject *exception_keeper_value_101;
    PyTracebackObject *exception_keeper_tb_101;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_101;
    struct Nuitka_FrameObject *frame_b3f9574526fd6c4c09ad903ee24f1595_18;
    NUITKA_MAY_BE_UNUSED char const *type_description_18 = NULL;
    PyObject *exception_keeper_type_102;
    PyObject *exception_keeper_value_102;
    PyTracebackObject *exception_keeper_tb_102;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_102;
    static struct Nuitka_FrameObject *cache_frame_b3f9574526fd6c4c09ad903ee24f1595_18 = NULL;
    PyObject *exception_keeper_type_103;
    PyObject *exception_keeper_value_103;
    PyTracebackObject *exception_keeper_tb_103;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_103;
    PyObject *exception_keeper_type_104;
    PyObject *exception_keeper_value_104;
    PyTracebackObject *exception_keeper_tb_104;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_104;
    static struct Nuitka_FrameObject *cache_frame_e3ff8c276e03c8e1a880bb9b87817f26_17 = NULL;
    PyObject *exception_keeper_type_105;
    PyObject *exception_keeper_value_105;
    PyTracebackObject *exception_keeper_tb_105;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_105;
    struct Nuitka_FrameObject *frame_e97cfa1a33b609f3ef8786f5effa6f30_19;
    NUITKA_MAY_BE_UNUSED char const *type_description_19 = NULL;
    PyObject *exception_keeper_type_106;
    PyObject *exception_keeper_value_106;
    PyTracebackObject *exception_keeper_tb_106;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_106;
    PyObject *exception_keeper_type_107;
    PyObject *exception_keeper_value_107;
    PyTracebackObject *exception_keeper_tb_107;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_107;
    struct Nuitka_FrameObject *frame_5ac36e1bd8fff02bc4591ebf9aca3658_20;
    NUITKA_MAY_BE_UNUSED char const *type_description_20 = NULL;
    PyObject *exception_keeper_type_108;
    PyObject *exception_keeper_value_108;
    PyTracebackObject *exception_keeper_tb_108;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_108;
    static struct Nuitka_FrameObject *cache_frame_5ac36e1bd8fff02bc4591ebf9aca3658_20 = NULL;
    PyObject *exception_keeper_type_109;
    PyObject *exception_keeper_value_109;
    PyTracebackObject *exception_keeper_tb_109;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_109;
    PyObject *exception_keeper_type_110;
    PyObject *exception_keeper_value_110;
    PyTracebackObject *exception_keeper_tb_110;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_110;
    static struct Nuitka_FrameObject *cache_frame_e97cfa1a33b609f3ef8786f5effa6f30_19 = NULL;
    PyObject *exception_keeper_type_111;
    PyObject *exception_keeper_value_111;
    PyTracebackObject *exception_keeper_tb_111;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_111;
    struct Nuitka_FrameObject *frame_7b96517bc7112ed3a89690b51787f0a5_21;
    NUITKA_MAY_BE_UNUSED char const *type_description_21 = NULL;
    PyObject *exception_keeper_type_112;
    PyObject *exception_keeper_value_112;
    PyTracebackObject *exception_keeper_tb_112;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_112;
    static struct Nuitka_FrameObject *cache_frame_7b96517bc7112ed3a89690b51787f0a5_21 = NULL;
    PyObject *exception_keeper_type_113;
    PyObject *exception_keeper_value_113;
    PyTracebackObject *exception_keeper_tb_113;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_113;
    struct Nuitka_FrameObject *frame_38ab9ed5c303df5ab27124fa88a0c141_22;
    NUITKA_MAY_BE_UNUSED char const *type_description_22 = NULL;
    PyObject *exception_keeper_type_114;
    PyObject *exception_keeper_value_114;
    PyTracebackObject *exception_keeper_tb_114;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_114;
    PyObject *exception_keeper_type_115;
    PyObject *exception_keeper_value_115;
    PyTracebackObject *exception_keeper_tb_115;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_115;
    PyObject *exception_keeper_type_116;
    PyObject *exception_keeper_value_116;
    PyTracebackObject *exception_keeper_tb_116;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_116;
    static struct Nuitka_FrameObject *cache_frame_38ab9ed5c303df5ab27124fa88a0c141_22 = NULL;
    PyObject *exception_keeper_type_117;
    PyObject *exception_keeper_value_117;
    PyTracebackObject *exception_keeper_tb_117;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_117;
    struct Nuitka_FrameObject *frame_b5133f64a3c8b885e89b634eeb140c25_23;
    NUITKA_MAY_BE_UNUSED char const *type_description_23 = NULL;
    PyObject *exception_keeper_type_118;
    PyObject *exception_keeper_value_118;
    PyTracebackObject *exception_keeper_tb_118;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_118;
    static struct Nuitka_FrameObject *cache_frame_b5133f64a3c8b885e89b634eeb140c25_23 = NULL;
    PyObject *exception_keeper_type_119;
    PyObject *exception_keeper_value_119;
    PyTracebackObject *exception_keeper_tb_119;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_119;
    PyObject *exception_keeper_type_120;
    PyObject *exception_keeper_value_120;
    PyTracebackObject *exception_keeper_tb_120;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_120;
    PyObject *exception_preserved_type_15;
    PyObject *exception_preserved_value_15;
    PyTracebackObject *exception_preserved_tb_15;
    PyObject *exception_keeper_type_121;
    PyObject *exception_keeper_value_121;
    PyTracebackObject *exception_keeper_tb_121;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_121;
    PyObject *exception_keeper_type_122;
    PyObject *exception_keeper_value_122;
    PyTracebackObject *exception_keeper_tb_122;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_122;
    PyObject *exception_keeper_type_123;
    PyObject *exception_keeper_value_123;
    PyTracebackObject *exception_keeper_tb_123;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_123;
    PyObject *exception_keeper_type_124;
    PyObject *exception_keeper_value_124;
    PyTracebackObject *exception_keeper_tb_124;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_124;
    PyObject *exception_keeper_type_125;
    PyObject *exception_keeper_value_125;
    PyTracebackObject *exception_keeper_tb_125;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_125;
    struct Nuitka_FrameObject *frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24;
    NUITKA_MAY_BE_UNUSED char const *type_description_24 = NULL;
    PyObject *exception_keeper_type_126;
    PyObject *exception_keeper_value_126;
    PyTracebackObject *exception_keeper_tb_126;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_126;
    PyObject *exception_keeper_type_127;
    PyObject *exception_keeper_value_127;
    PyTracebackObject *exception_keeper_tb_127;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_127;
    PyObject *exception_keeper_type_128;
    PyObject *exception_keeper_value_128;
    PyTracebackObject *exception_keeper_tb_128;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_128;
    static struct Nuitka_FrameObject *cache_frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24 = NULL;
    PyObject *exception_keeper_type_129;
    PyObject *exception_keeper_value_129;
    PyTracebackObject *exception_keeper_tb_129;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_129;
    PyObject *exception_keeper_type_130;
    PyObject *exception_keeper_value_130;
    PyTracebackObject *exception_keeper_tb_130;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_130;
    PyObject *exception_keeper_type_131;
    PyObject *exception_keeper_value_131;
    PyTracebackObject *exception_keeper_tb_131;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_131;
    PyObject *exception_keeper_type_132;
    PyObject *exception_keeper_value_132;
    PyTracebackObject *exception_keeper_tb_132;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_132;
    PyObject *exception_keeper_type_133;
    PyObject *exception_keeper_value_133;
    PyTracebackObject *exception_keeper_tb_133;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_133;
    struct Nuitka_FrameObject *frame_bd4bdd0b6623041f56eabe0ce043b654_25;
    NUITKA_MAY_BE_UNUSED char const *type_description_25 = NULL;
    PyObject *exception_keeper_type_134;
    PyObject *exception_keeper_value_134;
    PyTracebackObject *exception_keeper_tb_134;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_134;
    PyObject *exception_keeper_type_135;
    PyObject *exception_keeper_value_135;
    PyTracebackObject *exception_keeper_tb_135;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_135;
    PyObject *exception_keeper_type_136;
    PyObject *exception_keeper_value_136;
    PyTracebackObject *exception_keeper_tb_136;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_136;
    static struct Nuitka_FrameObject *cache_frame_bd4bdd0b6623041f56eabe0ce043b654_25 = NULL;
    PyObject *exception_keeper_type_137;
    PyObject *exception_keeper_value_137;
    PyTracebackObject *exception_keeper_tb_137;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_137;
    struct Nuitka_FrameObject *frame_933082d1fc1b1ce8a8130425a055db0d_26;
    NUITKA_MAY_BE_UNUSED char const *type_description_26 = NULL;
    PyObject *exception_keeper_type_138;
    PyObject *exception_keeper_value_138;
    PyTracebackObject *exception_keeper_tb_138;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_138;
    PyObject *exception_keeper_type_139;
    PyObject *exception_keeper_value_139;
    PyTracebackObject *exception_keeper_tb_139;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_139;
    PyObject *exception_keeper_type_140;
    PyObject *exception_keeper_value_140;
    PyTracebackObject *exception_keeper_tb_140;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_140;
    static struct Nuitka_FrameObject *cache_frame_933082d1fc1b1ce8a8130425a055db0d_26 = NULL;
    PyObject *exception_keeper_type_141;
    PyObject *exception_keeper_value_141;
    PyTracebackObject *exception_keeper_tb_141;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_141;
    struct Nuitka_FrameObject *frame_71e8ef82d3d1a21b289c89efd29ba4fb_27;
    NUITKA_MAY_BE_UNUSED char const *type_description_27 = NULL;
    PyObject *exception_keeper_type_142;
    PyObject *exception_keeper_value_142;
    PyTracebackObject *exception_keeper_tb_142;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_142;
    static struct Nuitka_FrameObject *cache_frame_71e8ef82d3d1a21b289c89efd29ba4fb_27 = NULL;
    PyObject *exception_keeper_type_143;
    PyObject *exception_keeper_value_143;
    PyTracebackObject *exception_keeper_tb_143;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_143;
    struct Nuitka_FrameObject *frame_4a19938cda3c601aaeccfb58a1e34b39_28;
    NUITKA_MAY_BE_UNUSED char const *type_description_28 = NULL;
    PyObject *exception_keeper_type_144;
    PyObject *exception_keeper_value_144;
    PyTracebackObject *exception_keeper_tb_144;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_144;
    static struct Nuitka_FrameObject *cache_frame_4a19938cda3c601aaeccfb58a1e34b39_28 = NULL;
    PyObject *exception_keeper_type_145;
    PyObject *exception_keeper_value_145;
    PyTracebackObject *exception_keeper_tb_145;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_145;
    struct Nuitka_FrameObject *frame_107dd700e550287aab3b7337563115b5_29;
    NUITKA_MAY_BE_UNUSED char const *type_description_29 = NULL;
    PyObject *exception_keeper_type_146;
    PyObject *exception_keeper_value_146;
    PyTracebackObject *exception_keeper_tb_146;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_146;
    static struct Nuitka_FrameObject *cache_frame_107dd700e550287aab3b7337563115b5_29 = NULL;
    PyObject *exception_keeper_type_147;
    PyObject *exception_keeper_value_147;
    PyTracebackObject *exception_keeper_tb_147;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_147;
    PyObject *exception_keeper_type_148;
    PyObject *exception_keeper_value_148;
    PyTracebackObject *exception_keeper_tb_148;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_148;
    PyObject *exception_keeper_type_149;
    PyObject *exception_keeper_value_149;
    PyTracebackObject *exception_keeper_tb_149;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_149;
    PyObject *exception_keeper_type_150;
    PyObject *exception_keeper_value_150;
    PyTracebackObject *exception_keeper_tb_150;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_150;
    struct Nuitka_FrameObject *frame_d3d9c2ed86ab4e07fc312d58026d376e_30;
    NUITKA_MAY_BE_UNUSED char const *type_description_30 = NULL;
    PyObject *exception_keeper_type_151;
    PyObject *exception_keeper_value_151;
    PyTracebackObject *exception_keeper_tb_151;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_151;
    static struct Nuitka_FrameObject *cache_frame_d3d9c2ed86ab4e07fc312d58026d376e_30 = NULL;
    PyObject *exception_keeper_type_152;
    PyObject *exception_keeper_value_152;
    PyTracebackObject *exception_keeper_tb_152;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_152;
    PyObject *exception_keeper_type_153;
    PyObject *exception_keeper_value_153;
    PyTracebackObject *exception_keeper_tb_153;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_153;
    PyObject *exception_keeper_type_154;
    PyObject *exception_keeper_value_154;
    PyTracebackObject *exception_keeper_tb_154;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_154;
    struct Nuitka_FrameObject *frame_9ff6653e6c9844495bf6f7b83958b910_31;
    NUITKA_MAY_BE_UNUSED char const *type_description_31 = NULL;
    PyObject *exception_keeper_type_155;
    PyObject *exception_keeper_value_155;
    PyTracebackObject *exception_keeper_tb_155;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_155;
    static struct Nuitka_FrameObject *cache_frame_9ff6653e6c9844495bf6f7b83958b910_31 = NULL;
    PyObject *exception_keeper_type_156;
    PyObject *exception_keeper_value_156;
    PyTracebackObject *exception_keeper_tb_156;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_156;
    PyObject *exception_keeper_type_157;
    PyObject *exception_keeper_value_157;
    PyTracebackObject *exception_keeper_tb_157;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_157;
    PyObject *exception_keeper_type_158;
    PyObject *exception_keeper_value_158;
    PyTracebackObject *exception_keeper_tb_158;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_158;
    PyObject *exception_keeper_type_159;
    PyObject *exception_keeper_value_159;
    PyTracebackObject *exception_keeper_tb_159;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_159;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_37c571cd74ad2fdf61d5caff50be6f52 = NULL;
    PyObject *exception_keeper_type_160;
    PyObject *exception_keeper_value_160;
    PyTracebackObject *exception_keeper_tb_160;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_160;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_37c571cd74ad2fdf61d5caff50be6f52)) {
        Py_XDECREF(cache_frame_37c571cd74ad2fdf61d5caff50be6f52);

#if _DEBUG_REFCOUNTS
        if (cache_frame_37c571cd74ad2fdf61d5caff50be6f52 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_37c571cd74ad2fdf61d5caff50be6f52 = MAKE_FUNCTION_FRAME(codeobj_37c571cd74ad2fdf61d5caff50be6f52, module_numpy$lib$npyio, sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_37c571cd74ad2fdf61d5caff50be6f52->m_type_description == NULL);
    frame_37c571cd74ad2fdf61d5caff50be6f52 = cache_frame_37c571cd74ad2fdf61d5caff50be6f52;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_37c571cd74ad2fdf61d5caff50be6f52);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_37c571cd74ad2fdf61d5caff50be6f52) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(par_max_rows);
        tmp_compexpr_left_1 = par_max_rows;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_compexpr_left_1 != tmp_compexpr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_skip_footer);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_skip_footer);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1722;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = mod_consts[299];
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1723;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 1723;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_2:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_tmp_condition_result_3_object_1;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_max_rows);
        tmp_compexpr_left_2 = par_max_rows;
        tmp_compexpr_right_2 = mod_consts[63];
        tmp_tmp_condition_result_3_object_1 = RICH_COMPARE_LT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        if (tmp_tmp_condition_result_3_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1726;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_tmp_condition_result_3_object_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_3_object_1);

            exception_lineno = 1726;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_3_object_1);
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_make_exception_arg_2;
        tmp_make_exception_arg_2 = mod_consts[300];
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1727;
        tmp_raise_type_2 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_2);
        assert(!(tmp_raise_type_2 == NULL));
        exception_type = tmp_raise_type_2;
        exception_lineno = 1727;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_3:;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_truth_name_3;
        CHECK_OBJECT(par_usemask);
        tmp_truth_name_3 = CHECK_IF_TRUE(par_usemask);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1729;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_arg_name_1;
        PyObject *tmp_locals_arg_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = mod_consts[301];
        tmp_globals_arg_name_1 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_1 = Py_None;
        tmp_fromlist_name_1 = mod_consts[302];
        tmp_level_name_1 = mod_consts[16];
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1730;
        tmp_assign_source_1 = IMPORT_MODULE5(tmp_name_name_1, tmp_globals_arg_name_1, tmp_locals_arg_name_1, tmp_fromlist_name_1, tmp_level_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1730;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_1__module == NULL);
        tmp_import_from_1__module = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_import_name_from_1;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_1 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_2 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[303],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_2 = IMPORT_NAME(tmp_import_name_from_1, mod_consts[303]);
        }

        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1730;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_2;
        }
        assert(var_MaskedArray == NULL);
        var_MaskedArray = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_import_name_from_2;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_2 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_2)) {
            tmp_assign_source_3 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_2,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[304],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_3 = IMPORT_NAME(tmp_import_name_from_2, mod_consts[304]);
        }

        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1730;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_2;
        }
        assert(var_make_mask_descr == NULL);
        var_make_mask_descr = tmp_assign_source_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    branch_no_4:;
    {
        PyObject *tmp_assign_source_4;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        CHECK_OBJECT(par_converters);
        tmp_or_left_value_1 = par_converters;
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1732;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        tmp_or_right_value_1 = PyDict_New();
        tmp_assign_source_4 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        Py_INCREF(tmp_or_left_value_1);
        tmp_assign_source_4 = tmp_or_left_value_1;
        or_end_1:;
        assert(var_user_converters == NULL);
        var_user_converters = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_user_converters);
        tmp_isinstance_inst_1 = var_user_converters;
        tmp_isinstance_cls_1 = (PyObject *)&PyDict_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1733;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1733;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_make_exception_arg_3;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_type_arg_1;
        tmp_left_name_1 = mod_consts[305];
        CHECK_OBJECT(var_user_converters);
        tmp_type_arg_1 = var_user_converters;
        tmp_right_name_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        assert(!(tmp_right_name_1 == NULL));
        tmp_make_exception_arg_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_make_exception_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1736;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1734;
        tmp_raise_type_3 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_TypeError, tmp_make_exception_arg_3);
        Py_DECREF(tmp_make_exception_arg_3);
        assert(!(tmp_raise_type_3 == NULL));
        exception_type = tmp_raise_type_3;
        exception_lineno = 1734;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_tmp_condition_result_6_object_1;
        int tmp_truth_name_4;
        CHECK_OBJECT(par_encoding);
        tmp_compexpr_left_3 = par_encoding;
        tmp_compexpr_right_3 = mod_consts[142];
        tmp_tmp_condition_result_6_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        if (tmp_tmp_condition_result_6_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1738;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_tmp_condition_result_6_object_1);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_6_object_1);

            exception_lineno = 1738;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_6_object_1);
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_5;
        tmp_assign_source_5 = Py_None;
        {
            PyObject *old = par_encoding;
            assert(old != NULL);
            par_encoding = tmp_assign_source_5;
            Py_INCREF(par_encoding);
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_assign_source_6;
        tmp_assign_source_6 = NUITKA_BOOL_TRUE;
        var_byte_converters = tmp_assign_source_6;
    }
    goto branch_end_6;
    branch_no_6:;
    {
        nuitka_bool tmp_assign_source_7;
        tmp_assign_source_7 = NUITKA_BOOL_FALSE;
        var_byte_converters = tmp_assign_source_7;
    }
    branch_end_6:;
    // Tried code:
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        CHECK_OBJECT(par_fname);
        tmp_isinstance_inst_2 = par_fname;
        tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[153]);

        if (unlikely(tmp_isinstance_cls_2 == NULL)) {
            tmp_isinstance_cls_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[153]);
        }

        if (tmp_isinstance_cls_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1746;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1746;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_7 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_called_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[14]);

        if (unlikely(tmp_called_name_1 == NULL)) {
            tmp_called_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[14]);
        }

        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT(par_fname);
        tmp_args_element_name_1 = par_fname;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1747;
        tmp_assign_source_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = par_fname;
            assert(old != NULL);
            par_fname = tmp_assign_source_8;
            Py_DECREF(old);
        }

    }
    branch_no_7:;
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_isinstance_inst_3;
        PyObject *tmp_isinstance_cls_3;
        CHECK_OBJECT(par_fname);
        tmp_isinstance_inst_3 = par_fname;
        tmp_isinstance_cls_3 = (PyObject *)&PyUnicode_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_3, tmp_isinstance_cls_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1748;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_8 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        tmp_expression_name_3 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_3 == NULL)) {
            tmp_expression_name_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1749;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_expression_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, mod_consts[154]);
        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1749;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_expression_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[155]);
        Py_DECREF(tmp_expression_name_2);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1749;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[39]);
        Py_DECREF(tmp_expression_name_1);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1749;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT(par_fname);
        tmp_kw_call_arg_value_0_1 = par_fname;
        tmp_kw_call_arg_value_1_1 = mod_consts[156];
        CHECK_OBJECT(par_encoding);
        tmp_kw_call_dict_value_0_1 = par_encoding;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1749;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tmp_called_name_2, args, kw_values, mod_consts[157]);
        }

        Py_DECREF(tmp_called_name_2);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1749;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        assert(var_fid == NULL);
        var_fid = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_2;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[53]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[53]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1750;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT(var_fid);
        tmp_args_element_name_2 = var_fid;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1750;
        tmp_assign_source_10 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[306], tmp_args_element_name_2);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1750;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        assert(var_fid_ctx == NULL);
        var_fid_ctx = tmp_assign_source_10;
    }
    goto branch_end_8;
    branch_no_8:;
    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT(par_fname);
        tmp_assign_source_11 = par_fname;
        assert(var_fid == NULL);
        Py_INCREF(tmp_assign_source_11);
        var_fid = tmp_assign_source_11;
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_name_3;
        PyObject *tmp_args_element_name_3;
        tmp_called_name_3 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[78]);

        if (unlikely(tmp_called_name_3 == NULL)) {
            tmp_called_name_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[78]);
        }

        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1753;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT(var_fid);
        tmp_args_element_name_3 = var_fid;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1753;
        tmp_assign_source_12 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_3);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1753;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        assert(var_fid_ctx == NULL);
        var_fid_ctx = tmp_assign_source_12;
    }
    branch_end_8:;
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_iter_arg_1;
        if (var_fid == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[34]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1754;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }

        tmp_iter_arg_1 = var_fid;
        tmp_assign_source_13 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1754;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_3;
        }
        assert(var_fhd == NULL);
        var_fhd = tmp_assign_source_13;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_1, &exception_preserved_value_1, &exception_preserved_tb_1);

    if (exception_keeper_tb_2 == NULL) {
        exception_keeper_tb_2 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_2);
    } else if (exception_keeper_lineno_2 != 0) {
        exception_keeper_tb_2 = ADD_TRACEBACK(exception_keeper_tb_2, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_2);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_2, exception_keeper_tb_2);
    PUBLISH_EXCEPTION(&exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2);
    // Tried code:
    {
        bool tmp_condition_result_9;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        tmp_compexpr_left_4 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_4 = PyExc_TypeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_4, tmp_compexpr_right_4);
        assert(!(tmp_res == -1));
        tmp_condition_result_9 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_9 != false) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    {
        PyObject *tmp_raise_type_4;
        PyObject *tmp_make_exception_arg_4;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_type_arg_2;
        tmp_left_name_2 = mod_consts[307];
        if (par_fname == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[269]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1758;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_type_arg_2 = par_fname;
        tmp_right_name_2 = BUILTIN_TYPE1(tmp_type_arg_2);
        if (tmp_right_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1758;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_make_exception_arg_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_2, tmp_right_name_2);
        Py_DECREF(tmp_right_name_2);
        if (tmp_make_exception_arg_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1758;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_4;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1756;
        tmp_raise_type_4 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_TypeError, tmp_make_exception_arg_4);
        Py_DECREF(tmp_make_exception_arg_4);
        assert(!(tmp_raise_type_4 == NULL));
        exception_type = tmp_raise_type_4;
        exception_lineno = 1756;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_4;
    }
    goto branch_end_9;
    branch_no_9:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1745;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_4;
    branch_end_9:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_2:;
    {
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT(var_fid_ctx);
        tmp_assign_source_14 = var_fid_ctx;
        assert(tmp_with_1__source == NULL);
        Py_INCREF(tmp_assign_source_14);
        tmp_with_1__source = tmp_assign_source_14;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_name_4;
        PyObject *tmp_expression_name_4;
        CHECK_OBJECT(tmp_with_1__source);
        tmp_expression_name_4 = tmp_with_1__source;
        tmp_called_name_4 = LOOKUP_SPECIAL(tmp_expression_name_4, mod_consts[55]);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1760;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_5;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1760;
        tmp_assign_source_15 = CALL_FUNCTION_NO_ARGS(tmp_called_name_4);
        Py_DECREF(tmp_called_name_4);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1760;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_5;
        }
        assert(tmp_with_1__enter == NULL);
        tmp_with_1__enter = tmp_assign_source_15;
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_expression_name_5;
        CHECK_OBJECT(tmp_with_1__source);
        tmp_expression_name_5 = tmp_with_1__source;
        tmp_assign_source_16 = LOOKUP_SPECIAL(tmp_expression_name_5, mod_consts[56]);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1760;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_5;
        }
        assert(tmp_with_1__exit == NULL);
        tmp_with_1__exit = tmp_assign_source_16;
    }
    {
        nuitka_bool tmp_assign_source_17;
        tmp_assign_source_17 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_17;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_called_name_5;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        PyObject *tmp_kw_call_value_2_1;
        PyObject *tmp_kw_call_value_3_1;
        tmp_called_name_5 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[308]);

        if (unlikely(tmp_called_name_5 == NULL)) {
            tmp_called_name_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[308]);
        }

        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1761;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT(par_delimiter);
        tmp_kw_call_value_0_1 = par_delimiter;
        CHECK_OBJECT(par_comments);
        tmp_kw_call_value_1_1 = par_comments;
        CHECK_OBJECT(par_autostrip);
        tmp_kw_call_value_2_1 = par_autostrip;
        if (par_encoding == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1762;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_kw_call_value_3_1 = par_encoding;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1761;
        {
            PyObject *kw_values[4] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1, tmp_kw_call_value_2_1, tmp_kw_call_value_3_1};

            tmp_assign_source_18 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_name_5, kw_values, mod_consts[309]);
        }

        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1761;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_split_line == NULL);
        var_split_line = tmp_assign_source_18;
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_called_name_6;
        PyObject *tmp_kw_call_value_0_2;
        PyObject *tmp_kw_call_value_1_2;
        PyObject *tmp_kw_call_value_2_2;
        PyObject *tmp_kw_call_value_3_2;
        tmp_called_name_6 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[310]);

        if (unlikely(tmp_called_name_6 == NULL)) {
            tmp_called_name_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[310]);
        }

        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1763;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT(par_excludelist);
        tmp_kw_call_value_0_2 = par_excludelist;
        CHECK_OBJECT(par_deletechars);
        tmp_kw_call_value_1_2 = par_deletechars;
        CHECK_OBJECT(par_case_sensitive);
        tmp_kw_call_value_2_2 = par_case_sensitive;
        CHECK_OBJECT(par_replace_space);
        tmp_kw_call_value_3_2 = par_replace_space;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1763;
        {
            PyObject *kw_values[4] = {tmp_kw_call_value_0_2, tmp_kw_call_value_1_2, tmp_kw_call_value_2_2, tmp_kw_call_value_3_2};

            tmp_assign_source_19 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_name_6, kw_values, mod_consts[311]);
        }

        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1763;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_validate_names == NULL);
        var_validate_names = tmp_assign_source_19;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_xrange_low_1;
        CHECK_OBJECT(par_skip_header);
        tmp_xrange_low_1 = par_skip_header;
        tmp_iter_arg_2 = BUILTIN_XRANGE1(tmp_xrange_low_1);
        if (tmp_iter_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1770;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_assign_source_20 = MAKE_ITERATOR(tmp_iter_arg_2);
        Py_DECREF(tmp_iter_arg_2);
        if (tmp_assign_source_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1770;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_20;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_21;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_21 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_21 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 1770;
                goto try_except_handler_9;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_21;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_22;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_22 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = Nuitka_Cell_GET(var_i);
            PyCell_SET(var_i, tmp_assign_source_22);
            Py_INCREF(tmp_assign_source_22);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_value_name_1;
        PyObject *tmp_next_value_1;
        if (var_fhd == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[312]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1771;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_9;
        }

        tmp_value_name_1 = var_fhd;
        tmp_next_value_1 = ITERATOR_NEXT(tmp_value_name_1);
        if (tmp_next_value_1 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1771;
            goto try_except_handler_9;
        }
        Py_DECREF(tmp_next_value_1);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1770;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_9;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_8;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        PyObject *tmp_assign_source_23;
        tmp_assign_source_23 = Py_None;
        assert(var_first_values == NULL);
        Py_INCREF(tmp_assign_source_23);
        var_first_values = tmp_assign_source_23;
    }
    loop_start_2:;
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_operand_name_3;
        if (var_first_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[313]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1776;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }

        tmp_operand_name_3 = var_first_values;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1776;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_operand_name_2 = (tmp_res == 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1776;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_condition_result_10 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    goto loop_end_2;
    branch_no_10:;
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_called_name_7;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_value_name_2;
        PyObject *tmp_args_element_name_5;
        tmp_called_name_7 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[144]);

        if (unlikely(tmp_called_name_7 == NULL)) {
            tmp_called_name_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[144]);
        }

        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1777;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        if (var_fhd == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[312]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1777;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }

        tmp_value_name_2 = var_fhd;
        tmp_args_element_name_4 = ITERATOR_NEXT(tmp_value_name_2);
        if (tmp_args_element_name_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1777;
            goto try_except_handler_8;
        }
        if (par_encoding == NULL) {
            Py_DECREF(tmp_args_element_name_4);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1777;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }

        tmp_args_element_name_5 = par_encoding;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1777;
        {
            PyObject *call_args[] = {tmp_args_element_name_4, tmp_args_element_name_5};
            tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_7, call_args);
        }

        Py_DECREF(tmp_args_element_name_4);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1777;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = var_first_line;
            var_first_line = tmp_assign_source_24;
            Py_XDECREF(old);
        }

    }
    {
        bool tmp_condition_result_11;
        int tmp_and_left_truth_1;
        bool tmp_and_left_value_1;
        bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1778;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }

        tmp_compexpr_left_5 = par_names;
        tmp_compexpr_right_5 = Py_True;
        tmp_and_left_value_1 = (tmp_compexpr_left_5 == tmp_compexpr_right_5) ? true : false;
        tmp_and_left_truth_1 = tmp_and_left_value_1 != false ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        if (par_comments == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[143]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1778;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }

        tmp_compexpr_left_6 = par_comments;
        tmp_compexpr_right_6 = Py_None;
        tmp_and_right_value_1 = (tmp_compexpr_left_6 != tmp_compexpr_right_6) ? true : false;
        tmp_condition_result_11 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_11 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_11 != false) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        bool tmp_condition_result_12;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        if (par_comments == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[143]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1779;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }

        tmp_compexpr_left_7 = par_comments;
        CHECK_OBJECT(var_first_line);
        tmp_compexpr_right_7 = var_first_line;
        tmp_res = PySequence_Contains(tmp_compexpr_right_7, tmp_compexpr_left_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_condition_result_12 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_12 != false) {
            goto branch_yes_12;
        } else {
            goto branch_no_12;
        }
    }
    branch_yes_12:;
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_called_name_8;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_expression_name_7;
        PyObject *tmp_called_name_9;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_subscript_name_1;
        tmp_expression_name_6 = mod_consts[180];
        tmp_called_name_8 = LOOKUP_ATTRIBUTE(tmp_expression_name_6, mod_consts[148]);
        assert(!(tmp_called_name_8 == NULL));
        CHECK_OBJECT(var_first_line);
        tmp_expression_name_8 = var_first_line;
        tmp_called_name_9 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, mod_consts[111]);
        if (tmp_called_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_8);

            exception_lineno = 1781;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        if (par_comments == NULL) {
            Py_DECREF(tmp_called_name_8);
            Py_DECREF(tmp_called_name_9);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[143]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1781;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }

        tmp_args_element_name_7 = par_comments;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1781;
        tmp_expression_name_7 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_9, tmp_args_element_name_7);
        Py_DECREF(tmp_called_name_9);
        if (tmp_expression_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_8);

            exception_lineno = 1781;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_subscript_name_1 = mod_consts[314];
        tmp_args_element_name_6 = LOOKUP_SUBSCRIPT(tmp_expression_name_7, tmp_subscript_name_1);
        Py_DECREF(tmp_expression_name_7);
        if (tmp_args_element_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_8);

            exception_lineno = 1781;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1781;
        tmp_assign_source_25 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_8, tmp_args_element_name_6);
        Py_DECREF(tmp_called_name_8);
        Py_DECREF(tmp_args_element_name_6);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1781;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = var_first_line;
            assert(old != NULL);
            var_first_line = tmp_assign_source_25;
            Py_DECREF(old);
        }

    }
    branch_no_12:;
    branch_no_11:;
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_called_name_10;
        PyObject *tmp_args_element_name_8;
        if (var_split_line == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[171]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1782;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }

        tmp_called_name_10 = var_split_line;
        if (var_first_line == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[234]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1782;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }

        tmp_args_element_name_8 = var_first_line;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1782;
        tmp_assign_source_26 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_10, tmp_args_element_name_8);
        if (tmp_assign_source_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1782;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = var_first_values;
            var_first_values = tmp_assign_source_26;
            Py_XDECREF(old);
        }

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1776;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_8;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 2.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_2, &exception_preserved_value_2, &exception_preserved_tb_2);

    if (exception_keeper_tb_5 == NULL) {
        exception_keeper_tb_5 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_5);
    } else if (exception_keeper_lineno_5 != 0) {
        exception_keeper_tb_5 = ADD_TRACEBACK(exception_keeper_tb_5, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_5);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_5, exception_keeper_tb_5);
    PUBLISH_EXCEPTION(&exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5);
    // Tried code:
    {
        bool tmp_condition_result_13;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        tmp_compexpr_left_8 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_8 = PyExc_StopIteration;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_8, tmp_compexpr_right_8);
        assert(!(tmp_res == -1));
        tmp_condition_result_13 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_13 != false) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    {
        PyObject *tmp_assign_source_27;
        tmp_assign_source_27 = mod_consts[180];
        {
            PyObject *old = var_first_line;
            var_first_line = tmp_assign_source_27;
            Py_INCREF(var_first_line);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_28;
        tmp_assign_source_28 = PyList_New(0);
        {
            PyObject *old = var_first_values;
            var_first_values = tmp_assign_source_28;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_11;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_kwargs_name_1;
        tmp_expression_name_9 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_name_9 == NULL)) {
            tmp_expression_name_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1787;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_10;
        }
        tmp_called_name_11 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, mod_consts[1]);
        if (tmp_called_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1787;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_10;
        }
        tmp_left_name_3 = mod_consts[315];
        if (par_fname == NULL) {
            Py_DECREF(tmp_called_name_11);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[269]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1787;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_10;
        }

        tmp_right_name_3 = par_fname;
        tmp_tuple_element_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_3, tmp_right_name_3);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_11);

            exception_lineno = 1787;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_10;
        }
        tmp_args_name_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_name_1, 0, tmp_tuple_element_1);
        tmp_kwargs_name_1 = PyDict_Copy(mod_consts[4]);
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1787;
        tmp_call_result_1 = CALL_FUNCTION(tmp_called_name_11, tmp_args_name_1, tmp_kwargs_name_1);
        Py_DECREF(tmp_called_name_11);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kwargs_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1787;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_10;
        }
        Py_DECREF(tmp_call_result_1);
    }
    goto branch_end_13;
    branch_no_13:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1769;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_10;
    branch_end_13:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 2.
    SET_CURRENT_EXCEPTION(exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2);

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_7;
    // End of try:
    try_end_5:;
    // Restore previous exception id 2.
    SET_CURRENT_EXCEPTION(exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2);

    goto try_end_4;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_4:;
    {
        bool tmp_condition_result_14;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1790;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_compexpr_left_9 = par_names;
        tmp_compexpr_right_9 = Py_True;
        tmp_condition_result_14 = (tmp_compexpr_left_9 == tmp_compexpr_right_9) ? true : false;
        if (tmp_condition_result_14 != false) {
            goto branch_yes_14;
        } else {
            goto branch_no_14;
        }
    }
    branch_yes_14:;
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_subscript_name_2;
        if (var_first_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[313]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1791;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_expression_name_10 = var_first_values;
        tmp_subscript_name_2 = mod_consts[16];
        tmp_called_instance_2 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_10, tmp_subscript_name_2, 0);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1791;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1791;
        tmp_assign_source_29 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, mod_consts[229]);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_assign_source_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1791;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_fval == NULL);
        var_fval = tmp_assign_source_29;
    }
    {
        bool tmp_condition_result_15;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        if (par_comments == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[143]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1792;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_compexpr_left_10 = par_comments;
        tmp_compexpr_right_10 = Py_None;
        tmp_condition_result_15 = (tmp_compexpr_left_10 != tmp_compexpr_right_10) ? true : false;
        if (tmp_condition_result_15 != false) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
    }
    branch_yes_15:;
    {
        bool tmp_condition_result_16;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        CHECK_OBJECT(var_fval);
        tmp_compexpr_left_11 = var_fval;
        if (par_comments == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[143]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1793;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_compexpr_right_11 = par_comments;
        tmp_res = PySequence_Contains(tmp_compexpr_right_11, tmp_compexpr_left_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1793;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_16 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_16 != false) {
            goto branch_yes_16;
        } else {
            goto branch_no_16;
        }
    }
    branch_yes_16:;
    {
        PyObject *tmp_delsubscr_target_1;
        PyObject *tmp_delsubscr_subscript_1;
        if (var_first_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[313]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1794;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_delsubscr_target_1 = var_first_values;
        tmp_delsubscr_subscript_1 = mod_consts[16];
        tmp_result = DEL_SUBSCRIPT(tmp_delsubscr_target_1, tmp_delsubscr_subscript_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1794;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
    }
    branch_no_16:;
    branch_no_15:;
    branch_no_14:;
    {
        bool tmp_condition_result_17;
        PyObject *tmp_compexpr_left_12;
        PyObject *tmp_compexpr_right_12;
        CHECK_OBJECT(par_usecols);
        tmp_compexpr_left_12 = par_usecols;
        tmp_compexpr_right_12 = Py_None;
        tmp_condition_result_17 = (tmp_compexpr_left_12 != tmp_compexpr_right_12) ? true : false;
        if (tmp_condition_result_17 != false) {
            goto branch_yes_17;
        } else {
            goto branch_no_17;
        }
    }
    branch_yes_17:;
    // Tried code:
    {
        PyObject *tmp_assign_source_30;
        // Tried code:
        {
            PyObject *tmp_assign_source_31;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_called_instance_3;
            CHECK_OBJECT(par_usecols);
            tmp_called_instance_3 = par_usecols;
            frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1799;
            tmp_iter_arg_3 = CALL_METHOD_WITH_SINGLE_ARG(
                tmp_called_instance_3,
                mod_consts[111],
                PyTuple_GET_ITEM(mod_consts[316], 0)
            );

            if (tmp_iter_arg_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1799;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_12;
            }
            tmp_assign_source_31 = MAKE_ITERATOR(tmp_iter_arg_3);
            Py_DECREF(tmp_iter_arg_3);
            if (tmp_assign_source_31 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1799;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_12;
            }
            assert(tmp_listcomp_1__$0 == NULL);
            tmp_listcomp_1__$0 = tmp_assign_source_31;
        }
        {
            PyObject *tmp_assign_source_32;
            tmp_assign_source_32 = PyList_New(0);
            assert(tmp_listcomp_1__contraction == NULL);
            tmp_listcomp_1__contraction = tmp_assign_source_32;
        }
        if (isFrameUnusable(cache_frame_c380f76ca12aa0536963b346076e2359_2)) {
            Py_XDECREF(cache_frame_c380f76ca12aa0536963b346076e2359_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c380f76ca12aa0536963b346076e2359_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c380f76ca12aa0536963b346076e2359_2 = MAKE_FUNCTION_FRAME(codeobj_c380f76ca12aa0536963b346076e2359, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c380f76ca12aa0536963b346076e2359_2->m_type_description == NULL);
        frame_c380f76ca12aa0536963b346076e2359_2 = cache_frame_c380f76ca12aa0536963b346076e2359_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c380f76ca12aa0536963b346076e2359_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c380f76ca12aa0536963b346076e2359_2) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_3:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_33;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_2 = tmp_listcomp_1__$0;
            tmp_assign_source_33 = ITERATOR_NEXT(tmp_next_source_2);
            if (tmp_assign_source_33 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_3;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 1799;
                    goto try_except_handler_13;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_33;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_34;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_assign_source_34 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var__;
                outline_0_var__ = tmp_assign_source_34;
                Py_INCREF(outline_0_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_called_instance_4;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT(outline_0_var__);
            tmp_called_instance_4 = outline_0_var__;
            frame_c380f76ca12aa0536963b346076e2359_2->m_frame.f_lineno = 1799;
            tmp_append_value_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_4, mod_consts[229]);
            if (tmp_append_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1799;
                type_description_2 = "o";
                goto try_except_handler_13;
            }
            assert(PyList_Check(tmp_append_list_1));
            tmp_result = LIST_APPEND1(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1799;
                type_description_2 = "o";
                goto try_except_handler_13;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1799;
            type_description_2 = "o";
            goto try_except_handler_13;
        }
        goto loop_start_3;
        loop_end_3:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_assign_source_30 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_assign_source_30);
        goto try_return_handler_13;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_13:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c380f76ca12aa0536963b346076e2359_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_c380f76ca12aa0536963b346076e2359_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_12;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c380f76ca12aa0536963b346076e2359_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c380f76ca12aa0536963b346076e2359_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c380f76ca12aa0536963b346076e2359_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c380f76ca12aa0536963b346076e2359_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c380f76ca12aa0536963b346076e2359_2,
            type_description_2,
            outline_0_var__
        );


        // Release cached frame if used for exception.
        if (frame_c380f76ca12aa0536963b346076e2359_2 == cache_frame_c380f76ca12aa0536963b346076e2359_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c380f76ca12aa0536963b346076e2359_2);
            cache_frame_c380f76ca12aa0536963b346076e2359_2 = NULL;
        }

        assertFrameObject(frame_c380f76ca12aa0536963b346076e2359_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_12;
        skip_nested_handling_1:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_12:;
        Py_XDECREF(outline_0_var__);
        outline_0_var__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var__);
        outline_0_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 1799;
        goto try_except_handler_11;
        outline_result_1:;
        {
            PyObject *old = par_usecols;
            assert(old != NULL);
            par_usecols = tmp_assign_source_30;
            Py_DECREF(old);
        }

    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 4.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_4, &exception_preserved_value_4, &exception_preserved_tb_4);

    if (exception_keeper_tb_9 == NULL) {
        exception_keeper_tb_9 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_9);
    } else if (exception_keeper_lineno_9 != 0) {
        exception_keeper_tb_9 = ADD_TRACEBACK(exception_keeper_tb_9, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_9);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_9, exception_keeper_tb_9);
    PUBLISH_EXCEPTION(&exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9);
    // Tried code:
    {
        bool tmp_condition_result_18;
        PyObject *tmp_compexpr_left_13;
        PyObject *tmp_compexpr_right_13;
        tmp_compexpr_left_13 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_13 = PyExc_AttributeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_13, tmp_compexpr_right_13);
        assert(!(tmp_res == -1));
        tmp_condition_result_18 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_18 != false) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    // Tried code:
    {
        PyObject *tmp_assign_source_35;
        PyObject *tmp_list_arg_1;
        CHECK_OBJECT(par_usecols);
        tmp_list_arg_1 = par_usecols;
        tmp_assign_source_35 = MAKE_LIST(tmp_list_arg_1);
        if (tmp_assign_source_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1802;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_15;
        }
        {
            PyObject *old = par_usecols;
            assert(old != NULL);
            par_usecols = tmp_assign_source_35;
            Py_DECREF(old);
        }

    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 3.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_3, &exception_preserved_value_3, &exception_preserved_tb_3);

    if (exception_keeper_tb_10 == NULL) {
        exception_keeper_tb_10 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_10);
    } else if (exception_keeper_lineno_10 != 0) {
        exception_keeper_tb_10 = ADD_TRACEBACK(exception_keeper_tb_10, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_10);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_10, &exception_keeper_value_10, &exception_keeper_tb_10);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_10, exception_keeper_tb_10);
    PUBLISH_EXCEPTION(&exception_keeper_type_10, &exception_keeper_value_10, &exception_keeper_tb_10);
    // Tried code:
    {
        bool tmp_condition_result_19;
        PyObject *tmp_compexpr_left_14;
        PyObject *tmp_compexpr_right_14;
        tmp_compexpr_left_14 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_14 = PyExc_TypeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_14, tmp_compexpr_right_14);
        assert(!(tmp_res == -1));
        tmp_condition_result_19 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_19 != false) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_list_element_1;
        CHECK_OBJECT(par_usecols);
        tmp_list_element_1 = par_usecols;
        tmp_assign_source_36 = PyList_New(1);
        PyList_SET_ITEM0(tmp_assign_source_36, 0, tmp_list_element_1);
        {
            PyObject *old = par_usecols;
            assert(old != NULL);
            par_usecols = tmp_assign_source_36;
            Py_DECREF(old);
        }

    }
    goto branch_end_19;
    branch_no_19:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1801;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_16;
    branch_end_19:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 3.
    SET_CURRENT_EXCEPTION(exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3);

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto try_except_handler_14;
    // End of try:
    try_end_8:;
    // Restore previous exception id 3.
    SET_CURRENT_EXCEPTION(exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3);

    goto try_end_7;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_7:;
    goto branch_end_18;
    branch_no_18:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1798;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_14;
    branch_end_18:;
    goto try_end_9;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 4.
    SET_CURRENT_EXCEPTION(exception_preserved_type_4, exception_preserved_value_4, exception_preserved_tb_4);

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto try_except_handler_7;
    // End of try:
    try_end_9:;
    // Restore previous exception id 4.
    SET_CURRENT_EXCEPTION(exception_preserved_type_4, exception_preserved_value_4, exception_preserved_tb_4);

    goto try_end_6;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_6:;
    branch_no_17:;
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_len_arg_1;
        int tmp_or_left_truth_2;
        PyObject *tmp_or_left_value_2;
        PyObject *tmp_or_right_value_2;
        if (par_usecols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1805;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_or_left_value_2 = par_usecols;
        tmp_or_left_truth_2 = CHECK_IF_TRUE(tmp_or_left_value_2);
        if (tmp_or_left_truth_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1805;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        if (tmp_or_left_truth_2 == 1) {
            goto or_left_2;
        } else {
            goto or_right_2;
        }
        or_right_2:;
        if (var_first_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[313]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1805;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_or_right_value_2 = var_first_values;
        tmp_len_arg_1 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        tmp_len_arg_1 = tmp_or_left_value_2;
        or_end_2:;
        tmp_assign_source_37 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1805;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_nbcols == NULL);
        var_nbcols = tmp_assign_source_37;
    }
    {
        bool tmp_condition_result_20;
        PyObject *tmp_compexpr_left_15;
        PyObject *tmp_compexpr_right_15;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1808;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_compexpr_left_15 = par_names;
        tmp_compexpr_right_15 = Py_True;
        tmp_condition_result_20 = (tmp_compexpr_left_15 == tmp_compexpr_right_15) ? true : false;
        if (tmp_condition_result_20 != false) {
            goto branch_yes_20;
        } else {
            goto branch_no_20;
        }
    }
    branch_yes_20:;
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_called_name_12;
        PyObject *tmp_args_element_name_9;
        CHECK_OBJECT(var_validate_names);
        tmp_called_name_12 = var_validate_names;
        // Tried code:
        {
            PyObject *tmp_assign_source_39;
            PyObject *tmp_iter_arg_4;
            if (var_first_values == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[313]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1809;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_17;
            }

            tmp_iter_arg_4 = var_first_values;
            tmp_assign_source_39 = MAKE_ITERATOR(tmp_iter_arg_4);
            if (tmp_assign_source_39 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1809;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_17;
            }
            assert(tmp_listcomp_2__$0 == NULL);
            tmp_listcomp_2__$0 = tmp_assign_source_39;
        }
        {
            PyObject *tmp_assign_source_40;
            tmp_assign_source_40 = PyList_New(0);
            assert(tmp_listcomp_2__contraction == NULL);
            tmp_listcomp_2__contraction = tmp_assign_source_40;
        }
        if (isFrameUnusable(cache_frame_2b596903130a043d4473e80c3b7d1327_3)) {
            Py_XDECREF(cache_frame_2b596903130a043d4473e80c3b7d1327_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2b596903130a043d4473e80c3b7d1327_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2b596903130a043d4473e80c3b7d1327_3 = MAKE_FUNCTION_FRAME(codeobj_2b596903130a043d4473e80c3b7d1327, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2b596903130a043d4473e80c3b7d1327_3->m_type_description == NULL);
        frame_2b596903130a043d4473e80c3b7d1327_3 = cache_frame_2b596903130a043d4473e80c3b7d1327_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2b596903130a043d4473e80c3b7d1327_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2b596903130a043d4473e80c3b7d1327_3) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_4:;
        {
            PyObject *tmp_next_source_3;
            PyObject *tmp_assign_source_41;
            CHECK_OBJECT(tmp_listcomp_2__$0);
            tmp_next_source_3 = tmp_listcomp_2__$0;
            tmp_assign_source_41 = ITERATOR_NEXT(tmp_next_source_3);
            if (tmp_assign_source_41 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_4;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 1809;
                    goto try_except_handler_18;
                }
            }

            {
                PyObject *old = tmp_listcomp_2__iter_value_0;
                tmp_listcomp_2__iter_value_0 = tmp_assign_source_41;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_42;
            CHECK_OBJECT(tmp_listcomp_2__iter_value_0);
            tmp_assign_source_42 = tmp_listcomp_2__iter_value_0;
            {
                PyObject *old = outline_1_var__;
                outline_1_var__ = tmp_assign_source_42;
                Py_INCREF(outline_1_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_2;
            PyObject *tmp_append_value_2;
            PyObject *tmp_unicode_arg_1;
            PyObject *tmp_called_instance_5;
            CHECK_OBJECT(tmp_listcomp_2__contraction);
            tmp_append_list_2 = tmp_listcomp_2__contraction;
            CHECK_OBJECT(outline_1_var__);
            tmp_called_instance_5 = outline_1_var__;
            frame_2b596903130a043d4473e80c3b7d1327_3->m_frame.f_lineno = 1809;
            tmp_unicode_arg_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, mod_consts[229]);
            if (tmp_unicode_arg_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1809;
                type_description_2 = "o";
                goto try_except_handler_18;
            }
            tmp_append_value_2 = PyObject_Unicode(tmp_unicode_arg_1);
            Py_DECREF(tmp_unicode_arg_1);
            if (tmp_append_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1809;
                type_description_2 = "o";
                goto try_except_handler_18;
            }
            assert(PyList_Check(tmp_append_list_2));
            tmp_result = LIST_APPEND1(tmp_append_list_2, tmp_append_value_2);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1809;
                type_description_2 = "o";
                goto try_except_handler_18;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1809;
            type_description_2 = "o";
            goto try_except_handler_18;
        }
        goto loop_start_4;
        loop_end_4:;
        CHECK_OBJECT(tmp_listcomp_2__contraction);
        tmp_args_element_name_9 = tmp_listcomp_2__contraction;
        Py_INCREF(tmp_args_element_name_9);
        goto try_return_handler_18;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_18:;
        CHECK_OBJECT(tmp_listcomp_2__$0);
        Py_DECREF(tmp_listcomp_2__$0);
        tmp_listcomp_2__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_2__contraction);
        Py_DECREF(tmp_listcomp_2__contraction);
        tmp_listcomp_2__contraction = NULL;
        Py_XDECREF(tmp_listcomp_2__iter_value_0);
        tmp_listcomp_2__iter_value_0 = NULL;
        goto frame_return_exit_3;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_2__$0);
        Py_DECREF(tmp_listcomp_2__$0);
        tmp_listcomp_2__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_2__contraction);
        Py_DECREF(tmp_listcomp_2__contraction);
        tmp_listcomp_2__contraction = NULL;
        Py_XDECREF(tmp_listcomp_2__iter_value_0);
        tmp_listcomp_2__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;
        exception_lineno = exception_keeper_lineno_13;

        goto frame_exception_exit_3;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2b596903130a043d4473e80c3b7d1327_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_return_exit_3:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_2b596903130a043d4473e80c3b7d1327_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_17;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2b596903130a043d4473e80c3b7d1327_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2b596903130a043d4473e80c3b7d1327_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2b596903130a043d4473e80c3b7d1327_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2b596903130a043d4473e80c3b7d1327_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2b596903130a043d4473e80c3b7d1327_3,
            type_description_2,
            outline_1_var__
        );


        // Release cached frame if used for exception.
        if (frame_2b596903130a043d4473e80c3b7d1327_3 == cache_frame_2b596903130a043d4473e80c3b7d1327_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_2b596903130a043d4473e80c3b7d1327_3);
            cache_frame_2b596903130a043d4473e80c3b7d1327_3 = NULL;
        }

        assertFrameObject(frame_2b596903130a043d4473e80c3b7d1327_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_17;
        skip_nested_handling_2:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_17:;
        Py_XDECREF(outline_1_var__);
        outline_1_var__ = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_1_var__);
        outline_1_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 1809;
        goto try_except_handler_7;
        outline_result_2:;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1809;
        tmp_assign_source_38 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_12, tmp_args_element_name_9);
        Py_DECREF(tmp_args_element_name_9);
        if (tmp_assign_source_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1809;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = par_names;
            par_names = tmp_assign_source_38;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_43;
        tmp_assign_source_43 = mod_consts[180];
        {
            PyObject *old = var_first_line;
            var_first_line = tmp_assign_source_43;
            Py_INCREF(var_first_line);
            Py_XDECREF(old);
        }

    }
    goto branch_end_20;
    branch_no_20:;
    {
        nuitka_bool tmp_condition_result_21;
        PyObject *tmp_called_name_13;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_10;
        int tmp_truth_name_5;
        tmp_called_name_13 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[108]);

        if (unlikely(tmp_called_name_13 == NULL)) {
            tmp_called_name_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[108]);
        }

        if (tmp_called_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1811;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1811;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_args_element_name_10 = par_names;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1811;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_13, tmp_args_element_name_10);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1811;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_call_result_2);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_2);

            exception_lineno = 1811;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_21 = tmp_truth_name_5 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_2);
        if (tmp_condition_result_21 == NUITKA_BOOL_TRUE) {
            goto branch_yes_21;
        } else {
            goto branch_no_21;
        }
    }
    branch_yes_21:;
    {
        PyObject *tmp_assign_source_44;
        PyObject *tmp_called_name_14;
        PyObject *tmp_args_element_name_11;
        CHECK_OBJECT(var_validate_names);
        tmp_called_name_14 = var_validate_names;
        // Tried code:
        {
            PyObject *tmp_assign_source_45;
            PyObject *tmp_iter_arg_5;
            PyObject *tmp_called_instance_6;
            if (par_names == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[211]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1812;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_19;
            }

            tmp_called_instance_6 = par_names;
            frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1812;
            tmp_iter_arg_5 = CALL_METHOD_WITH_SINGLE_ARG(
                tmp_called_instance_6,
                mod_consts[111],
                PyTuple_GET_ITEM(mod_consts[316], 0)
            );

            if (tmp_iter_arg_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1812;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_19;
            }
            tmp_assign_source_45 = MAKE_ITERATOR(tmp_iter_arg_5);
            Py_DECREF(tmp_iter_arg_5);
            if (tmp_assign_source_45 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1812;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_19;
            }
            assert(tmp_listcomp_3__$0 == NULL);
            tmp_listcomp_3__$0 = tmp_assign_source_45;
        }
        {
            PyObject *tmp_assign_source_46;
            tmp_assign_source_46 = PyList_New(0);
            assert(tmp_listcomp_3__contraction == NULL);
            tmp_listcomp_3__contraction = tmp_assign_source_46;
        }
        if (isFrameUnusable(cache_frame_83cebef9552bc5e292295f67af9c6efd_4)) {
            Py_XDECREF(cache_frame_83cebef9552bc5e292295f67af9c6efd_4);

#if _DEBUG_REFCOUNTS
            if (cache_frame_83cebef9552bc5e292295f67af9c6efd_4 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_83cebef9552bc5e292295f67af9c6efd_4 = MAKE_FUNCTION_FRAME(codeobj_83cebef9552bc5e292295f67af9c6efd, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_83cebef9552bc5e292295f67af9c6efd_4->m_type_description == NULL);
        frame_83cebef9552bc5e292295f67af9c6efd_4 = cache_frame_83cebef9552bc5e292295f67af9c6efd_4;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_83cebef9552bc5e292295f67af9c6efd_4);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_83cebef9552bc5e292295f67af9c6efd_4) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_5:;
        {
            PyObject *tmp_next_source_4;
            PyObject *tmp_assign_source_47;
            CHECK_OBJECT(tmp_listcomp_3__$0);
            tmp_next_source_4 = tmp_listcomp_3__$0;
            tmp_assign_source_47 = ITERATOR_NEXT(tmp_next_source_4);
            if (tmp_assign_source_47 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_5;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 1812;
                    goto try_except_handler_20;
                }
            }

            {
                PyObject *old = tmp_listcomp_3__iter_value_0;
                tmp_listcomp_3__iter_value_0 = tmp_assign_source_47;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_48;
            CHECK_OBJECT(tmp_listcomp_3__iter_value_0);
            tmp_assign_source_48 = tmp_listcomp_3__iter_value_0;
            {
                PyObject *old = outline_2_var__;
                outline_2_var__ = tmp_assign_source_48;
                Py_INCREF(outline_2_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_3;
            PyObject *tmp_append_value_3;
            PyObject *tmp_called_instance_7;
            CHECK_OBJECT(tmp_listcomp_3__contraction);
            tmp_append_list_3 = tmp_listcomp_3__contraction;
            CHECK_OBJECT(outline_2_var__);
            tmp_called_instance_7 = outline_2_var__;
            frame_83cebef9552bc5e292295f67af9c6efd_4->m_frame.f_lineno = 1812;
            tmp_append_value_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_7, mod_consts[229]);
            if (tmp_append_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1812;
                type_description_2 = "o";
                goto try_except_handler_20;
            }
            assert(PyList_Check(tmp_append_list_3));
            tmp_result = LIST_APPEND1(tmp_append_list_3, tmp_append_value_3);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1812;
                type_description_2 = "o";
                goto try_except_handler_20;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1812;
            type_description_2 = "o";
            goto try_except_handler_20;
        }
        goto loop_start_5;
        loop_end_5:;
        CHECK_OBJECT(tmp_listcomp_3__contraction);
        tmp_args_element_name_11 = tmp_listcomp_3__contraction;
        Py_INCREF(tmp_args_element_name_11);
        goto try_return_handler_20;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_20:;
        CHECK_OBJECT(tmp_listcomp_3__$0);
        Py_DECREF(tmp_listcomp_3__$0);
        tmp_listcomp_3__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_3__contraction);
        Py_DECREF(tmp_listcomp_3__contraction);
        tmp_listcomp_3__contraction = NULL;
        Py_XDECREF(tmp_listcomp_3__iter_value_0);
        tmp_listcomp_3__iter_value_0 = NULL;
        goto frame_return_exit_4;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_3__$0);
        Py_DECREF(tmp_listcomp_3__$0);
        tmp_listcomp_3__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_3__contraction);
        Py_DECREF(tmp_listcomp_3__contraction);
        tmp_listcomp_3__contraction = NULL;
        Py_XDECREF(tmp_listcomp_3__iter_value_0);
        tmp_listcomp_3__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto frame_exception_exit_4;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_83cebef9552bc5e292295f67af9c6efd_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_return_exit_4:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_83cebef9552bc5e292295f67af9c6efd_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_19;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_83cebef9552bc5e292295f67af9c6efd_4);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_83cebef9552bc5e292295f67af9c6efd_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_83cebef9552bc5e292295f67af9c6efd_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_83cebef9552bc5e292295f67af9c6efd_4, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_83cebef9552bc5e292295f67af9c6efd_4,
            type_description_2,
            outline_2_var__
        );


        // Release cached frame if used for exception.
        if (frame_83cebef9552bc5e292295f67af9c6efd_4 == cache_frame_83cebef9552bc5e292295f67af9c6efd_4) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_83cebef9552bc5e292295f67af9c6efd_4);
            cache_frame_83cebef9552bc5e292295f67af9c6efd_4 = NULL;
        }

        assertFrameObject(frame_83cebef9552bc5e292295f67af9c6efd_4);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_19;
        skip_nested_handling_3:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_19:;
        Py_XDECREF(outline_2_var__);
        outline_2_var__ = NULL;
        goto outline_result_3;
        // Exception handler code:
        try_except_handler_19:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_2_var__);
        outline_2_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 1812;
        goto try_except_handler_7;
        outline_result_3:;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1812;
        tmp_assign_source_44 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_14, tmp_args_element_name_11);
        Py_DECREF(tmp_args_element_name_11);
        if (tmp_assign_source_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1812;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = par_names;
            par_names = tmp_assign_source_44;
            Py_XDECREF(old);
        }

    }
    goto branch_end_21;
    branch_no_21:;
    {
        nuitka_bool tmp_condition_result_22;
        int tmp_truth_name_6;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1813;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_truth_name_6 = CHECK_IF_TRUE(par_names);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1813;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_22 = tmp_truth_name_6 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_22 == NUITKA_BOOL_TRUE) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_called_name_15;
        PyObject *tmp_args_element_name_12;
        CHECK_OBJECT(var_validate_names);
        tmp_called_name_15 = var_validate_names;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1814;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_args_element_name_12 = par_names;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1814;
        tmp_assign_source_49 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_15, tmp_args_element_name_12);
        if (tmp_assign_source_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = par_names;
            par_names = tmp_assign_source_49;
            Py_XDECREF(old);
        }

    }
    branch_no_22:;
    branch_end_21:;
    branch_end_20:;
    {
        bool tmp_condition_result_23;
        PyObject *tmp_compexpr_left_16;
        PyObject *tmp_compexpr_right_16;
        CHECK_OBJECT(par_dtype);
        tmp_compexpr_left_16 = par_dtype;
        tmp_compexpr_right_16 = Py_None;
        tmp_condition_result_23 = (tmp_compexpr_left_16 != tmp_compexpr_right_16) ? true : false;
        if (tmp_condition_result_23 != false) {
            goto branch_yes_23;
        } else {
            goto branch_no_23;
        }
    }
    branch_yes_23:;
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_called_name_16;
        PyObject *tmp_kw_call_arg_value_0_2;
        PyObject *tmp_kw_call_dict_value_0_2;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_kw_call_dict_value_2_1;
        PyObject *tmp_kw_call_dict_value_3_1;
        PyObject *tmp_kw_call_dict_value_4_1;
        PyObject *tmp_kw_call_dict_value_5_1;
        tmp_called_name_16 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[317]);

        if (unlikely(tmp_called_name_16 == NULL)) {
            tmp_called_name_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[317]);
        }

        if (tmp_called_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1817;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT(par_dtype);
        tmp_kw_call_arg_value_0_2 = par_dtype;
        CHECK_OBJECT(par_defaultfmt);
        tmp_kw_call_dict_value_0_2 = par_defaultfmt;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1817;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_kw_call_dict_value_1_1 = par_names;
        CHECK_OBJECT(par_excludelist);
        tmp_kw_call_dict_value_2_1 = par_excludelist;
        CHECK_OBJECT(par_deletechars);
        tmp_kw_call_dict_value_3_1 = par_deletechars;
        CHECK_OBJECT(par_case_sensitive);
        tmp_kw_call_dict_value_4_1 = par_case_sensitive;
        CHECK_OBJECT(par_replace_space);
        tmp_kw_call_dict_value_5_1 = par_replace_space;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1817;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_2};
            PyObject *kw_values[6] = {tmp_kw_call_dict_value_0_2, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1, tmp_kw_call_dict_value_3_1, tmp_kw_call_dict_value_4_1, tmp_kw_call_dict_value_5_1};
            tmp_assign_source_50 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_16, args, kw_values, mod_consts[318]);
        }

        if (tmp_assign_source_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1817;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = par_dtype;
            assert(old != NULL);
            par_dtype = tmp_assign_source_50;
            Py_DECREF(old);
        }

    }
    branch_no_23:;
    {
        bool tmp_condition_result_24;
        PyObject *tmp_compexpr_left_17;
        PyObject *tmp_compexpr_right_17;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1823;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_compexpr_left_17 = par_names;
        tmp_compexpr_right_17 = Py_None;
        tmp_condition_result_24 = (tmp_compexpr_left_17 != tmp_compexpr_right_17) ? true : false;
        if (tmp_condition_result_24 != false) {
            goto branch_yes_24;
        } else {
            goto branch_no_24;
        }
    }
    branch_yes_24:;
    {
        PyObject *tmp_assign_source_51;
        PyObject *tmp_list_arg_2;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1824;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_list_arg_2 = par_names;
        tmp_assign_source_51 = MAKE_LIST(tmp_list_arg_2);
        if (tmp_assign_source_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1824;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = par_names;
            par_names = tmp_assign_source_51;
            Py_XDECREF(old);
        }

    }
    branch_no_24:;
    {
        nuitka_bool tmp_condition_result_25;
        int tmp_truth_name_7;
        if (par_usecols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1826;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_truth_name_7 = CHECK_IF_TRUE(par_usecols);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1826;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_25 = tmp_truth_name_7 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_25 == NUITKA_BOOL_TRUE) {
            goto branch_yes_25;
        } else {
            goto branch_no_25;
        }
    }
    branch_yes_25:;
    {
        PyObject *tmp_assign_source_52;
        PyObject *tmp_iter_arg_6;
        PyObject *tmp_called_name_17;
        PyObject *tmp_args_element_name_13;
        tmp_called_name_17 = (PyObject *)&PyEnum_Type;
        if (par_usecols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1827;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_args_element_name_13 = par_usecols;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1827;
        tmp_iter_arg_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_17, tmp_args_element_name_13);
        if (tmp_iter_arg_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1827;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_assign_source_52 = MAKE_ITERATOR(tmp_iter_arg_6);
        Py_DECREF(tmp_iter_arg_6);
        if (tmp_assign_source_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1827;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(tmp_for_loop_2__for_iterator == NULL);
        tmp_for_loop_2__for_iterator = tmp_assign_source_52;
    }
    // Tried code:
    loop_start_6:;
    {
        PyObject *tmp_next_source_5;
        PyObject *tmp_assign_source_53;
        CHECK_OBJECT(tmp_for_loop_2__for_iterator);
        tmp_next_source_5 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_53 = ITERATOR_NEXT(tmp_next_source_5);
        if (tmp_assign_source_53 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_6;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 1827;
                goto try_except_handler_21;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_53;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_54;
        PyObject *tmp_iter_arg_7;
        CHECK_OBJECT(tmp_for_loop_2__iter_value);
        tmp_iter_arg_7 = tmp_for_loop_2__iter_value;
        tmp_assign_source_54 = MAKE_ITERATOR(tmp_iter_arg_7);
        if (tmp_assign_source_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1827;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_22;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_54;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_55;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_55 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_55 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1827;
            goto try_except_handler_23;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_55;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_56;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_56 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_56 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1827;
            goto try_except_handler_23;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_56;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 1827;
                    goto try_except_handler_23;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1827;
            goto try_except_handler_23;
        }
    }
    goto try_end_10;
    // Exception handler code:
    try_except_handler_23:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto try_except_handler_22;
    // End of try:
    try_end_10:;
    goto try_end_11;
    // Exception handler code:
    try_except_handler_22:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto try_except_handler_21;
    // End of try:
    try_end_11:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_57;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_57 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = Nuitka_Cell_GET(var_i);
            PyCell_SET(var_i, tmp_assign_source_57);
            Py_INCREF(tmp_assign_source_57);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_58;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_58 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_current;
            var_current = tmp_assign_source_58;
            Py_INCREF(var_current);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_26;
        PyObject *tmp_called_name_18;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_14;
        int tmp_truth_name_8;
        tmp_called_name_18 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[108]);

        if (unlikely(tmp_called_name_18 == NULL)) {
            tmp_called_name_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[108]);
        }

        if (tmp_called_name_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1829;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }
        CHECK_OBJECT(var_current);
        tmp_args_element_name_14 = var_current;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1829;
        tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_18, tmp_args_element_name_14);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1829;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }
        tmp_truth_name_8 = CHECK_IF_TRUE(tmp_call_result_3);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_3);

            exception_lineno = 1829;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }
        tmp_condition_result_26 = tmp_truth_name_8 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_3);
        if (tmp_condition_result_26 == NUITKA_BOOL_TRUE) {
            goto branch_yes_26;
        } else {
            goto branch_no_26;
        }
    }
    branch_yes_26:;
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_called_instance_8;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1830;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }

        tmp_called_instance_8 = par_names;
        CHECK_OBJECT(var_current);
        tmp_args_element_name_15 = var_current;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1830;
        tmp_ass_subvalue_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_8, mod_consts[184], tmp_args_element_name_15);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1830;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }
        if (par_usecols == NULL) {
            Py_DECREF(tmp_ass_subvalue_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1830;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }

        tmp_ass_subscribed_1 = par_usecols;
        CHECK_OBJECT(Nuitka_Cell_GET(var_i));
        tmp_ass_subscript_1 = Nuitka_Cell_GET(var_i);
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1830;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }
    }
    goto branch_end_26;
    branch_no_26:;
    {
        nuitka_bool tmp_condition_result_27;
        PyObject *tmp_compexpr_left_18;
        PyObject *tmp_compexpr_right_18;
        PyObject *tmp_tmp_condition_result_27_object_1;
        int tmp_truth_name_9;
        CHECK_OBJECT(var_current);
        tmp_compexpr_left_18 = var_current;
        tmp_compexpr_right_18 = mod_consts[16];
        tmp_tmp_condition_result_27_object_1 = RICH_COMPARE_LT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_18, tmp_compexpr_right_18);
        if (tmp_tmp_condition_result_27_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }
        tmp_truth_name_9 = CHECK_IF_TRUE(tmp_tmp_condition_result_27_object_1);
        if (tmp_truth_name_9 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_27_object_1);

            exception_lineno = 1831;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }
        tmp_condition_result_27 = tmp_truth_name_9 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_27_object_1);
        if (tmp_condition_result_27 == NUITKA_BOOL_TRUE) {
            goto branch_yes_27;
        } else {
            goto branch_no_27;
        }
    }
    branch_yes_27:;
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_ass_subscript_2;
        CHECK_OBJECT(var_current);
        tmp_left_name_4 = var_current;
        if (var_first_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[313]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1832;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }

        tmp_len_arg_2 = var_first_values;
        tmp_right_name_4 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_right_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1832;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }
        tmp_ass_subvalue_2 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_4, tmp_right_name_4);
        Py_DECREF(tmp_right_name_4);
        if (tmp_ass_subvalue_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1832;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }
        if (par_usecols == NULL) {
            Py_DECREF(tmp_ass_subvalue_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1832;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }

        tmp_ass_subscribed_2 = par_usecols;
        CHECK_OBJECT(Nuitka_Cell_GET(var_i));
        tmp_ass_subscript_2 = Nuitka_Cell_GET(var_i);
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        Py_DECREF(tmp_ass_subvalue_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1832;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_21;
        }
    }
    branch_no_27:;
    branch_end_26:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1827;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_21;
    }
    goto loop_start_6;
    loop_end_6:;
    goto try_end_12;
    // Exception handler code:
    try_except_handler_21:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto try_except_handler_7;
    // End of try:
    try_end_12:;
    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;
    {
        bool tmp_condition_result_28;
        int tmp_and_left_truth_2;
        bool tmp_and_left_value_2;
        bool tmp_and_right_value_2;
        PyObject *tmp_compexpr_left_19;
        PyObject *tmp_compexpr_right_19;
        PyObject *tmp_compexpr_left_20;
        PyObject *tmp_compexpr_right_20;
        PyObject *tmp_len_arg_3;
        PyObject *tmp_tmp_and_right_value_2_object_1;
        CHECK_OBJECT(par_dtype);
        tmp_compexpr_left_19 = par_dtype;
        tmp_compexpr_right_19 = Py_None;
        tmp_and_left_value_2 = (tmp_compexpr_left_19 != tmp_compexpr_right_19) ? true : false;
        tmp_and_left_truth_2 = tmp_and_left_value_2 != false ? 1 : 0;
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT(par_dtype);
        tmp_len_arg_3 = par_dtype;
        tmp_compexpr_left_20 = BUILTIN_LEN(tmp_len_arg_3);
        if (tmp_compexpr_left_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1834;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT(var_nbcols);
        tmp_compexpr_right_20 = var_nbcols;
        tmp_tmp_and_right_value_2_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_20, tmp_compexpr_right_20);
        Py_DECREF(tmp_compexpr_left_20);
        assert(!(tmp_tmp_and_right_value_2_object_1 == NULL));
        tmp_and_right_value_2 = CHECK_IF_TRUE(tmp_tmp_and_right_value_2_object_1) == 1;
        Py_DECREF(tmp_tmp_and_right_value_2_object_1);
        tmp_condition_result_28 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_28 = tmp_and_left_value_2;
        and_end_2:;
        if (tmp_condition_result_28 != false) {
            goto branch_yes_28;
        } else {
            goto branch_no_28;
        }
    }
    branch_yes_28:;
    {
        PyObject *tmp_assign_source_59;
        PyObject *tmp_expression_name_11;
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1835;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_expression_name_11 = par_dtype;
        tmp_assign_source_59 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, mod_consts[319]);
        if (tmp_assign_source_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1835;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_descr == NULL);
        var_descr = tmp_assign_source_59;
    }
    {
        PyObject *tmp_assign_source_60;
        PyObject *tmp_called_name_19;
        PyObject *tmp_expression_name_12;
        PyObject *tmp_args_element_name_16;
        tmp_expression_name_12 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_12 == NULL)) {
            tmp_expression_name_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1836;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_called_name_19 = LOOKUP_ATTRIBUTE(tmp_expression_name_12, mod_consts[176]);
        if (tmp_called_name_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1836;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_61;
            PyObject *tmp_iter_arg_8;
            if (par_usecols == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[182]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1836;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_24;
            }

            tmp_iter_arg_8 = par_usecols;
            tmp_assign_source_61 = MAKE_ITERATOR(tmp_iter_arg_8);
            if (tmp_assign_source_61 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1836;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_24;
            }
            assert(tmp_listcomp_4__$0 == NULL);
            tmp_listcomp_4__$0 = tmp_assign_source_61;
        }
        {
            PyObject *tmp_assign_source_62;
            tmp_assign_source_62 = PyList_New(0);
            assert(tmp_listcomp_4__contraction == NULL);
            tmp_listcomp_4__contraction = tmp_assign_source_62;
        }
        if (isFrameUnusable(cache_frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5)) {
            Py_XDECREF(cache_frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5 = MAKE_FUNCTION_FRAME(codeobj_5e59858bdc2d2b66e2ecebdbaeeb1c5f, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5->m_type_description == NULL);
        frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5 = cache_frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_7:;
        {
            PyObject *tmp_next_source_6;
            PyObject *tmp_assign_source_63;
            CHECK_OBJECT(tmp_listcomp_4__$0);
            tmp_next_source_6 = tmp_listcomp_4__$0;
            tmp_assign_source_63 = ITERATOR_NEXT(tmp_next_source_6);
            if (tmp_assign_source_63 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_7;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 1836;
                    goto try_except_handler_25;
                }
            }

            {
                PyObject *old = tmp_listcomp_4__iter_value_0;
                tmp_listcomp_4__iter_value_0 = tmp_assign_source_63;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_64;
            CHECK_OBJECT(tmp_listcomp_4__iter_value_0);
            tmp_assign_source_64 = tmp_listcomp_4__iter_value_0;
            {
                PyObject *old = outline_3_var__;
                outline_3_var__ = tmp_assign_source_64;
                Py_INCREF(outline_3_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_4;
            PyObject *tmp_append_value_4;
            PyObject *tmp_expression_name_13;
            PyObject *tmp_subscript_name_3;
            CHECK_OBJECT(tmp_listcomp_4__contraction);
            tmp_append_list_4 = tmp_listcomp_4__contraction;
            if (var_descr == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[319]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1836;
                type_description_2 = "oo";
                goto try_except_handler_25;
            }

            tmp_expression_name_13 = var_descr;
            CHECK_OBJECT(outline_3_var__);
            tmp_subscript_name_3 = outline_3_var__;
            tmp_append_value_4 = LOOKUP_SUBSCRIPT(tmp_expression_name_13, tmp_subscript_name_3);
            if (tmp_append_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1836;
                type_description_2 = "oo";
                goto try_except_handler_25;
            }
            assert(PyList_Check(tmp_append_list_4));
            tmp_result = LIST_APPEND1(tmp_append_list_4, tmp_append_value_4);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1836;
                type_description_2 = "oo";
                goto try_except_handler_25;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1836;
            type_description_2 = "oo";
            goto try_except_handler_25;
        }
        goto loop_start_7;
        loop_end_7:;
        CHECK_OBJECT(tmp_listcomp_4__contraction);
        tmp_args_element_name_16 = tmp_listcomp_4__contraction;
        Py_INCREF(tmp_args_element_name_16);
        goto try_return_handler_25;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_25:;
        CHECK_OBJECT(tmp_listcomp_4__$0);
        Py_DECREF(tmp_listcomp_4__$0);
        tmp_listcomp_4__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_4__contraction);
        Py_DECREF(tmp_listcomp_4__contraction);
        tmp_listcomp_4__contraction = NULL;
        Py_XDECREF(tmp_listcomp_4__iter_value_0);
        tmp_listcomp_4__iter_value_0 = NULL;
        goto frame_return_exit_5;
        // Exception handler code:
        try_except_handler_25:;
        exception_keeper_type_20 = exception_type;
        exception_keeper_value_20 = exception_value;
        exception_keeper_tb_20 = exception_tb;
        exception_keeper_lineno_20 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_4__$0);
        Py_DECREF(tmp_listcomp_4__$0);
        tmp_listcomp_4__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_4__contraction);
        Py_DECREF(tmp_listcomp_4__contraction);
        tmp_listcomp_4__contraction = NULL;
        Py_XDECREF(tmp_listcomp_4__iter_value_0);
        tmp_listcomp_4__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;
        exception_lineno = exception_keeper_lineno_20;

        goto frame_exception_exit_5;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_return_exit_5:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_24;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5,
            type_description_2,
            outline_3_var__,
            var_descr
        );


        // Release cached frame if used for exception.
        if (frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5 == cache_frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5);
            cache_frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5 = NULL;
        }

        assertFrameObject(frame_5e59858bdc2d2b66e2ecebdbaeeb1c5f_5);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_24;
        skip_nested_handling_4:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_24:;
        Py_XDECREF(outline_3_var__);
        outline_3_var__ = NULL;
        goto outline_result_4;
        // Exception handler code:
        try_except_handler_24:;
        exception_keeper_type_21 = exception_type;
        exception_keeper_value_21 = exception_value;
        exception_keeper_tb_21 = exception_tb;
        exception_keeper_lineno_21 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_3_var__);
        outline_3_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;
        exception_lineno = exception_keeper_lineno_21;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 1836;
        goto try_except_handler_7;
        outline_result_4:;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1836;
        tmp_assign_source_60 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_19, tmp_args_element_name_16);
        Py_DECREF(tmp_called_name_19);
        Py_DECREF(tmp_args_element_name_16);
        if (tmp_assign_source_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1836;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = par_dtype;
            par_dtype = tmp_assign_source_60;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_65;
        PyObject *tmp_list_arg_3;
        PyObject *tmp_expression_name_14;
        CHECK_OBJECT(par_dtype);
        tmp_expression_name_14 = par_dtype;
        tmp_list_arg_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_14, mod_consts[211]);
        if (tmp_list_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1837;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_assign_source_65 = MAKE_LIST(tmp_list_arg_3);
        Py_DECREF(tmp_list_arg_3);
        if (tmp_assign_source_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1837;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = par_names;
            par_names = tmp_assign_source_65;
            Py_XDECREF(old);
        }

    }
    goto branch_end_28;
    branch_no_28:;
    {
        bool tmp_condition_result_29;
        int tmp_and_left_truth_3;
        bool tmp_and_left_value_3;
        bool tmp_and_right_value_3;
        PyObject *tmp_compexpr_left_21;
        PyObject *tmp_compexpr_right_21;
        PyObject *tmp_compexpr_left_22;
        PyObject *tmp_compexpr_right_22;
        PyObject *tmp_len_arg_4;
        PyObject *tmp_tmp_and_right_value_3_object_1;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1839;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_compexpr_left_21 = par_names;
        tmp_compexpr_right_21 = Py_None;
        tmp_and_left_value_3 = (tmp_compexpr_left_21 != tmp_compexpr_right_21) ? true : false;
        tmp_and_left_truth_3 = tmp_and_left_value_3 != false ? 1 : 0;
        if (tmp_and_left_truth_3 == 1) {
            goto and_right_3;
        } else {
            goto and_left_3;
        }
        and_right_3:;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1839;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_len_arg_4 = par_names;
        tmp_compexpr_left_22 = BUILTIN_LEN(tmp_len_arg_4);
        if (tmp_compexpr_left_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1839;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT(var_nbcols);
        tmp_compexpr_right_22 = var_nbcols;
        tmp_tmp_and_right_value_3_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_22, tmp_compexpr_right_22);
        Py_DECREF(tmp_compexpr_left_22);
        assert(!(tmp_tmp_and_right_value_3_object_1 == NULL));
        tmp_and_right_value_3 = CHECK_IF_TRUE(tmp_tmp_and_right_value_3_object_1) == 1;
        Py_DECREF(tmp_tmp_and_right_value_3_object_1);
        tmp_condition_result_29 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_condition_result_29 = tmp_and_left_value_3;
        and_end_3:;
        if (tmp_condition_result_29 != false) {
            goto branch_yes_29;
        } else {
            goto branch_no_29;
        }
    }
    branch_yes_29:;
    {
        PyObject *tmp_assign_source_66;
        // Tried code:
        {
            PyObject *tmp_assign_source_67;
            PyObject *tmp_iter_arg_9;
            if (par_usecols == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[182]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1840;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_26;
            }

            tmp_iter_arg_9 = par_usecols;
            tmp_assign_source_67 = MAKE_ITERATOR(tmp_iter_arg_9);
            if (tmp_assign_source_67 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1840;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_26;
            }
            assert(tmp_listcomp_5__$0 == NULL);
            tmp_listcomp_5__$0 = tmp_assign_source_67;
        }
        {
            PyObject *tmp_assign_source_68;
            tmp_assign_source_68 = PyList_New(0);
            assert(tmp_listcomp_5__contraction == NULL);
            tmp_listcomp_5__contraction = tmp_assign_source_68;
        }
        if (isFrameUnusable(cache_frame_6c1a8339bb477bbe8ef692504f74310c_6)) {
            Py_XDECREF(cache_frame_6c1a8339bb477bbe8ef692504f74310c_6);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6c1a8339bb477bbe8ef692504f74310c_6 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6c1a8339bb477bbe8ef692504f74310c_6 = MAKE_FUNCTION_FRAME(codeobj_6c1a8339bb477bbe8ef692504f74310c, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6c1a8339bb477bbe8ef692504f74310c_6->m_type_description == NULL);
        frame_6c1a8339bb477bbe8ef692504f74310c_6 = cache_frame_6c1a8339bb477bbe8ef692504f74310c_6;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6c1a8339bb477bbe8ef692504f74310c_6);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6c1a8339bb477bbe8ef692504f74310c_6) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_8:;
        {
            PyObject *tmp_next_source_7;
            PyObject *tmp_assign_source_69;
            CHECK_OBJECT(tmp_listcomp_5__$0);
            tmp_next_source_7 = tmp_listcomp_5__$0;
            tmp_assign_source_69 = ITERATOR_NEXT(tmp_next_source_7);
            if (tmp_assign_source_69 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_8;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 1840;
                    goto try_except_handler_27;
                }
            }

            {
                PyObject *old = tmp_listcomp_5__iter_value_0;
                tmp_listcomp_5__iter_value_0 = tmp_assign_source_69;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_70;
            CHECK_OBJECT(tmp_listcomp_5__iter_value_0);
            tmp_assign_source_70 = tmp_listcomp_5__iter_value_0;
            {
                PyObject *old = outline_4_var__;
                outline_4_var__ = tmp_assign_source_70;
                Py_INCREF(outline_4_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_5;
            PyObject *tmp_append_value_5;
            PyObject *tmp_expression_name_15;
            PyObject *tmp_subscript_name_4;
            CHECK_OBJECT(tmp_listcomp_5__contraction);
            tmp_append_list_5 = tmp_listcomp_5__contraction;
            if (par_names == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[211]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1840;
                type_description_2 = "oo";
                goto try_except_handler_27;
            }

            tmp_expression_name_15 = par_names;
            CHECK_OBJECT(outline_4_var__);
            tmp_subscript_name_4 = outline_4_var__;
            tmp_append_value_5 = LOOKUP_SUBSCRIPT(tmp_expression_name_15, tmp_subscript_name_4);
            if (tmp_append_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1840;
                type_description_2 = "oo";
                goto try_except_handler_27;
            }
            assert(PyList_Check(tmp_append_list_5));
            tmp_result = LIST_APPEND1(tmp_append_list_5, tmp_append_value_5);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1840;
                type_description_2 = "oo";
                goto try_except_handler_27;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1840;
            type_description_2 = "oo";
            goto try_except_handler_27;
        }
        goto loop_start_8;
        loop_end_8:;
        CHECK_OBJECT(tmp_listcomp_5__contraction);
        tmp_assign_source_66 = tmp_listcomp_5__contraction;
        Py_INCREF(tmp_assign_source_66);
        goto try_return_handler_27;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_27:;
        CHECK_OBJECT(tmp_listcomp_5__$0);
        Py_DECREF(tmp_listcomp_5__$0);
        tmp_listcomp_5__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_5__contraction);
        Py_DECREF(tmp_listcomp_5__contraction);
        tmp_listcomp_5__contraction = NULL;
        Py_XDECREF(tmp_listcomp_5__iter_value_0);
        tmp_listcomp_5__iter_value_0 = NULL;
        goto frame_return_exit_6;
        // Exception handler code:
        try_except_handler_27:;
        exception_keeper_type_22 = exception_type;
        exception_keeper_value_22 = exception_value;
        exception_keeper_tb_22 = exception_tb;
        exception_keeper_lineno_22 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_5__$0);
        Py_DECREF(tmp_listcomp_5__$0);
        tmp_listcomp_5__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_5__contraction);
        Py_DECREF(tmp_listcomp_5__contraction);
        tmp_listcomp_5__contraction = NULL;
        Py_XDECREF(tmp_listcomp_5__iter_value_0);
        tmp_listcomp_5__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;
        exception_lineno = exception_keeper_lineno_22;

        goto frame_exception_exit_6;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6c1a8339bb477bbe8ef692504f74310c_6);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_return_exit_6:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_6c1a8339bb477bbe8ef692504f74310c_6);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_26;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6c1a8339bb477bbe8ef692504f74310c_6);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6c1a8339bb477bbe8ef692504f74310c_6, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6c1a8339bb477bbe8ef692504f74310c_6->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6c1a8339bb477bbe8ef692504f74310c_6, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6c1a8339bb477bbe8ef692504f74310c_6,
            type_description_2,
            outline_4_var__,
            par_names
        );


        // Release cached frame if used for exception.
        if (frame_6c1a8339bb477bbe8ef692504f74310c_6 == cache_frame_6c1a8339bb477bbe8ef692504f74310c_6) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6c1a8339bb477bbe8ef692504f74310c_6);
            cache_frame_6c1a8339bb477bbe8ef692504f74310c_6 = NULL;
        }

        assertFrameObject(frame_6c1a8339bb477bbe8ef692504f74310c_6);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_26;
        skip_nested_handling_5:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_26:;
        Py_XDECREF(outline_4_var__);
        outline_4_var__ = NULL;
        goto outline_result_5;
        // Exception handler code:
        try_except_handler_26:;
        exception_keeper_type_23 = exception_type;
        exception_keeper_value_23 = exception_value;
        exception_keeper_tb_23 = exception_tb;
        exception_keeper_lineno_23 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_4_var__);
        outline_4_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;
        exception_lineno = exception_keeper_lineno_23;

        goto outline_exception_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_5:;
        exception_lineno = 1840;
        goto try_except_handler_7;
        outline_result_5:;
        {
            PyObject *old = par_names;
            par_names = tmp_assign_source_66;
            Py_XDECREF(old);
        }

    }
    branch_no_29:;
    branch_end_28:;
    goto branch_end_25;
    branch_no_25:;
    {
        bool tmp_condition_result_30;
        int tmp_and_left_truth_4;
        bool tmp_and_left_value_4;
        bool tmp_and_right_value_4;
        PyObject *tmp_compexpr_left_23;
        PyObject *tmp_compexpr_right_23;
        PyObject *tmp_compexpr_left_24;
        PyObject *tmp_compexpr_right_24;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1841;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_compexpr_left_23 = par_names;
        tmp_compexpr_right_23 = Py_None;
        tmp_and_left_value_4 = (tmp_compexpr_left_23 != tmp_compexpr_right_23) ? true : false;
        tmp_and_left_truth_4 = tmp_and_left_value_4 != false ? 1 : 0;
        if (tmp_and_left_truth_4 == 1) {
            goto and_right_4;
        } else {
            goto and_left_4;
        }
        and_right_4:;
        CHECK_OBJECT(par_dtype);
        tmp_compexpr_left_24 = par_dtype;
        tmp_compexpr_right_24 = Py_None;
        tmp_and_right_value_4 = (tmp_compexpr_left_24 != tmp_compexpr_right_24) ? true : false;
        tmp_condition_result_30 = tmp_and_right_value_4;
        goto and_end_4;
        and_left_4:;
        tmp_condition_result_30 = tmp_and_left_value_4;
        and_end_4:;
        if (tmp_condition_result_30 != false) {
            goto branch_yes_30;
        } else {
            goto branch_no_30;
        }
    }
    branch_yes_30:;
    {
        PyObject *tmp_assign_source_71;
        PyObject *tmp_list_arg_4;
        PyObject *tmp_expression_name_16;
        CHECK_OBJECT(par_dtype);
        tmp_expression_name_16 = par_dtype;
        tmp_list_arg_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_16, mod_consts[211]);
        if (tmp_list_arg_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1842;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_assign_source_71 = MAKE_LIST(tmp_list_arg_4);
        Py_DECREF(tmp_list_arg_4);
        if (tmp_assign_source_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1842;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = par_names;
            par_names = tmp_assign_source_71;
            Py_XDECREF(old);
        }

    }
    branch_no_30:;
    branch_end_25:;
    {
        PyObject *tmp_assign_source_72;
        int tmp_or_left_truth_3;
        PyObject *tmp_or_left_value_3;
        PyObject *tmp_or_right_value_3;
        CHECK_OBJECT(par_missing_values);
        tmp_or_left_value_3 = par_missing_values;
        tmp_or_left_truth_3 = CHECK_IF_TRUE(tmp_or_left_value_3);
        if (tmp_or_left_truth_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1846;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        if (tmp_or_left_truth_3 == 1) {
            goto or_left_3;
        } else {
            goto or_right_3;
        }
        or_right_3:;
        tmp_or_right_value_3 = mod_consts[245];
        tmp_assign_source_72 = tmp_or_right_value_3;
        goto or_end_3;
        or_left_3:;
        tmp_assign_source_72 = tmp_or_left_value_3;
        or_end_3:;
        assert(var_user_missing_values == NULL);
        Py_INCREF(tmp_assign_source_72);
        var_user_missing_values = tmp_assign_source_72;
    }
    {
        nuitka_bool tmp_condition_result_31;
        PyObject *tmp_isinstance_inst_4;
        PyObject *tmp_isinstance_cls_4;
        CHECK_OBJECT(var_user_missing_values);
        tmp_isinstance_inst_4 = var_user_missing_values;
        tmp_isinstance_cls_4 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[142]);

        if (unlikely(tmp_isinstance_cls_4 == NULL)) {
            tmp_isinstance_cls_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
        }

        if (tmp_isinstance_cls_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1847;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_4, tmp_isinstance_cls_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1847;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_31 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_31 == NUITKA_BOOL_TRUE) {
            goto branch_yes_31;
        } else {
            goto branch_no_31;
        }
    }
    branch_yes_31:;
    {
        PyObject *tmp_assign_source_73;
        PyObject *tmp_called_instance_9;
        CHECK_OBJECT(var_user_missing_values);
        tmp_called_instance_9 = var_user_missing_values;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1848;
        tmp_assign_source_73 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_9,
            mod_consts[320],
            PyTuple_GET_ITEM(mod_consts[243], 0)
        );

        if (tmp_assign_source_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = var_user_missing_values;
            assert(old != NULL);
            var_user_missing_values = tmp_assign_source_73;
            Py_DECREF(old);
        }

    }
    branch_no_31:;
    {
        PyObject *tmp_assign_source_74;
        // Tried code:
        {
            PyObject *tmp_assign_source_75;
            PyObject *tmp_iter_arg_10;
            PyObject *tmp_xrange_low_2;
            CHECK_OBJECT(var_nbcols);
            tmp_xrange_low_2 = var_nbcols;
            tmp_iter_arg_10 = BUILTIN_XRANGE1(tmp_xrange_low_2);
            if (tmp_iter_arg_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1851;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_28;
            }
            tmp_assign_source_75 = MAKE_ITERATOR(tmp_iter_arg_10);
            Py_DECREF(tmp_iter_arg_10);
            if (tmp_assign_source_75 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1851;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_28;
            }
            assert(tmp_listcomp_6__$0 == NULL);
            tmp_listcomp_6__$0 = tmp_assign_source_75;
        }
        {
            PyObject *tmp_assign_source_76;
            tmp_assign_source_76 = PyList_New(0);
            assert(tmp_listcomp_6__contraction == NULL);
            tmp_listcomp_6__contraction = tmp_assign_source_76;
        }
        if (isFrameUnusable(cache_frame_859827a834425b584d481d21594f17c1_7)) {
            Py_XDECREF(cache_frame_859827a834425b584d481d21594f17c1_7);

#if _DEBUG_REFCOUNTS
            if (cache_frame_859827a834425b584d481d21594f17c1_7 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_859827a834425b584d481d21594f17c1_7 = MAKE_FUNCTION_FRAME(codeobj_859827a834425b584d481d21594f17c1, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_859827a834425b584d481d21594f17c1_7->m_type_description == NULL);
        frame_859827a834425b584d481d21594f17c1_7 = cache_frame_859827a834425b584d481d21594f17c1_7;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_859827a834425b584d481d21594f17c1_7);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_859827a834425b584d481d21594f17c1_7) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_9:;
        {
            PyObject *tmp_next_source_8;
            PyObject *tmp_assign_source_77;
            CHECK_OBJECT(tmp_listcomp_6__$0);
            tmp_next_source_8 = tmp_listcomp_6__$0;
            tmp_assign_source_77 = ITERATOR_NEXT(tmp_next_source_8);
            if (tmp_assign_source_77 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_9;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 1851;
                    goto try_except_handler_29;
                }
            }

            {
                PyObject *old = tmp_listcomp_6__iter_value_0;
                tmp_listcomp_6__iter_value_0 = tmp_assign_source_77;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_78;
            CHECK_OBJECT(tmp_listcomp_6__iter_value_0);
            tmp_assign_source_78 = tmp_listcomp_6__iter_value_0;
            {
                PyObject *old = outline_5_var__;
                outline_5_var__ = tmp_assign_source_78;
                Py_INCREF(outline_5_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_6;
            PyObject *tmp_append_value_6;
            CHECK_OBJECT(tmp_listcomp_6__contraction);
            tmp_append_list_6 = tmp_listcomp_6__contraction;
            tmp_append_value_6 = LIST_COPY(mod_consts[321]);
            assert(PyList_Check(tmp_append_list_6));
            tmp_result = LIST_APPEND1(tmp_append_list_6, tmp_append_value_6);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1851;
                type_description_2 = "o";
                goto try_except_handler_29;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1851;
            type_description_2 = "o";
            goto try_except_handler_29;
        }
        goto loop_start_9;
        loop_end_9:;
        CHECK_OBJECT(tmp_listcomp_6__contraction);
        tmp_assign_source_74 = tmp_listcomp_6__contraction;
        Py_INCREF(tmp_assign_source_74);
        goto try_return_handler_29;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_29:;
        CHECK_OBJECT(tmp_listcomp_6__$0);
        Py_DECREF(tmp_listcomp_6__$0);
        tmp_listcomp_6__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_6__contraction);
        Py_DECREF(tmp_listcomp_6__contraction);
        tmp_listcomp_6__contraction = NULL;
        Py_XDECREF(tmp_listcomp_6__iter_value_0);
        tmp_listcomp_6__iter_value_0 = NULL;
        goto frame_return_exit_7;
        // Exception handler code:
        try_except_handler_29:;
        exception_keeper_type_24 = exception_type;
        exception_keeper_value_24 = exception_value;
        exception_keeper_tb_24 = exception_tb;
        exception_keeper_lineno_24 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_6__$0);
        Py_DECREF(tmp_listcomp_6__$0);
        tmp_listcomp_6__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_6__contraction);
        Py_DECREF(tmp_listcomp_6__contraction);
        tmp_listcomp_6__contraction = NULL;
        Py_XDECREF(tmp_listcomp_6__iter_value_0);
        tmp_listcomp_6__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;
        exception_lineno = exception_keeper_lineno_24;

        goto frame_exception_exit_7;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_859827a834425b584d481d21594f17c1_7);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_return_exit_7:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_859827a834425b584d481d21594f17c1_7);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_28;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_859827a834425b584d481d21594f17c1_7);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_859827a834425b584d481d21594f17c1_7, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_859827a834425b584d481d21594f17c1_7->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_859827a834425b584d481d21594f17c1_7, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_859827a834425b584d481d21594f17c1_7,
            type_description_2,
            outline_5_var__
        );


        // Release cached frame if used for exception.
        if (frame_859827a834425b584d481d21594f17c1_7 == cache_frame_859827a834425b584d481d21594f17c1_7) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_859827a834425b584d481d21594f17c1_7);
            cache_frame_859827a834425b584d481d21594f17c1_7 = NULL;
        }

        assertFrameObject(frame_859827a834425b584d481d21594f17c1_7);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_6:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_28;
        skip_nested_handling_6:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_28:;
        Py_XDECREF(outline_5_var__);
        outline_5_var__ = NULL;
        goto outline_result_6;
        // Exception handler code:
        try_except_handler_28:;
        exception_keeper_type_25 = exception_type;
        exception_keeper_value_25 = exception_value;
        exception_keeper_tb_25 = exception_tb;
        exception_keeper_lineno_25 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_5_var__);
        outline_5_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;
        exception_lineno = exception_keeper_lineno_25;

        goto outline_exception_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_6:;
        exception_lineno = 1851;
        goto try_except_handler_7;
        outline_result_6:;
        {
            PyObject *old = par_missing_values;
            assert(old != NULL);
            par_missing_values = tmp_assign_source_74;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_32;
        PyObject *tmp_isinstance_inst_5;
        PyObject *tmp_isinstance_cls_5;
        CHECK_OBJECT(var_user_missing_values);
        tmp_isinstance_inst_5 = var_user_missing_values;
        tmp_isinstance_cls_5 = (PyObject *)&PyDict_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_5, tmp_isinstance_cls_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1854;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_32 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_32 == NUITKA_BOOL_TRUE) {
            goto branch_yes_32;
        } else {
            goto branch_no_32;
        }
    }
    branch_yes_32:;
    {
        PyObject *tmp_assign_source_79;
        PyObject *tmp_iter_arg_11;
        PyObject *tmp_called_instance_10;
        CHECK_OBJECT(var_user_missing_values);
        tmp_called_instance_10 = var_user_missing_values;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1856;
        tmp_iter_arg_11 = CALL_METHOD_NO_ARGS(tmp_called_instance_10, mod_consts[47]);
        if (tmp_iter_arg_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1856;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_assign_source_79 = MAKE_ITERATOR(tmp_iter_arg_11);
        Py_DECREF(tmp_iter_arg_11);
        if (tmp_assign_source_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1856;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(tmp_for_loop_3__for_iterator == NULL);
        tmp_for_loop_3__for_iterator = tmp_assign_source_79;
    }
    // Tried code:
    loop_start_10:;
    {
        PyObject *tmp_next_source_9;
        PyObject *tmp_assign_source_80;
        CHECK_OBJECT(tmp_for_loop_3__for_iterator);
        tmp_next_source_9 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_80 = ITERATOR_NEXT(tmp_next_source_9);
        if (tmp_assign_source_80 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_10;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 1856;
                goto try_except_handler_30;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_80;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_81;
        PyObject *tmp_iter_arg_12;
        CHECK_OBJECT(tmp_for_loop_3__iter_value);
        tmp_iter_arg_12 = tmp_for_loop_3__iter_value;
        tmp_assign_source_81 = MAKE_ITERATOR(tmp_iter_arg_12);
        if (tmp_assign_source_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1856;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_31;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__source_iter;
            tmp_tuple_unpack_2__source_iter = tmp_assign_source_81;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_82;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_82 = UNPACK_NEXT(tmp_unpack_3, 0, 2);
        if (tmp_assign_source_82 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1856;
            goto try_except_handler_32;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_1;
            tmp_tuple_unpack_2__element_1 = tmp_assign_source_82;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_83;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_83 = UNPACK_NEXT(tmp_unpack_4, 1, 2);
        if (tmp_assign_source_83 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1856;
            goto try_except_handler_32;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_2;
            tmp_tuple_unpack_2__element_2 = tmp_assign_source_83;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_2); assert(HAS_ITERNEXT(tmp_iterator_name_2));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_2)->tp_iternext)(tmp_iterator_name_2);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 1856;
                    goto try_except_handler_32;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1856;
            goto try_except_handler_32;
        }
    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_32:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_keeper_lineno_26 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
    Py_DECREF(tmp_tuple_unpack_2__source_iter);
    tmp_tuple_unpack_2__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_26;
    exception_value = exception_keeper_value_26;
    exception_tb = exception_keeper_tb_26;
    exception_lineno = exception_keeper_lineno_26;

    goto try_except_handler_31;
    // End of try:
    try_end_13:;
    goto try_end_14;
    // Exception handler code:
    try_except_handler_31:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_keeper_lineno_27 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_2__element_1);
    tmp_tuple_unpack_2__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_2__element_2);
    tmp_tuple_unpack_2__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_27;
    exception_value = exception_keeper_value_27;
    exception_tb = exception_keeper_tb_27;
    exception_lineno = exception_keeper_lineno_27;

    goto try_except_handler_30;
    // End of try:
    try_end_14:;
    CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
    Py_DECREF(tmp_tuple_unpack_2__source_iter);
    tmp_tuple_unpack_2__source_iter = NULL;
    {
        PyObject *tmp_assign_source_84;
        CHECK_OBJECT(tmp_tuple_unpack_2__element_1);
        tmp_assign_source_84 = tmp_tuple_unpack_2__element_1;
        {
            PyObject *old = var_key;
            var_key = tmp_assign_source_84;
            Py_INCREF(var_key);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_2__element_1);
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_85;
        CHECK_OBJECT(tmp_tuple_unpack_2__element_2);
        tmp_assign_source_85 = tmp_tuple_unpack_2__element_2;
        {
            PyObject *old = var_val;
            var_val = tmp_assign_source_85;
            Py_INCREF(var_val);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_2__element_2);
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_33;
        PyObject *tmp_called_name_20;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_17;
        int tmp_truth_name_10;
        tmp_called_name_20 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[108]);

        if (unlikely(tmp_called_name_20 == NULL)) {
            tmp_called_name_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[108]);
        }

        if (tmp_called_name_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1858;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }
        CHECK_OBJECT(var_key);
        tmp_args_element_name_17 = var_key;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1858;
        tmp_call_result_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_20, tmp_args_element_name_17);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1858;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }
        tmp_truth_name_10 = CHECK_IF_TRUE(tmp_call_result_4);
        if (tmp_truth_name_10 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_4);

            exception_lineno = 1858;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }
        tmp_condition_result_33 = tmp_truth_name_10 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_4);
        if (tmp_condition_result_33 == NUITKA_BOOL_TRUE) {
            goto branch_yes_33;
        } else {
            goto branch_no_33;
        }
    }
    branch_yes_33:;
    // Tried code:
    {
        PyObject *tmp_assign_source_86;
        PyObject *tmp_called_instance_11;
        PyObject *tmp_args_element_name_18;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1861;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_33;
        }

        tmp_called_instance_11 = par_names;
        CHECK_OBJECT(var_key);
        tmp_args_element_name_18 = var_key;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1861;
        tmp_assign_source_86 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_11, mod_consts[184], tmp_args_element_name_18);
        if (tmp_assign_source_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1861;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_33;
        }
        {
            PyObject *old = var_key;
            assert(old != NULL);
            var_key = tmp_assign_source_86;
            Py_DECREF(old);
        }

    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_33:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_keeper_lineno_28 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 5.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_5, &exception_preserved_value_5, &exception_preserved_tb_5);

    if (exception_keeper_tb_28 == NULL) {
        exception_keeper_tb_28 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_28);
    } else if (exception_keeper_lineno_28 != 0) {
        exception_keeper_tb_28 = ADD_TRACEBACK(exception_keeper_tb_28, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_28);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_28, &exception_keeper_value_28, &exception_keeper_tb_28);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_28, exception_keeper_tb_28);
    PUBLISH_EXCEPTION(&exception_keeper_type_28, &exception_keeper_value_28, &exception_keeper_tb_28);
    // Tried code:
    {
        bool tmp_condition_result_34;
        PyObject *tmp_compexpr_left_25;
        PyObject *tmp_compexpr_right_25;
        tmp_compexpr_left_25 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_25 = PyExc_ValueError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_25, tmp_compexpr_right_25);
        assert(!(tmp_res == -1));
        tmp_condition_result_34 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_34 != false) {
            goto branch_yes_34;
        } else {
            goto branch_no_34;
        }
    }
    branch_yes_34:;
    goto try_continue_handler_34;
    goto branch_end_34;
    branch_no_34:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1859;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_34;
    branch_end_34:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_34:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_keeper_lineno_29 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 5.
    SET_CURRENT_EXCEPTION(exception_preserved_type_5, exception_preserved_value_5, exception_preserved_tb_5);

    // Re-raise.
    exception_type = exception_keeper_type_29;
    exception_value = exception_keeper_value_29;
    exception_tb = exception_keeper_tb_29;
    exception_lineno = exception_keeper_lineno_29;

    goto try_except_handler_30;
    // try continue handler code:
    try_continue_handler_34:;
    // Restore previous exception id 5.
    SET_CURRENT_EXCEPTION(exception_preserved_type_5, exception_preserved_value_5, exception_preserved_tb_5);

    goto loop_start_10;
    // End of try:
    // End of try:
    try_end_15:;
    branch_no_33:;
    {
        nuitka_bool tmp_condition_result_35;
        int tmp_truth_name_11;
        if (par_usecols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1866;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }

        tmp_truth_name_11 = CHECK_IF_TRUE(par_usecols);
        if (tmp_truth_name_11 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1866;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }
        tmp_condition_result_35 = tmp_truth_name_11 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_35 == NUITKA_BOOL_TRUE) {
            goto branch_yes_35;
        } else {
            goto branch_no_35;
        }
    }
    branch_yes_35:;
    // Tried code:
    {
        PyObject *tmp_assign_source_87;
        PyObject *tmp_called_name_21;
        PyObject *tmp_expression_name_17;
        PyObject *tmp_args_element_name_19;
        if (par_usecols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1868;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_35;
        }

        tmp_expression_name_17 = par_usecols;
        tmp_called_name_21 = LOOKUP_ATTRIBUTE(tmp_expression_name_17, mod_consts[184]);
        if (tmp_called_name_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1868;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_35;
        }
        if (var_key == NULL) {
            Py_DECREF(tmp_called_name_21);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[40]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1868;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_35;
        }

        tmp_args_element_name_19 = var_key;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1868;
        tmp_assign_source_87 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_21, tmp_args_element_name_19);
        Py_DECREF(tmp_called_name_21);
        if (tmp_assign_source_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1868;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_35;
        }
        {
            PyObject *old = var_key;
            var_key = tmp_assign_source_87;
            Py_XDECREF(old);
        }

    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_35:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_keeper_lineno_30 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 6.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_6, &exception_preserved_value_6, &exception_preserved_tb_6);

    if (exception_keeper_tb_30 == NULL) {
        exception_keeper_tb_30 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_30);
    } else if (exception_keeper_lineno_30 != 0) {
        exception_keeper_tb_30 = ADD_TRACEBACK(exception_keeper_tb_30, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_30);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_30, &exception_keeper_value_30, &exception_keeper_tb_30);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_30, exception_keeper_tb_30);
    PUBLISH_EXCEPTION(&exception_keeper_type_30, &exception_keeper_value_30, &exception_keeper_tb_30);
    // Tried code:
    {
        bool tmp_condition_result_36;
        PyObject *tmp_compexpr_left_26;
        PyObject *tmp_compexpr_right_26;
        tmp_compexpr_left_26 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_26 = PyExc_ValueError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_26, tmp_compexpr_right_26);
        assert(!(tmp_res == -1));
        tmp_condition_result_36 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_36 != false) {
            goto branch_yes_36;
        } else {
            goto branch_no_36;
        }
    }
    branch_yes_36:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1867;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_36;
    branch_no_36:;
    goto try_end_17;
    // Exception handler code:
    try_except_handler_36:;
    exception_keeper_type_31 = exception_type;
    exception_keeper_value_31 = exception_value;
    exception_keeper_tb_31 = exception_tb;
    exception_keeper_lineno_31 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 6.
    SET_CURRENT_EXCEPTION(exception_preserved_type_6, exception_preserved_value_6, exception_preserved_tb_6);

    // Re-raise.
    exception_type = exception_keeper_type_31;
    exception_value = exception_keeper_value_31;
    exception_tb = exception_keeper_tb_31;
    exception_lineno = exception_keeper_lineno_31;

    goto try_except_handler_30;
    // End of try:
    try_end_17:;
    // Restore previous exception id 6.
    SET_CURRENT_EXCEPTION(exception_preserved_type_6, exception_preserved_value_6, exception_preserved_tb_6);

    goto try_end_16;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_16:;
    branch_no_35:;
    {
        nuitka_bool tmp_condition_result_37;
        PyObject *tmp_isinstance_inst_6;
        PyObject *tmp_isinstance_cls_6;
        CHECK_OBJECT(var_val);
        tmp_isinstance_inst_6 = var_val;
        tmp_isinstance_cls_6 = mod_consts[275];
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_6, tmp_isinstance_cls_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1872;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }
        tmp_condition_result_37 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_37 == NUITKA_BOOL_TRUE) {
            goto branch_yes_37;
        } else {
            goto branch_no_37;
        }
    }
    branch_yes_37:;
    {
        PyObject *tmp_assign_source_88;
        // Tried code:
        {
            PyObject *tmp_assign_source_89;
            PyObject *tmp_iter_arg_13;
            CHECK_OBJECT(var_val);
            tmp_iter_arg_13 = var_val;
            tmp_assign_source_89 = MAKE_ITERATOR(tmp_iter_arg_13);
            if (tmp_assign_source_89 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1873;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_37;
            }
            {
                PyObject *old = tmp_listcomp_7__$0;
                tmp_listcomp_7__$0 = tmp_assign_source_89;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_90;
            tmp_assign_source_90 = PyList_New(0);
            {
                PyObject *old = tmp_listcomp_7__contraction;
                tmp_listcomp_7__contraction = tmp_assign_source_90;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_1c4d467ae28cbd847f4f7e781387400f_8)) {
            Py_XDECREF(cache_frame_1c4d467ae28cbd847f4f7e781387400f_8);

#if _DEBUG_REFCOUNTS
            if (cache_frame_1c4d467ae28cbd847f4f7e781387400f_8 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_1c4d467ae28cbd847f4f7e781387400f_8 = MAKE_FUNCTION_FRAME(codeobj_1c4d467ae28cbd847f4f7e781387400f, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_1c4d467ae28cbd847f4f7e781387400f_8->m_type_description == NULL);
        frame_1c4d467ae28cbd847f4f7e781387400f_8 = cache_frame_1c4d467ae28cbd847f4f7e781387400f_8;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_1c4d467ae28cbd847f4f7e781387400f_8);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_1c4d467ae28cbd847f4f7e781387400f_8) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_11:;
        {
            PyObject *tmp_next_source_10;
            PyObject *tmp_assign_source_91;
            CHECK_OBJECT(tmp_listcomp_7__$0);
            tmp_next_source_10 = tmp_listcomp_7__$0;
            tmp_assign_source_91 = ITERATOR_NEXT(tmp_next_source_10);
            if (tmp_assign_source_91 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_11;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 1873;
                    goto try_except_handler_38;
                }
            }

            {
                PyObject *old = tmp_listcomp_7__iter_value_0;
                tmp_listcomp_7__iter_value_0 = tmp_assign_source_91;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_92;
            CHECK_OBJECT(tmp_listcomp_7__iter_value_0);
            tmp_assign_source_92 = tmp_listcomp_7__iter_value_0;
            {
                PyObject *old = outline_6_var__;
                outline_6_var__ = tmp_assign_source_92;
                Py_INCREF(outline_6_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_7;
            PyObject *tmp_append_value_7;
            PyObject *tmp_unicode_arg_2;
            CHECK_OBJECT(tmp_listcomp_7__contraction);
            tmp_append_list_7 = tmp_listcomp_7__contraction;
            CHECK_OBJECT(outline_6_var__);
            tmp_unicode_arg_2 = outline_6_var__;
            tmp_append_value_7 = PyObject_Unicode(tmp_unicode_arg_2);
            if (tmp_append_value_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1873;
                type_description_2 = "o";
                goto try_except_handler_38;
            }
            assert(PyList_Check(tmp_append_list_7));
            tmp_result = LIST_APPEND1(tmp_append_list_7, tmp_append_value_7);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1873;
                type_description_2 = "o";
                goto try_except_handler_38;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1873;
            type_description_2 = "o";
            goto try_except_handler_38;
        }
        goto loop_start_11;
        loop_end_11:;
        CHECK_OBJECT(tmp_listcomp_7__contraction);
        tmp_assign_source_88 = tmp_listcomp_7__contraction;
        Py_INCREF(tmp_assign_source_88);
        goto try_return_handler_38;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_38:;
        CHECK_OBJECT(tmp_listcomp_7__$0);
        Py_DECREF(tmp_listcomp_7__$0);
        tmp_listcomp_7__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_7__contraction);
        Py_DECREF(tmp_listcomp_7__contraction);
        tmp_listcomp_7__contraction = NULL;
        Py_XDECREF(tmp_listcomp_7__iter_value_0);
        tmp_listcomp_7__iter_value_0 = NULL;
        goto frame_return_exit_8;
        // Exception handler code:
        try_except_handler_38:;
        exception_keeper_type_32 = exception_type;
        exception_keeper_value_32 = exception_value;
        exception_keeper_tb_32 = exception_tb;
        exception_keeper_lineno_32 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_7__$0);
        Py_DECREF(tmp_listcomp_7__$0);
        tmp_listcomp_7__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_7__contraction);
        Py_DECREF(tmp_listcomp_7__contraction);
        tmp_listcomp_7__contraction = NULL;
        Py_XDECREF(tmp_listcomp_7__iter_value_0);
        tmp_listcomp_7__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_32;
        exception_value = exception_keeper_value_32;
        exception_tb = exception_keeper_tb_32;
        exception_lineno = exception_keeper_lineno_32;

        goto frame_exception_exit_8;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1c4d467ae28cbd847f4f7e781387400f_8);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_7;

        frame_return_exit_8:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_1c4d467ae28cbd847f4f7e781387400f_8);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_37;

        frame_exception_exit_8:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1c4d467ae28cbd847f4f7e781387400f_8);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1c4d467ae28cbd847f4f7e781387400f_8, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1c4d467ae28cbd847f4f7e781387400f_8->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1c4d467ae28cbd847f4f7e781387400f_8, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1c4d467ae28cbd847f4f7e781387400f_8,
            type_description_2,
            outline_6_var__
        );


        // Release cached frame if used for exception.
        if (frame_1c4d467ae28cbd847f4f7e781387400f_8 == cache_frame_1c4d467ae28cbd847f4f7e781387400f_8) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_1c4d467ae28cbd847f4f7e781387400f_8);
            cache_frame_1c4d467ae28cbd847f4f7e781387400f_8 = NULL;
        }

        assertFrameObject(frame_1c4d467ae28cbd847f4f7e781387400f_8);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_7;

        frame_no_exception_7:;
        goto skip_nested_handling_7;
        nested_frame_exit_7:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_37;
        skip_nested_handling_7:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_37:;
        Py_XDECREF(outline_6_var__);
        outline_6_var__ = NULL;
        goto outline_result_7;
        // Exception handler code:
        try_except_handler_37:;
        exception_keeper_type_33 = exception_type;
        exception_keeper_value_33 = exception_value;
        exception_keeper_tb_33 = exception_tb;
        exception_keeper_lineno_33 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_6_var__);
        outline_6_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_33;
        exception_value = exception_keeper_value_33;
        exception_tb = exception_keeper_tb_33;
        exception_lineno = exception_keeper_lineno_33;

        goto outline_exception_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_7:;
        exception_lineno = 1873;
        goto try_except_handler_30;
        outline_result_7:;
        {
            PyObject *old = var_val;
            assert(old != NULL);
            var_val = tmp_assign_source_88;
            Py_DECREF(old);
        }

    }
    goto branch_end_37;
    branch_no_37:;
    {
        PyObject *tmp_assign_source_93;
        PyObject *tmp_list_element_2;
        PyObject *tmp_unicode_arg_3;
        CHECK_OBJECT(var_val);
        tmp_unicode_arg_3 = var_val;
        tmp_list_element_2 = PyObject_Unicode(tmp_unicode_arg_3);
        if (tmp_list_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1875;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }
        tmp_assign_source_93 = PyList_New(1);
        PyList_SET_ITEM(tmp_assign_source_93, 0, tmp_list_element_2);
        {
            PyObject *old = var_val;
            assert(old != NULL);
            var_val = tmp_assign_source_93;
            Py_DECREF(old);
        }

    }
    branch_end_37:;
    {
        bool tmp_condition_result_38;
        PyObject *tmp_compexpr_left_27;
        PyObject *tmp_compexpr_right_27;
        if (var_key == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[40]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1877;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }

        tmp_compexpr_left_27 = var_key;
        tmp_compexpr_right_27 = Py_None;
        tmp_condition_result_38 = (tmp_compexpr_left_27 == tmp_compexpr_right_27) ? true : false;
        if (tmp_condition_result_38 != false) {
            goto branch_yes_38;
        } else {
            goto branch_no_38;
        }
    }
    branch_yes_38:;
    {
        PyObject *tmp_assign_source_94;
        PyObject *tmp_iter_arg_14;
        if (par_missing_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[322]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1879;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }

        tmp_iter_arg_14 = par_missing_values;
        tmp_assign_source_94 = MAKE_ITERATOR(tmp_iter_arg_14);
        if (tmp_assign_source_94 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1879;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }
        {
            PyObject *old = tmp_for_loop_4__for_iterator;
            tmp_for_loop_4__for_iterator = tmp_assign_source_94;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_12:;
    {
        PyObject *tmp_next_source_11;
        PyObject *tmp_assign_source_95;
        CHECK_OBJECT(tmp_for_loop_4__for_iterator);
        tmp_next_source_11 = tmp_for_loop_4__for_iterator;
        tmp_assign_source_95 = ITERATOR_NEXT(tmp_next_source_11);
        if (tmp_assign_source_95 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_12;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 1879;
                goto try_except_handler_39;
            }
        }

        {
            PyObject *old = tmp_for_loop_4__iter_value;
            tmp_for_loop_4__iter_value = tmp_assign_source_95;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_96;
        CHECK_OBJECT(tmp_for_loop_4__iter_value);
        tmp_assign_source_96 = tmp_for_loop_4__iter_value;
        {
            PyObject *old = var_miss;
            var_miss = tmp_assign_source_96;
            Py_INCREF(var_miss);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_22;
        PyObject *tmp_expression_name_18;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_20;
        CHECK_OBJECT(var_miss);
        tmp_expression_name_18 = var_miss;
        tmp_called_name_22 = LOOKUP_ATTRIBUTE(tmp_expression_name_18, mod_consts[224]);
        if (tmp_called_name_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1880;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_39;
        }
        if (var_val == NULL) {
            Py_DECREF(tmp_called_name_22);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[323]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1880;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_39;
        }

        tmp_args_element_name_20 = var_val;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1880;
        tmp_call_result_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_22, tmp_args_element_name_20);
        Py_DECREF(tmp_called_name_22);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1880;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_39;
        }
        Py_DECREF(tmp_call_result_5);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1879;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_39;
    }
    goto loop_start_12;
    loop_end_12:;
    goto try_end_18;
    // Exception handler code:
    try_except_handler_39:;
    exception_keeper_type_34 = exception_type;
    exception_keeper_value_34 = exception_value;
    exception_keeper_tb_34 = exception_tb;
    exception_keeper_lineno_34 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_4__iter_value);
    tmp_for_loop_4__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_4__for_iterator);
    Py_DECREF(tmp_for_loop_4__for_iterator);
    tmp_for_loop_4__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_34;
    exception_value = exception_keeper_value_34;
    exception_tb = exception_keeper_tb_34;
    exception_lineno = exception_keeper_lineno_34;

    goto try_except_handler_30;
    // End of try:
    try_end_18:;
    Py_XDECREF(tmp_for_loop_4__iter_value);
    tmp_for_loop_4__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_4__for_iterator);
    Py_DECREF(tmp_for_loop_4__for_iterator);
    tmp_for_loop_4__for_iterator = NULL;
    goto branch_end_38;
    branch_no_38:;
    {
        PyObject *tmp_called_instance_12;
        PyObject *tmp_expression_name_19;
        PyObject *tmp_subscript_name_5;
        PyObject *tmp_call_result_6;
        PyObject *tmp_args_element_name_21;
        if (par_missing_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[322]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1882;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }

        tmp_expression_name_19 = par_missing_values;
        if (var_key == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[40]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1882;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }

        tmp_subscript_name_5 = var_key;
        tmp_called_instance_12 = LOOKUP_SUBSCRIPT(tmp_expression_name_19, tmp_subscript_name_5);
        if (tmp_called_instance_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1882;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }
        CHECK_OBJECT(var_val);
        tmp_args_element_name_21 = var_val;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1882;
        tmp_call_result_6 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_12, mod_consts[224], tmp_args_element_name_21);
        Py_DECREF(tmp_called_instance_12);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1882;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_30;
        }
        Py_DECREF(tmp_call_result_6);
    }
    branch_end_38:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1856;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_30;
    }
    goto loop_start_10;
    loop_end_10:;
    goto try_end_19;
    // Exception handler code:
    try_except_handler_30:;
    exception_keeper_type_35 = exception_type;
    exception_keeper_value_35 = exception_value;
    exception_keeper_tb_35 = exception_tb;
    exception_keeper_lineno_35 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_35;
    exception_value = exception_keeper_value_35;
    exception_tb = exception_keeper_tb_35;
    exception_lineno = exception_keeper_lineno_35;

    goto try_except_handler_7;
    // End of try:
    try_end_19:;
    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;
    goto branch_end_32;
    branch_no_32:;
    {
        nuitka_bool tmp_condition_result_39;
        PyObject *tmp_isinstance_inst_7;
        PyObject *tmp_isinstance_cls_7;
        CHECK_OBJECT(var_user_missing_values);
        tmp_isinstance_inst_7 = var_user_missing_values;
        tmp_isinstance_cls_7 = mod_consts[275];
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_7, tmp_isinstance_cls_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1884;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_39 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_39 == NUITKA_BOOL_TRUE) {
            goto branch_yes_39;
        } else {
            goto branch_no_39;
        }
    }
    branch_yes_39:;
    {
        PyObject *tmp_assign_source_97;
        PyObject *tmp_iter_arg_15;
        PyObject *tmp_called_name_23;
        PyObject *tmp_args_element_name_22;
        PyObject *tmp_args_element_name_23;
        tmp_called_name_23 = (PyObject *)&PyZip_Type;
        CHECK_OBJECT(var_user_missing_values);
        tmp_args_element_name_22 = var_user_missing_values;
        CHECK_OBJECT(par_missing_values);
        tmp_args_element_name_23 = par_missing_values;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1885;
        {
            PyObject *call_args[] = {tmp_args_element_name_22, tmp_args_element_name_23};
            tmp_iter_arg_15 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_23, call_args);
        }

        if (tmp_iter_arg_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1885;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_assign_source_97 = MAKE_ITERATOR(tmp_iter_arg_15);
        Py_DECREF(tmp_iter_arg_15);
        if (tmp_assign_source_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1885;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(tmp_for_loop_5__for_iterator == NULL);
        tmp_for_loop_5__for_iterator = tmp_assign_source_97;
    }
    // Tried code:
    loop_start_13:;
    {
        PyObject *tmp_next_source_12;
        PyObject *tmp_assign_source_98;
        CHECK_OBJECT(tmp_for_loop_5__for_iterator);
        tmp_next_source_12 = tmp_for_loop_5__for_iterator;
        tmp_assign_source_98 = ITERATOR_NEXT(tmp_next_source_12);
        if (tmp_assign_source_98 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_13;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 1885;
                goto try_except_handler_40;
            }
        }

        {
            PyObject *old = tmp_for_loop_5__iter_value;
            tmp_for_loop_5__iter_value = tmp_assign_source_98;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_99;
        PyObject *tmp_iter_arg_16;
        CHECK_OBJECT(tmp_for_loop_5__iter_value);
        tmp_iter_arg_16 = tmp_for_loop_5__iter_value;
        tmp_assign_source_99 = MAKE_ITERATOR(tmp_iter_arg_16);
        if (tmp_assign_source_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1885;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_41;
        }
        {
            PyObject *old = tmp_tuple_unpack_3__source_iter;
            tmp_tuple_unpack_3__source_iter = tmp_assign_source_99;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_100;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
        tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_100 = UNPACK_NEXT(tmp_unpack_5, 0, 2);
        if (tmp_assign_source_100 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1885;
            goto try_except_handler_42;
        }
        {
            PyObject *old = tmp_tuple_unpack_3__element_1;
            tmp_tuple_unpack_3__element_1 = tmp_assign_source_100;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_101;
        PyObject *tmp_unpack_6;
        CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
        tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_101 = UNPACK_NEXT(tmp_unpack_6, 1, 2);
        if (tmp_assign_source_101 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1885;
            goto try_except_handler_42;
        }
        {
            PyObject *old = tmp_tuple_unpack_3__element_2;
            tmp_tuple_unpack_3__element_2 = tmp_assign_source_101;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_3;
        CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
        tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_3); assert(HAS_ITERNEXT(tmp_iterator_name_3));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_3)->tp_iternext)(tmp_iterator_name_3);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 1885;
                    goto try_except_handler_42;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1885;
            goto try_except_handler_42;
        }
    }
    goto try_end_20;
    // Exception handler code:
    try_except_handler_42:;
    exception_keeper_type_36 = exception_type;
    exception_keeper_value_36 = exception_value;
    exception_keeper_tb_36 = exception_tb;
    exception_keeper_lineno_36 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
    Py_DECREF(tmp_tuple_unpack_3__source_iter);
    tmp_tuple_unpack_3__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_36;
    exception_value = exception_keeper_value_36;
    exception_tb = exception_keeper_tb_36;
    exception_lineno = exception_keeper_lineno_36;

    goto try_except_handler_41;
    // End of try:
    try_end_20:;
    goto try_end_21;
    // Exception handler code:
    try_except_handler_41:;
    exception_keeper_type_37 = exception_type;
    exception_keeper_value_37 = exception_value;
    exception_keeper_tb_37 = exception_tb;
    exception_keeper_lineno_37 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_3__element_1);
    tmp_tuple_unpack_3__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_3__element_2);
    tmp_tuple_unpack_3__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_37;
    exception_value = exception_keeper_value_37;
    exception_tb = exception_keeper_tb_37;
    exception_lineno = exception_keeper_lineno_37;

    goto try_except_handler_40;
    // End of try:
    try_end_21:;
    CHECK_OBJECT(tmp_tuple_unpack_3__source_iter);
    Py_DECREF(tmp_tuple_unpack_3__source_iter);
    tmp_tuple_unpack_3__source_iter = NULL;
    {
        PyObject *tmp_assign_source_102;
        CHECK_OBJECT(tmp_tuple_unpack_3__element_1);
        tmp_assign_source_102 = tmp_tuple_unpack_3__element_1;
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_102;
            Py_INCREF(var_value);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_3__element_1);
    tmp_tuple_unpack_3__element_1 = NULL;

    {
        PyObject *tmp_assign_source_103;
        CHECK_OBJECT(tmp_tuple_unpack_3__element_2);
        tmp_assign_source_103 = tmp_tuple_unpack_3__element_2;
        {
            PyObject *old = var_entry;
            var_entry = tmp_assign_source_103;
            Py_INCREF(var_entry);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_3__element_2);
    tmp_tuple_unpack_3__element_2 = NULL;

    {
        PyObject *tmp_assign_source_104;
        PyObject *tmp_unicode_arg_4;
        CHECK_OBJECT(var_value);
        tmp_unicode_arg_4 = var_value;
        tmp_assign_source_104 = PyObject_Unicode(tmp_unicode_arg_4);
        if (tmp_assign_source_104 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1886;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_40;
        }
        {
            PyObject *old = var_value;
            assert(old != NULL);
            var_value = tmp_assign_source_104;
            Py_DECREF(old);
        }

    }
    {
        bool tmp_condition_result_40;
        PyObject *tmp_compexpr_left_28;
        PyObject *tmp_compexpr_right_28;
        CHECK_OBJECT(var_value);
        tmp_compexpr_left_28 = var_value;
        CHECK_OBJECT(var_entry);
        tmp_compexpr_right_28 = var_entry;
        tmp_res = PySequence_Contains(tmp_compexpr_right_28, tmp_compexpr_left_28);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1887;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_40;
        }
        tmp_condition_result_40 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_40 != false) {
            goto branch_yes_40;
        } else {
            goto branch_no_40;
        }
    }
    branch_yes_40:;
    {
        PyObject *tmp_called_instance_13;
        PyObject *tmp_call_result_7;
        PyObject *tmp_args_element_name_24;
        CHECK_OBJECT(var_entry);
        tmp_called_instance_13 = var_entry;
        CHECK_OBJECT(var_value);
        tmp_args_element_name_24 = var_value;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1888;
        tmp_call_result_7 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_13, mod_consts[29], tmp_args_element_name_24);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_40;
        }
        Py_DECREF(tmp_call_result_7);
    }
    branch_no_40:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1885;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_40;
    }
    goto loop_start_13;
    loop_end_13:;
    goto try_end_22;
    // Exception handler code:
    try_except_handler_40:;
    exception_keeper_type_38 = exception_type;
    exception_keeper_value_38 = exception_value;
    exception_keeper_tb_38 = exception_tb;
    exception_keeper_lineno_38 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_5__iter_value);
    tmp_for_loop_5__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_5__for_iterator);
    Py_DECREF(tmp_for_loop_5__for_iterator);
    tmp_for_loop_5__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_38;
    exception_value = exception_keeper_value_38;
    exception_tb = exception_keeper_tb_38;
    exception_lineno = exception_keeper_lineno_38;

    goto try_except_handler_7;
    // End of try:
    try_end_22:;
    Py_XDECREF(tmp_for_loop_5__iter_value);
    tmp_for_loop_5__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_5__for_iterator);
    Py_DECREF(tmp_for_loop_5__for_iterator);
    tmp_for_loop_5__for_iterator = NULL;
    goto branch_end_39;
    branch_no_39:;
    {
        nuitka_bool tmp_condition_result_41;
        PyObject *tmp_isinstance_inst_8;
        PyObject *tmp_isinstance_cls_8;
        CHECK_OBJECT(var_user_missing_values);
        tmp_isinstance_inst_8 = var_user_missing_values;
        tmp_isinstance_cls_8 = (PyObject *)&PyUnicode_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_8, tmp_isinstance_cls_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1890;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_41 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_41 == NUITKA_BOOL_TRUE) {
            goto branch_yes_41;
        } else {
            goto branch_no_41;
        }
    }
    branch_yes_41:;
    {
        PyObject *tmp_assign_source_105;
        PyObject *tmp_called_instance_14;
        CHECK_OBJECT(var_user_missing_values);
        tmp_called_instance_14 = var_user_missing_values;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1891;
        tmp_assign_source_105 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_14,
            mod_consts[111],
            PyTuple_GET_ITEM(mod_consts[316], 0)
        );

        if (tmp_assign_source_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1891;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_user_value == NULL);
        var_user_value = tmp_assign_source_105;
    }
    {
        PyObject *tmp_assign_source_106;
        PyObject *tmp_iter_arg_17;
        CHECK_OBJECT(par_missing_values);
        tmp_iter_arg_17 = par_missing_values;
        tmp_assign_source_106 = MAKE_ITERATOR(tmp_iter_arg_17);
        if (tmp_assign_source_106 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1892;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(tmp_for_loop_6__for_iterator == NULL);
        tmp_for_loop_6__for_iterator = tmp_assign_source_106;
    }
    // Tried code:
    loop_start_14:;
    {
        PyObject *tmp_next_source_13;
        PyObject *tmp_assign_source_107;
        CHECK_OBJECT(tmp_for_loop_6__for_iterator);
        tmp_next_source_13 = tmp_for_loop_6__for_iterator;
        tmp_assign_source_107 = ITERATOR_NEXT(tmp_next_source_13);
        if (tmp_assign_source_107 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_14;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 1892;
                goto try_except_handler_43;
            }
        }

        {
            PyObject *old = tmp_for_loop_6__iter_value;
            tmp_for_loop_6__iter_value = tmp_assign_source_107;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_108;
        CHECK_OBJECT(tmp_for_loop_6__iter_value);
        tmp_assign_source_108 = tmp_for_loop_6__iter_value;
        {
            PyObject *old = var_entry;
            var_entry = tmp_assign_source_108;
            Py_INCREF(var_entry);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_24;
        PyObject *tmp_expression_name_20;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_element_name_25;
        CHECK_OBJECT(var_entry);
        tmp_expression_name_20 = var_entry;
        tmp_called_name_24 = LOOKUP_ATTRIBUTE(tmp_expression_name_20, mod_consts[224]);
        if (tmp_called_name_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1893;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_43;
        }
        if (var_user_value == NULL) {
            Py_DECREF(tmp_called_name_24);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[324]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1893;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_43;
        }

        tmp_args_element_name_25 = var_user_value;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1893;
        tmp_call_result_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_24, tmp_args_element_name_25);
        Py_DECREF(tmp_called_name_24);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1893;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_43;
        }
        Py_DECREF(tmp_call_result_8);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1892;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_43;
    }
    goto loop_start_14;
    loop_end_14:;
    goto try_end_23;
    // Exception handler code:
    try_except_handler_43:;
    exception_keeper_type_39 = exception_type;
    exception_keeper_value_39 = exception_value;
    exception_keeper_tb_39 = exception_tb;
    exception_keeper_lineno_39 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_6__iter_value);
    tmp_for_loop_6__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_6__for_iterator);
    Py_DECREF(tmp_for_loop_6__for_iterator);
    tmp_for_loop_6__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_39;
    exception_value = exception_keeper_value_39;
    exception_tb = exception_keeper_tb_39;
    exception_lineno = exception_keeper_lineno_39;

    goto try_except_handler_7;
    // End of try:
    try_end_23:;
    Py_XDECREF(tmp_for_loop_6__iter_value);
    tmp_for_loop_6__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_6__for_iterator);
    Py_DECREF(tmp_for_loop_6__for_iterator);
    tmp_for_loop_6__for_iterator = NULL;
    goto branch_end_41;
    branch_no_41:;
    {
        PyObject *tmp_assign_source_109;
        PyObject *tmp_iter_arg_18;
        CHECK_OBJECT(par_missing_values);
        tmp_iter_arg_18 = par_missing_values;
        tmp_assign_source_109 = MAKE_ITERATOR(tmp_iter_arg_18);
        if (tmp_assign_source_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1896;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(tmp_for_loop_7__for_iterator == NULL);
        tmp_for_loop_7__for_iterator = tmp_assign_source_109;
    }
    // Tried code:
    loop_start_15:;
    {
        PyObject *tmp_next_source_14;
        PyObject *tmp_assign_source_110;
        CHECK_OBJECT(tmp_for_loop_7__for_iterator);
        tmp_next_source_14 = tmp_for_loop_7__for_iterator;
        tmp_assign_source_110 = ITERATOR_NEXT(tmp_next_source_14);
        if (tmp_assign_source_110 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_15;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 1896;
                goto try_except_handler_44;
            }
        }

        {
            PyObject *old = tmp_for_loop_7__iter_value;
            tmp_for_loop_7__iter_value = tmp_assign_source_110;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_111;
        CHECK_OBJECT(tmp_for_loop_7__iter_value);
        tmp_assign_source_111 = tmp_for_loop_7__iter_value;
        {
            PyObject *old = var_entry;
            var_entry = tmp_assign_source_111;
            Py_INCREF(var_entry);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_25;
        PyObject *tmp_expression_name_21;
        PyObject *tmp_call_result_9;
        PyObject *tmp_args_element_name_26;
        PyObject *tmp_list_element_3;
        PyObject *tmp_unicode_arg_5;
        CHECK_OBJECT(var_entry);
        tmp_expression_name_21 = var_entry;
        tmp_called_name_25 = LOOKUP_ATTRIBUTE(tmp_expression_name_21, mod_consts[224]);
        if (tmp_called_name_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1897;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_44;
        }
        if (var_user_missing_values == NULL) {
            Py_DECREF(tmp_called_name_25);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[325]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1897;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_44;
        }

        tmp_unicode_arg_5 = var_user_missing_values;
        tmp_list_element_3 = PyObject_Unicode(tmp_unicode_arg_5);
        if (tmp_list_element_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_25);

            exception_lineno = 1897;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_44;
        }
        tmp_args_element_name_26 = PyList_New(1);
        PyList_SET_ITEM(tmp_args_element_name_26, 0, tmp_list_element_3);
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1897;
        tmp_call_result_9 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_25, tmp_args_element_name_26);
        Py_DECREF(tmp_called_name_25);
        Py_DECREF(tmp_args_element_name_26);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1897;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_44;
        }
        Py_DECREF(tmp_call_result_9);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1896;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_44;
    }
    goto loop_start_15;
    loop_end_15:;
    goto try_end_24;
    // Exception handler code:
    try_except_handler_44:;
    exception_keeper_type_40 = exception_type;
    exception_keeper_value_40 = exception_value;
    exception_keeper_tb_40 = exception_tb;
    exception_keeper_lineno_40 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_7__iter_value);
    tmp_for_loop_7__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_7__for_iterator);
    Py_DECREF(tmp_for_loop_7__for_iterator);
    tmp_for_loop_7__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_40;
    exception_value = exception_keeper_value_40;
    exception_tb = exception_keeper_tb_40;
    exception_lineno = exception_keeper_lineno_40;

    goto try_except_handler_7;
    // End of try:
    try_end_24:;
    Py_XDECREF(tmp_for_loop_7__iter_value);
    tmp_for_loop_7__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_7__for_iterator);
    Py_DECREF(tmp_for_loop_7__for_iterator);
    tmp_for_loop_7__for_iterator = NULL;
    branch_end_41:;
    branch_end_39:;
    branch_end_32:;
    {
        PyObject *tmp_assign_source_112;
        CHECK_OBJECT(par_filling_values);
        tmp_assign_source_112 = par_filling_values;
        assert(var_user_filling_values == NULL);
        Py_INCREF(tmp_assign_source_112);
        var_user_filling_values = tmp_assign_source_112;
    }
    {
        bool tmp_condition_result_42;
        PyObject *tmp_compexpr_left_29;
        PyObject *tmp_compexpr_right_29;
        CHECK_OBJECT(var_user_filling_values);
        tmp_compexpr_left_29 = var_user_filling_values;
        tmp_compexpr_right_29 = Py_None;
        tmp_condition_result_42 = (tmp_compexpr_left_29 == tmp_compexpr_right_29) ? true : false;
        if (tmp_condition_result_42 != false) {
            goto branch_yes_42;
        } else {
            goto branch_no_42;
        }
    }
    branch_yes_42:;
    {
        PyObject *tmp_assign_source_113;
        tmp_assign_source_113 = PyList_New(0);
        {
            PyObject *old = var_user_filling_values;
            assert(old != NULL);
            var_user_filling_values = tmp_assign_source_113;
            Py_DECREF(old);
        }

    }
    branch_no_42:;
    {
        PyObject *tmp_assign_source_114;
        PyObject *tmp_left_name_5;
        PyObject *tmp_right_name_5;
        tmp_left_name_5 = LIST_COPY(mod_consts[326]);
        CHECK_OBJECT(var_nbcols);
        tmp_right_name_5 = var_nbcols;
        tmp_assign_source_114 = BINARY_OPERATION_MULT_OBJECT_LIST_LONG(tmp_left_name_5, tmp_right_name_5);
        Py_DECREF(tmp_left_name_5);
        assert(!(tmp_assign_source_114 == NULL));
        {
            PyObject *old = par_filling_values;
            assert(old != NULL);
            par_filling_values = tmp_assign_source_114;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_43;
        PyObject *tmp_isinstance_inst_9;
        PyObject *tmp_isinstance_cls_9;
        CHECK_OBJECT(var_user_filling_values);
        tmp_isinstance_inst_9 = var_user_filling_values;
        tmp_isinstance_cls_9 = (PyObject *)&PyDict_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_9, tmp_isinstance_cls_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1907;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_43 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_43 == NUITKA_BOOL_TRUE) {
            goto branch_yes_43;
        } else {
            goto branch_no_43;
        }
    }
    branch_yes_43:;
    {
        PyObject *tmp_assign_source_115;
        PyObject *tmp_iter_arg_19;
        PyObject *tmp_called_instance_15;
        CHECK_OBJECT(var_user_filling_values);
        tmp_called_instance_15 = var_user_filling_values;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1908;
        tmp_iter_arg_19 = CALL_METHOD_NO_ARGS(tmp_called_instance_15, mod_consts[47]);
        if (tmp_iter_arg_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1908;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_assign_source_115 = MAKE_ITERATOR(tmp_iter_arg_19);
        Py_DECREF(tmp_iter_arg_19);
        if (tmp_assign_source_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1908;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(tmp_for_loop_8__for_iterator == NULL);
        tmp_for_loop_8__for_iterator = tmp_assign_source_115;
    }
    // Tried code:
    loop_start_16:;
    {
        PyObject *tmp_next_source_15;
        PyObject *tmp_assign_source_116;
        CHECK_OBJECT(tmp_for_loop_8__for_iterator);
        tmp_next_source_15 = tmp_for_loop_8__for_iterator;
        tmp_assign_source_116 = ITERATOR_NEXT(tmp_next_source_15);
        if (tmp_assign_source_116 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_16;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 1908;
                goto try_except_handler_45;
            }
        }

        {
            PyObject *old = tmp_for_loop_8__iter_value;
            tmp_for_loop_8__iter_value = tmp_assign_source_116;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_117;
        PyObject *tmp_iter_arg_20;
        CHECK_OBJECT(tmp_for_loop_8__iter_value);
        tmp_iter_arg_20 = tmp_for_loop_8__iter_value;
        tmp_assign_source_117 = MAKE_ITERATOR(tmp_iter_arg_20);
        if (tmp_assign_source_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1908;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_46;
        }
        {
            PyObject *old = tmp_tuple_unpack_4__source_iter;
            tmp_tuple_unpack_4__source_iter = tmp_assign_source_117;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_118;
        PyObject *tmp_unpack_7;
        CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
        tmp_unpack_7 = tmp_tuple_unpack_4__source_iter;
        tmp_assign_source_118 = UNPACK_NEXT(tmp_unpack_7, 0, 2);
        if (tmp_assign_source_118 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1908;
            goto try_except_handler_47;
        }
        {
            PyObject *old = tmp_tuple_unpack_4__element_1;
            tmp_tuple_unpack_4__element_1 = tmp_assign_source_118;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_119;
        PyObject *tmp_unpack_8;
        CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
        tmp_unpack_8 = tmp_tuple_unpack_4__source_iter;
        tmp_assign_source_119 = UNPACK_NEXT(tmp_unpack_8, 1, 2);
        if (tmp_assign_source_119 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1908;
            goto try_except_handler_47;
        }
        {
            PyObject *old = tmp_tuple_unpack_4__element_2;
            tmp_tuple_unpack_4__element_2 = tmp_assign_source_119;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_4;
        CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
        tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_4); assert(HAS_ITERNEXT(tmp_iterator_name_4));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_4)->tp_iternext)(tmp_iterator_name_4);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 1908;
                    goto try_except_handler_47;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1908;
            goto try_except_handler_47;
        }
    }
    goto try_end_25;
    // Exception handler code:
    try_except_handler_47:;
    exception_keeper_type_41 = exception_type;
    exception_keeper_value_41 = exception_value;
    exception_keeper_tb_41 = exception_tb;
    exception_keeper_lineno_41 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
    Py_DECREF(tmp_tuple_unpack_4__source_iter);
    tmp_tuple_unpack_4__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_41;
    exception_value = exception_keeper_value_41;
    exception_tb = exception_keeper_tb_41;
    exception_lineno = exception_keeper_lineno_41;

    goto try_except_handler_46;
    // End of try:
    try_end_25:;
    goto try_end_26;
    // Exception handler code:
    try_except_handler_46:;
    exception_keeper_type_42 = exception_type;
    exception_keeper_value_42 = exception_value;
    exception_keeper_tb_42 = exception_tb;
    exception_keeper_lineno_42 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_4__element_1);
    tmp_tuple_unpack_4__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_4__element_2);
    tmp_tuple_unpack_4__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_42;
    exception_value = exception_keeper_value_42;
    exception_tb = exception_keeper_tb_42;
    exception_lineno = exception_keeper_lineno_42;

    goto try_except_handler_45;
    // End of try:
    try_end_26:;
    CHECK_OBJECT(tmp_tuple_unpack_4__source_iter);
    Py_DECREF(tmp_tuple_unpack_4__source_iter);
    tmp_tuple_unpack_4__source_iter = NULL;
    {
        PyObject *tmp_assign_source_120;
        CHECK_OBJECT(tmp_tuple_unpack_4__element_1);
        tmp_assign_source_120 = tmp_tuple_unpack_4__element_1;
        {
            PyObject *old = var_key;
            var_key = tmp_assign_source_120;
            Py_INCREF(var_key);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_4__element_1);
    tmp_tuple_unpack_4__element_1 = NULL;

    {
        PyObject *tmp_assign_source_121;
        CHECK_OBJECT(tmp_tuple_unpack_4__element_2);
        tmp_assign_source_121 = tmp_tuple_unpack_4__element_2;
        {
            PyObject *old = var_val;
            var_val = tmp_assign_source_121;
            Py_INCREF(var_val);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_4__element_2);
    tmp_tuple_unpack_4__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_44;
        PyObject *tmp_called_name_26;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_name_27;
        int tmp_truth_name_12;
        tmp_called_name_26 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[108]);

        if (unlikely(tmp_called_name_26 == NULL)) {
            tmp_called_name_26 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[108]);
        }

        if (tmp_called_name_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1909;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_45;
        }
        CHECK_OBJECT(var_key);
        tmp_args_element_name_27 = var_key;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1909;
        tmp_call_result_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_26, tmp_args_element_name_27);
        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1909;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_45;
        }
        tmp_truth_name_12 = CHECK_IF_TRUE(tmp_call_result_10);
        if (tmp_truth_name_12 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_10);

            exception_lineno = 1909;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_45;
        }
        tmp_condition_result_44 = tmp_truth_name_12 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_10);
        if (tmp_condition_result_44 == NUITKA_BOOL_TRUE) {
            goto branch_yes_44;
        } else {
            goto branch_no_44;
        }
    }
    branch_yes_44:;
    // Tried code:
    {
        PyObject *tmp_assign_source_122;
        PyObject *tmp_called_instance_16;
        PyObject *tmp_args_element_name_28;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1912;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_48;
        }

        tmp_called_instance_16 = par_names;
        CHECK_OBJECT(var_key);
        tmp_args_element_name_28 = var_key;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1912;
        tmp_assign_source_122 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_16, mod_consts[184], tmp_args_element_name_28);
        if (tmp_assign_source_122 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1912;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_48;
        }
        {
            PyObject *old = var_key;
            assert(old != NULL);
            var_key = tmp_assign_source_122;
            Py_DECREF(old);
        }

    }
    goto try_end_27;
    // Exception handler code:
    try_except_handler_48:;
    exception_keeper_type_43 = exception_type;
    exception_keeper_value_43 = exception_value;
    exception_keeper_tb_43 = exception_tb;
    exception_keeper_lineno_43 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 7.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_7, &exception_preserved_value_7, &exception_preserved_tb_7);

    if (exception_keeper_tb_43 == NULL) {
        exception_keeper_tb_43 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_43);
    } else if (exception_keeper_lineno_43 != 0) {
        exception_keeper_tb_43 = ADD_TRACEBACK(exception_keeper_tb_43, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_43);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_43, &exception_keeper_value_43, &exception_keeper_tb_43);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_43, exception_keeper_tb_43);
    PUBLISH_EXCEPTION(&exception_keeper_type_43, &exception_keeper_value_43, &exception_keeper_tb_43);
    // Tried code:
    {
        bool tmp_condition_result_45;
        PyObject *tmp_compexpr_left_30;
        PyObject *tmp_compexpr_right_30;
        tmp_compexpr_left_30 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_30 = PyExc_ValueError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_30, tmp_compexpr_right_30);
        assert(!(tmp_res == -1));
        tmp_condition_result_45 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_45 != false) {
            goto branch_yes_45;
        } else {
            goto branch_no_45;
        }
    }
    branch_yes_45:;
    goto try_continue_handler_49;
    goto branch_end_45;
    branch_no_45:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1910;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_49;
    branch_end_45:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_49:;
    exception_keeper_type_44 = exception_type;
    exception_keeper_value_44 = exception_value;
    exception_keeper_tb_44 = exception_tb;
    exception_keeper_lineno_44 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 7.
    SET_CURRENT_EXCEPTION(exception_preserved_type_7, exception_preserved_value_7, exception_preserved_tb_7);

    // Re-raise.
    exception_type = exception_keeper_type_44;
    exception_value = exception_keeper_value_44;
    exception_tb = exception_keeper_tb_44;
    exception_lineno = exception_keeper_lineno_44;

    goto try_except_handler_45;
    // try continue handler code:
    try_continue_handler_49:;
    // Restore previous exception id 7.
    SET_CURRENT_EXCEPTION(exception_preserved_type_7, exception_preserved_value_7, exception_preserved_tb_7);

    goto loop_start_16;
    // End of try:
    // End of try:
    try_end_27:;
    branch_no_44:;
    {
        nuitka_bool tmp_condition_result_46;
        int tmp_truth_name_13;
        if (par_usecols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1917;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_45;
        }

        tmp_truth_name_13 = CHECK_IF_TRUE(par_usecols);
        if (tmp_truth_name_13 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1917;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_45;
        }
        tmp_condition_result_46 = tmp_truth_name_13 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_46 == NUITKA_BOOL_TRUE) {
            goto branch_yes_46;
        } else {
            goto branch_no_46;
        }
    }
    branch_yes_46:;
    // Tried code:
    {
        PyObject *tmp_assign_source_123;
        PyObject *tmp_called_name_27;
        PyObject *tmp_expression_name_22;
        PyObject *tmp_args_element_name_29;
        if (par_usecols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1919;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_50;
        }

        tmp_expression_name_22 = par_usecols;
        tmp_called_name_27 = LOOKUP_ATTRIBUTE(tmp_expression_name_22, mod_consts[184]);
        if (tmp_called_name_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1919;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_50;
        }
        if (var_key == NULL) {
            Py_DECREF(tmp_called_name_27);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[40]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1919;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_50;
        }

        tmp_args_element_name_29 = var_key;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1919;
        tmp_assign_source_123 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_27, tmp_args_element_name_29);
        Py_DECREF(tmp_called_name_27);
        if (tmp_assign_source_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1919;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_50;
        }
        {
            PyObject *old = var_key;
            var_key = tmp_assign_source_123;
            Py_XDECREF(old);
        }

    }
    goto try_end_28;
    // Exception handler code:
    try_except_handler_50:;
    exception_keeper_type_45 = exception_type;
    exception_keeper_value_45 = exception_value;
    exception_keeper_tb_45 = exception_tb;
    exception_keeper_lineno_45 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 8.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_8, &exception_preserved_value_8, &exception_preserved_tb_8);

    if (exception_keeper_tb_45 == NULL) {
        exception_keeper_tb_45 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_45);
    } else if (exception_keeper_lineno_45 != 0) {
        exception_keeper_tb_45 = ADD_TRACEBACK(exception_keeper_tb_45, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_45);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_45, &exception_keeper_value_45, &exception_keeper_tb_45);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_45, exception_keeper_tb_45);
    PUBLISH_EXCEPTION(&exception_keeper_type_45, &exception_keeper_value_45, &exception_keeper_tb_45);
    // Tried code:
    {
        bool tmp_condition_result_47;
        PyObject *tmp_compexpr_left_31;
        PyObject *tmp_compexpr_right_31;
        tmp_compexpr_left_31 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_31 = PyExc_ValueError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_31, tmp_compexpr_right_31);
        assert(!(tmp_res == -1));
        tmp_condition_result_47 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_47 != false) {
            goto branch_yes_47;
        } else {
            goto branch_no_47;
        }
    }
    branch_yes_47:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1918;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_51;
    branch_no_47:;
    goto try_end_29;
    // Exception handler code:
    try_except_handler_51:;
    exception_keeper_type_46 = exception_type;
    exception_keeper_value_46 = exception_value;
    exception_keeper_tb_46 = exception_tb;
    exception_keeper_lineno_46 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 8.
    SET_CURRENT_EXCEPTION(exception_preserved_type_8, exception_preserved_value_8, exception_preserved_tb_8);

    // Re-raise.
    exception_type = exception_keeper_type_46;
    exception_value = exception_keeper_value_46;
    exception_tb = exception_keeper_tb_46;
    exception_lineno = exception_keeper_lineno_46;

    goto try_except_handler_45;
    // End of try:
    try_end_29:;
    // Restore previous exception id 8.
    SET_CURRENT_EXCEPTION(exception_preserved_type_8, exception_preserved_value_8, exception_preserved_tb_8);

    goto try_end_28;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_28:;
    branch_no_46:;
    {
        PyObject *tmp_ass_subvalue_3;
        PyObject *tmp_ass_subscribed_3;
        PyObject *tmp_ass_subscript_3;
        CHECK_OBJECT(var_val);
        tmp_ass_subvalue_3 = var_val;
        if (par_filling_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[327]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1923;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_45;
        }

        tmp_ass_subscribed_3 = par_filling_values;
        if (var_key == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[40]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1923;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_45;
        }

        tmp_ass_subscript_3 = var_key;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1923;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_45;
        }
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1908;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_45;
    }
    goto loop_start_16;
    loop_end_16:;
    goto try_end_30;
    // Exception handler code:
    try_except_handler_45:;
    exception_keeper_type_47 = exception_type;
    exception_keeper_value_47 = exception_value;
    exception_keeper_tb_47 = exception_tb;
    exception_keeper_lineno_47 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_8__iter_value);
    tmp_for_loop_8__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_8__for_iterator);
    Py_DECREF(tmp_for_loop_8__for_iterator);
    tmp_for_loop_8__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_47;
    exception_value = exception_keeper_value_47;
    exception_tb = exception_keeper_tb_47;
    exception_lineno = exception_keeper_lineno_47;

    goto try_except_handler_7;
    // End of try:
    try_end_30:;
    Py_XDECREF(tmp_for_loop_8__iter_value);
    tmp_for_loop_8__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_8__for_iterator);
    Py_DECREF(tmp_for_loop_8__for_iterator);
    tmp_for_loop_8__for_iterator = NULL;
    goto branch_end_43;
    branch_no_43:;
    {
        nuitka_bool tmp_condition_result_48;
        PyObject *tmp_isinstance_inst_10;
        PyObject *tmp_isinstance_cls_10;
        CHECK_OBJECT(var_user_filling_values);
        tmp_isinstance_inst_10 = var_user_filling_values;
        tmp_isinstance_cls_10 = mod_consts[275];
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_10, tmp_isinstance_cls_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1925;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_48 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_48 == NUITKA_BOOL_TRUE) {
            goto branch_yes_48;
        } else {
            goto branch_no_48;
        }
    }
    branch_yes_48:;
    {
        PyObject *tmp_assign_source_124;
        PyObject *tmp_len_arg_5;
        CHECK_OBJECT(var_user_filling_values);
        tmp_len_arg_5 = var_user_filling_values;
        tmp_assign_source_124 = BUILTIN_LEN(tmp_len_arg_5);
        if (tmp_assign_source_124 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1926;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_n == NULL);
        var_n = tmp_assign_source_124;
    }
    {
        bool tmp_condition_result_49;
        PyObject *tmp_compexpr_left_32;
        PyObject *tmp_compexpr_right_32;
        PyObject *tmp_tmp_condition_result_49_object_1;
        CHECK_OBJECT(var_n);
        tmp_compexpr_left_32 = var_n;
        CHECK_OBJECT(var_nbcols);
        tmp_compexpr_right_32 = var_nbcols;
        tmp_tmp_condition_result_49_object_1 = RICH_COMPARE_LE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_32, tmp_compexpr_right_32);
        assert(!(tmp_tmp_condition_result_49_object_1 == NULL));
        tmp_condition_result_49 = CHECK_IF_TRUE(tmp_tmp_condition_result_49_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_49_object_1);
        if (tmp_condition_result_49 != false) {
            goto branch_yes_49;
        } else {
            goto branch_no_49;
        }
    }
    branch_yes_49:;
    {
        PyObject *tmp_ass_subvalue_4;
        PyObject *tmp_ass_subscribed_4;
        PyObject *tmp_ass_subscript_4;
        PyObject *tmp_stop_name_1;
        CHECK_OBJECT(var_user_filling_values);
        tmp_ass_subvalue_4 = var_user_filling_values;
        CHECK_OBJECT(par_filling_values);
        tmp_ass_subscribed_4 = par_filling_values;
        CHECK_OBJECT(var_n);
        tmp_stop_name_1 = var_n;
        tmp_ass_subscript_4 = MAKE_SLICEOBJ1(tmp_stop_name_1);
        assert(!(tmp_ass_subscript_4 == NULL));
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4);
        Py_DECREF(tmp_ass_subscript_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1928;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
    }
    goto branch_end_49;
    branch_no_49:;
    {
        PyObject *tmp_assign_source_125;
        PyObject *tmp_expression_name_23;
        PyObject *tmp_subscript_name_6;
        PyObject *tmp_stop_name_2;
        CHECK_OBJECT(var_user_filling_values);
        tmp_expression_name_23 = var_user_filling_values;
        CHECK_OBJECT(var_nbcols);
        tmp_stop_name_2 = var_nbcols;
        tmp_subscript_name_6 = MAKE_SLICEOBJ1(tmp_stop_name_2);
        assert(!(tmp_subscript_name_6 == NULL));
        tmp_assign_source_125 = LOOKUP_SUBSCRIPT(tmp_expression_name_23, tmp_subscript_name_6);
        Py_DECREF(tmp_subscript_name_6);
        if (tmp_assign_source_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1930;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = par_filling_values;
            assert(old != NULL);
            par_filling_values = tmp_assign_source_125;
            Py_DECREF(old);
        }

    }
    branch_end_49:;
    goto branch_end_48;
    branch_no_48:;
    {
        PyObject *tmp_assign_source_126;
        PyObject *tmp_left_name_6;
        PyObject *tmp_list_element_4;
        PyObject *tmp_right_name_6;
        CHECK_OBJECT(var_user_filling_values);
        tmp_list_element_4 = var_user_filling_values;
        tmp_left_name_6 = PyList_New(1);
        PyList_SET_ITEM0(tmp_left_name_6, 0, tmp_list_element_4);
        CHECK_OBJECT(var_nbcols);
        tmp_right_name_6 = var_nbcols;
        tmp_assign_source_126 = BINARY_OPERATION_MULT_OBJECT_LIST_LONG(tmp_left_name_6, tmp_right_name_6);
        Py_DECREF(tmp_left_name_6);
        assert(!(tmp_assign_source_126 == NULL));
        {
            PyObject *old = par_filling_values;
            assert(old != NULL);
            par_filling_values = tmp_assign_source_126;
            Py_DECREF(old);
        }

    }
    branch_end_48:;
    branch_end_43:;
    {
        bool tmp_condition_result_50;
        PyObject *tmp_compexpr_left_33;
        PyObject *tmp_compexpr_right_33;
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1936;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_compexpr_left_33 = par_dtype;
        tmp_compexpr_right_33 = Py_None;
        tmp_condition_result_50 = (tmp_compexpr_left_33 == tmp_compexpr_right_33) ? true : false;
        if (tmp_condition_result_50 != false) {
            goto branch_yes_50;
        } else {
            goto branch_no_50;
        }
    }
    branch_yes_50:;
    {
        PyObject *tmp_assign_source_127;
        // Tried code:
        {
            PyObject *tmp_assign_source_128;
            PyObject *tmp_iter_arg_21;
            PyObject *tmp_called_name_28;
            PyObject *tmp_args_element_name_30;
            PyObject *tmp_args_element_name_31;
            tmp_called_name_28 = (PyObject *)&PyZip_Type;
            if (par_missing_values == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[322]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1940;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_52;
            }

            tmp_args_element_name_30 = par_missing_values;
            if (par_filling_values == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[327]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1940;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_52;
            }

            tmp_args_element_name_31 = par_filling_values;
            frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1940;
            {
                PyObject *call_args[] = {tmp_args_element_name_30, tmp_args_element_name_31};
                tmp_iter_arg_21 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_28, call_args);
            }

            if (tmp_iter_arg_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1940;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_52;
            }
            tmp_assign_source_128 = MAKE_ITERATOR(tmp_iter_arg_21);
            Py_DECREF(tmp_iter_arg_21);
            if (tmp_assign_source_128 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1939;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_52;
            }
            assert(tmp_listcomp_8__$0 == NULL);
            tmp_listcomp_8__$0 = tmp_assign_source_128;
        }
        {
            PyObject *tmp_assign_source_129;
            tmp_assign_source_129 = PyList_New(0);
            assert(tmp_listcomp_8__contraction == NULL);
            tmp_listcomp_8__contraction = tmp_assign_source_129;
        }
        if (isFrameUnusable(cache_frame_6ca4a6654d5b785088184b5bae7a118f_9)) {
            Py_XDECREF(cache_frame_6ca4a6654d5b785088184b5bae7a118f_9);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6ca4a6654d5b785088184b5bae7a118f_9 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6ca4a6654d5b785088184b5bae7a118f_9 = MAKE_FUNCTION_FRAME(codeobj_6ca4a6654d5b785088184b5bae7a118f, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6ca4a6654d5b785088184b5bae7a118f_9->m_type_description == NULL);
        frame_6ca4a6654d5b785088184b5bae7a118f_9 = cache_frame_6ca4a6654d5b785088184b5bae7a118f_9;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6ca4a6654d5b785088184b5bae7a118f_9);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6ca4a6654d5b785088184b5bae7a118f_9) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_17:;
        {
            PyObject *tmp_next_source_16;
            PyObject *tmp_assign_source_130;
            CHECK_OBJECT(tmp_listcomp_8__$0);
            tmp_next_source_16 = tmp_listcomp_8__$0;
            tmp_assign_source_130 = ITERATOR_NEXT(tmp_next_source_16);
            if (tmp_assign_source_130 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_17;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 1939;
                    goto try_except_handler_53;
                }
            }

            {
                PyObject *old = tmp_listcomp_8__iter_value_0;
                tmp_listcomp_8__iter_value_0 = tmp_assign_source_130;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_131;
            PyObject *tmp_iter_arg_22;
            CHECK_OBJECT(tmp_listcomp_8__iter_value_0);
            tmp_iter_arg_22 = tmp_listcomp_8__iter_value_0;
            tmp_assign_source_131 = MAKE_ITERATOR(tmp_iter_arg_22);
            if (tmp_assign_source_131 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1939;
                type_description_2 = "oo";
                goto try_except_handler_54;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__source_iter;
                tmp_listcomp$tuple_unpack_1__source_iter = tmp_assign_source_131;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_132;
            PyObject *tmp_unpack_9;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_unpack_9 = tmp_listcomp$tuple_unpack_1__source_iter;
            tmp_assign_source_132 = UNPACK_NEXT(tmp_unpack_9, 0, 2);
            if (tmp_assign_source_132 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "oo";
                exception_lineno = 1939;
                goto try_except_handler_55;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__element_1;
                tmp_listcomp$tuple_unpack_1__element_1 = tmp_assign_source_132;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_133;
            PyObject *tmp_unpack_10;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_unpack_10 = tmp_listcomp$tuple_unpack_1__source_iter;
            tmp_assign_source_133 = UNPACK_NEXT(tmp_unpack_10, 1, 2);
            if (tmp_assign_source_133 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "oo";
                exception_lineno = 1939;
                goto try_except_handler_55;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__element_2;
                tmp_listcomp$tuple_unpack_1__element_2 = tmp_assign_source_133;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_5;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_iterator_name_5 = tmp_listcomp$tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_5); assert(HAS_ITERNEXT(tmp_iterator_name_5));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_5)->tp_iternext)(tmp_iterator_name_5);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "oo";
                        exception_lineno = 1939;
                        goto try_except_handler_55;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[94];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "oo";
                exception_lineno = 1939;
                goto try_except_handler_55;
            }
        }
        goto try_end_31;
        // Exception handler code:
        try_except_handler_55:;
        exception_keeper_type_48 = exception_type;
        exception_keeper_value_48 = exception_value;
        exception_keeper_tb_48 = exception_tb;
        exception_keeper_lineno_48 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_1__source_iter);
        tmp_listcomp$tuple_unpack_1__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_48;
        exception_value = exception_keeper_value_48;
        exception_tb = exception_keeper_tb_48;
        exception_lineno = exception_keeper_lineno_48;

        goto try_except_handler_54;
        // End of try:
        try_end_31:;
        goto try_end_32;
        // Exception handler code:
        try_except_handler_54:;
        exception_keeper_type_49 = exception_type;
        exception_keeper_value_49 = exception_value;
        exception_keeper_tb_49 = exception_tb;
        exception_keeper_lineno_49 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_1);
        tmp_listcomp$tuple_unpack_1__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_2);
        tmp_listcomp$tuple_unpack_1__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_49;
        exception_value = exception_keeper_value_49;
        exception_tb = exception_keeper_tb_49;
        exception_lineno = exception_keeper_lineno_49;

        goto try_except_handler_53;
        // End of try:
        try_end_32:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_1__source_iter);
        tmp_listcomp$tuple_unpack_1__source_iter = NULL;
        {
            PyObject *tmp_assign_source_134;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__element_1);
            tmp_assign_source_134 = tmp_listcomp$tuple_unpack_1__element_1;
            {
                PyObject *old = outline_7_var_miss;
                outline_7_var_miss = tmp_assign_source_134;
                Py_INCREF(outline_7_var_miss);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_1);
        tmp_listcomp$tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_135;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__element_2);
            tmp_assign_source_135 = tmp_listcomp$tuple_unpack_1__element_2;
            {
                PyObject *old = outline_7_var_fill;
                outline_7_var_fill = tmp_assign_source_135;
                Py_INCREF(outline_7_var_fill);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_2);
        tmp_listcomp$tuple_unpack_1__element_2 = NULL;

        {
            PyObject *tmp_append_list_8;
            PyObject *tmp_append_value_8;
            PyObject *tmp_called_name_29;
            PyObject *tmp_kw_call_value_0_3;
            PyObject *tmp_kw_call_value_1_3;
            CHECK_OBJECT(tmp_listcomp_8__contraction);
            tmp_append_list_8 = tmp_listcomp_8__contraction;
            tmp_called_name_29 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[328]);

            if (unlikely(tmp_called_name_29 == NULL)) {
                tmp_called_name_29 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[328]);
            }

            if (tmp_called_name_29 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1939;
                type_description_2 = "oo";
                goto try_except_handler_53;
            }
            CHECK_OBJECT(outline_7_var_miss);
            tmp_kw_call_value_0_3 = outline_7_var_miss;
            CHECK_OBJECT(outline_7_var_fill);
            tmp_kw_call_value_1_3 = outline_7_var_fill;
            frame_6ca4a6654d5b785088184b5bae7a118f_9->m_frame.f_lineno = 1939;
            {
                PyObject *kw_values[2] = {tmp_kw_call_value_0_3, tmp_kw_call_value_1_3};
                tmp_append_value_8 = CALL_FUNCTION_WITH_POSARGS1_KWSPLIT(tmp_called_name_29, mod_consts[329], kw_values, mod_consts[330]);
            }

            if (tmp_append_value_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1939;
                type_description_2 = "oo";
                goto try_except_handler_53;
            }
            assert(PyList_Check(tmp_append_list_8));
            tmp_result = LIST_APPEND1(tmp_append_list_8, tmp_append_value_8);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1939;
                type_description_2 = "oo";
                goto try_except_handler_53;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1939;
            type_description_2 = "oo";
            goto try_except_handler_53;
        }
        goto loop_start_17;
        loop_end_17:;
        CHECK_OBJECT(tmp_listcomp_8__contraction);
        tmp_assign_source_127 = tmp_listcomp_8__contraction;
        Py_INCREF(tmp_assign_source_127);
        goto try_return_handler_53;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_53:;
        CHECK_OBJECT(tmp_listcomp_8__$0);
        Py_DECREF(tmp_listcomp_8__$0);
        tmp_listcomp_8__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_8__contraction);
        Py_DECREF(tmp_listcomp_8__contraction);
        tmp_listcomp_8__contraction = NULL;
        Py_XDECREF(tmp_listcomp_8__iter_value_0);
        tmp_listcomp_8__iter_value_0 = NULL;
        goto frame_return_exit_9;
        // Exception handler code:
        try_except_handler_53:;
        exception_keeper_type_50 = exception_type;
        exception_keeper_value_50 = exception_value;
        exception_keeper_tb_50 = exception_tb;
        exception_keeper_lineno_50 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_8__$0);
        Py_DECREF(tmp_listcomp_8__$0);
        tmp_listcomp_8__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_8__contraction);
        Py_DECREF(tmp_listcomp_8__contraction);
        tmp_listcomp_8__contraction = NULL;
        Py_XDECREF(tmp_listcomp_8__iter_value_0);
        tmp_listcomp_8__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_50;
        exception_value = exception_keeper_value_50;
        exception_tb = exception_keeper_tb_50;
        exception_lineno = exception_keeper_lineno_50;

        goto frame_exception_exit_9;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6ca4a6654d5b785088184b5bae7a118f_9);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_8;

        frame_return_exit_9:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_6ca4a6654d5b785088184b5bae7a118f_9);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_52;

        frame_exception_exit_9:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6ca4a6654d5b785088184b5bae7a118f_9);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6ca4a6654d5b785088184b5bae7a118f_9, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6ca4a6654d5b785088184b5bae7a118f_9->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6ca4a6654d5b785088184b5bae7a118f_9, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6ca4a6654d5b785088184b5bae7a118f_9,
            type_description_2,
            outline_7_var_miss,
            outline_7_var_fill
        );


        // Release cached frame if used for exception.
        if (frame_6ca4a6654d5b785088184b5bae7a118f_9 == cache_frame_6ca4a6654d5b785088184b5bae7a118f_9) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6ca4a6654d5b785088184b5bae7a118f_9);
            cache_frame_6ca4a6654d5b785088184b5bae7a118f_9 = NULL;
        }

        assertFrameObject(frame_6ca4a6654d5b785088184b5bae7a118f_9);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_8;

        frame_no_exception_8:;
        goto skip_nested_handling_8;
        nested_frame_exit_8:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_52;
        skip_nested_handling_8:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_52:;
        Py_XDECREF(outline_7_var_miss);
        outline_7_var_miss = NULL;
        Py_XDECREF(outline_7_var_fill);
        outline_7_var_fill = NULL;
        goto outline_result_8;
        // Exception handler code:
        try_except_handler_52:;
        exception_keeper_type_51 = exception_type;
        exception_keeper_value_51 = exception_value;
        exception_keeper_tb_51 = exception_tb;
        exception_keeper_lineno_51 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_7_var_miss);
        outline_7_var_miss = NULL;
        Py_XDECREF(outline_7_var_fill);
        outline_7_var_fill = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_51;
        exception_value = exception_keeper_value_51;
        exception_tb = exception_keeper_tb_51;
        exception_lineno = exception_keeper_lineno_51;

        goto outline_exception_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_8:;
        exception_lineno = 1939;
        goto try_except_handler_7;
        outline_result_8:;
        {
            PyObject *old = par_converters;
            assert(old != NULL);
            par_converters = tmp_assign_source_127;
            Py_DECREF(old);
        }

    }
    goto branch_end_50;
    branch_no_50:;
    {
        PyObject *tmp_assign_source_136;
        PyObject *tmp_called_name_30;
        PyObject *tmp_args_name_2;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_kwargs_name_2;
        tmp_called_name_30 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[331]);

        if (unlikely(tmp_called_name_30 == NULL)) {
            tmp_called_name_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[331]);
        }

        if (tmp_called_name_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1942;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1942;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_tuple_element_2 = par_dtype;
        tmp_args_name_2 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_args_name_2, 0, tmp_tuple_element_2);
        tmp_kwargs_name_2 = PyDict_Copy(mod_consts[332]);
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1942;
        tmp_assign_source_136 = CALL_FUNCTION(tmp_called_name_30, tmp_args_name_2, tmp_kwargs_name_2);
        Py_DECREF(tmp_args_name_2);
        Py_DECREF(tmp_kwargs_name_2);
        if (tmp_assign_source_136 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1942;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_dtype_flat == NULL);
        var_dtype_flat = tmp_assign_source_136;
    }
    {
        bool tmp_condition_result_51;
        PyObject *tmp_compexpr_left_34;
        PyObject *tmp_compexpr_right_34;
        PyObject *tmp_len_arg_6;
        PyObject *tmp_tmp_condition_result_51_object_1;
        CHECK_OBJECT(var_dtype_flat);
        tmp_len_arg_6 = var_dtype_flat;
        tmp_compexpr_left_34 = BUILTIN_LEN(tmp_len_arg_6);
        if (tmp_compexpr_left_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1944;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_compexpr_right_34 = mod_consts[63];
        tmp_tmp_condition_result_51_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_34, tmp_compexpr_right_34);
        Py_DECREF(tmp_compexpr_left_34);
        assert(!(tmp_tmp_condition_result_51_object_1 == NULL));
        tmp_condition_result_51 = CHECK_IF_TRUE(tmp_tmp_condition_result_51_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_51_object_1);
        if (tmp_condition_result_51 != false) {
            goto branch_yes_51;
        } else {
            goto branch_no_51;
        }
    }
    branch_yes_51:;
    {
        PyObject *tmp_assign_source_137;
        PyObject *tmp_called_name_31;
        PyObject *tmp_args_element_name_32;
        PyObject *tmp_args_element_name_33;
        PyObject *tmp_args_element_name_34;
        tmp_called_name_31 = (PyObject *)&PyZip_Type;
        CHECK_OBJECT(var_dtype_flat);
        tmp_args_element_name_32 = var_dtype_flat;
        if (par_missing_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[322]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1946;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_args_element_name_33 = par_missing_values;
        if (par_filling_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[327]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1946;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_args_element_name_34 = par_filling_values;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1946;
        {
            PyObject *call_args[] = {tmp_args_element_name_32, tmp_args_element_name_33, tmp_args_element_name_34};
            tmp_assign_source_137 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_31, call_args);
        }

        if (tmp_assign_source_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1946;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_zipit == NULL);
        var_zipit = tmp_assign_source_137;
    }
    {
        PyObject *tmp_assign_source_138;
        // Tried code:
        {
            PyObject *tmp_assign_source_139;
            PyObject *tmp_iter_arg_23;
            CHECK_OBJECT(var_zipit);
            tmp_iter_arg_23 = var_zipit;
            tmp_assign_source_139 = MAKE_ITERATOR(tmp_iter_arg_23);
            if (tmp_assign_source_139 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1947;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_56;
            }
            assert(tmp_listcomp_9__$0 == NULL);
            tmp_listcomp_9__$0 = tmp_assign_source_139;
        }
        {
            PyObject *tmp_assign_source_140;
            tmp_assign_source_140 = PyList_New(0);
            assert(tmp_listcomp_9__contraction == NULL);
            tmp_listcomp_9__contraction = tmp_assign_source_140;
        }
        if (isFrameUnusable(cache_frame_bc9829d011bfeb1390ef1732dd00886d_10)) {
            Py_XDECREF(cache_frame_bc9829d011bfeb1390ef1732dd00886d_10);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bc9829d011bfeb1390ef1732dd00886d_10 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bc9829d011bfeb1390ef1732dd00886d_10 = MAKE_FUNCTION_FRAME(codeobj_bc9829d011bfeb1390ef1732dd00886d, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bc9829d011bfeb1390ef1732dd00886d_10->m_type_description == NULL);
        frame_bc9829d011bfeb1390ef1732dd00886d_10 = cache_frame_bc9829d011bfeb1390ef1732dd00886d_10;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bc9829d011bfeb1390ef1732dd00886d_10);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bc9829d011bfeb1390ef1732dd00886d_10) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_18:;
        {
            PyObject *tmp_next_source_17;
            PyObject *tmp_assign_source_141;
            CHECK_OBJECT(tmp_listcomp_9__$0);
            tmp_next_source_17 = tmp_listcomp_9__$0;
            tmp_assign_source_141 = ITERATOR_NEXT(tmp_next_source_17);
            if (tmp_assign_source_141 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_18;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "ooo";
                    exception_lineno = 1947;
                    goto try_except_handler_57;
                }
            }

            {
                PyObject *old = tmp_listcomp_9__iter_value_0;
                tmp_listcomp_9__iter_value_0 = tmp_assign_source_141;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_142;
            PyObject *tmp_iter_arg_24;
            CHECK_OBJECT(tmp_listcomp_9__iter_value_0);
            tmp_iter_arg_24 = tmp_listcomp_9__iter_value_0;
            tmp_assign_source_142 = MAKE_ITERATOR(tmp_iter_arg_24);
            if (tmp_assign_source_142 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1947;
                type_description_2 = "ooo";
                goto try_except_handler_58;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_2__source_iter;
                tmp_listcomp$tuple_unpack_2__source_iter = tmp_assign_source_142;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_143;
            PyObject *tmp_unpack_11;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_2__source_iter);
            tmp_unpack_11 = tmp_listcomp$tuple_unpack_2__source_iter;
            tmp_assign_source_143 = UNPACK_NEXT(tmp_unpack_11, 0, 3);
            if (tmp_assign_source_143 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 1947;
                goto try_except_handler_59;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_2__element_1;
                tmp_listcomp$tuple_unpack_2__element_1 = tmp_assign_source_143;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_144;
            PyObject *tmp_unpack_12;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_2__source_iter);
            tmp_unpack_12 = tmp_listcomp$tuple_unpack_2__source_iter;
            tmp_assign_source_144 = UNPACK_NEXT(tmp_unpack_12, 1, 3);
            if (tmp_assign_source_144 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 1947;
                goto try_except_handler_59;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_2__element_2;
                tmp_listcomp$tuple_unpack_2__element_2 = tmp_assign_source_144;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_145;
            PyObject *tmp_unpack_13;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_2__source_iter);
            tmp_unpack_13 = tmp_listcomp$tuple_unpack_2__source_iter;
            tmp_assign_source_145 = UNPACK_NEXT(tmp_unpack_13, 2, 3);
            if (tmp_assign_source_145 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 1947;
                goto try_except_handler_59;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_2__element_3;
                tmp_listcomp$tuple_unpack_2__element_3 = tmp_assign_source_145;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_6;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_2__source_iter);
            tmp_iterator_name_6 = tmp_listcomp$tuple_unpack_2__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_6); assert(HAS_ITERNEXT(tmp_iterator_name_6));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_6)->tp_iternext)(tmp_iterator_name_6);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "ooo";
                        exception_lineno = 1947;
                        goto try_except_handler_59;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[333];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "ooo";
                exception_lineno = 1947;
                goto try_except_handler_59;
            }
        }
        goto try_end_33;
        // Exception handler code:
        try_except_handler_59:;
        exception_keeper_type_52 = exception_type;
        exception_keeper_value_52 = exception_value;
        exception_keeper_tb_52 = exception_tb;
        exception_keeper_lineno_52 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_2__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_2__source_iter);
        tmp_listcomp$tuple_unpack_2__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_52;
        exception_value = exception_keeper_value_52;
        exception_tb = exception_keeper_tb_52;
        exception_lineno = exception_keeper_lineno_52;

        goto try_except_handler_58;
        // End of try:
        try_end_33:;
        goto try_end_34;
        // Exception handler code:
        try_except_handler_58:;
        exception_keeper_type_53 = exception_type;
        exception_keeper_value_53 = exception_value;
        exception_keeper_tb_53 = exception_tb;
        exception_keeper_lineno_53 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_2__element_1);
        tmp_listcomp$tuple_unpack_2__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_2__element_2);
        tmp_listcomp$tuple_unpack_2__element_2 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_2__element_3);
        tmp_listcomp$tuple_unpack_2__element_3 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_53;
        exception_value = exception_keeper_value_53;
        exception_tb = exception_keeper_tb_53;
        exception_lineno = exception_keeper_lineno_53;

        goto try_except_handler_57;
        // End of try:
        try_end_34:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_2__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_2__source_iter);
        tmp_listcomp$tuple_unpack_2__source_iter = NULL;
        {
            PyObject *tmp_assign_source_146;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_2__element_1);
            tmp_assign_source_146 = tmp_listcomp$tuple_unpack_2__element_1;
            {
                PyObject *old = outline_8_var_dt;
                outline_8_var_dt = tmp_assign_source_146;
                Py_INCREF(outline_8_var_dt);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_2__element_1);
        tmp_listcomp$tuple_unpack_2__element_1 = NULL;

        {
            PyObject *tmp_assign_source_147;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_2__element_2);
            tmp_assign_source_147 = tmp_listcomp$tuple_unpack_2__element_2;
            {
                PyObject *old = outline_8_var_miss;
                outline_8_var_miss = tmp_assign_source_147;
                Py_INCREF(outline_8_var_miss);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_2__element_2);
        tmp_listcomp$tuple_unpack_2__element_2 = NULL;

        {
            PyObject *tmp_assign_source_148;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_2__element_3);
            tmp_assign_source_148 = tmp_listcomp$tuple_unpack_2__element_3;
            {
                PyObject *old = outline_8_var_fill;
                outline_8_var_fill = tmp_assign_source_148;
                Py_INCREF(outline_8_var_fill);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_2__element_3);
        tmp_listcomp$tuple_unpack_2__element_3 = NULL;

        {
            PyObject *tmp_append_list_9;
            PyObject *tmp_append_value_9;
            PyObject *tmp_called_name_32;
            PyObject *tmp_kw_call_arg_value_0_3;
            PyObject *tmp_kw_call_dict_value_0_3;
            PyObject *tmp_kw_call_dict_value_1_2;
            PyObject *tmp_kw_call_dict_value_2_2;
            CHECK_OBJECT(tmp_listcomp_9__contraction);
            tmp_append_list_9 = tmp_listcomp_9__contraction;
            tmp_called_name_32 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[328]);

            if (unlikely(tmp_called_name_32 == NULL)) {
                tmp_called_name_32 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[328]);
            }

            if (tmp_called_name_32 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1947;
                type_description_2 = "ooo";
                goto try_except_handler_57;
            }
            CHECK_OBJECT(outline_8_var_dt);
            tmp_kw_call_arg_value_0_3 = outline_8_var_dt;
            tmp_kw_call_dict_value_0_3 = Py_True;
            CHECK_OBJECT(outline_8_var_miss);
            tmp_kw_call_dict_value_1_2 = outline_8_var_miss;
            CHECK_OBJECT(outline_8_var_fill);
            tmp_kw_call_dict_value_2_2 = outline_8_var_fill;
            frame_bc9829d011bfeb1390ef1732dd00886d_10->m_frame.f_lineno = 1947;
            {
                PyObject *args[] = {tmp_kw_call_arg_value_0_3};
                PyObject *kw_values[3] = {tmp_kw_call_dict_value_0_3, tmp_kw_call_dict_value_1_2, tmp_kw_call_dict_value_2_2};
                tmp_append_value_9 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_32, args, kw_values, mod_consts[334]);
            }

            if (tmp_append_value_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1947;
                type_description_2 = "ooo";
                goto try_except_handler_57;
            }
            assert(PyList_Check(tmp_append_list_9));
            tmp_result = LIST_APPEND1(tmp_append_list_9, tmp_append_value_9);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1947;
                type_description_2 = "ooo";
                goto try_except_handler_57;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1947;
            type_description_2 = "ooo";
            goto try_except_handler_57;
        }
        goto loop_start_18;
        loop_end_18:;
        CHECK_OBJECT(tmp_listcomp_9__contraction);
        tmp_assign_source_138 = tmp_listcomp_9__contraction;
        Py_INCREF(tmp_assign_source_138);
        goto try_return_handler_57;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_57:;
        CHECK_OBJECT(tmp_listcomp_9__$0);
        Py_DECREF(tmp_listcomp_9__$0);
        tmp_listcomp_9__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_9__contraction);
        Py_DECREF(tmp_listcomp_9__contraction);
        tmp_listcomp_9__contraction = NULL;
        Py_XDECREF(tmp_listcomp_9__iter_value_0);
        tmp_listcomp_9__iter_value_0 = NULL;
        goto frame_return_exit_10;
        // Exception handler code:
        try_except_handler_57:;
        exception_keeper_type_54 = exception_type;
        exception_keeper_value_54 = exception_value;
        exception_keeper_tb_54 = exception_tb;
        exception_keeper_lineno_54 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_9__$0);
        Py_DECREF(tmp_listcomp_9__$0);
        tmp_listcomp_9__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_9__contraction);
        Py_DECREF(tmp_listcomp_9__contraction);
        tmp_listcomp_9__contraction = NULL;
        Py_XDECREF(tmp_listcomp_9__iter_value_0);
        tmp_listcomp_9__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_54;
        exception_value = exception_keeper_value_54;
        exception_tb = exception_keeper_tb_54;
        exception_lineno = exception_keeper_lineno_54;

        goto frame_exception_exit_10;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bc9829d011bfeb1390ef1732dd00886d_10);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_9;

        frame_return_exit_10:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_bc9829d011bfeb1390ef1732dd00886d_10);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_56;

        frame_exception_exit_10:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bc9829d011bfeb1390ef1732dd00886d_10);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bc9829d011bfeb1390ef1732dd00886d_10, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bc9829d011bfeb1390ef1732dd00886d_10->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bc9829d011bfeb1390ef1732dd00886d_10, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bc9829d011bfeb1390ef1732dd00886d_10,
            type_description_2,
            outline_8_var_dt,
            outline_8_var_miss,
            outline_8_var_fill
        );


        // Release cached frame if used for exception.
        if (frame_bc9829d011bfeb1390ef1732dd00886d_10 == cache_frame_bc9829d011bfeb1390ef1732dd00886d_10) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bc9829d011bfeb1390ef1732dd00886d_10);
            cache_frame_bc9829d011bfeb1390ef1732dd00886d_10 = NULL;
        }

        assertFrameObject(frame_bc9829d011bfeb1390ef1732dd00886d_10);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_9;

        frame_no_exception_9:;
        goto skip_nested_handling_9;
        nested_frame_exit_9:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_56;
        skip_nested_handling_9:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_56:;
        Py_XDECREF(outline_8_var_dt);
        outline_8_var_dt = NULL;
        Py_XDECREF(outline_8_var_miss);
        outline_8_var_miss = NULL;
        Py_XDECREF(outline_8_var_fill);
        outline_8_var_fill = NULL;
        goto outline_result_9;
        // Exception handler code:
        try_except_handler_56:;
        exception_keeper_type_55 = exception_type;
        exception_keeper_value_55 = exception_value;
        exception_keeper_tb_55 = exception_tb;
        exception_keeper_lineno_55 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_8_var_dt);
        outline_8_var_dt = NULL;
        Py_XDECREF(outline_8_var_miss);
        outline_8_var_miss = NULL;
        Py_XDECREF(outline_8_var_fill);
        outline_8_var_fill = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_55;
        exception_value = exception_keeper_value_55;
        exception_tb = exception_keeper_tb_55;
        exception_lineno = exception_keeper_lineno_55;

        goto outline_exception_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_9:;
        exception_lineno = 1947;
        goto try_except_handler_7;
        outline_result_9:;
        {
            PyObject *old = par_converters;
            assert(old != NULL);
            par_converters = tmp_assign_source_138;
            Py_DECREF(old);
        }

    }
    goto branch_end_51;
    branch_no_51:;
    {
        PyObject *tmp_assign_source_149;
        PyObject *tmp_called_name_33;
        PyObject *tmp_args_element_name_35;
        PyObject *tmp_args_element_name_36;
        tmp_called_name_33 = (PyObject *)&PyZip_Type;
        if (par_missing_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[322]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1952;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_args_element_name_35 = par_missing_values;
        if (par_filling_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[327]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1952;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_args_element_name_36 = par_filling_values;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1952;
        {
            PyObject *call_args[] = {tmp_args_element_name_35, tmp_args_element_name_36};
            tmp_assign_source_149 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_33, call_args);
        }

        if (tmp_assign_source_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1952;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_zipit == NULL);
        var_zipit = tmp_assign_source_149;
    }
    {
        PyObject *tmp_assign_source_150;
        // Tried code:
        {
            PyObject *tmp_assign_source_151;
            PyObject *tmp_iter_arg_25;
            CHECK_OBJECT(var_zipit);
            tmp_iter_arg_25 = var_zipit;
            tmp_assign_source_151 = MAKE_ITERATOR(tmp_iter_arg_25);
            if (tmp_assign_source_151 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1953;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_60;
            }
            assert(tmp_listcomp_10__$0 == NULL);
            tmp_listcomp_10__$0 = tmp_assign_source_151;
        }
        {
            PyObject *tmp_assign_source_152;
            tmp_assign_source_152 = PyList_New(0);
            assert(tmp_listcomp_10__contraction == NULL);
            tmp_listcomp_10__contraction = tmp_assign_source_152;
        }
        if (isFrameUnusable(cache_frame_78a8dba6d77a7a8c47a1383725ec744d_11)) {
            Py_XDECREF(cache_frame_78a8dba6d77a7a8c47a1383725ec744d_11);

#if _DEBUG_REFCOUNTS
            if (cache_frame_78a8dba6d77a7a8c47a1383725ec744d_11 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_78a8dba6d77a7a8c47a1383725ec744d_11 = MAKE_FUNCTION_FRAME(codeobj_78a8dba6d77a7a8c47a1383725ec744d, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_78a8dba6d77a7a8c47a1383725ec744d_11->m_type_description == NULL);
        frame_78a8dba6d77a7a8c47a1383725ec744d_11 = cache_frame_78a8dba6d77a7a8c47a1383725ec744d_11;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_78a8dba6d77a7a8c47a1383725ec744d_11);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_78a8dba6d77a7a8c47a1383725ec744d_11) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_19:;
        {
            PyObject *tmp_next_source_18;
            PyObject *tmp_assign_source_153;
            CHECK_OBJECT(tmp_listcomp_10__$0);
            tmp_next_source_18 = tmp_listcomp_10__$0;
            tmp_assign_source_153 = ITERATOR_NEXT(tmp_next_source_18);
            if (tmp_assign_source_153 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_19;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "ooo";
                    exception_lineno = 1953;
                    goto try_except_handler_61;
                }
            }

            {
                PyObject *old = tmp_listcomp_10__iter_value_0;
                tmp_listcomp_10__iter_value_0 = tmp_assign_source_153;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_154;
            PyObject *tmp_iter_arg_26;
            CHECK_OBJECT(tmp_listcomp_10__iter_value_0);
            tmp_iter_arg_26 = tmp_listcomp_10__iter_value_0;
            tmp_assign_source_154 = MAKE_ITERATOR(tmp_iter_arg_26);
            if (tmp_assign_source_154 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1953;
                type_description_2 = "ooo";
                goto try_except_handler_62;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_3__source_iter;
                tmp_listcomp$tuple_unpack_3__source_iter = tmp_assign_source_154;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_155;
            PyObject *tmp_unpack_14;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_3__source_iter);
            tmp_unpack_14 = tmp_listcomp$tuple_unpack_3__source_iter;
            tmp_assign_source_155 = UNPACK_NEXT(tmp_unpack_14, 0, 2);
            if (tmp_assign_source_155 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 1953;
                goto try_except_handler_63;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_3__element_1;
                tmp_listcomp$tuple_unpack_3__element_1 = tmp_assign_source_155;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_156;
            PyObject *tmp_unpack_15;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_3__source_iter);
            tmp_unpack_15 = tmp_listcomp$tuple_unpack_3__source_iter;
            tmp_assign_source_156 = UNPACK_NEXT(tmp_unpack_15, 1, 2);
            if (tmp_assign_source_156 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 1953;
                goto try_except_handler_63;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_3__element_2;
                tmp_listcomp$tuple_unpack_3__element_2 = tmp_assign_source_156;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_7;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_3__source_iter);
            tmp_iterator_name_7 = tmp_listcomp$tuple_unpack_3__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_7); assert(HAS_ITERNEXT(tmp_iterator_name_7));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_7)->tp_iternext)(tmp_iterator_name_7);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "ooo";
                        exception_lineno = 1953;
                        goto try_except_handler_63;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[94];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "ooo";
                exception_lineno = 1953;
                goto try_except_handler_63;
            }
        }
        goto try_end_35;
        // Exception handler code:
        try_except_handler_63:;
        exception_keeper_type_56 = exception_type;
        exception_keeper_value_56 = exception_value;
        exception_keeper_tb_56 = exception_tb;
        exception_keeper_lineno_56 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_3__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_3__source_iter);
        tmp_listcomp$tuple_unpack_3__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_56;
        exception_value = exception_keeper_value_56;
        exception_tb = exception_keeper_tb_56;
        exception_lineno = exception_keeper_lineno_56;

        goto try_except_handler_62;
        // End of try:
        try_end_35:;
        goto try_end_36;
        // Exception handler code:
        try_except_handler_62:;
        exception_keeper_type_57 = exception_type;
        exception_keeper_value_57 = exception_value;
        exception_keeper_tb_57 = exception_tb;
        exception_keeper_lineno_57 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_3__element_1);
        tmp_listcomp$tuple_unpack_3__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_3__element_2);
        tmp_listcomp$tuple_unpack_3__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_57;
        exception_value = exception_keeper_value_57;
        exception_tb = exception_keeper_tb_57;
        exception_lineno = exception_keeper_lineno_57;

        goto try_except_handler_61;
        // End of try:
        try_end_36:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_3__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_3__source_iter);
        tmp_listcomp$tuple_unpack_3__source_iter = NULL;
        {
            PyObject *tmp_assign_source_157;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_3__element_1);
            tmp_assign_source_157 = tmp_listcomp$tuple_unpack_3__element_1;
            {
                PyObject *old = outline_9_var_miss;
                outline_9_var_miss = tmp_assign_source_157;
                Py_INCREF(outline_9_var_miss);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_3__element_1);
        tmp_listcomp$tuple_unpack_3__element_1 = NULL;

        {
            PyObject *tmp_assign_source_158;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_3__element_2);
            tmp_assign_source_158 = tmp_listcomp$tuple_unpack_3__element_2;
            {
                PyObject *old = outline_9_var_fill;
                outline_9_var_fill = tmp_assign_source_158;
                Py_INCREF(outline_9_var_fill);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_3__element_2);
        tmp_listcomp$tuple_unpack_3__element_2 = NULL;

        {
            PyObject *tmp_append_list_10;
            PyObject *tmp_append_value_10;
            PyObject *tmp_called_name_34;
            PyObject *tmp_kw_call_arg_value_0_4;
            PyObject *tmp_kw_call_dict_value_0_4;
            PyObject *tmp_kw_call_dict_value_1_3;
            PyObject *tmp_kw_call_dict_value_2_3;
            CHECK_OBJECT(tmp_listcomp_10__contraction);
            tmp_append_list_10 = tmp_listcomp_10__contraction;
            tmp_called_name_34 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[328]);

            if (unlikely(tmp_called_name_34 == NULL)) {
                tmp_called_name_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[328]);
            }

            if (tmp_called_name_34 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1953;
                type_description_2 = "ooo";
                goto try_except_handler_61;
            }
            if (par_dtype == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[176]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1953;
                type_description_2 = "ooo";
                goto try_except_handler_61;
            }

            tmp_kw_call_arg_value_0_4 = par_dtype;
            tmp_kw_call_dict_value_0_4 = Py_True;
            CHECK_OBJECT(outline_9_var_miss);
            tmp_kw_call_dict_value_1_3 = outline_9_var_miss;
            CHECK_OBJECT(outline_9_var_fill);
            tmp_kw_call_dict_value_2_3 = outline_9_var_fill;
            frame_78a8dba6d77a7a8c47a1383725ec744d_11->m_frame.f_lineno = 1953;
            {
                PyObject *args[] = {tmp_kw_call_arg_value_0_4};
                PyObject *kw_values[3] = {tmp_kw_call_dict_value_0_4, tmp_kw_call_dict_value_1_3, tmp_kw_call_dict_value_2_3};
                tmp_append_value_10 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_34, args, kw_values, mod_consts[334]);
            }

            if (tmp_append_value_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1953;
                type_description_2 = "ooo";
                goto try_except_handler_61;
            }
            assert(PyList_Check(tmp_append_list_10));
            tmp_result = LIST_APPEND1(tmp_append_list_10, tmp_append_value_10);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1953;
                type_description_2 = "ooo";
                goto try_except_handler_61;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1953;
            type_description_2 = "ooo";
            goto try_except_handler_61;
        }
        goto loop_start_19;
        loop_end_19:;
        CHECK_OBJECT(tmp_listcomp_10__contraction);
        tmp_assign_source_150 = tmp_listcomp_10__contraction;
        Py_INCREF(tmp_assign_source_150);
        goto try_return_handler_61;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_61:;
        CHECK_OBJECT(tmp_listcomp_10__$0);
        Py_DECREF(tmp_listcomp_10__$0);
        tmp_listcomp_10__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_10__contraction);
        Py_DECREF(tmp_listcomp_10__contraction);
        tmp_listcomp_10__contraction = NULL;
        Py_XDECREF(tmp_listcomp_10__iter_value_0);
        tmp_listcomp_10__iter_value_0 = NULL;
        goto frame_return_exit_11;
        // Exception handler code:
        try_except_handler_61:;
        exception_keeper_type_58 = exception_type;
        exception_keeper_value_58 = exception_value;
        exception_keeper_tb_58 = exception_tb;
        exception_keeper_lineno_58 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_10__$0);
        Py_DECREF(tmp_listcomp_10__$0);
        tmp_listcomp_10__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_10__contraction);
        Py_DECREF(tmp_listcomp_10__contraction);
        tmp_listcomp_10__contraction = NULL;
        Py_XDECREF(tmp_listcomp_10__iter_value_0);
        tmp_listcomp_10__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_58;
        exception_value = exception_keeper_value_58;
        exception_tb = exception_keeper_tb_58;
        exception_lineno = exception_keeper_lineno_58;

        goto frame_exception_exit_11;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_78a8dba6d77a7a8c47a1383725ec744d_11);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_10;

        frame_return_exit_11:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_78a8dba6d77a7a8c47a1383725ec744d_11);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_60;

        frame_exception_exit_11:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_78a8dba6d77a7a8c47a1383725ec744d_11);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_78a8dba6d77a7a8c47a1383725ec744d_11, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_78a8dba6d77a7a8c47a1383725ec744d_11->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_78a8dba6d77a7a8c47a1383725ec744d_11, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_78a8dba6d77a7a8c47a1383725ec744d_11,
            type_description_2,
            outline_9_var_miss,
            outline_9_var_fill,
            par_dtype
        );


        // Release cached frame if used for exception.
        if (frame_78a8dba6d77a7a8c47a1383725ec744d_11 == cache_frame_78a8dba6d77a7a8c47a1383725ec744d_11) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_78a8dba6d77a7a8c47a1383725ec744d_11);
            cache_frame_78a8dba6d77a7a8c47a1383725ec744d_11 = NULL;
        }

        assertFrameObject(frame_78a8dba6d77a7a8c47a1383725ec744d_11);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_10;

        frame_no_exception_10:;
        goto skip_nested_handling_10;
        nested_frame_exit_10:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_60;
        skip_nested_handling_10:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_60:;
        Py_XDECREF(outline_9_var_miss);
        outline_9_var_miss = NULL;
        Py_XDECREF(outline_9_var_fill);
        outline_9_var_fill = NULL;
        goto outline_result_10;
        // Exception handler code:
        try_except_handler_60:;
        exception_keeper_type_59 = exception_type;
        exception_keeper_value_59 = exception_value;
        exception_keeper_tb_59 = exception_tb;
        exception_keeper_lineno_59 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_9_var_miss);
        outline_9_var_miss = NULL;
        Py_XDECREF(outline_9_var_fill);
        outline_9_var_fill = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_59;
        exception_value = exception_keeper_value_59;
        exception_tb = exception_keeper_tb_59;
        exception_lineno = exception_keeper_lineno_59;

        goto outline_exception_10;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_10:;
        exception_lineno = 1953;
        goto try_except_handler_7;
        outline_result_10:;
        {
            PyObject *old = par_converters;
            assert(old != NULL);
            par_converters = tmp_assign_source_150;
            Py_DECREF(old);
        }

    }
    branch_end_51:;
    branch_end_50:;
    {
        PyObject *tmp_assign_source_159;
        tmp_assign_source_159 = PyList_New(0);
        assert(var_uc_update == NULL);
        var_uc_update = tmp_assign_source_159;
    }
    {
        PyObject *tmp_assign_source_160;
        PyObject *tmp_iter_arg_27;
        PyObject *tmp_called_instance_17;
        CHECK_OBJECT(var_user_converters);
        tmp_called_instance_17 = var_user_converters;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1958;
        tmp_iter_arg_27 = CALL_METHOD_NO_ARGS(tmp_called_instance_17, mod_consts[47]);
        if (tmp_iter_arg_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1958;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_assign_source_160 = MAKE_ITERATOR(tmp_iter_arg_27);
        Py_DECREF(tmp_iter_arg_27);
        if (tmp_assign_source_160 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1958;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(tmp_for_loop_9__for_iterator == NULL);
        tmp_for_loop_9__for_iterator = tmp_assign_source_160;
    }
    // Tried code:
    loop_start_20:;
    {
        PyObject *tmp_next_source_19;
        PyObject *tmp_assign_source_161;
        CHECK_OBJECT(tmp_for_loop_9__for_iterator);
        tmp_next_source_19 = tmp_for_loop_9__for_iterator;
        tmp_assign_source_161 = ITERATOR_NEXT(tmp_next_source_19);
        if (tmp_assign_source_161 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_20;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 1958;
                goto try_except_handler_64;
            }
        }

        {
            PyObject *old = tmp_for_loop_9__iter_value;
            tmp_for_loop_9__iter_value = tmp_assign_source_161;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_162;
        PyObject *tmp_iter_arg_28;
        CHECK_OBJECT(tmp_for_loop_9__iter_value);
        tmp_iter_arg_28 = tmp_for_loop_9__iter_value;
        tmp_assign_source_162 = MAKE_ITERATOR(tmp_iter_arg_28);
        if (tmp_assign_source_162 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1958;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_65;
        }
        {
            PyObject *old = tmp_tuple_unpack_5__source_iter;
            tmp_tuple_unpack_5__source_iter = tmp_assign_source_162;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_163;
        PyObject *tmp_unpack_16;
        CHECK_OBJECT(tmp_tuple_unpack_5__source_iter);
        tmp_unpack_16 = tmp_tuple_unpack_5__source_iter;
        tmp_assign_source_163 = UNPACK_NEXT(tmp_unpack_16, 0, 2);
        if (tmp_assign_source_163 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1958;
            goto try_except_handler_66;
        }
        {
            PyObject *old = tmp_tuple_unpack_5__element_1;
            tmp_tuple_unpack_5__element_1 = tmp_assign_source_163;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_164;
        PyObject *tmp_unpack_17;
        CHECK_OBJECT(tmp_tuple_unpack_5__source_iter);
        tmp_unpack_17 = tmp_tuple_unpack_5__source_iter;
        tmp_assign_source_164 = UNPACK_NEXT(tmp_unpack_17, 1, 2);
        if (tmp_assign_source_164 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1958;
            goto try_except_handler_66;
        }
        {
            PyObject *old = tmp_tuple_unpack_5__element_2;
            tmp_tuple_unpack_5__element_2 = tmp_assign_source_164;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_8;
        CHECK_OBJECT(tmp_tuple_unpack_5__source_iter);
        tmp_iterator_name_8 = tmp_tuple_unpack_5__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_8); assert(HAS_ITERNEXT(tmp_iterator_name_8));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_8)->tp_iternext)(tmp_iterator_name_8);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 1958;
                    goto try_except_handler_66;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 1958;
            goto try_except_handler_66;
        }
    }
    goto try_end_37;
    // Exception handler code:
    try_except_handler_66:;
    exception_keeper_type_60 = exception_type;
    exception_keeper_value_60 = exception_value;
    exception_keeper_tb_60 = exception_tb;
    exception_keeper_lineno_60 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_5__source_iter);
    Py_DECREF(tmp_tuple_unpack_5__source_iter);
    tmp_tuple_unpack_5__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_60;
    exception_value = exception_keeper_value_60;
    exception_tb = exception_keeper_tb_60;
    exception_lineno = exception_keeper_lineno_60;

    goto try_except_handler_65;
    // End of try:
    try_end_37:;
    goto try_end_38;
    // Exception handler code:
    try_except_handler_65:;
    exception_keeper_type_61 = exception_type;
    exception_keeper_value_61 = exception_value;
    exception_keeper_tb_61 = exception_tb;
    exception_keeper_lineno_61 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_5__element_1);
    tmp_tuple_unpack_5__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_5__element_2);
    tmp_tuple_unpack_5__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_61;
    exception_value = exception_keeper_value_61;
    exception_tb = exception_keeper_tb_61;
    exception_lineno = exception_keeper_lineno_61;

    goto try_except_handler_64;
    // End of try:
    try_end_38:;
    CHECK_OBJECT(tmp_tuple_unpack_5__source_iter);
    Py_DECREF(tmp_tuple_unpack_5__source_iter);
    tmp_tuple_unpack_5__source_iter = NULL;
    {
        PyObject *tmp_assign_source_165;
        CHECK_OBJECT(tmp_tuple_unpack_5__element_1);
        tmp_assign_source_165 = tmp_tuple_unpack_5__element_1;
        {
            PyObject *old = var_j;
            var_j = tmp_assign_source_165;
            Py_INCREF(var_j);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_5__element_1);
    tmp_tuple_unpack_5__element_1 = NULL;

    {
        PyObject *tmp_assign_source_166;
        CHECK_OBJECT(tmp_tuple_unpack_5__element_2);
        tmp_assign_source_166 = tmp_tuple_unpack_5__element_2;
        {
            PyObject *old = var_conv;
            var_conv = tmp_assign_source_166;
            Py_INCREF(var_conv);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_5__element_2);
    tmp_tuple_unpack_5__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_52;
        PyObject *tmp_called_name_35;
        PyObject *tmp_call_result_11;
        PyObject *tmp_args_element_name_37;
        int tmp_truth_name_14;
        tmp_called_name_35 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[108]);

        if (unlikely(tmp_called_name_35 == NULL)) {
            tmp_called_name_35 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[108]);
        }

        if (tmp_called_name_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1960;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        CHECK_OBJECT(var_j);
        tmp_args_element_name_37 = var_j;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1960;
        tmp_call_result_11 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_35, tmp_args_element_name_37);
        if (tmp_call_result_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1960;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        tmp_truth_name_14 = CHECK_IF_TRUE(tmp_call_result_11);
        if (tmp_truth_name_14 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_11);

            exception_lineno = 1960;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        tmp_condition_result_52 = tmp_truth_name_14 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_11);
        if (tmp_condition_result_52 == NUITKA_BOOL_TRUE) {
            goto branch_yes_52;
        } else {
            goto branch_no_52;
        }
    }
    branch_yes_52:;
    // Tried code:
    {
        PyObject *tmp_assign_source_167;
        PyObject *tmp_called_instance_18;
        PyObject *tmp_args_element_name_38;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1962;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_67;
        }

        tmp_called_instance_18 = par_names;
        CHECK_OBJECT(var_j);
        tmp_args_element_name_38 = var_j;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1962;
        tmp_assign_source_167 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_18, mod_consts[184], tmp_args_element_name_38);
        if (tmp_assign_source_167 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1962;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_67;
        }
        {
            PyObject *old = var_j;
            assert(old != NULL);
            var_j = tmp_assign_source_167;
            Py_DECREF(old);
        }

    }
    goto try_end_39;
    // Exception handler code:
    try_except_handler_67:;
    exception_keeper_type_62 = exception_type;
    exception_keeper_value_62 = exception_value;
    exception_keeper_tb_62 = exception_tb;
    exception_keeper_lineno_62 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 9.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_9, &exception_preserved_value_9, &exception_preserved_tb_9);

    if (exception_keeper_tb_62 == NULL) {
        exception_keeper_tb_62 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_62);
    } else if (exception_keeper_lineno_62 != 0) {
        exception_keeper_tb_62 = ADD_TRACEBACK(exception_keeper_tb_62, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_62);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_62, &exception_keeper_value_62, &exception_keeper_tb_62);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_62, exception_keeper_tb_62);
    PUBLISH_EXCEPTION(&exception_keeper_type_62, &exception_keeper_value_62, &exception_keeper_tb_62);
    // Tried code:
    {
        bool tmp_condition_result_53;
        PyObject *tmp_compexpr_left_35;
        PyObject *tmp_compexpr_right_35;
        tmp_compexpr_left_35 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_35 = PyExc_ValueError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_35, tmp_compexpr_right_35);
        assert(!(tmp_res == -1));
        tmp_condition_result_53 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_53 != false) {
            goto branch_yes_53;
        } else {
            goto branch_no_53;
        }
    }
    branch_yes_53:;
    goto try_continue_handler_68;
    goto branch_end_53;
    branch_no_53:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1961;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_68;
    branch_end_53:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_68:;
    exception_keeper_type_63 = exception_type;
    exception_keeper_value_63 = exception_value;
    exception_keeper_tb_63 = exception_tb;
    exception_keeper_lineno_63 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 9.
    SET_CURRENT_EXCEPTION(exception_preserved_type_9, exception_preserved_value_9, exception_preserved_tb_9);

    // Re-raise.
    exception_type = exception_keeper_type_63;
    exception_value = exception_keeper_value_63;
    exception_tb = exception_keeper_tb_63;
    exception_lineno = exception_keeper_lineno_63;

    goto try_except_handler_64;
    // try continue handler code:
    try_continue_handler_68:;
    // Restore previous exception id 9.
    SET_CURRENT_EXCEPTION(exception_preserved_type_9, exception_preserved_value_9, exception_preserved_tb_9);

    goto loop_start_20;
    // End of try:
    // End of try:
    try_end_39:;
    {
        PyObject *tmp_assign_source_168;
        CHECK_OBJECT(var_j);
        tmp_assign_source_168 = var_j;
        {
            PyObject *old = Nuitka_Cell_GET(var_i);
            PyCell_SET(var_i, tmp_assign_source_168);
            Py_INCREF(tmp_assign_source_168);
            Py_XDECREF(old);
        }

    }
    goto branch_end_52;
    branch_no_52:;
    {
        nuitka_bool tmp_condition_result_54;
        int tmp_truth_name_15;
        if (par_usecols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1966;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_truth_name_15 = CHECK_IF_TRUE(par_usecols);
        if (tmp_truth_name_15 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1966;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        tmp_condition_result_54 = tmp_truth_name_15 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_54 == NUITKA_BOOL_TRUE) {
            goto branch_yes_54;
        } else {
            goto branch_no_54;
        }
    }
    branch_yes_54:;
    // Tried code:
    {
        PyObject *tmp_assign_source_169;
        PyObject *tmp_called_instance_19;
        PyObject *tmp_args_element_name_39;
        if (par_usecols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1968;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_69;
        }

        tmp_called_instance_19 = par_usecols;
        CHECK_OBJECT(var_j);
        tmp_args_element_name_39 = var_j;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1968;
        tmp_assign_source_169 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_19, mod_consts[184], tmp_args_element_name_39);
        if (tmp_assign_source_169 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1968;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_69;
        }
        {
            PyObject *old = Nuitka_Cell_GET(var_i);
            PyCell_SET(var_i, tmp_assign_source_169);
            Py_XDECREF(old);
        }

    }
    goto try_end_40;
    // Exception handler code:
    try_except_handler_69:;
    exception_keeper_type_64 = exception_type;
    exception_keeper_value_64 = exception_value;
    exception_keeper_tb_64 = exception_tb;
    exception_keeper_lineno_64 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 10.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_10, &exception_preserved_value_10, &exception_preserved_tb_10);

    if (exception_keeper_tb_64 == NULL) {
        exception_keeper_tb_64 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_64);
    } else if (exception_keeper_lineno_64 != 0) {
        exception_keeper_tb_64 = ADD_TRACEBACK(exception_keeper_tb_64, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_64);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_64, &exception_keeper_value_64, &exception_keeper_tb_64);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_64, exception_keeper_tb_64);
    PUBLISH_EXCEPTION(&exception_keeper_type_64, &exception_keeper_value_64, &exception_keeper_tb_64);
    // Tried code:
    {
        bool tmp_condition_result_55;
        PyObject *tmp_compexpr_left_36;
        PyObject *tmp_compexpr_right_36;
        tmp_compexpr_left_36 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_36 = PyExc_ValueError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_36, tmp_compexpr_right_36);
        assert(!(tmp_res == -1));
        tmp_condition_result_55 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_55 != false) {
            goto branch_yes_55;
        } else {
            goto branch_no_55;
        }
    }
    branch_yes_55:;
    goto try_continue_handler_70;
    goto branch_end_55;
    branch_no_55:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1967;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_70;
    branch_end_55:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_70:;
    exception_keeper_type_65 = exception_type;
    exception_keeper_value_65 = exception_value;
    exception_keeper_tb_65 = exception_tb;
    exception_keeper_lineno_65 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 10.
    SET_CURRENT_EXCEPTION(exception_preserved_type_10, exception_preserved_value_10, exception_preserved_tb_10);

    // Re-raise.
    exception_type = exception_keeper_type_65;
    exception_value = exception_keeper_value_65;
    exception_tb = exception_keeper_tb_65;
    exception_lineno = exception_keeper_lineno_65;

    goto try_except_handler_64;
    // try continue handler code:
    try_continue_handler_70:;
    // Restore previous exception id 10.
    SET_CURRENT_EXCEPTION(exception_preserved_type_10, exception_preserved_value_10, exception_preserved_tb_10);

    goto loop_start_20;
    // End of try:
    // End of try:
    try_end_40:;
    goto branch_end_54;
    branch_no_54:;
    {
        PyObject *tmp_assign_source_170;
        CHECK_OBJECT(var_j);
        tmp_assign_source_170 = var_j;
        {
            PyObject *old = Nuitka_Cell_GET(var_i);
            PyCell_SET(var_i, tmp_assign_source_170);
            Py_INCREF(tmp_assign_source_170);
            Py_XDECREF(old);
        }

    }
    branch_end_54:;
    branch_end_52:;
    {
        nuitka_bool tmp_condition_result_56;
        PyObject *tmp_len_arg_7;
        PyObject *tmp_capi_result_1;
        int tmp_truth_name_16;
        if (var_first_line == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[234]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1975;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_len_arg_7 = var_first_line;
        tmp_capi_result_1 = BUILTIN_LEN(tmp_len_arg_7);
        if (tmp_capi_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1975;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        tmp_truth_name_16 = CHECK_IF_TRUE(tmp_capi_result_1);
        if (tmp_truth_name_16 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_capi_result_1);

            exception_lineno = 1975;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        tmp_condition_result_56 = tmp_truth_name_16 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_capi_result_1);
        if (tmp_condition_result_56 == NUITKA_BOOL_TRUE) {
            goto branch_yes_56;
        } else {
            goto branch_no_56;
        }
    }
    branch_yes_56:;
    {
        PyObject *tmp_assign_source_171;
        PyObject *tmp_expression_name_24;
        PyObject *tmp_subscript_name_7;
        if (var_first_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[313]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1976;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_expression_name_24 = var_first_values;
        if (var_j == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[335]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1976;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_subscript_name_7 = var_j;
        tmp_assign_source_171 = LOOKUP_SUBSCRIPT(tmp_expression_name_24, tmp_subscript_name_7);
        if (tmp_assign_source_171 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1976;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        {
            PyObject *old = var_testing_value;
            var_testing_value = tmp_assign_source_171;
            Py_XDECREF(old);
        }

    }
    goto branch_end_56;
    branch_no_56:;
    {
        PyObject *tmp_assign_source_172;
        tmp_assign_source_172 = Py_None;
        {
            PyObject *old = var_testing_value;
            var_testing_value = tmp_assign_source_172;
            Py_INCREF(var_testing_value);
            Py_XDECREF(old);
        }

    }
    branch_end_56:;
    {
        bool tmp_condition_result_57;
        PyObject *tmp_compexpr_left_37;
        PyObject *tmp_compexpr_right_37;
        CHECK_OBJECT(var_conv);
        tmp_compexpr_left_37 = var_conv;
        tmp_compexpr_right_37 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[142]);

        if (unlikely(tmp_compexpr_right_37 == NULL)) {
            tmp_compexpr_right_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
        }

        if (tmp_compexpr_right_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1979;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        tmp_condition_result_57 = (tmp_compexpr_left_37 == tmp_compexpr_right_37) ? true : false;
        if (tmp_condition_result_57 != false) {
            goto branch_yes_57;
        } else {
            goto branch_no_57;
        }
    }
    branch_yes_57:;
    {
        PyObject *tmp_assign_source_173;
        tmp_assign_source_173 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[132]);

        if (unlikely(tmp_assign_source_173 == NULL)) {
            tmp_assign_source_173 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[132]);
        }

        if (tmp_assign_source_173 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1980;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        {
            PyObject *old = var_user_conv;
            var_user_conv = tmp_assign_source_173;
            Py_INCREF(var_user_conv);
            Py_XDECREF(old);
        }

    }
    goto branch_end_57;
    branch_no_57:;
    {
        nuitka_bool tmp_condition_result_58;
        if (var_byte_converters == NUITKA_BOOL_UNASSIGNED) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[185]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1981;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_condition_result_58 = var_byte_converters;
        if (tmp_condition_result_58 == NUITKA_BOOL_TRUE) {
            goto branch_yes_58;
        } else {
            goto branch_no_58;
        }
    }
    branch_yes_58:;
    {
        PyObject *tmp_assign_source_174;


        tmp_assign_source_174 = MAKE_FUNCTION_numpy$lib$npyio$$$function__29_genfromtxt$$$function__1_tobytes_first();

        {
            PyObject *old = var_tobytes_first;
            var_tobytes_first = tmp_assign_source_174;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_175;
        PyObject *tmp_called_name_36;
        PyObject *tmp_expression_name_25;
        PyObject *tmp_kw_call_arg_value_0_5;
        PyObject *tmp_kw_call_dict_value_0_5;
        tmp_expression_name_25 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[188]);

        if (unlikely(tmp_expression_name_25 == NULL)) {
            tmp_expression_name_25 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[188]);
        }

        if (tmp_expression_name_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1988;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        tmp_called_name_36 = LOOKUP_ATTRIBUTE(tmp_expression_name_25, mod_consts[189]);
        if (tmp_called_name_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1988;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        CHECK_OBJECT(var_tobytes_first);
        tmp_kw_call_arg_value_0_5 = var_tobytes_first;
        CHECK_OBJECT(var_conv);
        tmp_kw_call_dict_value_0_5 = var_conv;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1988;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_5};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_5};
            tmp_assign_source_175 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_36, args, kw_values, mod_consts[190]);
        }

        Py_DECREF(tmp_called_name_36);
        if (tmp_assign_source_175 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1988;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        {
            PyObject *old = var_user_conv;
            var_user_conv = tmp_assign_source_175;
            Py_XDECREF(old);
        }

    }
    goto branch_end_58;
    branch_no_58:;
    {
        PyObject *tmp_assign_source_176;
        CHECK_OBJECT(var_conv);
        tmp_assign_source_176 = var_conv;
        {
            PyObject *old = var_user_conv;
            var_user_conv = tmp_assign_source_176;
            Py_INCREF(var_user_conv);
            Py_XDECREF(old);
        }

    }
    branch_end_58:;
    branch_end_57:;
    {
        PyObject *tmp_called_name_37;
        PyObject *tmp_expression_name_26;
        PyObject *tmp_expression_name_27;
        PyObject *tmp_subscript_name_8;
        PyObject *tmp_call_result_12;
        PyObject *tmp_kw_call_arg_value_0_6;
        PyObject *tmp_kw_call_dict_value_0_6;
        PyObject *tmp_kw_call_dict_value_1_4;
        PyObject *tmp_kw_call_dict_value_2_4;
        PyObject *tmp_expression_name_28;
        PyObject *tmp_subscript_name_9;
        PyObject *tmp_kw_call_dict_value_3_2;
        PyObject *tmp_expression_name_29;
        PyObject *tmp_subscript_name_10;
        if (par_converters == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[191]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1991;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_expression_name_27 = par_converters;
        if (Nuitka_Cell_GET(var_i) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[337]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1991;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_subscript_name_8 = Nuitka_Cell_GET(var_i);
        tmp_expression_name_26 = LOOKUP_SUBSCRIPT(tmp_expression_name_27, tmp_subscript_name_8);
        if (tmp_expression_name_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1991;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        tmp_called_name_37 = LOOKUP_ATTRIBUTE(tmp_expression_name_26, mod_consts[338]);
        Py_DECREF(tmp_expression_name_26);
        if (tmp_called_name_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1991;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        if (var_user_conv == NULL) {
            Py_DECREF(tmp_called_name_37);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[339]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1991;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_kw_call_arg_value_0_6 = var_user_conv;
        tmp_kw_call_dict_value_0_6 = Py_True;
        CHECK_OBJECT(var_testing_value);
        tmp_kw_call_dict_value_1_4 = var_testing_value;
        if (par_filling_values == NULL) {
            Py_DECREF(tmp_called_name_37);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[327]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1993;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_expression_name_28 = par_filling_values;
        if (Nuitka_Cell_GET(var_i) == NULL) {
            Py_DECREF(tmp_called_name_37);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[337]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1993;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_subscript_name_9 = Nuitka_Cell_GET(var_i);
        tmp_kw_call_dict_value_2_4 = LOOKUP_SUBSCRIPT(tmp_expression_name_28, tmp_subscript_name_9);
        if (tmp_kw_call_dict_value_2_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_37);

            exception_lineno = 1993;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        if (par_missing_values == NULL) {
            Py_DECREF(tmp_called_name_37);
            Py_DECREF(tmp_kw_call_dict_value_2_4);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[322]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1994;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_expression_name_29 = par_missing_values;
        if (Nuitka_Cell_GET(var_i) == NULL) {
            Py_DECREF(tmp_called_name_37);
            Py_DECREF(tmp_kw_call_dict_value_2_4);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[337]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1994;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_subscript_name_10 = Nuitka_Cell_GET(var_i);
        tmp_kw_call_dict_value_3_2 = LOOKUP_SUBSCRIPT(tmp_expression_name_29, tmp_subscript_name_10);
        if (tmp_kw_call_dict_value_3_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_37);
            Py_DECREF(tmp_kw_call_dict_value_2_4);

            exception_lineno = 1994;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1991;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_6};
            PyObject *kw_values[4] = {tmp_kw_call_dict_value_0_6, tmp_kw_call_dict_value_1_4, tmp_kw_call_dict_value_2_4, tmp_kw_call_dict_value_3_2};
            tmp_call_result_12 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_37, args, kw_values, mod_consts[340]);
        }

        Py_DECREF(tmp_called_name_37);
        Py_DECREF(tmp_kw_call_dict_value_2_4);
        Py_DECREF(tmp_kw_call_dict_value_3_2);
        if (tmp_call_result_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1991;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        Py_DECREF(tmp_call_result_12);
    }
    {
        PyObject *tmp_called_name_38;
        PyObject *tmp_expression_name_30;
        PyObject *tmp_call_result_13;
        PyObject *tmp_args_element_name_40;
        PyObject *tmp_tuple_element_3;
        if (var_uc_update == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[341]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1995;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_expression_name_30 = var_uc_update;
        tmp_called_name_38 = LOOKUP_ATTRIBUTE(tmp_expression_name_30, mod_consts[29]);
        if (tmp_called_name_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1995;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        if (Nuitka_Cell_GET(var_i) == NULL) {
            Py_DECREF(tmp_called_name_38);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[337]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1995;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }

        tmp_tuple_element_3 = Nuitka_Cell_GET(var_i);
        tmp_args_element_name_40 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_element_name_40, 0, tmp_tuple_element_3);
        if (var_user_conv == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[339]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1995;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto tuple_build_exception_1;
        }

        tmp_tuple_element_3 = var_user_conv;
        PyTuple_SET_ITEM0(tmp_args_element_name_40, 1, tmp_tuple_element_3);
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_name_38);
        Py_DECREF(tmp_args_element_name_40);
        goto try_except_handler_64;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1995;
        tmp_call_result_13 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_38, tmp_args_element_name_40);
        Py_DECREF(tmp_called_name_38);
        Py_DECREF(tmp_args_element_name_40);
        if (tmp_call_result_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1995;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_64;
        }
        Py_DECREF(tmp_call_result_13);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1958;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_64;
    }
    goto loop_start_20;
    loop_end_20:;
    goto try_end_41;
    // Exception handler code:
    try_except_handler_64:;
    exception_keeper_type_66 = exception_type;
    exception_keeper_value_66 = exception_value;
    exception_keeper_tb_66 = exception_tb;
    exception_keeper_lineno_66 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_9__iter_value);
    tmp_for_loop_9__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_9__for_iterator);
    Py_DECREF(tmp_for_loop_9__for_iterator);
    tmp_for_loop_9__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_66;
    exception_value = exception_keeper_value_66;
    exception_tb = exception_keeper_tb_66;
    exception_lineno = exception_keeper_lineno_66;

    goto try_except_handler_7;
    // End of try:
    try_end_41:;
    Py_XDECREF(tmp_for_loop_9__iter_value);
    tmp_for_loop_9__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_9__for_iterator);
    Py_DECREF(tmp_for_loop_9__for_iterator);
    tmp_for_loop_9__for_iterator = NULL;
    {
        PyObject *tmp_called_name_39;
        PyObject *tmp_expression_name_31;
        PyObject *tmp_call_result_14;
        PyObject *tmp_args_element_name_41;
        CHECK_OBJECT(var_user_converters);
        tmp_expression_name_31 = var_user_converters;
        tmp_called_name_39 = LOOKUP_ATTRIBUTE(tmp_expression_name_31, mod_consts[338]);
        if (tmp_called_name_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1997;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        if (var_uc_update == NULL) {
            Py_DECREF(tmp_called_name_39);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[341]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1997;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_args_element_name_41 = var_uc_update;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 1997;
        tmp_call_result_14 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_39, tmp_args_element_name_41);
        Py_DECREF(tmp_called_name_39);
        if (tmp_call_result_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1997;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        Py_DECREF(tmp_call_result_14);
    }
    {
        PyObject *tmp_assign_source_177;
        tmp_assign_source_177 = PyList_New(0);
        assert(var_rows == NULL);
        var_rows = tmp_assign_source_177;
    }
    {
        PyObject *tmp_assign_source_178;
        PyObject *tmp_expression_name_32;
        CHECK_OBJECT(var_rows);
        tmp_expression_name_32 = var_rows;
        tmp_assign_source_178 = LOOKUP_ATTRIBUTE(tmp_expression_name_32, mod_consts[29]);
        if (tmp_assign_source_178 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2005;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_append_to_rows == NULL);
        var_append_to_rows = tmp_assign_source_178;
    }
    {
        nuitka_bool tmp_condition_result_59;
        int tmp_truth_name_17;
        CHECK_OBJECT(par_usemask);
        tmp_truth_name_17 = CHECK_IF_TRUE(par_usemask);
        if (tmp_truth_name_17 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_59 = tmp_truth_name_17 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_59 == NUITKA_BOOL_TRUE) {
            goto branch_yes_59;
        } else {
            goto branch_no_59;
        }
    }
    branch_yes_59:;
    {
        PyObject *tmp_assign_source_179;
        tmp_assign_source_179 = PyList_New(0);
        assert(var_masks == NULL);
        var_masks = tmp_assign_source_179;
    }
    {
        PyObject *tmp_assign_source_180;
        PyObject *tmp_expression_name_33;
        CHECK_OBJECT(var_masks);
        tmp_expression_name_33 = var_masks;
        tmp_assign_source_180 = LOOKUP_ATTRIBUTE(tmp_expression_name_33, mod_consts[29]);
        if (tmp_assign_source_180 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2009;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_append_to_masks == NULL);
        var_append_to_masks = tmp_assign_source_180;
    }
    branch_no_59:;
    {
        PyObject *tmp_assign_source_181;
        tmp_assign_source_181 = PyList_New(0);
        assert(var_invalid == NULL);
        var_invalid = tmp_assign_source_181;
    }
    {
        PyObject *tmp_assign_source_182;
        PyObject *tmp_expression_name_34;
        CHECK_OBJECT(var_invalid);
        tmp_expression_name_34 = var_invalid;
        tmp_assign_source_182 = LOOKUP_ATTRIBUTE(tmp_expression_name_34, mod_consts[29]);
        if (tmp_assign_source_182 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2012;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(var_append_to_invalid == NULL);
        var_append_to_invalid = tmp_assign_source_182;
    }
    {
        PyObject *tmp_assign_source_183;
        PyObject *tmp_iter_arg_29;
        PyObject *tmp_called_name_40;
        PyObject *tmp_args_element_name_42;
        PyObject *tmp_called_name_41;
        PyObject *tmp_expression_name_35;
        PyObject *tmp_args_element_name_43;
        PyObject *tmp_list_element_5;
        PyObject *tmp_args_element_name_44;
        tmp_called_name_40 = (PyObject *)&PyEnum_Type;
        tmp_expression_name_35 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[232]);

        if (unlikely(tmp_expression_name_35 == NULL)) {
            tmp_expression_name_35 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[232]);
        }

        if (tmp_expression_name_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_called_name_41 = LOOKUP_ATTRIBUTE(tmp_expression_name_35, mod_consts[233]);
        if (tmp_called_name_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        if (var_first_line == NULL) {
            Py_DECREF(tmp_called_name_41);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[234]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_list_element_5 = var_first_line;
        tmp_args_element_name_43 = PyList_New(1);
        PyList_SET_ITEM0(tmp_args_element_name_43, 0, tmp_list_element_5);
        if (var_fhd == NULL) {
            Py_DECREF(tmp_called_name_41);
            Py_DECREF(tmp_args_element_name_43);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[312]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_args_element_name_44 = var_fhd;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2015;
        {
            PyObject *call_args[] = {tmp_args_element_name_43, tmp_args_element_name_44};
            tmp_args_element_name_42 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_41, call_args);
        }

        Py_DECREF(tmp_called_name_41);
        Py_DECREF(tmp_args_element_name_43);
        if (tmp_args_element_name_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2015;
        tmp_iter_arg_29 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_40, tmp_args_element_name_42);
        Py_DECREF(tmp_args_element_name_42);
        if (tmp_iter_arg_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_assign_source_183 = MAKE_ITERATOR(tmp_iter_arg_29);
        Py_DECREF(tmp_iter_arg_29);
        if (tmp_assign_source_183 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_7;
        }
        assert(tmp_for_loop_10__for_iterator == NULL);
        tmp_for_loop_10__for_iterator = tmp_assign_source_183;
    }
    // Tried code:
    loop_start_21:;
    {
        PyObject *tmp_next_source_20;
        PyObject *tmp_assign_source_184;
        CHECK_OBJECT(tmp_for_loop_10__for_iterator);
        tmp_next_source_20 = tmp_for_loop_10__for_iterator;
        tmp_assign_source_184 = ITERATOR_NEXT(tmp_next_source_20);
        if (tmp_assign_source_184 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_21;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 2015;
                goto try_except_handler_71;
            }
        }

        {
            PyObject *old = tmp_for_loop_10__iter_value;
            tmp_for_loop_10__iter_value = tmp_assign_source_184;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_185;
        PyObject *tmp_iter_arg_30;
        CHECK_OBJECT(tmp_for_loop_10__iter_value);
        tmp_iter_arg_30 = tmp_for_loop_10__iter_value;
        tmp_assign_source_185 = MAKE_ITERATOR(tmp_iter_arg_30);
        if (tmp_assign_source_185 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_72;
        }
        {
            PyObject *old = tmp_tuple_unpack_6__source_iter;
            tmp_tuple_unpack_6__source_iter = tmp_assign_source_185;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_186;
        PyObject *tmp_unpack_18;
        CHECK_OBJECT(tmp_tuple_unpack_6__source_iter);
        tmp_unpack_18 = tmp_tuple_unpack_6__source_iter;
        tmp_assign_source_186 = UNPACK_NEXT(tmp_unpack_18, 0, 2);
        if (tmp_assign_source_186 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2015;
            goto try_except_handler_73;
        }
        {
            PyObject *old = tmp_tuple_unpack_6__element_1;
            tmp_tuple_unpack_6__element_1 = tmp_assign_source_186;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_187;
        PyObject *tmp_unpack_19;
        CHECK_OBJECT(tmp_tuple_unpack_6__source_iter);
        tmp_unpack_19 = tmp_tuple_unpack_6__source_iter;
        tmp_assign_source_187 = UNPACK_NEXT(tmp_unpack_19, 1, 2);
        if (tmp_assign_source_187 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2015;
            goto try_except_handler_73;
        }
        {
            PyObject *old = tmp_tuple_unpack_6__element_2;
            tmp_tuple_unpack_6__element_2 = tmp_assign_source_187;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_9;
        CHECK_OBJECT(tmp_tuple_unpack_6__source_iter);
        tmp_iterator_name_9 = tmp_tuple_unpack_6__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_9); assert(HAS_ITERNEXT(tmp_iterator_name_9));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_9)->tp_iternext)(tmp_iterator_name_9);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 2015;
                    goto try_except_handler_73;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2015;
            goto try_except_handler_73;
        }
    }
    goto try_end_42;
    // Exception handler code:
    try_except_handler_73:;
    exception_keeper_type_67 = exception_type;
    exception_keeper_value_67 = exception_value;
    exception_keeper_tb_67 = exception_tb;
    exception_keeper_lineno_67 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_6__source_iter);
    Py_DECREF(tmp_tuple_unpack_6__source_iter);
    tmp_tuple_unpack_6__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_67;
    exception_value = exception_keeper_value_67;
    exception_tb = exception_keeper_tb_67;
    exception_lineno = exception_keeper_lineno_67;

    goto try_except_handler_72;
    // End of try:
    try_end_42:;
    goto try_end_43;
    // Exception handler code:
    try_except_handler_72:;
    exception_keeper_type_68 = exception_type;
    exception_keeper_value_68 = exception_value;
    exception_keeper_tb_68 = exception_tb;
    exception_keeper_lineno_68 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_6__element_1);
    tmp_tuple_unpack_6__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_6__element_2);
    tmp_tuple_unpack_6__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_68;
    exception_value = exception_keeper_value_68;
    exception_tb = exception_keeper_tb_68;
    exception_lineno = exception_keeper_lineno_68;

    goto try_except_handler_71;
    // End of try:
    try_end_43:;
    CHECK_OBJECT(tmp_tuple_unpack_6__source_iter);
    Py_DECREF(tmp_tuple_unpack_6__source_iter);
    tmp_tuple_unpack_6__source_iter = NULL;
    {
        PyObject *tmp_assign_source_188;
        CHECK_OBJECT(tmp_tuple_unpack_6__element_1);
        tmp_assign_source_188 = tmp_tuple_unpack_6__element_1;
        {
            PyObject *old = Nuitka_Cell_GET(var_i);
            PyCell_SET(var_i, tmp_assign_source_188);
            Py_INCREF(tmp_assign_source_188);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_6__element_1);
    tmp_tuple_unpack_6__element_1 = NULL;

    {
        PyObject *tmp_assign_source_189;
        CHECK_OBJECT(tmp_tuple_unpack_6__element_2);
        tmp_assign_source_189 = tmp_tuple_unpack_6__element_2;
        {
            PyObject *old = var_line;
            var_line = tmp_assign_source_189;
            Py_INCREF(var_line);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_6__element_2);
    tmp_tuple_unpack_6__element_2 = NULL;

    {
        PyObject *tmp_assign_source_190;
        PyObject *tmp_called_name_42;
        PyObject *tmp_args_element_name_45;
        if (var_split_line == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[171]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2016;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }

        tmp_called_name_42 = var_split_line;
        CHECK_OBJECT(var_line);
        tmp_args_element_name_45 = var_line;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2016;
        tmp_assign_source_190 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_42, tmp_args_element_name_45);
        if (tmp_assign_source_190 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2016;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        {
            PyObject *old = var_values;
            var_values = tmp_assign_source_190;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_191;
        PyObject *tmp_len_arg_8;
        CHECK_OBJECT(var_values);
        tmp_len_arg_8 = var_values;
        tmp_assign_source_191 = BUILTIN_LEN(tmp_len_arg_8);
        if (tmp_assign_source_191 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        {
            PyObject *old = var_nbvalues;
            var_nbvalues = tmp_assign_source_191;
            Py_XDECREF(old);
        }

    }
    {
        bool tmp_condition_result_60;
        PyObject *tmp_compexpr_left_38;
        PyObject *tmp_compexpr_right_38;
        PyObject *tmp_tmp_condition_result_60_object_1;
        CHECK_OBJECT(var_nbvalues);
        tmp_compexpr_left_38 = var_nbvalues;
        tmp_compexpr_right_38 = mod_consts[16];
        tmp_tmp_condition_result_60_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_38, tmp_compexpr_right_38);
        assert(!(tmp_tmp_condition_result_60_object_1 == NULL));
        tmp_condition_result_60 = CHECK_IF_TRUE(tmp_tmp_condition_result_60_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_60_object_1);
        if (tmp_condition_result_60 != false) {
            goto branch_yes_60;
        } else {
            goto branch_no_60;
        }
    }
    branch_yes_60:;
    goto loop_start_21;
    branch_no_60:;
    {
        nuitka_bool tmp_condition_result_61;
        int tmp_truth_name_18;
        if (par_usecols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[182]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2021;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }

        tmp_truth_name_18 = CHECK_IF_TRUE(par_usecols);
        if (tmp_truth_name_18 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2021;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        tmp_condition_result_61 = tmp_truth_name_18 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_61 == NUITKA_BOOL_TRUE) {
            goto branch_yes_61;
        } else {
            goto branch_no_61;
        }
    }
    branch_yes_61:;
    // Tried code:
    {
        PyObject *tmp_assign_source_192;
        // Tried code:
        {
            PyObject *tmp_assign_source_193;
            PyObject *tmp_iter_arg_31;
            if (par_usecols == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[182]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2024;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_75;
            }

            tmp_iter_arg_31 = par_usecols;
            tmp_assign_source_193 = MAKE_ITERATOR(tmp_iter_arg_31);
            if (tmp_assign_source_193 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2024;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_75;
            }
            {
                PyObject *old = tmp_listcomp_11__$0;
                tmp_listcomp_11__$0 = tmp_assign_source_193;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_194;
            tmp_assign_source_194 = PyList_New(0);
            {
                PyObject *old = tmp_listcomp_11__contraction;
                tmp_listcomp_11__contraction = tmp_assign_source_194;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_60e90acd62b857a138258b951b783c8f_12)) {
            Py_XDECREF(cache_frame_60e90acd62b857a138258b951b783c8f_12);

#if _DEBUG_REFCOUNTS
            if (cache_frame_60e90acd62b857a138258b951b783c8f_12 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_60e90acd62b857a138258b951b783c8f_12 = MAKE_FUNCTION_FRAME(codeobj_60e90acd62b857a138258b951b783c8f, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_60e90acd62b857a138258b951b783c8f_12->m_type_description == NULL);
        frame_60e90acd62b857a138258b951b783c8f_12 = cache_frame_60e90acd62b857a138258b951b783c8f_12;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_60e90acd62b857a138258b951b783c8f_12);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_60e90acd62b857a138258b951b783c8f_12) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_22:;
        {
            PyObject *tmp_next_source_21;
            PyObject *tmp_assign_source_195;
            CHECK_OBJECT(tmp_listcomp_11__$0);
            tmp_next_source_21 = tmp_listcomp_11__$0;
            tmp_assign_source_195 = ITERATOR_NEXT(tmp_next_source_21);
            if (tmp_assign_source_195 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_22;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 2024;
                    goto try_except_handler_76;
                }
            }

            {
                PyObject *old = tmp_listcomp_11__iter_value_0;
                tmp_listcomp_11__iter_value_0 = tmp_assign_source_195;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_196;
            CHECK_OBJECT(tmp_listcomp_11__iter_value_0);
            tmp_assign_source_196 = tmp_listcomp_11__iter_value_0;
            {
                PyObject *old = outline_10_var__;
                outline_10_var__ = tmp_assign_source_196;
                Py_INCREF(outline_10_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_11;
            PyObject *tmp_append_value_11;
            PyObject *tmp_expression_name_36;
            PyObject *tmp_subscript_name_11;
            CHECK_OBJECT(tmp_listcomp_11__contraction);
            tmp_append_list_11 = tmp_listcomp_11__contraction;
            if (var_values == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[86]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2024;
                type_description_2 = "oo";
                goto try_except_handler_76;
            }

            tmp_expression_name_36 = var_values;
            CHECK_OBJECT(outline_10_var__);
            tmp_subscript_name_11 = outline_10_var__;
            tmp_append_value_11 = LOOKUP_SUBSCRIPT(tmp_expression_name_36, tmp_subscript_name_11);
            if (tmp_append_value_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2024;
                type_description_2 = "oo";
                goto try_except_handler_76;
            }
            assert(PyList_Check(tmp_append_list_11));
            tmp_result = LIST_APPEND1(tmp_append_list_11, tmp_append_value_11);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2024;
                type_description_2 = "oo";
                goto try_except_handler_76;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2024;
            type_description_2 = "oo";
            goto try_except_handler_76;
        }
        goto loop_start_22;
        loop_end_22:;
        CHECK_OBJECT(tmp_listcomp_11__contraction);
        tmp_assign_source_192 = tmp_listcomp_11__contraction;
        Py_INCREF(tmp_assign_source_192);
        goto try_return_handler_76;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_76:;
        CHECK_OBJECT(tmp_listcomp_11__$0);
        Py_DECREF(tmp_listcomp_11__$0);
        tmp_listcomp_11__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_11__contraction);
        Py_DECREF(tmp_listcomp_11__contraction);
        tmp_listcomp_11__contraction = NULL;
        Py_XDECREF(tmp_listcomp_11__iter_value_0);
        tmp_listcomp_11__iter_value_0 = NULL;
        goto frame_return_exit_12;
        // Exception handler code:
        try_except_handler_76:;
        exception_keeper_type_69 = exception_type;
        exception_keeper_value_69 = exception_value;
        exception_keeper_tb_69 = exception_tb;
        exception_keeper_lineno_69 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_11__$0);
        Py_DECREF(tmp_listcomp_11__$0);
        tmp_listcomp_11__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_11__contraction);
        Py_DECREF(tmp_listcomp_11__contraction);
        tmp_listcomp_11__contraction = NULL;
        Py_XDECREF(tmp_listcomp_11__iter_value_0);
        tmp_listcomp_11__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_69;
        exception_value = exception_keeper_value_69;
        exception_tb = exception_keeper_tb_69;
        exception_lineno = exception_keeper_lineno_69;

        goto frame_exception_exit_12;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_60e90acd62b857a138258b951b783c8f_12);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_11;

        frame_return_exit_12:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_60e90acd62b857a138258b951b783c8f_12);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_75;

        frame_exception_exit_12:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_60e90acd62b857a138258b951b783c8f_12);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_60e90acd62b857a138258b951b783c8f_12, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_60e90acd62b857a138258b951b783c8f_12->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_60e90acd62b857a138258b951b783c8f_12, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_60e90acd62b857a138258b951b783c8f_12,
            type_description_2,
            outline_10_var__,
            var_values
        );


        // Release cached frame if used for exception.
        if (frame_60e90acd62b857a138258b951b783c8f_12 == cache_frame_60e90acd62b857a138258b951b783c8f_12) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_60e90acd62b857a138258b951b783c8f_12);
            cache_frame_60e90acd62b857a138258b951b783c8f_12 = NULL;
        }

        assertFrameObject(frame_60e90acd62b857a138258b951b783c8f_12);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_11;

        frame_no_exception_11:;
        goto skip_nested_handling_11;
        nested_frame_exit_11:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_75;
        skip_nested_handling_11:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_75:;
        Py_XDECREF(outline_10_var__);
        outline_10_var__ = NULL;
        goto outline_result_11;
        // Exception handler code:
        try_except_handler_75:;
        exception_keeper_type_70 = exception_type;
        exception_keeper_value_70 = exception_value;
        exception_keeper_tb_70 = exception_tb;
        exception_keeper_lineno_70 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_10_var__);
        outline_10_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_70;
        exception_value = exception_keeper_value_70;
        exception_tb = exception_keeper_tb_70;
        exception_lineno = exception_keeper_lineno_70;

        goto outline_exception_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_11:;
        exception_lineno = 2024;
        goto try_except_handler_74;
        outline_result_11:;
        {
            PyObject *old = var_values;
            var_values = tmp_assign_source_192;
            Py_XDECREF(old);
        }

    }
    goto try_end_44;
    // Exception handler code:
    try_except_handler_74:;
    exception_keeper_type_71 = exception_type;
    exception_keeper_value_71 = exception_value;
    exception_keeper_tb_71 = exception_tb;
    exception_keeper_lineno_71 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 11.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_11, &exception_preserved_value_11, &exception_preserved_tb_11);

    if (exception_keeper_tb_71 == NULL) {
        exception_keeper_tb_71 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_71);
    } else if (exception_keeper_lineno_71 != 0) {
        exception_keeper_tb_71 = ADD_TRACEBACK(exception_keeper_tb_71, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_71);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_71, &exception_keeper_value_71, &exception_keeper_tb_71);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_71, exception_keeper_tb_71);
    PUBLISH_EXCEPTION(&exception_keeper_type_71, &exception_keeper_value_71, &exception_keeper_tb_71);
    // Tried code:
    {
        bool tmp_condition_result_62;
        PyObject *tmp_compexpr_left_39;
        PyObject *tmp_compexpr_right_39;
        tmp_compexpr_left_39 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_39 = PyExc_IndexError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_39, tmp_compexpr_right_39);
        assert(!(tmp_res == -1));
        tmp_condition_result_62 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_62 != false) {
            goto branch_yes_62;
        } else {
            goto branch_no_62;
        }
    }
    branch_yes_62:;
    {
        PyObject *tmp_called_name_43;
        PyObject *tmp_call_result_15;
        PyObject *tmp_args_element_name_46;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_left_name_7;
        PyObject *tmp_left_name_8;
        PyObject *tmp_right_name_7;
        PyObject *tmp_right_name_8;
        if (var_append_to_invalid == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[342]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2026;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_77;
        }

        tmp_called_name_43 = var_append_to_invalid;
        CHECK_OBJECT(Nuitka_Cell_GET(var_i));
        tmp_left_name_8 = Nuitka_Cell_GET(var_i);
        if (par_skip_header == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[343]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2026;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_77;
        }

        tmp_right_name_7 = par_skip_header;
        tmp_left_name_7 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_8, tmp_right_name_7);
        if (tmp_left_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2026;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_77;
        }
        tmp_right_name_8 = mod_consts[63];
        tmp_tuple_element_4 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_7, tmp_right_name_8);
        Py_DECREF(tmp_left_name_7);
        if (tmp_tuple_element_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2026;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_77;
        }
        tmp_args_element_name_46 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_args_element_name_46, 0, tmp_tuple_element_4);
        CHECK_OBJECT(var_nbvalues);
        tmp_tuple_element_4 = var_nbvalues;
        PyTuple_SET_ITEM0(tmp_args_element_name_46, 1, tmp_tuple_element_4);
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2026;
        tmp_call_result_15 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_43, tmp_args_element_name_46);
        Py_DECREF(tmp_args_element_name_46);
        if (tmp_call_result_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2026;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_77;
        }
        Py_DECREF(tmp_call_result_15);
    }
    goto try_continue_handler_77;
    goto branch_end_62;
    branch_no_62:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 2023;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_77;
    branch_end_62:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_77:;
    exception_keeper_type_72 = exception_type;
    exception_keeper_value_72 = exception_value;
    exception_keeper_tb_72 = exception_tb;
    exception_keeper_lineno_72 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 11.
    SET_CURRENT_EXCEPTION(exception_preserved_type_11, exception_preserved_value_11, exception_preserved_tb_11);

    // Re-raise.
    exception_type = exception_keeper_type_72;
    exception_value = exception_keeper_value_72;
    exception_tb = exception_keeper_tb_72;
    exception_lineno = exception_keeper_lineno_72;

    goto try_except_handler_71;
    // try continue handler code:
    try_continue_handler_77:;
    // Restore previous exception id 11.
    SET_CURRENT_EXCEPTION(exception_preserved_type_11, exception_preserved_value_11, exception_preserved_tb_11);

    goto loop_start_21;
    // End of try:
    // End of try:
    try_end_44:;
    goto branch_end_61;
    branch_no_61:;
    {
        bool tmp_condition_result_63;
        PyObject *tmp_compexpr_left_40;
        PyObject *tmp_compexpr_right_40;
        PyObject *tmp_tmp_condition_result_63_object_1;
        CHECK_OBJECT(var_nbvalues);
        tmp_compexpr_left_40 = var_nbvalues;
        if (var_nbcols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[344]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2028;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }

        tmp_compexpr_right_40 = var_nbcols;
        tmp_tmp_condition_result_63_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_40, tmp_compexpr_right_40);
        assert(!(tmp_tmp_condition_result_63_object_1 == NULL));
        tmp_condition_result_63 = CHECK_IF_TRUE(tmp_tmp_condition_result_63_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_63_object_1);
        if (tmp_condition_result_63 != false) {
            goto branch_yes_63;
        } else {
            goto branch_no_63;
        }
    }
    branch_yes_63:;
    {
        PyObject *tmp_called_name_44;
        PyObject *tmp_call_result_16;
        PyObject *tmp_args_element_name_47;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_left_name_9;
        PyObject *tmp_left_name_10;
        PyObject *tmp_right_name_9;
        PyObject *tmp_right_name_10;
        if (var_append_to_invalid == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[342]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2029;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }

        tmp_called_name_44 = var_append_to_invalid;
        CHECK_OBJECT(Nuitka_Cell_GET(var_i));
        tmp_left_name_10 = Nuitka_Cell_GET(var_i);
        if (par_skip_header == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[343]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2029;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }

        tmp_right_name_9 = par_skip_header;
        tmp_left_name_9 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_10, tmp_right_name_9);
        if (tmp_left_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2029;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        tmp_right_name_10 = mod_consts[63];
        tmp_tuple_element_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_9, tmp_right_name_10);
        Py_DECREF(tmp_left_name_9);
        if (tmp_tuple_element_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2029;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        tmp_args_element_name_47 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_args_element_name_47, 0, tmp_tuple_element_5);
        CHECK_OBJECT(var_nbvalues);
        tmp_tuple_element_5 = var_nbvalues;
        PyTuple_SET_ITEM0(tmp_args_element_name_47, 1, tmp_tuple_element_5);
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2029;
        tmp_call_result_16 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_44, tmp_args_element_name_47);
        Py_DECREF(tmp_args_element_name_47);
        if (tmp_call_result_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2029;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        Py_DECREF(tmp_call_result_16);
    }
    goto loop_start_21;
    branch_no_63:;
    branch_end_61:;
    {
        PyObject *tmp_called_name_45;
        PyObject *tmp_call_result_17;
        PyObject *tmp_args_element_name_48;
        PyObject *tmp_tuple_arg_1;
        if (var_append_to_rows == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[345]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2032;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }

        tmp_called_name_45 = var_append_to_rows;
        if (var_values == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[86]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2032;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }

        tmp_tuple_arg_1 = var_values;
        tmp_args_element_name_48 = PySequence_Tuple(tmp_tuple_arg_1);
        if (tmp_args_element_name_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2032;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2032;
        tmp_call_result_17 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_45, tmp_args_element_name_48);
        Py_DECREF(tmp_args_element_name_48);
        if (tmp_call_result_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2032;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        Py_DECREF(tmp_call_result_17);
    }
    {
        nuitka_bool tmp_condition_result_64;
        int tmp_truth_name_19;
        if (par_usemask == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[346]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2033;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }

        tmp_truth_name_19 = CHECK_IF_TRUE(par_usemask);
        if (tmp_truth_name_19 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2033;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        tmp_condition_result_64 = tmp_truth_name_19 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_64 == NUITKA_BOOL_TRUE) {
            goto branch_yes_64;
        } else {
            goto branch_no_64;
        }
    }
    branch_yes_64:;
    {
        PyObject *tmp_called_name_46;
        PyObject *tmp_call_result_18;
        PyObject *tmp_args_element_name_49;
        PyObject *tmp_tuple_arg_2;
        if (var_append_to_masks == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[347]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2034;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }

        tmp_called_name_46 = var_append_to_masks;
        // Tried code:
        {
            PyObject *tmp_assign_source_197;
            PyObject *tmp_iter_arg_32;
            PyObject *tmp_called_name_47;
            PyObject *tmp_args_element_name_50;
            PyObject *tmp_args_element_name_51;
            tmp_called_name_47 = (PyObject *)&PyZip_Type;
            if (var_values == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[86]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2035;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_78;
            }

            tmp_args_element_name_50 = var_values;
            if (par_missing_values == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[322]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2036;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_78;
            }

            tmp_args_element_name_51 = par_missing_values;
            frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2035;
            {
                PyObject *call_args[] = {tmp_args_element_name_50, tmp_args_element_name_51};
                tmp_iter_arg_32 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_47, call_args);
            }

            if (tmp_iter_arg_32 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2035;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_78;
            }
            tmp_assign_source_197 = MAKE_ITERATOR(tmp_iter_arg_32);
            Py_DECREF(tmp_iter_arg_32);
            if (tmp_assign_source_197 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2034;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_78;
            }
            {
                PyObject *old = tmp_listcomp_12__$0;
                tmp_listcomp_12__$0 = tmp_assign_source_197;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_198;
            tmp_assign_source_198 = PyList_New(0);
            {
                PyObject *old = tmp_listcomp_12__contraction;
                tmp_listcomp_12__contraction = tmp_assign_source_198;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_62f242fb3036b9aad5dd90e51b1b762f_13)) {
            Py_XDECREF(cache_frame_62f242fb3036b9aad5dd90e51b1b762f_13);

#if _DEBUG_REFCOUNTS
            if (cache_frame_62f242fb3036b9aad5dd90e51b1b762f_13 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_62f242fb3036b9aad5dd90e51b1b762f_13 = MAKE_FUNCTION_FRAME(codeobj_62f242fb3036b9aad5dd90e51b1b762f, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_62f242fb3036b9aad5dd90e51b1b762f_13->m_type_description == NULL);
        frame_62f242fb3036b9aad5dd90e51b1b762f_13 = cache_frame_62f242fb3036b9aad5dd90e51b1b762f_13;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_62f242fb3036b9aad5dd90e51b1b762f_13);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_62f242fb3036b9aad5dd90e51b1b762f_13) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_23:;
        {
            PyObject *tmp_next_source_22;
            PyObject *tmp_assign_source_199;
            CHECK_OBJECT(tmp_listcomp_12__$0);
            tmp_next_source_22 = tmp_listcomp_12__$0;
            tmp_assign_source_199 = ITERATOR_NEXT(tmp_next_source_22);
            if (tmp_assign_source_199 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_23;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 2034;
                    goto try_except_handler_79;
                }
            }

            {
                PyObject *old = tmp_listcomp_12__iter_value_0;
                tmp_listcomp_12__iter_value_0 = tmp_assign_source_199;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_200;
            PyObject *tmp_iter_arg_33;
            CHECK_OBJECT(tmp_listcomp_12__iter_value_0);
            tmp_iter_arg_33 = tmp_listcomp_12__iter_value_0;
            tmp_assign_source_200 = MAKE_ITERATOR(tmp_iter_arg_33);
            if (tmp_assign_source_200 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2034;
                type_description_2 = "oo";
                goto try_except_handler_80;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_4__source_iter;
                tmp_listcomp$tuple_unpack_4__source_iter = tmp_assign_source_200;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_201;
            PyObject *tmp_unpack_20;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_4__source_iter);
            tmp_unpack_20 = tmp_listcomp$tuple_unpack_4__source_iter;
            tmp_assign_source_201 = UNPACK_NEXT(tmp_unpack_20, 0, 2);
            if (tmp_assign_source_201 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "oo";
                exception_lineno = 2034;
                goto try_except_handler_81;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_4__element_1;
                tmp_listcomp$tuple_unpack_4__element_1 = tmp_assign_source_201;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_202;
            PyObject *tmp_unpack_21;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_4__source_iter);
            tmp_unpack_21 = tmp_listcomp$tuple_unpack_4__source_iter;
            tmp_assign_source_202 = UNPACK_NEXT(tmp_unpack_21, 1, 2);
            if (tmp_assign_source_202 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "oo";
                exception_lineno = 2034;
                goto try_except_handler_81;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_4__element_2;
                tmp_listcomp$tuple_unpack_4__element_2 = tmp_assign_source_202;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_10;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_4__source_iter);
            tmp_iterator_name_10 = tmp_listcomp$tuple_unpack_4__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_10); assert(HAS_ITERNEXT(tmp_iterator_name_10));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_10)->tp_iternext)(tmp_iterator_name_10);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "oo";
                        exception_lineno = 2034;
                        goto try_except_handler_81;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[94];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "oo";
                exception_lineno = 2034;
                goto try_except_handler_81;
            }
        }
        goto try_end_45;
        // Exception handler code:
        try_except_handler_81:;
        exception_keeper_type_73 = exception_type;
        exception_keeper_value_73 = exception_value;
        exception_keeper_tb_73 = exception_tb;
        exception_keeper_lineno_73 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_4__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_4__source_iter);
        tmp_listcomp$tuple_unpack_4__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_73;
        exception_value = exception_keeper_value_73;
        exception_tb = exception_keeper_tb_73;
        exception_lineno = exception_keeper_lineno_73;

        goto try_except_handler_80;
        // End of try:
        try_end_45:;
        goto try_end_46;
        // Exception handler code:
        try_except_handler_80:;
        exception_keeper_type_74 = exception_type;
        exception_keeper_value_74 = exception_value;
        exception_keeper_tb_74 = exception_tb;
        exception_keeper_lineno_74 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_4__element_1);
        tmp_listcomp$tuple_unpack_4__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_4__element_2);
        tmp_listcomp$tuple_unpack_4__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_74;
        exception_value = exception_keeper_value_74;
        exception_tb = exception_keeper_tb_74;
        exception_lineno = exception_keeper_lineno_74;

        goto try_except_handler_79;
        // End of try:
        try_end_46:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_4__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_4__source_iter);
        tmp_listcomp$tuple_unpack_4__source_iter = NULL;
        {
            PyObject *tmp_assign_source_203;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_4__element_1);
            tmp_assign_source_203 = tmp_listcomp$tuple_unpack_4__element_1;
            {
                PyObject *old = outline_11_var_v;
                outline_11_var_v = tmp_assign_source_203;
                Py_INCREF(outline_11_var_v);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_4__element_1);
        tmp_listcomp$tuple_unpack_4__element_1 = NULL;

        {
            PyObject *tmp_assign_source_204;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_4__element_2);
            tmp_assign_source_204 = tmp_listcomp$tuple_unpack_4__element_2;
            {
                PyObject *old = outline_11_var_m;
                outline_11_var_m = tmp_assign_source_204;
                Py_INCREF(outline_11_var_m);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_4__element_2);
        tmp_listcomp$tuple_unpack_4__element_2 = NULL;

        {
            PyObject *tmp_append_list_12;
            PyObject *tmp_append_value_12;
            PyObject *tmp_compexpr_left_41;
            PyObject *tmp_compexpr_right_41;
            PyObject *tmp_called_instance_20;
            CHECK_OBJECT(tmp_listcomp_12__contraction);
            tmp_append_list_12 = tmp_listcomp_12__contraction;
            CHECK_OBJECT(outline_11_var_v);
            tmp_called_instance_20 = outline_11_var_v;
            frame_62f242fb3036b9aad5dd90e51b1b762f_13->m_frame.f_lineno = 2034;
            tmp_compexpr_left_41 = CALL_METHOD_NO_ARGS(tmp_called_instance_20, mod_consts[229]);
            if (tmp_compexpr_left_41 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2034;
                type_description_2 = "oo";
                goto try_except_handler_79;
            }
            CHECK_OBJECT(outline_11_var_m);
            tmp_compexpr_right_41 = outline_11_var_m;
            tmp_res = PySequence_Contains(tmp_compexpr_right_41, tmp_compexpr_left_41);
            Py_DECREF(tmp_compexpr_left_41);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2034;
                type_description_2 = "oo";
                goto try_except_handler_79;
            }
            tmp_append_value_12 = (tmp_res == 1) ? Py_True : Py_False;
            assert(PyList_Check(tmp_append_list_12));
            tmp_result = LIST_APPEND0(tmp_append_list_12, tmp_append_value_12);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2034;
                type_description_2 = "oo";
                goto try_except_handler_79;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2034;
            type_description_2 = "oo";
            goto try_except_handler_79;
        }
        goto loop_start_23;
        loop_end_23:;
        CHECK_OBJECT(tmp_listcomp_12__contraction);
        tmp_tuple_arg_2 = tmp_listcomp_12__contraction;
        Py_INCREF(tmp_tuple_arg_2);
        goto try_return_handler_79;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_79:;
        CHECK_OBJECT(tmp_listcomp_12__$0);
        Py_DECREF(tmp_listcomp_12__$0);
        tmp_listcomp_12__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_12__contraction);
        Py_DECREF(tmp_listcomp_12__contraction);
        tmp_listcomp_12__contraction = NULL;
        Py_XDECREF(tmp_listcomp_12__iter_value_0);
        tmp_listcomp_12__iter_value_0 = NULL;
        goto frame_return_exit_13;
        // Exception handler code:
        try_except_handler_79:;
        exception_keeper_type_75 = exception_type;
        exception_keeper_value_75 = exception_value;
        exception_keeper_tb_75 = exception_tb;
        exception_keeper_lineno_75 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_12__$0);
        Py_DECREF(tmp_listcomp_12__$0);
        tmp_listcomp_12__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_12__contraction);
        Py_DECREF(tmp_listcomp_12__contraction);
        tmp_listcomp_12__contraction = NULL;
        Py_XDECREF(tmp_listcomp_12__iter_value_0);
        tmp_listcomp_12__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_75;
        exception_value = exception_keeper_value_75;
        exception_tb = exception_keeper_tb_75;
        exception_lineno = exception_keeper_lineno_75;

        goto frame_exception_exit_13;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_62f242fb3036b9aad5dd90e51b1b762f_13);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_12;

        frame_return_exit_13:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_62f242fb3036b9aad5dd90e51b1b762f_13);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_78;

        frame_exception_exit_13:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_62f242fb3036b9aad5dd90e51b1b762f_13);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_62f242fb3036b9aad5dd90e51b1b762f_13, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_62f242fb3036b9aad5dd90e51b1b762f_13->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_62f242fb3036b9aad5dd90e51b1b762f_13, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_62f242fb3036b9aad5dd90e51b1b762f_13,
            type_description_2,
            outline_11_var_v,
            outline_11_var_m
        );


        // Release cached frame if used for exception.
        if (frame_62f242fb3036b9aad5dd90e51b1b762f_13 == cache_frame_62f242fb3036b9aad5dd90e51b1b762f_13) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_62f242fb3036b9aad5dd90e51b1b762f_13);
            cache_frame_62f242fb3036b9aad5dd90e51b1b762f_13 = NULL;
        }

        assertFrameObject(frame_62f242fb3036b9aad5dd90e51b1b762f_13);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_12;

        frame_no_exception_12:;
        goto skip_nested_handling_12;
        nested_frame_exit_12:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_78;
        skip_nested_handling_12:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_78:;
        Py_XDECREF(outline_11_var_v);
        outline_11_var_v = NULL;
        Py_XDECREF(outline_11_var_m);
        outline_11_var_m = NULL;
        goto outline_result_12;
        // Exception handler code:
        try_except_handler_78:;
        exception_keeper_type_76 = exception_type;
        exception_keeper_value_76 = exception_value;
        exception_keeper_tb_76 = exception_tb;
        exception_keeper_lineno_76 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_11_var_v);
        outline_11_var_v = NULL;
        Py_XDECREF(outline_11_var_m);
        outline_11_var_m = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_76;
        exception_value = exception_keeper_value_76;
        exception_tb = exception_keeper_tb_76;
        exception_lineno = exception_keeper_lineno_76;

        goto outline_exception_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_12:;
        exception_lineno = 2034;
        goto try_except_handler_71;
        outline_result_12:;
        tmp_args_element_name_49 = PySequence_Tuple(tmp_tuple_arg_2);
        Py_DECREF(tmp_tuple_arg_2);
        if (tmp_args_element_name_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2034;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2034;
        tmp_call_result_18 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_46, tmp_args_element_name_49);
        Py_DECREF(tmp_args_element_name_49);
        if (tmp_call_result_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2034;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        Py_DECREF(tmp_call_result_18);
    }
    branch_no_64:;
    {
        nuitka_bool tmp_condition_result_65;
        PyObject *tmp_compexpr_left_42;
        PyObject *tmp_compexpr_right_42;
        PyObject *tmp_len_arg_9;
        PyObject *tmp_tmp_condition_result_65_object_1;
        int tmp_truth_name_20;
        if (var_rows == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[348]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2037;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }

        tmp_len_arg_9 = var_rows;
        tmp_compexpr_left_42 = BUILTIN_LEN(tmp_len_arg_9);
        if (tmp_compexpr_left_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2037;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        if (par_max_rows == NULL) {
            Py_DECREF(tmp_compexpr_left_42);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[236]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2037;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }

        tmp_compexpr_right_42 = par_max_rows;
        tmp_tmp_condition_result_65_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_42, tmp_compexpr_right_42);
        Py_DECREF(tmp_compexpr_left_42);
        if (tmp_tmp_condition_result_65_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2037;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        tmp_truth_name_20 = CHECK_IF_TRUE(tmp_tmp_condition_result_65_object_1);
        if (tmp_truth_name_20 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_65_object_1);

            exception_lineno = 2037;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_71;
        }
        tmp_condition_result_65 = tmp_truth_name_20 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_65_object_1);
        if (tmp_condition_result_65 == NUITKA_BOOL_TRUE) {
            goto branch_yes_65;
        } else {
            goto branch_no_65;
        }
    }
    branch_yes_65:;
    goto loop_end_21;
    branch_no_65:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2015;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_71;
    }
    goto loop_start_21;
    loop_end_21:;
    goto try_end_47;
    // Exception handler code:
    try_except_handler_71:;
    exception_keeper_type_77 = exception_type;
    exception_keeper_value_77 = exception_value;
    exception_keeper_tb_77 = exception_tb;
    exception_keeper_lineno_77 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_10__iter_value);
    tmp_for_loop_10__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_10__for_iterator);
    Py_DECREF(tmp_for_loop_10__for_iterator);
    tmp_for_loop_10__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_77;
    exception_value = exception_keeper_value_77;
    exception_tb = exception_keeper_tb_77;
    exception_lineno = exception_keeper_lineno_77;

    goto try_except_handler_7;
    // End of try:
    try_end_47:;
    Py_XDECREF(tmp_for_loop_10__iter_value);
    tmp_for_loop_10__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_10__for_iterator);
    Py_DECREF(tmp_for_loop_10__for_iterator);
    tmp_for_loop_10__for_iterator = NULL;
    goto try_end_48;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_78 = exception_type;
    exception_keeper_value_78 = exception_value;
    exception_keeper_tb_78 = exception_tb;
    exception_keeper_lineno_78 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 12.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_12, &exception_preserved_value_12, &exception_preserved_tb_12);

    if (exception_keeper_tb_78 == NULL) {
        exception_keeper_tb_78 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_78);
    } else if (exception_keeper_lineno_78 != 0) {
        exception_keeper_tb_78 = ADD_TRACEBACK(exception_keeper_tb_78, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_78);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_78, &exception_keeper_value_78, &exception_keeper_tb_78);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_78, exception_keeper_tb_78);
    PUBLISH_EXCEPTION(&exception_keeper_type_78, &exception_keeper_value_78, &exception_keeper_tb_78);
    // Tried code:
    {
        bool tmp_condition_result_66;
        PyObject *tmp_compexpr_left_43;
        PyObject *tmp_compexpr_right_43;
        tmp_compexpr_left_43 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_43 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_43, tmp_compexpr_right_43);
        assert(!(tmp_res == -1));
        tmp_condition_result_66 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_66 != false) {
            goto branch_yes_66;
        } else {
            goto branch_no_66;
        }
    }
    branch_yes_66:;
    {
        nuitka_bool tmp_assign_source_205;
        tmp_assign_source_205 = NUITKA_BOOL_FALSE;
        tmp_with_1__indicator = tmp_assign_source_205;
    }
    {
        nuitka_bool tmp_condition_result_67;
        PyObject *tmp_operand_name_4;
        PyObject *tmp_called_name_48;
        PyObject *tmp_args_element_name_52;
        PyObject *tmp_args_element_name_53;
        PyObject *tmp_args_element_name_54;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_48 = tmp_with_1__exit;
        tmp_args_element_name_52 = EXC_TYPE(PyThreadState_GET());
        tmp_args_element_name_53 = EXC_VALUE(PyThreadState_GET());
        tmp_args_element_name_54 = EXC_TRACEBACK(PyThreadState_GET());
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2015;
        {
            PyObject *call_args[] = {tmp_args_element_name_52, tmp_args_element_name_53, tmp_args_element_name_54};
            tmp_operand_name_4 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_48, call_args);
        }

        if (tmp_operand_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_82;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_4);
        Py_DECREF(tmp_operand_name_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_82;
        }
        tmp_condition_result_67 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_67 == NUITKA_BOOL_TRUE) {
            goto branch_yes_67;
        } else {
            goto branch_no_67;
        }
    }
    branch_yes_67:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 2015;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_82;
    branch_no_67:;
    goto branch_end_66;
    branch_no_66:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1760;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_82;
    branch_end_66:;
    goto try_end_49;
    // Exception handler code:
    try_except_handler_82:;
    exception_keeper_type_79 = exception_type;
    exception_keeper_value_79 = exception_value;
    exception_keeper_tb_79 = exception_tb;
    exception_keeper_lineno_79 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 12.
    SET_CURRENT_EXCEPTION(exception_preserved_type_12, exception_preserved_value_12, exception_preserved_tb_12);

    // Re-raise.
    exception_type = exception_keeper_type_79;
    exception_value = exception_keeper_value_79;
    exception_tb = exception_keeper_tb_79;
    exception_lineno = exception_keeper_lineno_79;

    goto try_except_handler_6;
    // End of try:
    try_end_49:;
    // Restore previous exception id 12.
    SET_CURRENT_EXCEPTION(exception_preserved_type_12, exception_preserved_value_12, exception_preserved_tb_12);

    goto try_end_48;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_48:;
    goto try_end_50;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_80 = exception_type;
    exception_keeper_value_80 = exception_value;
    exception_keeper_tb_80 = exception_tb;
    exception_keeper_lineno_80 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        bool tmp_condition_result_68;
        nuitka_bool tmp_compexpr_left_44;
        nuitka_bool tmp_compexpr_right_44;
        assert(tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_44 = tmp_with_1__indicator;
        tmp_compexpr_right_44 = NUITKA_BOOL_TRUE;
        tmp_condition_result_68 = (tmp_compexpr_left_44 == tmp_compexpr_right_44) ? true : false;
        if (tmp_condition_result_68 != false) {
            goto branch_yes_68;
        } else {
            goto branch_no_68;
        }
    }
    branch_yes_68:;
    {
        PyObject *tmp_called_name_49;
        PyObject *tmp_call_result_19;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_49 = tmp_with_1__exit;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2015;
        tmp_call_result_19 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_name_49, mod_consts[75]);

        if (tmp_call_result_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            Py_DECREF(exception_keeper_type_80);
            Py_XDECREF(exception_keeper_value_80);
            Py_XDECREF(exception_keeper_tb_80);

            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_5;
        }
        Py_DECREF(tmp_call_result_19);
    }
    branch_no_68:;
    // Re-raise.
    exception_type = exception_keeper_type_80;
    exception_value = exception_keeper_value_80;
    exception_tb = exception_keeper_tb_80;
    exception_lineno = exception_keeper_lineno_80;

    goto try_except_handler_5;
    // End of try:
    try_end_50:;
    {
        bool tmp_condition_result_69;
        nuitka_bool tmp_compexpr_left_45;
        nuitka_bool tmp_compexpr_right_45;
        assert(tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_45 = tmp_with_1__indicator;
        tmp_compexpr_right_45 = NUITKA_BOOL_TRUE;
        tmp_condition_result_69 = (tmp_compexpr_left_45 == tmp_compexpr_right_45) ? true : false;
        if (tmp_condition_result_69 != false) {
            goto branch_yes_69;
        } else {
            goto branch_no_69;
        }
    }
    branch_yes_69:;
    {
        PyObject *tmp_called_name_50;
        PyObject *tmp_call_result_20;
        CHECK_OBJECT(tmp_with_1__exit);
        tmp_called_name_50 = tmp_with_1__exit;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2015;
        tmp_call_result_20 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_name_50, mod_consts[75]);

        if (tmp_call_result_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2015;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_5;
        }
        Py_DECREF(tmp_call_result_20);
    }
    branch_no_69:;
    goto try_end_51;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_81 = exception_type;
    exception_keeper_value_81 = exception_value;
    exception_keeper_tb_81 = exception_tb;
    exception_keeper_lineno_81 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_with_1__source);
    Py_DECREF(tmp_with_1__source);
    tmp_with_1__source = NULL;
    Py_XDECREF(tmp_with_1__enter);
    tmp_with_1__enter = NULL;
    Py_XDECREF(tmp_with_1__exit);
    tmp_with_1__exit = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_81;
    exception_value = exception_keeper_value_81;
    exception_tb = exception_keeper_tb_81;
    exception_lineno = exception_keeper_lineno_81;

    goto frame_exception_exit_1;
    // End of try:
    try_end_51:;
    CHECK_OBJECT(tmp_with_1__source);
    Py_DECREF(tmp_with_1__source);
    tmp_with_1__source = NULL;
    CHECK_OBJECT(tmp_with_1__enter);
    Py_DECREF(tmp_with_1__enter);
    tmp_with_1__enter = NULL;
    Py_XDECREF(tmp_with_1__exit);
    tmp_with_1__exit = NULL;
    {
        bool tmp_condition_result_70;
        PyObject *tmp_compexpr_left_46;
        PyObject *tmp_compexpr_right_46;
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2041;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_46 = par_dtype;
        tmp_compexpr_right_46 = Py_None;
        tmp_condition_result_70 = (tmp_compexpr_left_46 == tmp_compexpr_right_46) ? true : false;
        if (tmp_condition_result_70 != false) {
            goto branch_yes_70;
        } else {
            goto branch_no_70;
        }
    }
    branch_yes_70:;
    {
        PyObject *tmp_assign_source_206;
        PyObject *tmp_iter_arg_34;
        PyObject *tmp_called_name_51;
        PyObject *tmp_args_element_name_55;
        tmp_called_name_51 = (PyObject *)&PyEnum_Type;
        if (par_converters == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[191]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2042;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_55 = par_converters;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2042;
        tmp_iter_arg_34 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_51, tmp_args_element_name_55);
        if (tmp_iter_arg_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_206 = MAKE_ITERATOR(tmp_iter_arg_34);
        Py_DECREF(tmp_iter_arg_34);
        if (tmp_assign_source_206 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_11__for_iterator == NULL);
        tmp_for_loop_11__for_iterator = tmp_assign_source_206;
    }
    // Tried code:
    loop_start_24:;
    {
        PyObject *tmp_next_source_23;
        PyObject *tmp_assign_source_207;
        CHECK_OBJECT(tmp_for_loop_11__for_iterator);
        tmp_next_source_23 = tmp_for_loop_11__for_iterator;
        tmp_assign_source_207 = ITERATOR_NEXT(tmp_next_source_23);
        if (tmp_assign_source_207 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_24;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 2042;
                goto try_except_handler_83;
            }
        }

        {
            PyObject *old = tmp_for_loop_11__iter_value;
            tmp_for_loop_11__iter_value = tmp_assign_source_207;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_208;
        PyObject *tmp_iter_arg_35;
        CHECK_OBJECT(tmp_for_loop_11__iter_value);
        tmp_iter_arg_35 = tmp_for_loop_11__iter_value;
        tmp_assign_source_208 = MAKE_ITERATOR(tmp_iter_arg_35);
        if (tmp_assign_source_208 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2042;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_84;
        }
        {
            PyObject *old = tmp_tuple_unpack_7__source_iter;
            tmp_tuple_unpack_7__source_iter = tmp_assign_source_208;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_209;
        PyObject *tmp_unpack_22;
        CHECK_OBJECT(tmp_tuple_unpack_7__source_iter);
        tmp_unpack_22 = tmp_tuple_unpack_7__source_iter;
        tmp_assign_source_209 = UNPACK_NEXT(tmp_unpack_22, 0, 2);
        if (tmp_assign_source_209 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2042;
            goto try_except_handler_85;
        }
        {
            PyObject *old = tmp_tuple_unpack_7__element_1;
            tmp_tuple_unpack_7__element_1 = tmp_assign_source_209;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_210;
        PyObject *tmp_unpack_23;
        CHECK_OBJECT(tmp_tuple_unpack_7__source_iter);
        tmp_unpack_23 = tmp_tuple_unpack_7__source_iter;
        tmp_assign_source_210 = UNPACK_NEXT(tmp_unpack_23, 1, 2);
        if (tmp_assign_source_210 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2042;
            goto try_except_handler_85;
        }
        {
            PyObject *old = tmp_tuple_unpack_7__element_2;
            tmp_tuple_unpack_7__element_2 = tmp_assign_source_210;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_11;
        CHECK_OBJECT(tmp_tuple_unpack_7__source_iter);
        tmp_iterator_name_11 = tmp_tuple_unpack_7__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_11); assert(HAS_ITERNEXT(tmp_iterator_name_11));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_11)->tp_iternext)(tmp_iterator_name_11);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 2042;
                    goto try_except_handler_85;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2042;
            goto try_except_handler_85;
        }
    }
    goto try_end_52;
    // Exception handler code:
    try_except_handler_85:;
    exception_keeper_type_82 = exception_type;
    exception_keeper_value_82 = exception_value;
    exception_keeper_tb_82 = exception_tb;
    exception_keeper_lineno_82 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_7__source_iter);
    Py_DECREF(tmp_tuple_unpack_7__source_iter);
    tmp_tuple_unpack_7__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_82;
    exception_value = exception_keeper_value_82;
    exception_tb = exception_keeper_tb_82;
    exception_lineno = exception_keeper_lineno_82;

    goto try_except_handler_84;
    // End of try:
    try_end_52:;
    goto try_end_53;
    // Exception handler code:
    try_except_handler_84:;
    exception_keeper_type_83 = exception_type;
    exception_keeper_value_83 = exception_value;
    exception_keeper_tb_83 = exception_tb;
    exception_keeper_lineno_83 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_7__element_1);
    tmp_tuple_unpack_7__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_7__element_2);
    tmp_tuple_unpack_7__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_83;
    exception_value = exception_keeper_value_83;
    exception_tb = exception_keeper_tb_83;
    exception_lineno = exception_keeper_lineno_83;

    goto try_except_handler_83;
    // End of try:
    try_end_53:;
    CHECK_OBJECT(tmp_tuple_unpack_7__source_iter);
    Py_DECREF(tmp_tuple_unpack_7__source_iter);
    tmp_tuple_unpack_7__source_iter = NULL;
    {
        PyObject *tmp_assign_source_211;
        CHECK_OBJECT(tmp_tuple_unpack_7__element_1);
        tmp_assign_source_211 = tmp_tuple_unpack_7__element_1;
        {
            PyObject *old = Nuitka_Cell_GET(var_i);
            PyCell_SET(var_i, tmp_assign_source_211);
            Py_INCREF(tmp_assign_source_211);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_7__element_1);
    tmp_tuple_unpack_7__element_1 = NULL;

    {
        PyObject *tmp_assign_source_212;
        CHECK_OBJECT(tmp_tuple_unpack_7__element_2);
        tmp_assign_source_212 = tmp_tuple_unpack_7__element_2;
        {
            PyObject *old = var_converter;
            var_converter = tmp_assign_source_212;
            Py_INCREF(var_converter);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_7__element_2);
    tmp_tuple_unpack_7__element_2 = NULL;

    {
        PyObject *tmp_assign_source_213;
        // Tried code:
        {
            PyObject *tmp_assign_source_214;
            PyObject *tmp_iter_arg_36;
            if (var_rows == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[348]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2043;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_86;
            }

            tmp_iter_arg_36 = var_rows;
            tmp_assign_source_214 = MAKE_ITERATOR(tmp_iter_arg_36);
            if (tmp_assign_source_214 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2043;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_86;
            }
            {
                PyObject *old = tmp_listcomp_13__$0;
                tmp_listcomp_13__$0 = tmp_assign_source_214;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_215;
            tmp_assign_source_215 = PyList_New(0);
            {
                PyObject *old = tmp_listcomp_13__contraction;
                tmp_listcomp_13__contraction = tmp_assign_source_215;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_f63664256a3aadad9ae4696875b678c8_14)) {
            Py_XDECREF(cache_frame_f63664256a3aadad9ae4696875b678c8_14);

#if _DEBUG_REFCOUNTS
            if (cache_frame_f63664256a3aadad9ae4696875b678c8_14 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_f63664256a3aadad9ae4696875b678c8_14 = MAKE_FUNCTION_FRAME(codeobj_f63664256a3aadad9ae4696875b678c8, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_f63664256a3aadad9ae4696875b678c8_14->m_type_description == NULL);
        frame_f63664256a3aadad9ae4696875b678c8_14 = cache_frame_f63664256a3aadad9ae4696875b678c8_14;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_f63664256a3aadad9ae4696875b678c8_14);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_f63664256a3aadad9ae4696875b678c8_14) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_25:;
        {
            PyObject *tmp_next_source_24;
            PyObject *tmp_assign_source_216;
            CHECK_OBJECT(tmp_listcomp_13__$0);
            tmp_next_source_24 = tmp_listcomp_13__$0;
            tmp_assign_source_216 = ITERATOR_NEXT(tmp_next_source_24);
            if (tmp_assign_source_216 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_25;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oc";
                    exception_lineno = 2043;
                    goto try_except_handler_87;
                }
            }

            {
                PyObject *old = tmp_listcomp_13__iter_value_0;
                tmp_listcomp_13__iter_value_0 = tmp_assign_source_216;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_217;
            CHECK_OBJECT(tmp_listcomp_13__iter_value_0);
            tmp_assign_source_217 = tmp_listcomp_13__iter_value_0;
            {
                PyObject *old = outline_12_var__m;
                outline_12_var__m = tmp_assign_source_217;
                Py_INCREF(outline_12_var__m);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_13;
            PyObject *tmp_append_value_13;
            PyObject *tmp_called_name_52;
            PyObject *tmp_called_name_53;
            PyObject *tmp_args_element_name_56;
            PyObject *tmp_args_element_name_57;
            CHECK_OBJECT(tmp_listcomp_13__contraction);
            tmp_append_list_13 = tmp_listcomp_13__contraction;
            tmp_called_name_53 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[349]);

            if (unlikely(tmp_called_name_53 == NULL)) {
                tmp_called_name_53 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[349]);
            }

            if (tmp_called_name_53 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2043;
                type_description_2 = "oc";
                goto try_except_handler_87;
            }
            if (Nuitka_Cell_GET(var_i) == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[337]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2043;
                type_description_2 = "oc";
                goto try_except_handler_87;
            }

            tmp_args_element_name_56 = Nuitka_Cell_GET(var_i);
            frame_f63664256a3aadad9ae4696875b678c8_14->m_frame.f_lineno = 2043;
            tmp_called_name_52 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_53, tmp_args_element_name_56);
            if (tmp_called_name_52 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2043;
                type_description_2 = "oc";
                goto try_except_handler_87;
            }
            CHECK_OBJECT(outline_12_var__m);
            tmp_args_element_name_57 = outline_12_var__m;
            frame_f63664256a3aadad9ae4696875b678c8_14->m_frame.f_lineno = 2043;
            tmp_append_value_13 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_52, tmp_args_element_name_57);
            Py_DECREF(tmp_called_name_52);
            if (tmp_append_value_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2043;
                type_description_2 = "oc";
                goto try_except_handler_87;
            }
            assert(PyList_Check(tmp_append_list_13));
            tmp_result = LIST_APPEND1(tmp_append_list_13, tmp_append_value_13);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2043;
                type_description_2 = "oc";
                goto try_except_handler_87;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2043;
            type_description_2 = "oc";
            goto try_except_handler_87;
        }
        goto loop_start_25;
        loop_end_25:;
        CHECK_OBJECT(tmp_listcomp_13__contraction);
        tmp_assign_source_213 = tmp_listcomp_13__contraction;
        Py_INCREF(tmp_assign_source_213);
        goto try_return_handler_87;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_87:;
        CHECK_OBJECT(tmp_listcomp_13__$0);
        Py_DECREF(tmp_listcomp_13__$0);
        tmp_listcomp_13__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_13__contraction);
        Py_DECREF(tmp_listcomp_13__contraction);
        tmp_listcomp_13__contraction = NULL;
        Py_XDECREF(tmp_listcomp_13__iter_value_0);
        tmp_listcomp_13__iter_value_0 = NULL;
        goto frame_return_exit_14;
        // Exception handler code:
        try_except_handler_87:;
        exception_keeper_type_84 = exception_type;
        exception_keeper_value_84 = exception_value;
        exception_keeper_tb_84 = exception_tb;
        exception_keeper_lineno_84 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_13__$0);
        Py_DECREF(tmp_listcomp_13__$0);
        tmp_listcomp_13__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_13__contraction);
        Py_DECREF(tmp_listcomp_13__contraction);
        tmp_listcomp_13__contraction = NULL;
        Py_XDECREF(tmp_listcomp_13__iter_value_0);
        tmp_listcomp_13__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_84;
        exception_value = exception_keeper_value_84;
        exception_tb = exception_keeper_tb_84;
        exception_lineno = exception_keeper_lineno_84;

        goto frame_exception_exit_14;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f63664256a3aadad9ae4696875b678c8_14);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_13;

        frame_return_exit_14:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_f63664256a3aadad9ae4696875b678c8_14);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_86;

        frame_exception_exit_14:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f63664256a3aadad9ae4696875b678c8_14);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_f63664256a3aadad9ae4696875b678c8_14, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_f63664256a3aadad9ae4696875b678c8_14->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_f63664256a3aadad9ae4696875b678c8_14, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_f63664256a3aadad9ae4696875b678c8_14,
            type_description_2,
            outline_12_var__m,
            var_i
        );


        // Release cached frame if used for exception.
        if (frame_f63664256a3aadad9ae4696875b678c8_14 == cache_frame_f63664256a3aadad9ae4696875b678c8_14) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_f63664256a3aadad9ae4696875b678c8_14);
            cache_frame_f63664256a3aadad9ae4696875b678c8_14 = NULL;
        }

        assertFrameObject(frame_f63664256a3aadad9ae4696875b678c8_14);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_13;

        frame_no_exception_13:;
        goto skip_nested_handling_13;
        nested_frame_exit_13:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_86;
        skip_nested_handling_13:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_86:;
        Py_XDECREF(outline_12_var__m);
        outline_12_var__m = NULL;
        goto outline_result_13;
        // Exception handler code:
        try_except_handler_86:;
        exception_keeper_type_85 = exception_type;
        exception_keeper_value_85 = exception_value;
        exception_keeper_tb_85 = exception_tb;
        exception_keeper_lineno_85 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_12_var__m);
        outline_12_var__m = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_85;
        exception_value = exception_keeper_value_85;
        exception_tb = exception_keeper_tb_85;
        exception_lineno = exception_keeper_lineno_85;

        goto outline_exception_13;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_13:;
        exception_lineno = 2043;
        goto try_except_handler_83;
        outline_result_13:;
        {
            PyObject *old = var_current_column;
            var_current_column = tmp_assign_source_213;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_called_instance_21;
        PyObject *tmp_call_result_21;
        PyObject *tmp_args_element_name_58;
        CHECK_OBJECT(var_converter);
        tmp_called_instance_21 = var_converter;
        CHECK_OBJECT(var_current_column);
        tmp_args_element_name_58 = var_current_column;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2045;
        tmp_call_result_21 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_21, mod_consts[350], tmp_args_element_name_58);
        if (tmp_call_result_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2045;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_88;
        }
        Py_DECREF(tmp_call_result_21);
    }
    goto try_end_54;
    // Exception handler code:
    try_except_handler_88:;
    exception_keeper_type_86 = exception_type;
    exception_keeper_value_86 = exception_value;
    exception_keeper_tb_86 = exception_tb;
    exception_keeper_lineno_86 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 14.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_14, &exception_preserved_value_14, &exception_preserved_tb_14);

    if (exception_keeper_tb_86 == NULL) {
        exception_keeper_tb_86 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_86);
    } else if (exception_keeper_lineno_86 != 0) {
        exception_keeper_tb_86 = ADD_TRACEBACK(exception_keeper_tb_86, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_86);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_86, &exception_keeper_value_86, &exception_keeper_tb_86);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_86, exception_keeper_tb_86);
    PUBLISH_EXCEPTION(&exception_keeper_type_86, &exception_keeper_value_86, &exception_keeper_tb_86);
    // Tried code:
    {
        bool tmp_condition_result_71;
        PyObject *tmp_compexpr_left_47;
        PyObject *tmp_compexpr_right_47;
        tmp_compexpr_left_47 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_47 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[351]);

        if (unlikely(tmp_compexpr_right_47 == NULL)) {
            tmp_compexpr_right_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[351]);
        }

        if (tmp_compexpr_right_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2046;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_89;
        }
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_47, tmp_compexpr_right_47);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2046;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_89;
        }
        tmp_condition_result_71 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_71 != false) {
            goto branch_yes_71;
        } else {
            goto branch_no_71;
        }
    }
    branch_yes_71:;
    {
        PyObject *tmp_assign_source_218;
        PyObject *tmp_left_name_11;
        PyObject *tmp_right_name_11;
        tmp_left_name_11 = mod_consts[352];
        if (Nuitka_Cell_GET(var_i) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[337]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2047;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_89;
        }

        tmp_right_name_11 = Nuitka_Cell_GET(var_i);
        tmp_assign_source_218 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_11, tmp_right_name_11);
        if (tmp_assign_source_218 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2047;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_89;
        }
        {
            PyObject *old = var_errmsg;
            var_errmsg = tmp_assign_source_218;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_219;
        PyObject *tmp_called_name_54;
        PyObject *tmp_args_element_name_59;
        PyObject *tmp_called_name_55;
        PyObject *tmp_args_element_name_60;
        PyObject *tmp_args_element_name_61;
        tmp_called_name_54 = (PyObject *)&PyMap_Type;
        tmp_called_name_55 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[349]);

        if (unlikely(tmp_called_name_55 == NULL)) {
            tmp_called_name_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[349]);
        }

        if (tmp_called_name_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2048;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_89;
        }
        if (Nuitka_Cell_GET(var_i) == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[337]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2048;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_89;
        }

        tmp_args_element_name_60 = Nuitka_Cell_GET(var_i);
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2048;
        tmp_args_element_name_59 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_55, tmp_args_element_name_60);
        if (tmp_args_element_name_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2048;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_89;
        }
        if (var_rows == NULL) {
            Py_DECREF(tmp_args_element_name_59);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[348]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2048;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_89;
        }

        tmp_args_element_name_61 = var_rows;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2048;
        {
            PyObject *call_args[] = {tmp_args_element_name_59, tmp_args_element_name_61};
            tmp_assign_source_219 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_54, call_args);
        }

        Py_DECREF(tmp_args_element_name_59);
        if (tmp_assign_source_219 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2048;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_89;
        }
        {
            PyObject *old = var_current_column;
            var_current_column = tmp_assign_source_219;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_220;
        PyObject *tmp_iter_arg_37;
        PyObject *tmp_called_name_56;
        PyObject *tmp_args_element_name_62;
        tmp_called_name_56 = (PyObject *)&PyEnum_Type;
        CHECK_OBJECT(var_current_column);
        tmp_args_element_name_62 = var_current_column;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2049;
        tmp_iter_arg_37 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_56, tmp_args_element_name_62);
        if (tmp_iter_arg_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2049;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_89;
        }
        tmp_assign_source_220 = MAKE_ITERATOR(tmp_iter_arg_37);
        Py_DECREF(tmp_iter_arg_37);
        if (tmp_assign_source_220 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2049;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_89;
        }
        {
            PyObject *old = tmp_for_loop_12__for_iterator;
            tmp_for_loop_12__for_iterator = tmp_assign_source_220;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_26:;
    {
        PyObject *tmp_next_source_25;
        PyObject *tmp_assign_source_221;
        CHECK_OBJECT(tmp_for_loop_12__for_iterator);
        tmp_next_source_25 = tmp_for_loop_12__for_iterator;
        tmp_assign_source_221 = ITERATOR_NEXT(tmp_next_source_25);
        if (tmp_assign_source_221 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_26;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 2049;
                goto try_except_handler_90;
            }
        }

        {
            PyObject *old = tmp_for_loop_12__iter_value;
            tmp_for_loop_12__iter_value = tmp_assign_source_221;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_222;
        PyObject *tmp_iter_arg_38;
        CHECK_OBJECT(tmp_for_loop_12__iter_value);
        tmp_iter_arg_38 = tmp_for_loop_12__iter_value;
        tmp_assign_source_222 = MAKE_ITERATOR(tmp_iter_arg_38);
        if (tmp_assign_source_222 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2049;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_91;
        }
        {
            PyObject *old = tmp_tuple_unpack_8__source_iter;
            tmp_tuple_unpack_8__source_iter = tmp_assign_source_222;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_223;
        PyObject *tmp_unpack_24;
        CHECK_OBJECT(tmp_tuple_unpack_8__source_iter);
        tmp_unpack_24 = tmp_tuple_unpack_8__source_iter;
        tmp_assign_source_223 = UNPACK_NEXT(tmp_unpack_24, 0, 2);
        if (tmp_assign_source_223 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2049;
            goto try_except_handler_92;
        }
        {
            PyObject *old = tmp_tuple_unpack_8__element_1;
            tmp_tuple_unpack_8__element_1 = tmp_assign_source_223;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_224;
        PyObject *tmp_unpack_25;
        CHECK_OBJECT(tmp_tuple_unpack_8__source_iter);
        tmp_unpack_25 = tmp_tuple_unpack_8__source_iter;
        tmp_assign_source_224 = UNPACK_NEXT(tmp_unpack_25, 1, 2);
        if (tmp_assign_source_224 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2049;
            goto try_except_handler_92;
        }
        {
            PyObject *old = tmp_tuple_unpack_8__element_2;
            tmp_tuple_unpack_8__element_2 = tmp_assign_source_224;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_12;
        CHECK_OBJECT(tmp_tuple_unpack_8__source_iter);
        tmp_iterator_name_12 = tmp_tuple_unpack_8__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_12); assert(HAS_ITERNEXT(tmp_iterator_name_12));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_12)->tp_iternext)(tmp_iterator_name_12);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 2049;
                    goto try_except_handler_92;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2049;
            goto try_except_handler_92;
        }
    }
    goto try_end_55;
    // Exception handler code:
    try_except_handler_92:;
    exception_keeper_type_87 = exception_type;
    exception_keeper_value_87 = exception_value;
    exception_keeper_tb_87 = exception_tb;
    exception_keeper_lineno_87 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_8__source_iter);
    Py_DECREF(tmp_tuple_unpack_8__source_iter);
    tmp_tuple_unpack_8__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_87;
    exception_value = exception_keeper_value_87;
    exception_tb = exception_keeper_tb_87;
    exception_lineno = exception_keeper_lineno_87;

    goto try_except_handler_91;
    // End of try:
    try_end_55:;
    goto try_end_56;
    // Exception handler code:
    try_except_handler_91:;
    exception_keeper_type_88 = exception_type;
    exception_keeper_value_88 = exception_value;
    exception_keeper_tb_88 = exception_tb;
    exception_keeper_lineno_88 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_8__element_1);
    tmp_tuple_unpack_8__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_8__element_2);
    tmp_tuple_unpack_8__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_88;
    exception_value = exception_keeper_value_88;
    exception_tb = exception_keeper_tb_88;
    exception_lineno = exception_keeper_lineno_88;

    goto try_except_handler_90;
    // End of try:
    try_end_56:;
    CHECK_OBJECT(tmp_tuple_unpack_8__source_iter);
    Py_DECREF(tmp_tuple_unpack_8__source_iter);
    tmp_tuple_unpack_8__source_iter = NULL;
    {
        PyObject *tmp_assign_source_225;
        CHECK_OBJECT(tmp_tuple_unpack_8__element_1);
        tmp_assign_source_225 = tmp_tuple_unpack_8__element_1;
        {
            PyObject *old = var_j;
            var_j = tmp_assign_source_225;
            Py_INCREF(var_j);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_8__element_1);
    tmp_tuple_unpack_8__element_1 = NULL;

    {
        PyObject *tmp_assign_source_226;
        CHECK_OBJECT(tmp_tuple_unpack_8__element_2);
        tmp_assign_source_226 = tmp_tuple_unpack_8__element_2;
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_226;
            Py_INCREF(var_value);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_8__element_2);
    tmp_tuple_unpack_8__element_2 = NULL;

    // Tried code:
    {
        PyObject *tmp_called_instance_22;
        PyObject *tmp_call_result_22;
        PyObject *tmp_args_element_name_63;
        if (var_converter == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[353]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2051;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_93;
        }

        tmp_called_instance_22 = var_converter;
        CHECK_OBJECT(var_value);
        tmp_args_element_name_63 = var_value;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2051;
        tmp_call_result_22 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_22, mod_consts[354], tmp_args_element_name_63);
        if (tmp_call_result_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2051;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_93;
        }
        Py_DECREF(tmp_call_result_22);
    }
    goto try_end_57;
    // Exception handler code:
    try_except_handler_93:;
    exception_keeper_type_89 = exception_type;
    exception_keeper_value_89 = exception_value;
    exception_keeper_tb_89 = exception_tb;
    exception_keeper_lineno_89 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 13.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_13, &exception_preserved_value_13, &exception_preserved_tb_13);

    if (exception_keeper_tb_89 == NULL) {
        exception_keeper_tb_89 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_89);
    } else if (exception_keeper_lineno_89 != 0) {
        exception_keeper_tb_89 = ADD_TRACEBACK(exception_keeper_tb_89, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_89);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_89, &exception_keeper_value_89, &exception_keeper_tb_89);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_89, exception_keeper_tb_89);
    PUBLISH_EXCEPTION(&exception_keeper_type_89, &exception_keeper_value_89, &exception_keeper_tb_89);
    // Tried code:
    {
        bool tmp_condition_result_72;
        PyObject *tmp_compexpr_left_48;
        PyObject *tmp_compexpr_right_48;
        PyObject *tmp_tuple_element_6;
        tmp_compexpr_left_48 = EXC_TYPE(PyThreadState_GET());
        tmp_tuple_element_6 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[355]);

        if (unlikely(tmp_tuple_element_6 == NULL)) {
            tmp_tuple_element_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[355]);
        }

        if (tmp_tuple_element_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2052;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_94;
        }
        tmp_compexpr_right_48 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_compexpr_right_48, 0, tmp_tuple_element_6);
        tmp_tuple_element_6 = PyExc_ValueError;
        PyTuple_SET_ITEM0(tmp_compexpr_right_48, 1, tmp_tuple_element_6);
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_48, tmp_compexpr_right_48);
        Py_DECREF(tmp_compexpr_right_48);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2052;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_94;
        }
        tmp_condition_result_72 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_72 != false) {
            goto branch_yes_72;
        } else {
            goto branch_no_72;
        }
    }
    branch_yes_72:;
    {
        PyObject *tmp_assign_source_227;
        PyObject *tmp_left_name_12;
        PyObject *tmp_right_name_12;
        if (var_errmsg == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[356]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2053;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_94;
        }

        tmp_left_name_12 = var_errmsg;
        tmp_right_name_12 = mod_consts[357];
        tmp_result = BINARY_OPERATION_ADD_OBJECT_UNICODE_INPLACE(&tmp_left_name_12, tmp_right_name_12);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_94;
        }
        tmp_assign_source_227 = tmp_left_name_12;
        var_errmsg = tmp_assign_source_227;

    }
    {
        PyObject *tmp_assign_source_228;
        PyObject *tmp_left_name_13;
        PyObject *tmp_right_name_13;
        PyObject *tmp_tuple_element_7;
        PyObject *tmp_left_name_14;
        PyObject *tmp_left_name_15;
        PyObject *tmp_right_name_14;
        PyObject *tmp_right_name_15;
        CHECK_OBJECT(var_errmsg);
        tmp_left_name_13 = var_errmsg;
        CHECK_OBJECT(var_j);
        tmp_left_name_15 = var_j;
        tmp_right_name_14 = mod_consts[63];
        tmp_left_name_14 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_15, tmp_right_name_14);
        if (tmp_left_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2054;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_94;
        }
        if (par_skip_header == NULL) {
            Py_DECREF(tmp_left_name_14);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[343]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2054;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_94;
        }

        tmp_right_name_15 = par_skip_header;
        tmp_tuple_element_7 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_14, tmp_right_name_15);
        Py_DECREF(tmp_left_name_14);
        if (tmp_tuple_element_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2054;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_94;
        }
        tmp_right_name_13 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_13, 0, tmp_tuple_element_7);
        if (var_value == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[358]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2054;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto tuple_build_exception_2;
        }

        tmp_tuple_element_7 = var_value;
        PyTuple_SET_ITEM0(tmp_right_name_13, 1, tmp_tuple_element_7);
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_right_name_13);
        goto try_except_handler_94;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        tmp_result = BINARY_OPERATION_MOD_OBJECT_TUPLE_INPLACE(&tmp_left_name_13, tmp_right_name_13);
        Py_DECREF(tmp_right_name_13);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2054;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_94;
        }
        tmp_assign_source_228 = tmp_left_name_13;
        var_errmsg = tmp_assign_source_228;

    }
    {
        PyObject *tmp_raise_type_5;
        PyObject *tmp_called_name_57;
        PyObject *tmp_args_element_name_64;
        tmp_called_name_57 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[355]);

        if (unlikely(tmp_called_name_57 == NULL)) {
            tmp_called_name_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[355]);
        }

        if (tmp_called_name_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2055;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_94;
        }
        CHECK_OBJECT(var_errmsg);
        tmp_args_element_name_64 = var_errmsg;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2055;
        tmp_raise_type_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_57, tmp_args_element_name_64);
        if (tmp_raise_type_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2055;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_94;
        }
        exception_type = tmp_raise_type_5;
        exception_lineno = 2055;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_94;
    }
    goto branch_end_72;
    branch_no_72:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 2050;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_94;
    branch_end_72:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_94:;
    exception_keeper_type_90 = exception_type;
    exception_keeper_value_90 = exception_value;
    exception_keeper_tb_90 = exception_tb;
    exception_keeper_lineno_90 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 13.
    SET_CURRENT_EXCEPTION(exception_preserved_type_13, exception_preserved_value_13, exception_preserved_tb_13);

    // Re-raise.
    exception_type = exception_keeper_type_90;
    exception_value = exception_keeper_value_90;
    exception_tb = exception_keeper_tb_90;
    exception_lineno = exception_keeper_lineno_90;

    goto try_except_handler_90;
    // End of try:
    // End of try:
    try_end_57:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2049;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_90;
    }
    goto loop_start_26;
    loop_end_26:;
    goto try_end_58;
    // Exception handler code:
    try_except_handler_90:;
    exception_keeper_type_91 = exception_type;
    exception_keeper_value_91 = exception_value;
    exception_keeper_tb_91 = exception_tb;
    exception_keeper_lineno_91 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_12__iter_value);
    tmp_for_loop_12__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_12__for_iterator);
    Py_DECREF(tmp_for_loop_12__for_iterator);
    tmp_for_loop_12__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_91;
    exception_value = exception_keeper_value_91;
    exception_tb = exception_keeper_tb_91;
    exception_lineno = exception_keeper_lineno_91;

    goto try_except_handler_89;
    // End of try:
    try_end_58:;
    Py_XDECREF(tmp_for_loop_12__iter_value);
    tmp_for_loop_12__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_12__for_iterator);
    Py_DECREF(tmp_for_loop_12__for_iterator);
    tmp_for_loop_12__for_iterator = NULL;
    goto branch_end_71;
    branch_no_71:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 2044;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_89;
    branch_end_71:;
    goto try_end_59;
    // Exception handler code:
    try_except_handler_89:;
    exception_keeper_type_92 = exception_type;
    exception_keeper_value_92 = exception_value;
    exception_keeper_tb_92 = exception_tb;
    exception_keeper_lineno_92 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 14.
    SET_CURRENT_EXCEPTION(exception_preserved_type_14, exception_preserved_value_14, exception_preserved_tb_14);

    // Re-raise.
    exception_type = exception_keeper_type_92;
    exception_value = exception_keeper_value_92;
    exception_tb = exception_keeper_tb_92;
    exception_lineno = exception_keeper_lineno_92;

    goto try_except_handler_83;
    // End of try:
    try_end_59:;
    // Restore previous exception id 14.
    SET_CURRENT_EXCEPTION(exception_preserved_type_14, exception_preserved_value_14, exception_preserved_tb_14);

    goto try_end_54;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_54:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2042;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_83;
    }
    goto loop_start_24;
    loop_end_24:;
    goto try_end_60;
    // Exception handler code:
    try_except_handler_83:;
    exception_keeper_type_93 = exception_type;
    exception_keeper_value_93 = exception_value;
    exception_keeper_tb_93 = exception_tb;
    exception_keeper_lineno_93 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_11__iter_value);
    tmp_for_loop_11__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_11__for_iterator);
    Py_DECREF(tmp_for_loop_11__for_iterator);
    tmp_for_loop_11__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_93;
    exception_value = exception_keeper_value_93;
    exception_tb = exception_keeper_tb_93;
    exception_lineno = exception_keeper_lineno_93;

    goto frame_exception_exit_1;
    // End of try:
    try_end_60:;
    Py_XDECREF(tmp_for_loop_11__iter_value);
    tmp_for_loop_11__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_11__for_iterator);
    Py_DECREF(tmp_for_loop_11__for_iterator);
    tmp_for_loop_11__for_iterator = NULL;
    branch_no_70:;
    {
        PyObject *tmp_assign_source_229;
        PyObject *tmp_len_arg_10;
        if (var_invalid == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[359]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2058;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_len_arg_10 = var_invalid;
        tmp_assign_source_229 = BUILTIN_LEN(tmp_len_arg_10);
        if (tmp_assign_source_229 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2058;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_nbinvalid == NULL);
        var_nbinvalid = tmp_assign_source_229;
    }
    {
        bool tmp_condition_result_73;
        PyObject *tmp_compexpr_left_49;
        PyObject *tmp_compexpr_right_49;
        PyObject *tmp_tmp_condition_result_73_object_1;
        CHECK_OBJECT(var_nbinvalid);
        tmp_compexpr_left_49 = var_nbinvalid;
        tmp_compexpr_right_49 = mod_consts[16];
        tmp_tmp_condition_result_73_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_49, tmp_compexpr_right_49);
        assert(!(tmp_tmp_condition_result_73_object_1 == NULL));
        tmp_condition_result_73 = CHECK_IF_TRUE(tmp_tmp_condition_result_73_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_73_object_1);
        if (tmp_condition_result_73 != false) {
            goto branch_yes_73;
        } else {
            goto branch_no_73;
        }
    }
    branch_yes_73:;
    {
        PyObject *tmp_assign_source_230;
        PyObject *tmp_left_name_16;
        PyObject *tmp_left_name_17;
        PyObject *tmp_len_arg_11;
        PyObject *tmp_right_name_16;
        PyObject *tmp_right_name_17;
        if (var_rows == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[348]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2060;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_len_arg_11 = var_rows;
        tmp_left_name_17 = BUILTIN_LEN(tmp_len_arg_11);
        if (tmp_left_name_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2060;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_nbinvalid);
        tmp_right_name_16 = var_nbinvalid;
        tmp_left_name_16 = BINARY_OPERATION_ADD_OBJECT_LONG_LONG(tmp_left_name_17, tmp_right_name_16);
        Py_DECREF(tmp_left_name_17);
        assert(!(tmp_left_name_16 == NULL));
        CHECK_OBJECT(par_skip_footer);
        tmp_right_name_17 = par_skip_footer;
        tmp_assign_source_230 = BINARY_OPERATION_SUB_OBJECT_LONG_OBJECT(tmp_left_name_16, tmp_right_name_17);
        Py_DECREF(tmp_left_name_16);
        if (tmp_assign_source_230 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2060;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_nbrows == NULL);
        var_nbrows = tmp_assign_source_230;
    }
    {
        PyObject *tmp_assign_source_231;
        PyObject *tmp_left_name_18;
        PyObject *tmp_right_name_18;
        tmp_left_name_18 = mod_consts[360];
        if (var_nbcols == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[344]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2062;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_right_name_18 = var_nbcols;
        tmp_assign_source_231 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_18, tmp_right_name_18);
        if (tmp_assign_source_231 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2062;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_template == NULL);
        var_template = tmp_assign_source_231;
    }
    {
        nuitka_bool tmp_condition_result_74;
        PyObject *tmp_compexpr_left_50;
        PyObject *tmp_compexpr_right_50;
        PyObject *tmp_tmp_condition_result_74_object_1;
        int tmp_truth_name_21;
        CHECK_OBJECT(par_skip_footer);
        tmp_compexpr_left_50 = par_skip_footer;
        tmp_compexpr_right_50 = mod_consts[16];
        tmp_tmp_condition_result_74_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_50, tmp_compexpr_right_50);
        if (tmp_tmp_condition_result_74_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2063;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_21 = CHECK_IF_TRUE(tmp_tmp_condition_result_74_object_1);
        if (tmp_truth_name_21 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_74_object_1);

            exception_lineno = 2063;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_74 = tmp_truth_name_21 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_74_object_1);
        if (tmp_condition_result_74 == NUITKA_BOOL_TRUE) {
            goto branch_yes_74;
        } else {
            goto branch_no_74;
        }
    }
    branch_yes_74:;
    {
        PyObject *tmp_assign_source_232;
        PyObject *tmp_len_arg_12;
        // Tried code:
        {
            PyObject *tmp_assign_source_233;
            PyObject *tmp_iter_arg_39;
            if (var_invalid == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[359]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2064;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_95;
            }

            tmp_iter_arg_39 = var_invalid;
            tmp_assign_source_233 = MAKE_ITERATOR(tmp_iter_arg_39);
            if (tmp_assign_source_233 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2064;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_95;
            }
            assert(tmp_listcomp_14__$0 == NULL);
            tmp_listcomp_14__$0 = tmp_assign_source_233;
        }
        {
            PyObject *tmp_assign_source_234;
            tmp_assign_source_234 = PyList_New(0);
            assert(tmp_listcomp_14__contraction == NULL);
            tmp_listcomp_14__contraction = tmp_assign_source_234;
        }
        if (isFrameUnusable(cache_frame_706481369d52597022642401acff5ca9_15)) {
            Py_XDECREF(cache_frame_706481369d52597022642401acff5ca9_15);

#if _DEBUG_REFCOUNTS
            if (cache_frame_706481369d52597022642401acff5ca9_15 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_706481369d52597022642401acff5ca9_15 = MAKE_FUNCTION_FRAME(codeobj_706481369d52597022642401acff5ca9, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_706481369d52597022642401acff5ca9_15->m_type_description == NULL);
        frame_706481369d52597022642401acff5ca9_15 = cache_frame_706481369d52597022642401acff5ca9_15;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_706481369d52597022642401acff5ca9_15);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_706481369d52597022642401acff5ca9_15) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_27:;
        {
            PyObject *tmp_next_source_26;
            PyObject *tmp_assign_source_235;
            CHECK_OBJECT(tmp_listcomp_14__$0);
            tmp_next_source_26 = tmp_listcomp_14__$0;
            tmp_assign_source_235 = ITERATOR_NEXT(tmp_next_source_26);
            if (tmp_assign_source_235 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_27;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "ooo";
                    exception_lineno = 2064;
                    goto try_except_handler_96;
                }
            }

            {
                PyObject *old = tmp_listcomp_14__iter_value_0;
                tmp_listcomp_14__iter_value_0 = tmp_assign_source_235;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_236;
            CHECK_OBJECT(tmp_listcomp_14__iter_value_0);
            tmp_assign_source_236 = tmp_listcomp_14__iter_value_0;
            {
                PyObject *old = outline_13_var__;
                outline_13_var__ = tmp_assign_source_236;
                Py_INCREF(outline_13_var__);
                Py_XDECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_75;
            PyObject *tmp_compexpr_left_51;
            PyObject *tmp_compexpr_right_51;
            PyObject *tmp_expression_name_37;
            PyObject *tmp_subscript_name_12;
            PyObject *tmp_left_name_19;
            PyObject *tmp_right_name_19;
            CHECK_OBJECT(outline_13_var__);
            tmp_expression_name_37 = outline_13_var__;
            tmp_subscript_name_12 = mod_consts[16];
            tmp_compexpr_left_51 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_37, tmp_subscript_name_12, 0);
            if (tmp_compexpr_left_51 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2065;
                type_description_2 = "ooo";
                goto try_except_handler_96;
            }
            if (var_nbrows == NULL) {
                Py_DECREF(tmp_compexpr_left_51);
                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[361]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2065;
                type_description_2 = "ooo";
                goto try_except_handler_96;
            }

            tmp_left_name_19 = var_nbrows;
            if (par_skip_header == NULL) {
                Py_DECREF(tmp_compexpr_left_51);
                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[343]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2065;
                type_description_2 = "ooo";
                goto try_except_handler_96;
            }

            tmp_right_name_19 = par_skip_header;
            tmp_compexpr_right_51 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_19, tmp_right_name_19);
            if (tmp_compexpr_right_51 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_compexpr_left_51);

                exception_lineno = 2065;
                type_description_2 = "ooo";
                goto try_except_handler_96;
            }
            tmp_condition_result_75 = RICH_COMPARE_GT_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_51, tmp_compexpr_right_51);
            Py_DECREF(tmp_compexpr_left_51);
            Py_DECREF(tmp_compexpr_right_51);
            if (tmp_condition_result_75 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2065;
                type_description_2 = "ooo";
                goto try_except_handler_96;
            }
            if (tmp_condition_result_75 == NUITKA_BOOL_TRUE) {
                goto branch_yes_75;
            } else {
                goto branch_no_75;
            }
            assert(tmp_condition_result_75 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_75:;
        {
            PyObject *tmp_append_list_14;
            PyObject *tmp_append_value_14;
            CHECK_OBJECT(tmp_listcomp_14__contraction);
            tmp_append_list_14 = tmp_listcomp_14__contraction;
            CHECK_OBJECT(outline_13_var__);
            tmp_append_value_14 = outline_13_var__;
            assert(PyList_Check(tmp_append_list_14));
            tmp_result = LIST_APPEND0(tmp_append_list_14, tmp_append_value_14);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2064;
                type_description_2 = "ooo";
                goto try_except_handler_96;
            }
        }
        branch_no_75:;
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2064;
            type_description_2 = "ooo";
            goto try_except_handler_96;
        }
        goto loop_start_27;
        loop_end_27:;
        CHECK_OBJECT(tmp_listcomp_14__contraction);
        tmp_len_arg_12 = tmp_listcomp_14__contraction;
        Py_INCREF(tmp_len_arg_12);
        goto try_return_handler_96;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_96:;
        CHECK_OBJECT(tmp_listcomp_14__$0);
        Py_DECREF(tmp_listcomp_14__$0);
        tmp_listcomp_14__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_14__contraction);
        Py_DECREF(tmp_listcomp_14__contraction);
        tmp_listcomp_14__contraction = NULL;
        Py_XDECREF(tmp_listcomp_14__iter_value_0);
        tmp_listcomp_14__iter_value_0 = NULL;
        goto frame_return_exit_15;
        // Exception handler code:
        try_except_handler_96:;
        exception_keeper_type_94 = exception_type;
        exception_keeper_value_94 = exception_value;
        exception_keeper_tb_94 = exception_tb;
        exception_keeper_lineno_94 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_14__$0);
        Py_DECREF(tmp_listcomp_14__$0);
        tmp_listcomp_14__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_14__contraction);
        Py_DECREF(tmp_listcomp_14__contraction);
        tmp_listcomp_14__contraction = NULL;
        Py_XDECREF(tmp_listcomp_14__iter_value_0);
        tmp_listcomp_14__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_94;
        exception_value = exception_keeper_value_94;
        exception_tb = exception_keeper_tb_94;
        exception_lineno = exception_keeper_lineno_94;

        goto frame_exception_exit_15;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_706481369d52597022642401acff5ca9_15);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_14;

        frame_return_exit_15:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_706481369d52597022642401acff5ca9_15);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_95;

        frame_exception_exit_15:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_706481369d52597022642401acff5ca9_15);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_706481369d52597022642401acff5ca9_15, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_706481369d52597022642401acff5ca9_15->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_706481369d52597022642401acff5ca9_15, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_706481369d52597022642401acff5ca9_15,
            type_description_2,
            outline_13_var__,
            var_nbrows,
            par_skip_header
        );


        // Release cached frame if used for exception.
        if (frame_706481369d52597022642401acff5ca9_15 == cache_frame_706481369d52597022642401acff5ca9_15) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_706481369d52597022642401acff5ca9_15);
            cache_frame_706481369d52597022642401acff5ca9_15 = NULL;
        }

        assertFrameObject(frame_706481369d52597022642401acff5ca9_15);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_14;

        frame_no_exception_14:;
        goto skip_nested_handling_14;
        nested_frame_exit_14:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_95;
        skip_nested_handling_14:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_95:;
        Py_XDECREF(outline_13_var__);
        outline_13_var__ = NULL;
        goto outline_result_14;
        // Exception handler code:
        try_except_handler_95:;
        exception_keeper_type_95 = exception_type;
        exception_keeper_value_95 = exception_value;
        exception_keeper_tb_95 = exception_tb;
        exception_keeper_lineno_95 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_13_var__);
        outline_13_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_95;
        exception_value = exception_keeper_value_95;
        exception_tb = exception_keeper_tb_95;
        exception_lineno = exception_keeper_lineno_95;

        goto outline_exception_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_14:;
        exception_lineno = 2064;
        goto frame_exception_exit_1;
        outline_result_14:;
        tmp_assign_source_232 = BUILTIN_LEN(tmp_len_arg_12);
        Py_DECREF(tmp_len_arg_12);
        if (tmp_assign_source_232 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2064;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_nbinvalid_skipped == NULL);
        var_nbinvalid_skipped = tmp_assign_source_232;
    }
    {
        PyObject *tmp_assign_source_237;
        PyObject *tmp_expression_name_38;
        PyObject *tmp_subscript_name_13;
        PyObject *tmp_stop_name_3;
        PyObject *tmp_left_name_20;
        PyObject *tmp_right_name_20;
        if (var_invalid == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[359]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2066;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_38 = var_invalid;
        CHECK_OBJECT(var_nbinvalid);
        tmp_left_name_20 = var_nbinvalid;
        CHECK_OBJECT(var_nbinvalid_skipped);
        tmp_right_name_20 = var_nbinvalid_skipped;
        tmp_stop_name_3 = BINARY_OPERATION_SUB_OBJECT_LONG_LONG(tmp_left_name_20, tmp_right_name_20);
        assert(!(tmp_stop_name_3 == NULL));
        tmp_subscript_name_13 = MAKE_SLICEOBJ1(tmp_stop_name_3);
        Py_DECREF(tmp_stop_name_3);
        assert(!(tmp_subscript_name_13 == NULL));
        tmp_assign_source_237 = LOOKUP_SUBSCRIPT(tmp_expression_name_38, tmp_subscript_name_13);
        Py_DECREF(tmp_subscript_name_13);
        if (tmp_assign_source_237 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2066;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_invalid;
            var_invalid = tmp_assign_source_237;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_238;
        PyObject *tmp_left_name_21;
        PyObject *tmp_right_name_21;
        CHECK_OBJECT(par_skip_footer);
        tmp_left_name_21 = par_skip_footer;
        CHECK_OBJECT(var_nbinvalid_skipped);
        tmp_right_name_21 = var_nbinvalid_skipped;
        tmp_result = BINARY_OPERATION_SUB_OBJECT_LONG_INPLACE(&tmp_left_name_21, tmp_right_name_21);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2067;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_238 = tmp_left_name_21;
        par_skip_footer = tmp_assign_source_238;

    }
    branch_no_74:;
    {
        PyObject *tmp_assign_source_239;
        // Tried code:
        {
            PyObject *tmp_assign_source_240;
            PyObject *tmp_iter_arg_40;
            if (var_invalid == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[359]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2074;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_97;
            }

            tmp_iter_arg_40 = var_invalid;
            tmp_assign_source_240 = MAKE_ITERATOR(tmp_iter_arg_40);
            if (tmp_assign_source_240 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2073;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_97;
            }
            assert(tmp_listcomp_15__$0 == NULL);
            tmp_listcomp_15__$0 = tmp_assign_source_240;
        }
        {
            PyObject *tmp_assign_source_241;
            tmp_assign_source_241 = PyList_New(0);
            assert(tmp_listcomp_15__contraction == NULL);
            tmp_listcomp_15__contraction = tmp_assign_source_241;
        }
        if (isFrameUnusable(cache_frame_3f75580b5c7727486225c0616b57f205_16)) {
            Py_XDECREF(cache_frame_3f75580b5c7727486225c0616b57f205_16);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3f75580b5c7727486225c0616b57f205_16 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3f75580b5c7727486225c0616b57f205_16 = MAKE_FUNCTION_FRAME(codeobj_3f75580b5c7727486225c0616b57f205, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3f75580b5c7727486225c0616b57f205_16->m_type_description == NULL);
        frame_3f75580b5c7727486225c0616b57f205_16 = cache_frame_3f75580b5c7727486225c0616b57f205_16;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3f75580b5c7727486225c0616b57f205_16);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3f75580b5c7727486225c0616b57f205_16) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_28:;
        {
            PyObject *tmp_next_source_27;
            PyObject *tmp_assign_source_242;
            CHECK_OBJECT(tmp_listcomp_15__$0);
            tmp_next_source_27 = tmp_listcomp_15__$0;
            tmp_assign_source_242 = ITERATOR_NEXT(tmp_next_source_27);
            if (tmp_assign_source_242 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_28;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "ooo";
                    exception_lineno = 2073;
                    goto try_except_handler_98;
                }
            }

            {
                PyObject *old = tmp_listcomp_15__iter_value_0;
                tmp_listcomp_15__iter_value_0 = tmp_assign_source_242;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_243;
            PyObject *tmp_iter_arg_41;
            CHECK_OBJECT(tmp_listcomp_15__iter_value_0);
            tmp_iter_arg_41 = tmp_listcomp_15__iter_value_0;
            tmp_assign_source_243 = MAKE_ITERATOR(tmp_iter_arg_41);
            if (tmp_assign_source_243 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2073;
                type_description_2 = "ooo";
                goto try_except_handler_99;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_5__source_iter;
                tmp_listcomp$tuple_unpack_5__source_iter = tmp_assign_source_243;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_244;
            PyObject *tmp_unpack_26;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_5__source_iter);
            tmp_unpack_26 = tmp_listcomp$tuple_unpack_5__source_iter;
            tmp_assign_source_244 = UNPACK_NEXT(tmp_unpack_26, 0, 2);
            if (tmp_assign_source_244 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 2073;
                goto try_except_handler_100;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_5__element_1;
                tmp_listcomp$tuple_unpack_5__element_1 = tmp_assign_source_244;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_245;
            PyObject *tmp_unpack_27;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_5__source_iter);
            tmp_unpack_27 = tmp_listcomp$tuple_unpack_5__source_iter;
            tmp_assign_source_245 = UNPACK_NEXT(tmp_unpack_27, 1, 2);
            if (tmp_assign_source_245 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 2073;
                goto try_except_handler_100;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_5__element_2;
                tmp_listcomp$tuple_unpack_5__element_2 = tmp_assign_source_245;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_13;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_5__source_iter);
            tmp_iterator_name_13 = tmp_listcomp$tuple_unpack_5__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_13); assert(HAS_ITERNEXT(tmp_iterator_name_13));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_13)->tp_iternext)(tmp_iterator_name_13);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "ooo";
                        exception_lineno = 2073;
                        goto try_except_handler_100;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[94];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "ooo";
                exception_lineno = 2073;
                goto try_except_handler_100;
            }
        }
        goto try_end_61;
        // Exception handler code:
        try_except_handler_100:;
        exception_keeper_type_96 = exception_type;
        exception_keeper_value_96 = exception_value;
        exception_keeper_tb_96 = exception_tb;
        exception_keeper_lineno_96 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_5__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_5__source_iter);
        tmp_listcomp$tuple_unpack_5__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_96;
        exception_value = exception_keeper_value_96;
        exception_tb = exception_keeper_tb_96;
        exception_lineno = exception_keeper_lineno_96;

        goto try_except_handler_99;
        // End of try:
        try_end_61:;
        goto try_end_62;
        // Exception handler code:
        try_except_handler_99:;
        exception_keeper_type_97 = exception_type;
        exception_keeper_value_97 = exception_value;
        exception_keeper_tb_97 = exception_tb;
        exception_keeper_lineno_97 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_5__element_1);
        tmp_listcomp$tuple_unpack_5__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_5__element_2);
        tmp_listcomp$tuple_unpack_5__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_97;
        exception_value = exception_keeper_value_97;
        exception_tb = exception_keeper_tb_97;
        exception_lineno = exception_keeper_lineno_97;

        goto try_except_handler_98;
        // End of try:
        try_end_62:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_5__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_5__source_iter);
        tmp_listcomp$tuple_unpack_5__source_iter = NULL;
        {
            PyObject *tmp_assign_source_246;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_5__element_1);
            tmp_assign_source_246 = tmp_listcomp$tuple_unpack_5__element_1;
            {
                PyObject *old = outline_14_var_i;
                outline_14_var_i = tmp_assign_source_246;
                Py_INCREF(outline_14_var_i);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_5__element_1);
        tmp_listcomp$tuple_unpack_5__element_1 = NULL;

        {
            PyObject *tmp_assign_source_247;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_5__element_2);
            tmp_assign_source_247 = tmp_listcomp$tuple_unpack_5__element_2;
            {
                PyObject *old = outline_14_var_nb;
                outline_14_var_nb = tmp_assign_source_247;
                Py_INCREF(outline_14_var_nb);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_5__element_2);
        tmp_listcomp$tuple_unpack_5__element_2 = NULL;

        {
            PyObject *tmp_append_list_15;
            PyObject *tmp_append_value_15;
            PyObject *tmp_left_name_22;
            PyObject *tmp_right_name_22;
            PyObject *tmp_tuple_element_8;
            CHECK_OBJECT(tmp_listcomp_15__contraction);
            tmp_append_list_15 = tmp_listcomp_15__contraction;
            if (var_template == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[362]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2073;
                type_description_2 = "ooo";
                goto try_except_handler_98;
            }

            tmp_left_name_22 = var_template;
            CHECK_OBJECT(outline_14_var_i);
            tmp_tuple_element_8 = outline_14_var_i;
            tmp_right_name_22 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_right_name_22, 0, tmp_tuple_element_8);
            CHECK_OBJECT(outline_14_var_nb);
            tmp_tuple_element_8 = outline_14_var_nb;
            PyTuple_SET_ITEM0(tmp_right_name_22, 1, tmp_tuple_element_8);
            tmp_append_value_15 = BINARY_OPERATION_MOD_OBJECT_OBJECT_TUPLE(tmp_left_name_22, tmp_right_name_22);
            Py_DECREF(tmp_right_name_22);
            if (tmp_append_value_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2073;
                type_description_2 = "ooo";
                goto try_except_handler_98;
            }
            assert(PyList_Check(tmp_append_list_15));
            tmp_result = LIST_APPEND1(tmp_append_list_15, tmp_append_value_15);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2073;
                type_description_2 = "ooo";
                goto try_except_handler_98;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2073;
            type_description_2 = "ooo";
            goto try_except_handler_98;
        }
        goto loop_start_28;
        loop_end_28:;
        CHECK_OBJECT(tmp_listcomp_15__contraction);
        tmp_assign_source_239 = tmp_listcomp_15__contraction;
        Py_INCREF(tmp_assign_source_239);
        goto try_return_handler_98;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_98:;
        CHECK_OBJECT(tmp_listcomp_15__$0);
        Py_DECREF(tmp_listcomp_15__$0);
        tmp_listcomp_15__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_15__contraction);
        Py_DECREF(tmp_listcomp_15__contraction);
        tmp_listcomp_15__contraction = NULL;
        Py_XDECREF(tmp_listcomp_15__iter_value_0);
        tmp_listcomp_15__iter_value_0 = NULL;
        goto frame_return_exit_16;
        // Exception handler code:
        try_except_handler_98:;
        exception_keeper_type_98 = exception_type;
        exception_keeper_value_98 = exception_value;
        exception_keeper_tb_98 = exception_tb;
        exception_keeper_lineno_98 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_15__$0);
        Py_DECREF(tmp_listcomp_15__$0);
        tmp_listcomp_15__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_15__contraction);
        Py_DECREF(tmp_listcomp_15__contraction);
        tmp_listcomp_15__contraction = NULL;
        Py_XDECREF(tmp_listcomp_15__iter_value_0);
        tmp_listcomp_15__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_98;
        exception_value = exception_keeper_value_98;
        exception_tb = exception_keeper_tb_98;
        exception_lineno = exception_keeper_lineno_98;

        goto frame_exception_exit_16;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3f75580b5c7727486225c0616b57f205_16);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_15;

        frame_return_exit_16:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_3f75580b5c7727486225c0616b57f205_16);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_97;

        frame_exception_exit_16:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3f75580b5c7727486225c0616b57f205_16);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3f75580b5c7727486225c0616b57f205_16, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3f75580b5c7727486225c0616b57f205_16->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3f75580b5c7727486225c0616b57f205_16, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3f75580b5c7727486225c0616b57f205_16,
            type_description_2,
            outline_14_var_i,
            outline_14_var_nb,
            var_template
        );


        // Release cached frame if used for exception.
        if (frame_3f75580b5c7727486225c0616b57f205_16 == cache_frame_3f75580b5c7727486225c0616b57f205_16) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3f75580b5c7727486225c0616b57f205_16);
            cache_frame_3f75580b5c7727486225c0616b57f205_16 = NULL;
        }

        assertFrameObject(frame_3f75580b5c7727486225c0616b57f205_16);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_15;

        frame_no_exception_15:;
        goto skip_nested_handling_15;
        nested_frame_exit_15:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_97;
        skip_nested_handling_15:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_97:;
        Py_XDECREF(outline_14_var_i);
        outline_14_var_i = NULL;
        Py_XDECREF(outline_14_var_nb);
        outline_14_var_nb = NULL;
        goto outline_result_15;
        // Exception handler code:
        try_except_handler_97:;
        exception_keeper_type_99 = exception_type;
        exception_keeper_value_99 = exception_value;
        exception_keeper_tb_99 = exception_tb;
        exception_keeper_lineno_99 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_14_var_i);
        outline_14_var_i = NULL;
        Py_XDECREF(outline_14_var_nb);
        outline_14_var_nb = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_99;
        exception_value = exception_keeper_value_99;
        exception_tb = exception_keeper_tb_99;
        exception_lineno = exception_keeper_lineno_99;

        goto outline_exception_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_15:;
        exception_lineno = 2073;
        goto frame_exception_exit_1;
        outline_result_15:;
        {
            PyObject *old = var_errmsg;
            var_errmsg = tmp_assign_source_239;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_76;
        PyObject *tmp_len_arg_13;
        PyObject *tmp_capi_result_2;
        int tmp_truth_name_22;
        CHECK_OBJECT(var_errmsg);
        tmp_len_arg_13 = var_errmsg;
        tmp_capi_result_2 = BUILTIN_LEN(tmp_len_arg_13);
        if (tmp_capi_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2075;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_22 = CHECK_IF_TRUE(tmp_capi_result_2);
        if (tmp_truth_name_22 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_capi_result_2);

            exception_lineno = 2075;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_76 = tmp_truth_name_22 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_capi_result_2);
        if (tmp_condition_result_76 == NUITKA_BOOL_TRUE) {
            goto branch_yes_76;
        } else {
            goto branch_no_76;
        }
    }
    branch_yes_76:;
    {
        PyObject *tmp_called_instance_23;
        PyObject *tmp_call_result_23;
        CHECK_OBJECT(var_errmsg);
        tmp_called_instance_23 = var_errmsg;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2076;
        tmp_call_result_23 = CALL_METHOD_WITH_ARGS2(
            tmp_called_instance_23,
            mod_consts[363],
            &PyTuple_GET_ITEM(mod_consts[364], 0)
        );

        if (tmp_call_result_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2076;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_23);
    }
    {
        PyObject *tmp_assign_source_248;
        PyObject *tmp_called_instance_24;
        PyObject *tmp_args_element_name_65;
        tmp_called_instance_24 = mod_consts[283];
        CHECK_OBJECT(var_errmsg);
        tmp_args_element_name_65 = var_errmsg;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2077;
        tmp_assign_source_248 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_24, mod_consts[148], tmp_args_element_name_65);
        if (tmp_assign_source_248 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2077;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_errmsg;
            assert(old != NULL);
            var_errmsg = tmp_assign_source_248;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_77;
        int tmp_truth_name_23;
        CHECK_OBJECT(par_invalid_raise);
        tmp_truth_name_23 = CHECK_IF_TRUE(par_invalid_raise);
        if (tmp_truth_name_23 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2079;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_77 = tmp_truth_name_23 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_77 == NUITKA_BOOL_TRUE) {
            goto branch_yes_77;
        } else {
            goto branch_no_77;
        }
    }
    branch_yes_77:;
    {
        PyObject *tmp_raise_type_6;
        PyObject *tmp_make_exception_arg_5;
        CHECK_OBJECT(var_errmsg);
        tmp_make_exception_arg_5 = var_errmsg;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2080;
        tmp_raise_type_6 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_5);
        assert(!(tmp_raise_type_6 == NULL));
        exception_type = tmp_raise_type_6;
        exception_lineno = 2080;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto frame_exception_exit_1;
    }
    goto branch_end_77;
    branch_no_77:;
    {
        PyObject *tmp_called_name_58;
        PyObject *tmp_expression_name_39;
        PyObject *tmp_call_result_24;
        PyObject *tmp_args_name_3;
        PyObject *tmp_tuple_element_9;
        PyObject *tmp_kwargs_name_3;
        tmp_expression_name_39 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_name_39 == NULL)) {
            tmp_expression_name_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_name_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2083;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_58 = LOOKUP_ATTRIBUTE(tmp_expression_name_39, mod_consts[1]);
        if (tmp_called_name_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2083;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_errmsg);
        tmp_tuple_element_9 = var_errmsg;
        tmp_args_name_3 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_name_3, 0, tmp_tuple_element_9);
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[365]);

        if (unlikely(tmp_tuple_element_9 == NULL)) {
            tmp_tuple_element_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[365]);
        }

        if (tmp_tuple_element_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2083;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto tuple_build_exception_3;
        }
        PyTuple_SET_ITEM0(tmp_args_name_3, 1, tmp_tuple_element_9);
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_called_name_58);
        Py_DECREF(tmp_args_name_3);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        tmp_kwargs_name_3 = PyDict_Copy(mod_consts[4]);
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2083;
        tmp_call_result_24 = CALL_FUNCTION(tmp_called_name_58, tmp_args_name_3, tmp_kwargs_name_3);
        Py_DECREF(tmp_called_name_58);
        Py_DECREF(tmp_args_name_3);
        Py_DECREF(tmp_kwargs_name_3);
        if (tmp_call_result_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2083;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_24);
    }
    branch_end_77:;
    branch_no_76:;
    branch_no_73:;
    {
        nuitka_bool tmp_condition_result_78;
        PyObject *tmp_compexpr_left_52;
        PyObject *tmp_compexpr_right_52;
        PyObject *tmp_tmp_condition_result_78_object_1;
        int tmp_truth_name_24;
        if (par_skip_footer == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[366]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2086;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_52 = par_skip_footer;
        tmp_compexpr_right_52 = mod_consts[16];
        tmp_tmp_condition_result_78_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_52, tmp_compexpr_right_52);
        if (tmp_tmp_condition_result_78_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_24 = CHECK_IF_TRUE(tmp_tmp_condition_result_78_object_1);
        if (tmp_truth_name_24 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_78_object_1);

            exception_lineno = 2086;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_78 = tmp_truth_name_24 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_tmp_condition_result_78_object_1);
        if (tmp_condition_result_78 == NUITKA_BOOL_TRUE) {
            goto branch_yes_78;
        } else {
            goto branch_no_78;
        }
    }
    branch_yes_78:;
    {
        PyObject *tmp_assign_source_249;
        PyObject *tmp_expression_name_40;
        PyObject *tmp_subscript_name_14;
        PyObject *tmp_stop_name_4;
        PyObject *tmp_operand_name_5;
        if (var_rows == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[348]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2087;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_40 = var_rows;
        if (par_skip_footer == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[366]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2087;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_operand_name_5 = par_skip_footer;
        tmp_stop_name_4 = UNARY_OPERATION(PyNumber_Negative, tmp_operand_name_5);
        if (tmp_stop_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2087;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_14 = MAKE_SLICEOBJ1(tmp_stop_name_4);
        Py_DECREF(tmp_stop_name_4);
        assert(!(tmp_subscript_name_14 == NULL));
        tmp_assign_source_249 = LOOKUP_SUBSCRIPT(tmp_expression_name_40, tmp_subscript_name_14);
        Py_DECREF(tmp_subscript_name_14);
        if (tmp_assign_source_249 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2087;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_rows;
            var_rows = tmp_assign_source_249;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_79;
        int tmp_truth_name_25;
        if (par_usemask == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[346]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2088;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_25 = CHECK_IF_TRUE(par_usemask);
        if (tmp_truth_name_25 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2088;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_79 = tmp_truth_name_25 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_79 == NUITKA_BOOL_TRUE) {
            goto branch_yes_79;
        } else {
            goto branch_no_79;
        }
    }
    branch_yes_79:;
    {
        PyObject *tmp_assign_source_250;
        PyObject *tmp_expression_name_41;
        PyObject *tmp_subscript_name_15;
        PyObject *tmp_stop_name_5;
        PyObject *tmp_operand_name_6;
        if (var_masks == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[367]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2089;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_41 = var_masks;
        if (par_skip_footer == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[366]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2089;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_operand_name_6 = par_skip_footer;
        tmp_stop_name_5 = UNARY_OPERATION(PyNumber_Negative, tmp_operand_name_6);
        if (tmp_stop_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2089;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_15 = MAKE_SLICEOBJ1(tmp_stop_name_5);
        Py_DECREF(tmp_stop_name_5);
        assert(!(tmp_subscript_name_15 == NULL));
        tmp_assign_source_250 = LOOKUP_SUBSCRIPT(tmp_expression_name_41, tmp_subscript_name_15);
        Py_DECREF(tmp_subscript_name_15);
        if (tmp_assign_source_250 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2089;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_masks;
            var_masks = tmp_assign_source_250;
            Py_XDECREF(old);
        }

    }
    branch_no_79:;
    branch_no_78:;
    {
        nuitka_bool tmp_condition_result_80;
        int tmp_truth_name_26;
        CHECK_OBJECT(par_loose);
        tmp_truth_name_26 = CHECK_IF_TRUE(par_loose);
        if (tmp_truth_name_26 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2093;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_80 = tmp_truth_name_26 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_80 == NUITKA_BOOL_TRUE) {
            goto branch_yes_80;
        } else {
            goto branch_no_80;
        }
    }
    branch_yes_80:;
    {
        PyObject *tmp_assign_source_251;
        PyObject *tmp_list_arg_5;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        tmp_dircall_arg1_1 = (PyObject *)&PyZip_Type;
        // Tried code:
        {
            PyObject *tmp_assign_source_252;
            PyObject *tmp_iter_arg_42;
            PyObject *tmp_called_name_59;
            PyObject *tmp_args_element_name_66;
            tmp_called_name_59 = (PyObject *)&PyEnum_Type;
            if (par_converters == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[191]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2096;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_101;
            }

            tmp_args_element_name_66 = par_converters;
            frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2096;
            tmp_iter_arg_42 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_59, tmp_args_element_name_66);
            if (tmp_iter_arg_42 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2096;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_101;
            }
            tmp_assign_source_252 = MAKE_ITERATOR(tmp_iter_arg_42);
            Py_DECREF(tmp_iter_arg_42);
            if (tmp_assign_source_252 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2095;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_101;
            }
            assert(tmp_listcomp_16__$0 == NULL);
            tmp_listcomp_16__$0 = tmp_assign_source_252;
        }
        {
            PyObject *tmp_assign_source_253;
            tmp_assign_source_253 = PyList_New(0);
            assert(tmp_listcomp_16__contraction == NULL);
            tmp_listcomp_16__contraction = tmp_assign_source_253;
        }
        if (isFrameUnusable(cache_frame_e3ff8c276e03c8e1a880bb9b87817f26_17)) {
            Py_XDECREF(cache_frame_e3ff8c276e03c8e1a880bb9b87817f26_17);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e3ff8c276e03c8e1a880bb9b87817f26_17 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e3ff8c276e03c8e1a880bb9b87817f26_17 = MAKE_FUNCTION_FRAME(codeobj_e3ff8c276e03c8e1a880bb9b87817f26, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e3ff8c276e03c8e1a880bb9b87817f26_17->m_type_description == NULL);
        frame_e3ff8c276e03c8e1a880bb9b87817f26_17 = cache_frame_e3ff8c276e03c8e1a880bb9b87817f26_17;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e3ff8c276e03c8e1a880bb9b87817f26_17);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e3ff8c276e03c8e1a880bb9b87817f26_17) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_29:;
        {
            PyObject *tmp_next_source_28;
            PyObject *tmp_assign_source_254;
            CHECK_OBJECT(tmp_listcomp_16__$0);
            tmp_next_source_28 = tmp_listcomp_16__$0;
            tmp_assign_source_254 = ITERATOR_NEXT(tmp_next_source_28);
            if (tmp_assign_source_254 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_29;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "ooo";
                    exception_lineno = 2095;
                    goto try_except_handler_102;
                }
            }

            {
                PyObject *old = tmp_listcomp_16__iter_value_0;
                tmp_listcomp_16__iter_value_0 = tmp_assign_source_254;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_255;
            PyObject *tmp_iter_arg_43;
            CHECK_OBJECT(tmp_listcomp_16__iter_value_0);
            tmp_iter_arg_43 = tmp_listcomp_16__iter_value_0;
            tmp_assign_source_255 = MAKE_ITERATOR(tmp_iter_arg_43);
            if (tmp_assign_source_255 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2095;
                type_description_2 = "ooo";
                goto try_except_handler_103;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_6__source_iter;
                tmp_listcomp$tuple_unpack_6__source_iter = tmp_assign_source_255;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_256;
            PyObject *tmp_unpack_28;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_6__source_iter);
            tmp_unpack_28 = tmp_listcomp$tuple_unpack_6__source_iter;
            tmp_assign_source_256 = UNPACK_NEXT(tmp_unpack_28, 0, 2);
            if (tmp_assign_source_256 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 2095;
                goto try_except_handler_104;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_6__element_1;
                tmp_listcomp$tuple_unpack_6__element_1 = tmp_assign_source_256;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_257;
            PyObject *tmp_unpack_29;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_6__source_iter);
            tmp_unpack_29 = tmp_listcomp$tuple_unpack_6__source_iter;
            tmp_assign_source_257 = UNPACK_NEXT(tmp_unpack_29, 1, 2);
            if (tmp_assign_source_257 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 2095;
                goto try_except_handler_104;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_6__element_2;
                tmp_listcomp$tuple_unpack_6__element_2 = tmp_assign_source_257;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_14;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_6__source_iter);
            tmp_iterator_name_14 = tmp_listcomp$tuple_unpack_6__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_14); assert(HAS_ITERNEXT(tmp_iterator_name_14));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_14)->tp_iternext)(tmp_iterator_name_14);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "ooo";
                        exception_lineno = 2095;
                        goto try_except_handler_104;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[94];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "ooo";
                exception_lineno = 2095;
                goto try_except_handler_104;
            }
        }
        goto try_end_63;
        // Exception handler code:
        try_except_handler_104:;
        exception_keeper_type_100 = exception_type;
        exception_keeper_value_100 = exception_value;
        exception_keeper_tb_100 = exception_tb;
        exception_keeper_lineno_100 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_6__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_6__source_iter);
        tmp_listcomp$tuple_unpack_6__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_100;
        exception_value = exception_keeper_value_100;
        exception_tb = exception_keeper_tb_100;
        exception_lineno = exception_keeper_lineno_100;

        goto try_except_handler_103;
        // End of try:
        try_end_63:;
        goto try_end_64;
        // Exception handler code:
        try_except_handler_103:;
        exception_keeper_type_101 = exception_type;
        exception_keeper_value_101 = exception_value;
        exception_keeper_tb_101 = exception_tb;
        exception_keeper_lineno_101 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_6__element_1);
        tmp_listcomp$tuple_unpack_6__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_6__element_2);
        tmp_listcomp$tuple_unpack_6__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_101;
        exception_value = exception_keeper_value_101;
        exception_tb = exception_keeper_tb_101;
        exception_lineno = exception_keeper_lineno_101;

        goto try_except_handler_102;
        // End of try:
        try_end_64:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_6__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_6__source_iter);
        tmp_listcomp$tuple_unpack_6__source_iter = NULL;
        {
            PyObject *tmp_assign_source_258;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_6__element_1);
            tmp_assign_source_258 = tmp_listcomp$tuple_unpack_6__element_1;
            {
                PyObject *old = outline_15_var_i;
                outline_15_var_i = tmp_assign_source_258;
                Py_INCREF(outline_15_var_i);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_6__element_1);
        tmp_listcomp$tuple_unpack_6__element_1 = NULL;

        {
            PyObject *tmp_assign_source_259;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_6__element_2);
            tmp_assign_source_259 = tmp_listcomp$tuple_unpack_6__element_2;
            {
                PyObject *old = outline_15_var_conv;
                outline_15_var_conv = tmp_assign_source_259;
                Py_INCREF(outline_15_var_conv);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_6__element_2);
        tmp_listcomp$tuple_unpack_6__element_2 = NULL;

        {
            PyObject *tmp_append_list_16;
            PyObject *tmp_append_value_16;
            CHECK_OBJECT(tmp_listcomp_16__contraction);
            tmp_append_list_16 = tmp_listcomp_16__contraction;
            // Tried code:
            {
                PyObject *tmp_assign_source_260;
                PyObject *tmp_iter_arg_44;
                PyObject *tmp_called_name_60;
                PyObject *tmp_args_element_name_67;
                PyObject *tmp_called_name_61;
                PyObject *tmp_args_element_name_68;
                PyObject *tmp_args_element_name_69;
                tmp_called_name_60 = (PyObject *)&PyMap_Type;
                tmp_called_name_61 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[349]);

                if (unlikely(tmp_called_name_61 == NULL)) {
                    tmp_called_name_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[349]);
                }

                if (tmp_called_name_61 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2095;
                    type_description_2 = "ooo";
                    goto try_except_handler_105;
                }
                CHECK_OBJECT(outline_15_var_i);
                tmp_args_element_name_68 = outline_15_var_i;
                frame_e3ff8c276e03c8e1a880bb9b87817f26_17->m_frame.f_lineno = 2095;
                tmp_args_element_name_67 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_61, tmp_args_element_name_68);
                if (tmp_args_element_name_67 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2095;
                    type_description_2 = "ooo";
                    goto try_except_handler_105;
                }
                if (var_rows == NULL) {
                    Py_DECREF(tmp_args_element_name_67);
                    FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[348]);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 2095;
                    type_description_2 = "ooo";
                    goto try_except_handler_105;
                }

                tmp_args_element_name_69 = var_rows;
                frame_e3ff8c276e03c8e1a880bb9b87817f26_17->m_frame.f_lineno = 2095;
                {
                    PyObject *call_args[] = {tmp_args_element_name_67, tmp_args_element_name_69};
                    tmp_iter_arg_44 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_60, call_args);
                }

                Py_DECREF(tmp_args_element_name_67);
                if (tmp_iter_arg_44 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2095;
                    type_description_2 = "ooo";
                    goto try_except_handler_105;
                }
                tmp_assign_source_260 = MAKE_ITERATOR(tmp_iter_arg_44);
                Py_DECREF(tmp_iter_arg_44);
                if (tmp_assign_source_260 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2095;
                    type_description_2 = "ooo";
                    goto try_except_handler_105;
                }
                {
                    PyObject *old = tmp_listcomp$listcomp_1__$0;
                    tmp_listcomp$listcomp_1__$0 = tmp_assign_source_260;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_261;
                tmp_assign_source_261 = PyList_New(0);
                {
                    PyObject *old = tmp_listcomp$listcomp_1__contraction;
                    tmp_listcomp$listcomp_1__contraction = tmp_assign_source_261;
                    Py_XDECREF(old);
                }

            }
            if (isFrameUnusable(cache_frame_b3f9574526fd6c4c09ad903ee24f1595_18)) {
                Py_XDECREF(cache_frame_b3f9574526fd6c4c09ad903ee24f1595_18);

#if _DEBUG_REFCOUNTS
                if (cache_frame_b3f9574526fd6c4c09ad903ee24f1595_18 == NULL) {
                    count_active_frame_cache_instances += 1;
                } else {
                    count_released_frame_cache_instances += 1;
                }
                count_allocated_frame_cache_instances += 1;
#endif
                cache_frame_b3f9574526fd6c4c09ad903ee24f1595_18 = MAKE_FUNCTION_FRAME(codeobj_b3f9574526fd6c4c09ad903ee24f1595, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
            } else {
                count_hit_frame_cache_instances += 1;
#endif
            }
            assert(cache_frame_b3f9574526fd6c4c09ad903ee24f1595_18->m_type_description == NULL);
            frame_b3f9574526fd6c4c09ad903ee24f1595_18 = cache_frame_b3f9574526fd6c4c09ad903ee24f1595_18;

            // Push the new frame as the currently active one.
            pushFrameStack(frame_b3f9574526fd6c4c09ad903ee24f1595_18);

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert(Py_REFCNT(frame_b3f9574526fd6c4c09ad903ee24f1595_18) == 2); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_30:;
            {
                PyObject *tmp_next_source_29;
                PyObject *tmp_assign_source_262;
                CHECK_OBJECT(tmp_listcomp$listcomp_1__$0);
                tmp_next_source_29 = tmp_listcomp$listcomp_1__$0;
                tmp_assign_source_262 = ITERATOR_NEXT(tmp_next_source_29);
                if (tmp_assign_source_262 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_30;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_3 = "oo";
                        exception_lineno = 2095;
                        goto try_except_handler_106;
                    }
                }

                {
                    PyObject *old = tmp_listcomp$listcomp_1__iter_value_0;
                    tmp_listcomp$listcomp_1__iter_value_0 = tmp_assign_source_262;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_263;
                CHECK_OBJECT(tmp_listcomp$listcomp_1__iter_value_0);
                tmp_assign_source_263 = tmp_listcomp$listcomp_1__iter_value_0;
                {
                    PyObject *old = outline_16_var__r;
                    outline_16_var__r = tmp_assign_source_263;
                    Py_INCREF(outline_16_var__r);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_append_list_17;
                PyObject *tmp_append_value_17;
                PyObject *tmp_called_instance_25;
                PyObject *tmp_args_element_name_70;
                CHECK_OBJECT(tmp_listcomp$listcomp_1__contraction);
                tmp_append_list_17 = tmp_listcomp$listcomp_1__contraction;
                if (outline_15_var_conv == NULL) {

                    FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[368]);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 2095;
                    type_description_3 = "oo";
                    goto try_except_handler_106;
                }

                tmp_called_instance_25 = outline_15_var_conv;
                CHECK_OBJECT(outline_16_var__r);
                tmp_args_element_name_70 = outline_16_var__r;
                frame_b3f9574526fd6c4c09ad903ee24f1595_18->m_frame.f_lineno = 2095;
                tmp_append_value_17 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_25, mod_consts[369], tmp_args_element_name_70);
                if (tmp_append_value_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2095;
                    type_description_3 = "oo";
                    goto try_except_handler_106;
                }
                assert(PyList_Check(tmp_append_list_17));
                tmp_result = LIST_APPEND1(tmp_append_list_17, tmp_append_value_17);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2095;
                    type_description_3 = "oo";
                    goto try_except_handler_106;
                }
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2095;
                type_description_3 = "oo";
                goto try_except_handler_106;
            }
            goto loop_start_30;
            loop_end_30:;
            CHECK_OBJECT(tmp_listcomp$listcomp_1__contraction);
            tmp_append_value_16 = tmp_listcomp$listcomp_1__contraction;
            Py_INCREF(tmp_append_value_16);
            goto try_return_handler_106;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_106:;
            CHECK_OBJECT(tmp_listcomp$listcomp_1__$0);
            Py_DECREF(tmp_listcomp$listcomp_1__$0);
            tmp_listcomp$listcomp_1__$0 = NULL;
            CHECK_OBJECT(tmp_listcomp$listcomp_1__contraction);
            Py_DECREF(tmp_listcomp$listcomp_1__contraction);
            tmp_listcomp$listcomp_1__contraction = NULL;
            Py_XDECREF(tmp_listcomp$listcomp_1__iter_value_0);
            tmp_listcomp$listcomp_1__iter_value_0 = NULL;
            goto frame_return_exit_18;
            // Exception handler code:
            try_except_handler_106:;
            exception_keeper_type_102 = exception_type;
            exception_keeper_value_102 = exception_value;
            exception_keeper_tb_102 = exception_tb;
            exception_keeper_lineno_102 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT(tmp_listcomp$listcomp_1__$0);
            Py_DECREF(tmp_listcomp$listcomp_1__$0);
            tmp_listcomp$listcomp_1__$0 = NULL;
            CHECK_OBJECT(tmp_listcomp$listcomp_1__contraction);
            Py_DECREF(tmp_listcomp$listcomp_1__contraction);
            tmp_listcomp$listcomp_1__contraction = NULL;
            Py_XDECREF(tmp_listcomp$listcomp_1__iter_value_0);
            tmp_listcomp$listcomp_1__iter_value_0 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_102;
            exception_value = exception_keeper_value_102;
            exception_tb = exception_keeper_tb_102;
            exception_lineno = exception_keeper_lineno_102;

            goto frame_exception_exit_18;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION(frame_b3f9574526fd6c4c09ad903ee24f1595_18);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_16;

            frame_return_exit_18:;
#if 0
            RESTORE_FRAME_EXCEPTION(frame_b3f9574526fd6c4c09ad903ee24f1595_18);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_105;

            frame_exception_exit_18:;

#if 0
            RESTORE_FRAME_EXCEPTION(frame_b3f9574526fd6c4c09ad903ee24f1595_18);
#endif

            if (exception_tb == NULL) {
                exception_tb = MAKE_TRACEBACK(frame_b3f9574526fd6c4c09ad903ee24f1595_18, exception_lineno);
            } else if (exception_tb->tb_frame != &frame_b3f9574526fd6c4c09ad903ee24f1595_18->m_frame) {
                exception_tb = ADD_TRACEBACK(exception_tb, frame_b3f9574526fd6c4c09ad903ee24f1595_18, exception_lineno);
            }

            // Attaches locals to frame if any.
            Nuitka_Frame_AttachLocals(
                frame_b3f9574526fd6c4c09ad903ee24f1595_18,
                type_description_3,
                outline_16_var__r,
                outline_15_var_conv
            );


            // Release cached frame if used for exception.
            if (frame_b3f9574526fd6c4c09ad903ee24f1595_18 == cache_frame_b3f9574526fd6c4c09ad903ee24f1595_18) {
#if _DEBUG_REFCOUNTS
                count_active_frame_cache_instances -= 1;
                count_released_frame_cache_instances += 1;
#endif

                Py_DECREF(cache_frame_b3f9574526fd6c4c09ad903ee24f1595_18);
                cache_frame_b3f9574526fd6c4c09ad903ee24f1595_18 = NULL;
            }

            assertFrameObject(frame_b3f9574526fd6c4c09ad903ee24f1595_18);

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_17;

            frame_no_exception_16:;
            goto skip_nested_handling_16;
            nested_frame_exit_17:;
            type_description_2 = "ooo";
            goto try_except_handler_105;
            skip_nested_handling_16:;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_105:;
            Py_XDECREF(outline_16_var__r);
            outline_16_var__r = NULL;
            goto outline_result_17;
            // Exception handler code:
            try_except_handler_105:;
            exception_keeper_type_103 = exception_type;
            exception_keeper_value_103 = exception_value;
            exception_keeper_tb_103 = exception_tb;
            exception_keeper_lineno_103 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(outline_16_var__r);
            outline_16_var__r = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_103;
            exception_value = exception_keeper_value_103;
            exception_tb = exception_keeper_tb_103;
            exception_lineno = exception_keeper_lineno_103;

            goto outline_exception_17;
            // End of try:
            NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
            return NULL;
            outline_exception_17:;
            exception_lineno = 2095;
            goto try_except_handler_102;
            outline_result_17:;
            assert(PyList_Check(tmp_append_list_16));
            tmp_result = LIST_APPEND1(tmp_append_list_16, tmp_append_value_16);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2095;
                type_description_2 = "ooo";
                goto try_except_handler_102;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2095;
            type_description_2 = "ooo";
            goto try_except_handler_102;
        }
        goto loop_start_29;
        loop_end_29:;
        CHECK_OBJECT(tmp_listcomp_16__contraction);
        tmp_dircall_arg2_1 = tmp_listcomp_16__contraction;
        Py_INCREF(tmp_dircall_arg2_1);
        goto try_return_handler_102;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_102:;
        CHECK_OBJECT(tmp_listcomp_16__$0);
        Py_DECREF(tmp_listcomp_16__$0);
        tmp_listcomp_16__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_16__contraction);
        Py_DECREF(tmp_listcomp_16__contraction);
        tmp_listcomp_16__contraction = NULL;
        Py_XDECREF(tmp_listcomp_16__iter_value_0);
        tmp_listcomp_16__iter_value_0 = NULL;
        goto frame_return_exit_17;
        // Exception handler code:
        try_except_handler_102:;
        exception_keeper_type_104 = exception_type;
        exception_keeper_value_104 = exception_value;
        exception_keeper_tb_104 = exception_tb;
        exception_keeper_lineno_104 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_16__$0);
        Py_DECREF(tmp_listcomp_16__$0);
        tmp_listcomp_16__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_16__contraction);
        Py_DECREF(tmp_listcomp_16__contraction);
        tmp_listcomp_16__contraction = NULL;
        Py_XDECREF(tmp_listcomp_16__iter_value_0);
        tmp_listcomp_16__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_104;
        exception_value = exception_keeper_value_104;
        exception_tb = exception_keeper_tb_104;
        exception_lineno = exception_keeper_lineno_104;

        goto frame_exception_exit_17;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e3ff8c276e03c8e1a880bb9b87817f26_17);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_17;

        frame_return_exit_17:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_e3ff8c276e03c8e1a880bb9b87817f26_17);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_101;

        frame_exception_exit_17:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e3ff8c276e03c8e1a880bb9b87817f26_17);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e3ff8c276e03c8e1a880bb9b87817f26_17, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e3ff8c276e03c8e1a880bb9b87817f26_17->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e3ff8c276e03c8e1a880bb9b87817f26_17, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e3ff8c276e03c8e1a880bb9b87817f26_17,
            type_description_2,
            outline_15_var_i,
            outline_15_var_conv,
            var_rows
        );


        // Release cached frame if used for exception.
        if (frame_e3ff8c276e03c8e1a880bb9b87817f26_17 == cache_frame_e3ff8c276e03c8e1a880bb9b87817f26_17) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e3ff8c276e03c8e1a880bb9b87817f26_17);
            cache_frame_e3ff8c276e03c8e1a880bb9b87817f26_17 = NULL;
        }

        assertFrameObject(frame_e3ff8c276e03c8e1a880bb9b87817f26_17);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_16;

        frame_no_exception_17:;
        goto skip_nested_handling_17;
        nested_frame_exit_16:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_101;
        skip_nested_handling_17:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_101:;
        Py_XDECREF(outline_15_var_i);
        outline_15_var_i = NULL;
        Py_XDECREF(outline_15_var_conv);
        outline_15_var_conv = NULL;
        goto outline_result_16;
        // Exception handler code:
        try_except_handler_101:;
        exception_keeper_type_105 = exception_type;
        exception_keeper_value_105 = exception_value;
        exception_keeper_tb_105 = exception_tb;
        exception_keeper_lineno_105 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_15_var_i);
        outline_15_var_i = NULL;
        Py_XDECREF(outline_15_var_conv);
        outline_15_var_conv = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_105;
        exception_value = exception_keeper_value_105;
        exception_tb = exception_keeper_tb_105;
        exception_lineno = exception_keeper_lineno_105;

        goto outline_exception_16;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_16:;
        exception_lineno = 2095;
        goto frame_exception_exit_1;
        outline_result_16:;
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_list_arg_5 = impl___main__$$$function__4_complex_call_helper_star_list(dir_call_args);
        }
        if (tmp_list_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2095;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_251 = MAKE_LIST(tmp_list_arg_5);
        Py_DECREF(tmp_list_arg_5);
        if (tmp_assign_source_251 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2094;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_rows;
            var_rows = tmp_assign_source_251;
            Py_XDECREF(old);
        }

    }
    goto branch_end_80;
    branch_no_80:;
    {
        PyObject *tmp_assign_source_264;
        PyObject *tmp_list_arg_6;
        PyObject *tmp_dircall_arg1_2;
        PyObject *tmp_dircall_arg2_2;
        tmp_dircall_arg1_2 = (PyObject *)&PyZip_Type;
        // Tried code:
        {
            PyObject *tmp_assign_source_265;
            PyObject *tmp_iter_arg_45;
            PyObject *tmp_called_name_62;
            PyObject *tmp_args_element_name_71;
            tmp_called_name_62 = (PyObject *)&PyEnum_Type;
            if (par_converters == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[191]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2100;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_107;
            }

            tmp_args_element_name_71 = par_converters;
            frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2100;
            tmp_iter_arg_45 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_62, tmp_args_element_name_71);
            if (tmp_iter_arg_45 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2100;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_107;
            }
            tmp_assign_source_265 = MAKE_ITERATOR(tmp_iter_arg_45);
            Py_DECREF(tmp_iter_arg_45);
            if (tmp_assign_source_265 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2099;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_107;
            }
            assert(tmp_listcomp_17__$0 == NULL);
            tmp_listcomp_17__$0 = tmp_assign_source_265;
        }
        {
            PyObject *tmp_assign_source_266;
            tmp_assign_source_266 = PyList_New(0);
            assert(tmp_listcomp_17__contraction == NULL);
            tmp_listcomp_17__contraction = tmp_assign_source_266;
        }
        if (isFrameUnusable(cache_frame_e97cfa1a33b609f3ef8786f5effa6f30_19)) {
            Py_XDECREF(cache_frame_e97cfa1a33b609f3ef8786f5effa6f30_19);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e97cfa1a33b609f3ef8786f5effa6f30_19 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e97cfa1a33b609f3ef8786f5effa6f30_19 = MAKE_FUNCTION_FRAME(codeobj_e97cfa1a33b609f3ef8786f5effa6f30, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e97cfa1a33b609f3ef8786f5effa6f30_19->m_type_description == NULL);
        frame_e97cfa1a33b609f3ef8786f5effa6f30_19 = cache_frame_e97cfa1a33b609f3ef8786f5effa6f30_19;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e97cfa1a33b609f3ef8786f5effa6f30_19);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e97cfa1a33b609f3ef8786f5effa6f30_19) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_31:;
        {
            PyObject *tmp_next_source_30;
            PyObject *tmp_assign_source_267;
            CHECK_OBJECT(tmp_listcomp_17__$0);
            tmp_next_source_30 = tmp_listcomp_17__$0;
            tmp_assign_source_267 = ITERATOR_NEXT(tmp_next_source_30);
            if (tmp_assign_source_267 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_31;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "ooo";
                    exception_lineno = 2099;
                    goto try_except_handler_108;
                }
            }

            {
                PyObject *old = tmp_listcomp_17__iter_value_0;
                tmp_listcomp_17__iter_value_0 = tmp_assign_source_267;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_268;
            PyObject *tmp_iter_arg_46;
            CHECK_OBJECT(tmp_listcomp_17__iter_value_0);
            tmp_iter_arg_46 = tmp_listcomp_17__iter_value_0;
            tmp_assign_source_268 = MAKE_ITERATOR(tmp_iter_arg_46);
            if (tmp_assign_source_268 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2099;
                type_description_2 = "ooo";
                goto try_except_handler_109;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_7__source_iter;
                tmp_listcomp$tuple_unpack_7__source_iter = tmp_assign_source_268;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_269;
            PyObject *tmp_unpack_30;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_7__source_iter);
            tmp_unpack_30 = tmp_listcomp$tuple_unpack_7__source_iter;
            tmp_assign_source_269 = UNPACK_NEXT(tmp_unpack_30, 0, 2);
            if (tmp_assign_source_269 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 2099;
                goto try_except_handler_110;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_7__element_1;
                tmp_listcomp$tuple_unpack_7__element_1 = tmp_assign_source_269;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_270;
            PyObject *tmp_unpack_31;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_7__source_iter);
            tmp_unpack_31 = tmp_listcomp$tuple_unpack_7__source_iter;
            tmp_assign_source_270 = UNPACK_NEXT(tmp_unpack_31, 1, 2);
            if (tmp_assign_source_270 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 2099;
                goto try_except_handler_110;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_7__element_2;
                tmp_listcomp$tuple_unpack_7__element_2 = tmp_assign_source_270;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_15;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_7__source_iter);
            tmp_iterator_name_15 = tmp_listcomp$tuple_unpack_7__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_15); assert(HAS_ITERNEXT(tmp_iterator_name_15));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_15)->tp_iternext)(tmp_iterator_name_15);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "ooo";
                        exception_lineno = 2099;
                        goto try_except_handler_110;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[94];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "ooo";
                exception_lineno = 2099;
                goto try_except_handler_110;
            }
        }
        goto try_end_65;
        // Exception handler code:
        try_except_handler_110:;
        exception_keeper_type_106 = exception_type;
        exception_keeper_value_106 = exception_value;
        exception_keeper_tb_106 = exception_tb;
        exception_keeper_lineno_106 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_7__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_7__source_iter);
        tmp_listcomp$tuple_unpack_7__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_106;
        exception_value = exception_keeper_value_106;
        exception_tb = exception_keeper_tb_106;
        exception_lineno = exception_keeper_lineno_106;

        goto try_except_handler_109;
        // End of try:
        try_end_65:;
        goto try_end_66;
        // Exception handler code:
        try_except_handler_109:;
        exception_keeper_type_107 = exception_type;
        exception_keeper_value_107 = exception_value;
        exception_keeper_tb_107 = exception_tb;
        exception_keeper_lineno_107 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_7__element_1);
        tmp_listcomp$tuple_unpack_7__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_7__element_2);
        tmp_listcomp$tuple_unpack_7__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_107;
        exception_value = exception_keeper_value_107;
        exception_tb = exception_keeper_tb_107;
        exception_lineno = exception_keeper_lineno_107;

        goto try_except_handler_108;
        // End of try:
        try_end_66:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_7__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_7__source_iter);
        tmp_listcomp$tuple_unpack_7__source_iter = NULL;
        {
            PyObject *tmp_assign_source_271;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_7__element_1);
            tmp_assign_source_271 = tmp_listcomp$tuple_unpack_7__element_1;
            {
                PyObject *old = outline_17_var_i;
                outline_17_var_i = tmp_assign_source_271;
                Py_INCREF(outline_17_var_i);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_7__element_1);
        tmp_listcomp$tuple_unpack_7__element_1 = NULL;

        {
            PyObject *tmp_assign_source_272;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_7__element_2);
            tmp_assign_source_272 = tmp_listcomp$tuple_unpack_7__element_2;
            {
                PyObject *old = outline_17_var_conv;
                outline_17_var_conv = tmp_assign_source_272;
                Py_INCREF(outline_17_var_conv);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_7__element_2);
        tmp_listcomp$tuple_unpack_7__element_2 = NULL;

        {
            PyObject *tmp_append_list_18;
            PyObject *tmp_append_value_18;
            CHECK_OBJECT(tmp_listcomp_17__contraction);
            tmp_append_list_18 = tmp_listcomp_17__contraction;
            // Tried code:
            {
                PyObject *tmp_assign_source_273;
                PyObject *tmp_iter_arg_47;
                PyObject *tmp_called_name_63;
                PyObject *tmp_args_element_name_72;
                PyObject *tmp_called_name_64;
                PyObject *tmp_args_element_name_73;
                PyObject *tmp_args_element_name_74;
                tmp_called_name_63 = (PyObject *)&PyMap_Type;
                tmp_called_name_64 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[349]);

                if (unlikely(tmp_called_name_64 == NULL)) {
                    tmp_called_name_64 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[349]);
                }

                if (tmp_called_name_64 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2099;
                    type_description_2 = "ooo";
                    goto try_except_handler_111;
                }
                CHECK_OBJECT(outline_17_var_i);
                tmp_args_element_name_73 = outline_17_var_i;
                frame_e97cfa1a33b609f3ef8786f5effa6f30_19->m_frame.f_lineno = 2099;
                tmp_args_element_name_72 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_64, tmp_args_element_name_73);
                if (tmp_args_element_name_72 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2099;
                    type_description_2 = "ooo";
                    goto try_except_handler_111;
                }
                if (var_rows == NULL) {
                    Py_DECREF(tmp_args_element_name_72);
                    FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[348]);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 2099;
                    type_description_2 = "ooo";
                    goto try_except_handler_111;
                }

                tmp_args_element_name_74 = var_rows;
                frame_e97cfa1a33b609f3ef8786f5effa6f30_19->m_frame.f_lineno = 2099;
                {
                    PyObject *call_args[] = {tmp_args_element_name_72, tmp_args_element_name_74};
                    tmp_iter_arg_47 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_63, call_args);
                }

                Py_DECREF(tmp_args_element_name_72);
                if (tmp_iter_arg_47 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2099;
                    type_description_2 = "ooo";
                    goto try_except_handler_111;
                }
                tmp_assign_source_273 = MAKE_ITERATOR(tmp_iter_arg_47);
                Py_DECREF(tmp_iter_arg_47);
                if (tmp_assign_source_273 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2099;
                    type_description_2 = "ooo";
                    goto try_except_handler_111;
                }
                {
                    PyObject *old = tmp_listcomp$listcomp_2__$0;
                    tmp_listcomp$listcomp_2__$0 = tmp_assign_source_273;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_274;
                tmp_assign_source_274 = PyList_New(0);
                {
                    PyObject *old = tmp_listcomp$listcomp_2__contraction;
                    tmp_listcomp$listcomp_2__contraction = tmp_assign_source_274;
                    Py_XDECREF(old);
                }

            }
            if (isFrameUnusable(cache_frame_5ac36e1bd8fff02bc4591ebf9aca3658_20)) {
                Py_XDECREF(cache_frame_5ac36e1bd8fff02bc4591ebf9aca3658_20);

#if _DEBUG_REFCOUNTS
                if (cache_frame_5ac36e1bd8fff02bc4591ebf9aca3658_20 == NULL) {
                    count_active_frame_cache_instances += 1;
                } else {
                    count_released_frame_cache_instances += 1;
                }
                count_allocated_frame_cache_instances += 1;
#endif
                cache_frame_5ac36e1bd8fff02bc4591ebf9aca3658_20 = MAKE_FUNCTION_FRAME(codeobj_5ac36e1bd8fff02bc4591ebf9aca3658, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
            } else {
                count_hit_frame_cache_instances += 1;
#endif
            }
            assert(cache_frame_5ac36e1bd8fff02bc4591ebf9aca3658_20->m_type_description == NULL);
            frame_5ac36e1bd8fff02bc4591ebf9aca3658_20 = cache_frame_5ac36e1bd8fff02bc4591ebf9aca3658_20;

            // Push the new frame as the currently active one.
            pushFrameStack(frame_5ac36e1bd8fff02bc4591ebf9aca3658_20);

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert(Py_REFCNT(frame_5ac36e1bd8fff02bc4591ebf9aca3658_20) == 2); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_32:;
            {
                PyObject *tmp_next_source_31;
                PyObject *tmp_assign_source_275;
                CHECK_OBJECT(tmp_listcomp$listcomp_2__$0);
                tmp_next_source_31 = tmp_listcomp$listcomp_2__$0;
                tmp_assign_source_275 = ITERATOR_NEXT(tmp_next_source_31);
                if (tmp_assign_source_275 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_32;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_3 = "oo";
                        exception_lineno = 2099;
                        goto try_except_handler_112;
                    }
                }

                {
                    PyObject *old = tmp_listcomp$listcomp_2__iter_value_0;
                    tmp_listcomp$listcomp_2__iter_value_0 = tmp_assign_source_275;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_276;
                CHECK_OBJECT(tmp_listcomp$listcomp_2__iter_value_0);
                tmp_assign_source_276 = tmp_listcomp$listcomp_2__iter_value_0;
                {
                    PyObject *old = outline_18_var__r;
                    outline_18_var__r = tmp_assign_source_276;
                    Py_INCREF(outline_18_var__r);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_append_list_19;
                PyObject *tmp_append_value_19;
                PyObject *tmp_called_instance_26;
                PyObject *tmp_args_element_name_75;
                CHECK_OBJECT(tmp_listcomp$listcomp_2__contraction);
                tmp_append_list_19 = tmp_listcomp$listcomp_2__contraction;
                if (outline_17_var_conv == NULL) {

                    FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[368]);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 2099;
                    type_description_3 = "oo";
                    goto try_except_handler_112;
                }

                tmp_called_instance_26 = outline_17_var_conv;
                CHECK_OBJECT(outline_18_var__r);
                tmp_args_element_name_75 = outline_18_var__r;
                frame_5ac36e1bd8fff02bc4591ebf9aca3658_20->m_frame.f_lineno = 2099;
                tmp_append_value_19 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_26, mod_consts[370], tmp_args_element_name_75);
                if (tmp_append_value_19 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2099;
                    type_description_3 = "oo";
                    goto try_except_handler_112;
                }
                assert(PyList_Check(tmp_append_list_19));
                tmp_result = LIST_APPEND1(tmp_append_list_19, tmp_append_value_19);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2099;
                    type_description_3 = "oo";
                    goto try_except_handler_112;
                }
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2099;
                type_description_3 = "oo";
                goto try_except_handler_112;
            }
            goto loop_start_32;
            loop_end_32:;
            CHECK_OBJECT(tmp_listcomp$listcomp_2__contraction);
            tmp_append_value_18 = tmp_listcomp$listcomp_2__contraction;
            Py_INCREF(tmp_append_value_18);
            goto try_return_handler_112;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_112:;
            CHECK_OBJECT(tmp_listcomp$listcomp_2__$0);
            Py_DECREF(tmp_listcomp$listcomp_2__$0);
            tmp_listcomp$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_listcomp$listcomp_2__contraction);
            Py_DECREF(tmp_listcomp$listcomp_2__contraction);
            tmp_listcomp$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_listcomp$listcomp_2__iter_value_0);
            tmp_listcomp$listcomp_2__iter_value_0 = NULL;
            goto frame_return_exit_20;
            // Exception handler code:
            try_except_handler_112:;
            exception_keeper_type_108 = exception_type;
            exception_keeper_value_108 = exception_value;
            exception_keeper_tb_108 = exception_tb;
            exception_keeper_lineno_108 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT(tmp_listcomp$listcomp_2__$0);
            Py_DECREF(tmp_listcomp$listcomp_2__$0);
            tmp_listcomp$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_listcomp$listcomp_2__contraction);
            Py_DECREF(tmp_listcomp$listcomp_2__contraction);
            tmp_listcomp$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_listcomp$listcomp_2__iter_value_0);
            tmp_listcomp$listcomp_2__iter_value_0 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_108;
            exception_value = exception_keeper_value_108;
            exception_tb = exception_keeper_tb_108;
            exception_lineno = exception_keeper_lineno_108;

            goto frame_exception_exit_20;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION(frame_5ac36e1bd8fff02bc4591ebf9aca3658_20);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_18;

            frame_return_exit_20:;
#if 0
            RESTORE_FRAME_EXCEPTION(frame_5ac36e1bd8fff02bc4591ebf9aca3658_20);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_111;

            frame_exception_exit_20:;

#if 0
            RESTORE_FRAME_EXCEPTION(frame_5ac36e1bd8fff02bc4591ebf9aca3658_20);
#endif

            if (exception_tb == NULL) {
                exception_tb = MAKE_TRACEBACK(frame_5ac36e1bd8fff02bc4591ebf9aca3658_20, exception_lineno);
            } else if (exception_tb->tb_frame != &frame_5ac36e1bd8fff02bc4591ebf9aca3658_20->m_frame) {
                exception_tb = ADD_TRACEBACK(exception_tb, frame_5ac36e1bd8fff02bc4591ebf9aca3658_20, exception_lineno);
            }

            // Attaches locals to frame if any.
            Nuitka_Frame_AttachLocals(
                frame_5ac36e1bd8fff02bc4591ebf9aca3658_20,
                type_description_3,
                outline_18_var__r,
                outline_17_var_conv
            );


            // Release cached frame if used for exception.
            if (frame_5ac36e1bd8fff02bc4591ebf9aca3658_20 == cache_frame_5ac36e1bd8fff02bc4591ebf9aca3658_20) {
#if _DEBUG_REFCOUNTS
                count_active_frame_cache_instances -= 1;
                count_released_frame_cache_instances += 1;
#endif

                Py_DECREF(cache_frame_5ac36e1bd8fff02bc4591ebf9aca3658_20);
                cache_frame_5ac36e1bd8fff02bc4591ebf9aca3658_20 = NULL;
            }

            assertFrameObject(frame_5ac36e1bd8fff02bc4591ebf9aca3658_20);

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_19;

            frame_no_exception_18:;
            goto skip_nested_handling_18;
            nested_frame_exit_19:;
            type_description_2 = "ooo";
            goto try_except_handler_111;
            skip_nested_handling_18:;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_111:;
            Py_XDECREF(outline_18_var__r);
            outline_18_var__r = NULL;
            goto outline_result_19;
            // Exception handler code:
            try_except_handler_111:;
            exception_keeper_type_109 = exception_type;
            exception_keeper_value_109 = exception_value;
            exception_keeper_tb_109 = exception_tb;
            exception_keeper_lineno_109 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(outline_18_var__r);
            outline_18_var__r = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_109;
            exception_value = exception_keeper_value_109;
            exception_tb = exception_keeper_tb_109;
            exception_lineno = exception_keeper_lineno_109;

            goto outline_exception_19;
            // End of try:
            NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
            return NULL;
            outline_exception_19:;
            exception_lineno = 2099;
            goto try_except_handler_108;
            outline_result_19:;
            assert(PyList_Check(tmp_append_list_18));
            tmp_result = LIST_APPEND1(tmp_append_list_18, tmp_append_value_18);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2099;
                type_description_2 = "ooo";
                goto try_except_handler_108;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2099;
            type_description_2 = "ooo";
            goto try_except_handler_108;
        }
        goto loop_start_31;
        loop_end_31:;
        CHECK_OBJECT(tmp_listcomp_17__contraction);
        tmp_dircall_arg2_2 = tmp_listcomp_17__contraction;
        Py_INCREF(tmp_dircall_arg2_2);
        goto try_return_handler_108;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_108:;
        CHECK_OBJECT(tmp_listcomp_17__$0);
        Py_DECREF(tmp_listcomp_17__$0);
        tmp_listcomp_17__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_17__contraction);
        Py_DECREF(tmp_listcomp_17__contraction);
        tmp_listcomp_17__contraction = NULL;
        Py_XDECREF(tmp_listcomp_17__iter_value_0);
        tmp_listcomp_17__iter_value_0 = NULL;
        goto frame_return_exit_19;
        // Exception handler code:
        try_except_handler_108:;
        exception_keeper_type_110 = exception_type;
        exception_keeper_value_110 = exception_value;
        exception_keeper_tb_110 = exception_tb;
        exception_keeper_lineno_110 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_17__$0);
        Py_DECREF(tmp_listcomp_17__$0);
        tmp_listcomp_17__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_17__contraction);
        Py_DECREF(tmp_listcomp_17__contraction);
        tmp_listcomp_17__contraction = NULL;
        Py_XDECREF(tmp_listcomp_17__iter_value_0);
        tmp_listcomp_17__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_110;
        exception_value = exception_keeper_value_110;
        exception_tb = exception_keeper_tb_110;
        exception_lineno = exception_keeper_lineno_110;

        goto frame_exception_exit_19;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e97cfa1a33b609f3ef8786f5effa6f30_19);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_19;

        frame_return_exit_19:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_e97cfa1a33b609f3ef8786f5effa6f30_19);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_107;

        frame_exception_exit_19:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e97cfa1a33b609f3ef8786f5effa6f30_19);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e97cfa1a33b609f3ef8786f5effa6f30_19, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e97cfa1a33b609f3ef8786f5effa6f30_19->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e97cfa1a33b609f3ef8786f5effa6f30_19, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e97cfa1a33b609f3ef8786f5effa6f30_19,
            type_description_2,
            outline_17_var_i,
            outline_17_var_conv,
            var_rows
        );


        // Release cached frame if used for exception.
        if (frame_e97cfa1a33b609f3ef8786f5effa6f30_19 == cache_frame_e97cfa1a33b609f3ef8786f5effa6f30_19) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e97cfa1a33b609f3ef8786f5effa6f30_19);
            cache_frame_e97cfa1a33b609f3ef8786f5effa6f30_19 = NULL;
        }

        assertFrameObject(frame_e97cfa1a33b609f3ef8786f5effa6f30_19);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_18;

        frame_no_exception_19:;
        goto skip_nested_handling_19;
        nested_frame_exit_18:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_107;
        skip_nested_handling_19:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_107:;
        Py_XDECREF(outline_17_var_i);
        outline_17_var_i = NULL;
        Py_XDECREF(outline_17_var_conv);
        outline_17_var_conv = NULL;
        goto outline_result_18;
        // Exception handler code:
        try_except_handler_107:;
        exception_keeper_type_111 = exception_type;
        exception_keeper_value_111 = exception_value;
        exception_keeper_tb_111 = exception_tb;
        exception_keeper_lineno_111 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_17_var_i);
        outline_17_var_i = NULL;
        Py_XDECREF(outline_17_var_conv);
        outline_17_var_conv = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_111;
        exception_value = exception_keeper_value_111;
        exception_tb = exception_keeper_tb_111;
        exception_lineno = exception_keeper_lineno_111;

        goto outline_exception_18;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_18:;
        exception_lineno = 2099;
        goto frame_exception_exit_1;
        outline_result_18:;
        Py_INCREF(tmp_dircall_arg1_2);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2, tmp_dircall_arg2_2};
            tmp_list_arg_6 = impl___main__$$$function__4_complex_call_helper_star_list(dir_call_args);
        }
        if (tmp_list_arg_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2099;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_264 = MAKE_LIST(tmp_list_arg_6);
        Py_DECREF(tmp_list_arg_6);
        if (tmp_assign_source_264 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2098;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_rows;
            var_rows = tmp_assign_source_264;
            Py_XDECREF(old);
        }

    }
    branch_end_80:;
    {
        PyObject *tmp_assign_source_277;
        CHECK_OBJECT(var_rows);
        tmp_assign_source_277 = var_rows;
        assert(var_data == NULL);
        Py_INCREF(tmp_assign_source_277);
        var_data = tmp_assign_source_277;
    }
    {
        bool tmp_condition_result_81;
        PyObject *tmp_compexpr_left_53;
        PyObject *tmp_compexpr_right_53;
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2104;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_53 = par_dtype;
        tmp_compexpr_right_53 = Py_None;
        tmp_condition_result_81 = (tmp_compexpr_left_53 == tmp_compexpr_right_53) ? true : false;
        if (tmp_condition_result_81 != false) {
            goto branch_yes_81;
        } else {
            goto branch_no_81;
        }
    }
    branch_yes_81:;
    {
        PyObject *tmp_assign_source_278;
        // Tried code:
        {
            PyObject *tmp_assign_source_279;
            PyObject *tmp_iter_arg_48;
            if (par_converters == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[191]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2106;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_113;
            }

            tmp_iter_arg_48 = par_converters;
            tmp_assign_source_279 = MAKE_ITERATOR(tmp_iter_arg_48);
            if (tmp_assign_source_279 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2106;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_113;
            }
            assert(tmp_listcomp_18__$0 == NULL);
            tmp_listcomp_18__$0 = tmp_assign_source_279;
        }
        {
            PyObject *tmp_assign_source_280;
            tmp_assign_source_280 = PyList_New(0);
            assert(tmp_listcomp_18__contraction == NULL);
            tmp_listcomp_18__contraction = tmp_assign_source_280;
        }
        if (isFrameUnusable(cache_frame_7b96517bc7112ed3a89690b51787f0a5_21)) {
            Py_XDECREF(cache_frame_7b96517bc7112ed3a89690b51787f0a5_21);

#if _DEBUG_REFCOUNTS
            if (cache_frame_7b96517bc7112ed3a89690b51787f0a5_21 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_7b96517bc7112ed3a89690b51787f0a5_21 = MAKE_FUNCTION_FRAME(codeobj_7b96517bc7112ed3a89690b51787f0a5, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_7b96517bc7112ed3a89690b51787f0a5_21->m_type_description == NULL);
        frame_7b96517bc7112ed3a89690b51787f0a5_21 = cache_frame_7b96517bc7112ed3a89690b51787f0a5_21;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_7b96517bc7112ed3a89690b51787f0a5_21);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_7b96517bc7112ed3a89690b51787f0a5_21) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_33:;
        {
            PyObject *tmp_next_source_32;
            PyObject *tmp_assign_source_281;
            CHECK_OBJECT(tmp_listcomp_18__$0);
            tmp_next_source_32 = tmp_listcomp_18__$0;
            tmp_assign_source_281 = ITERATOR_NEXT(tmp_next_source_32);
            if (tmp_assign_source_281 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_33;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 2106;
                    goto try_except_handler_114;
                }
            }

            {
                PyObject *old = tmp_listcomp_18__iter_value_0;
                tmp_listcomp_18__iter_value_0 = tmp_assign_source_281;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_282;
            CHECK_OBJECT(tmp_listcomp_18__iter_value_0);
            tmp_assign_source_282 = tmp_listcomp_18__iter_value_0;
            {
                PyObject *old = outline_19_var_conv;
                outline_19_var_conv = tmp_assign_source_282;
                Py_INCREF(outline_19_var_conv);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_20;
            PyObject *tmp_append_value_20;
            PyObject *tmp_expression_name_42;
            CHECK_OBJECT(tmp_listcomp_18__contraction);
            tmp_append_list_20 = tmp_listcomp_18__contraction;
            CHECK_OBJECT(outline_19_var_conv);
            tmp_expression_name_42 = outline_19_var_conv;
            tmp_append_value_20 = LOOKUP_ATTRIBUTE(tmp_expression_name_42, mod_consts[122]);
            if (tmp_append_value_20 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2106;
                type_description_2 = "o";
                goto try_except_handler_114;
            }
            assert(PyList_Check(tmp_append_list_20));
            tmp_result = LIST_APPEND1(tmp_append_list_20, tmp_append_value_20);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2106;
                type_description_2 = "o";
                goto try_except_handler_114;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2106;
            type_description_2 = "o";
            goto try_except_handler_114;
        }
        goto loop_start_33;
        loop_end_33:;
        CHECK_OBJECT(tmp_listcomp_18__contraction);
        tmp_assign_source_278 = tmp_listcomp_18__contraction;
        Py_INCREF(tmp_assign_source_278);
        goto try_return_handler_114;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_114:;
        CHECK_OBJECT(tmp_listcomp_18__$0);
        Py_DECREF(tmp_listcomp_18__$0);
        tmp_listcomp_18__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_18__contraction);
        Py_DECREF(tmp_listcomp_18__contraction);
        tmp_listcomp_18__contraction = NULL;
        Py_XDECREF(tmp_listcomp_18__iter_value_0);
        tmp_listcomp_18__iter_value_0 = NULL;
        goto frame_return_exit_21;
        // Exception handler code:
        try_except_handler_114:;
        exception_keeper_type_112 = exception_type;
        exception_keeper_value_112 = exception_value;
        exception_keeper_tb_112 = exception_tb;
        exception_keeper_lineno_112 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_18__$0);
        Py_DECREF(tmp_listcomp_18__$0);
        tmp_listcomp_18__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_18__contraction);
        Py_DECREF(tmp_listcomp_18__contraction);
        tmp_listcomp_18__contraction = NULL;
        Py_XDECREF(tmp_listcomp_18__iter_value_0);
        tmp_listcomp_18__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_112;
        exception_value = exception_keeper_value_112;
        exception_tb = exception_keeper_tb_112;
        exception_lineno = exception_keeper_lineno_112;

        goto frame_exception_exit_21;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7b96517bc7112ed3a89690b51787f0a5_21);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_20;

        frame_return_exit_21:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_7b96517bc7112ed3a89690b51787f0a5_21);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_113;

        frame_exception_exit_21:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7b96517bc7112ed3a89690b51787f0a5_21);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7b96517bc7112ed3a89690b51787f0a5_21, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7b96517bc7112ed3a89690b51787f0a5_21->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7b96517bc7112ed3a89690b51787f0a5_21, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7b96517bc7112ed3a89690b51787f0a5_21,
            type_description_2,
            outline_19_var_conv
        );


        // Release cached frame if used for exception.
        if (frame_7b96517bc7112ed3a89690b51787f0a5_21 == cache_frame_7b96517bc7112ed3a89690b51787f0a5_21) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_7b96517bc7112ed3a89690b51787f0a5_21);
            cache_frame_7b96517bc7112ed3a89690b51787f0a5_21 = NULL;
        }

        assertFrameObject(frame_7b96517bc7112ed3a89690b51787f0a5_21);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_20;

        frame_no_exception_20:;
        goto skip_nested_handling_20;
        nested_frame_exit_20:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_113;
        skip_nested_handling_20:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_113:;
        Py_XDECREF(outline_19_var_conv);
        outline_19_var_conv = NULL;
        goto outline_result_20;
        // Exception handler code:
        try_except_handler_113:;
        exception_keeper_type_113 = exception_type;
        exception_keeper_value_113 = exception_value;
        exception_keeper_tb_113 = exception_tb;
        exception_keeper_lineno_113 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_19_var_conv);
        outline_19_var_conv = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_113;
        exception_value = exception_keeper_value_113;
        exception_tb = exception_keeper_tb_113;
        exception_lineno = exception_keeper_lineno_113;

        goto outline_exception_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_20:;
        exception_lineno = 2106;
        goto frame_exception_exit_1;
        outline_result_20:;
        assert(var_column_types == NULL);
        var_column_types = tmp_assign_source_278;
    }
    {
        PyObject *tmp_assign_source_283;
        // Tried code:
        {
            PyObject *tmp_assign_source_284;
            PyObject *tmp_iter_arg_49;
            PyObject *tmp_called_name_65;
            PyObject *tmp_args_element_name_76;
            tmp_called_name_65 = (PyObject *)&PyEnum_Type;
            CHECK_OBJECT(var_column_types);
            tmp_args_element_name_76 = var_column_types;
            frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2108;
            tmp_iter_arg_49 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_65, tmp_args_element_name_76);
            if (tmp_iter_arg_49 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2108;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_115;
            }
            tmp_assign_source_284 = MAKE_ITERATOR(tmp_iter_arg_49);
            Py_DECREF(tmp_iter_arg_49);
            if (tmp_assign_source_284 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2108;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_115;
            }
            assert(tmp_listcomp_19__$0 == NULL);
            tmp_listcomp_19__$0 = tmp_assign_source_284;
        }
        {
            PyObject *tmp_assign_source_285;
            tmp_assign_source_285 = PyList_New(0);
            assert(tmp_listcomp_19__contraction == NULL);
            tmp_listcomp_19__contraction = tmp_assign_source_285;
        }
        if (isFrameUnusable(cache_frame_38ab9ed5c303df5ab27124fa88a0c141_22)) {
            Py_XDECREF(cache_frame_38ab9ed5c303df5ab27124fa88a0c141_22);

#if _DEBUG_REFCOUNTS
            if (cache_frame_38ab9ed5c303df5ab27124fa88a0c141_22 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_38ab9ed5c303df5ab27124fa88a0c141_22 = MAKE_FUNCTION_FRAME(codeobj_38ab9ed5c303df5ab27124fa88a0c141, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_38ab9ed5c303df5ab27124fa88a0c141_22->m_type_description == NULL);
        frame_38ab9ed5c303df5ab27124fa88a0c141_22 = cache_frame_38ab9ed5c303df5ab27124fa88a0c141_22;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_38ab9ed5c303df5ab27124fa88a0c141_22);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_38ab9ed5c303df5ab27124fa88a0c141_22) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_34:;
        {
            PyObject *tmp_next_source_33;
            PyObject *tmp_assign_source_286;
            CHECK_OBJECT(tmp_listcomp_19__$0);
            tmp_next_source_33 = tmp_listcomp_19__$0;
            tmp_assign_source_286 = ITERATOR_NEXT(tmp_next_source_33);
            if (tmp_assign_source_286 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_34;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 2108;
                    goto try_except_handler_116;
                }
            }

            {
                PyObject *old = tmp_listcomp_19__iter_value_0;
                tmp_listcomp_19__iter_value_0 = tmp_assign_source_286;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_287;
            PyObject *tmp_iter_arg_50;
            CHECK_OBJECT(tmp_listcomp_19__iter_value_0);
            tmp_iter_arg_50 = tmp_listcomp_19__iter_value_0;
            tmp_assign_source_287 = MAKE_ITERATOR(tmp_iter_arg_50);
            if (tmp_assign_source_287 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2108;
                type_description_2 = "oo";
                goto try_except_handler_117;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_8__source_iter;
                tmp_listcomp$tuple_unpack_8__source_iter = tmp_assign_source_287;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_288;
            PyObject *tmp_unpack_32;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_8__source_iter);
            tmp_unpack_32 = tmp_listcomp$tuple_unpack_8__source_iter;
            tmp_assign_source_288 = UNPACK_NEXT(tmp_unpack_32, 0, 2);
            if (tmp_assign_source_288 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "oo";
                exception_lineno = 2108;
                goto try_except_handler_118;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_8__element_1;
                tmp_listcomp$tuple_unpack_8__element_1 = tmp_assign_source_288;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_289;
            PyObject *tmp_unpack_33;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_8__source_iter);
            tmp_unpack_33 = tmp_listcomp$tuple_unpack_8__source_iter;
            tmp_assign_source_289 = UNPACK_NEXT(tmp_unpack_33, 1, 2);
            if (tmp_assign_source_289 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "oo";
                exception_lineno = 2108;
                goto try_except_handler_118;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_8__element_2;
                tmp_listcomp$tuple_unpack_8__element_2 = tmp_assign_source_289;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_16;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_8__source_iter);
            tmp_iterator_name_16 = tmp_listcomp$tuple_unpack_8__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_16); assert(HAS_ITERNEXT(tmp_iterator_name_16));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_16)->tp_iternext)(tmp_iterator_name_16);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "oo";
                        exception_lineno = 2108;
                        goto try_except_handler_118;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[94];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "oo";
                exception_lineno = 2108;
                goto try_except_handler_118;
            }
        }
        goto try_end_67;
        // Exception handler code:
        try_except_handler_118:;
        exception_keeper_type_114 = exception_type;
        exception_keeper_value_114 = exception_value;
        exception_keeper_tb_114 = exception_tb;
        exception_keeper_lineno_114 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_8__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_8__source_iter);
        tmp_listcomp$tuple_unpack_8__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_114;
        exception_value = exception_keeper_value_114;
        exception_tb = exception_keeper_tb_114;
        exception_lineno = exception_keeper_lineno_114;

        goto try_except_handler_117;
        // End of try:
        try_end_67:;
        goto try_end_68;
        // Exception handler code:
        try_except_handler_117:;
        exception_keeper_type_115 = exception_type;
        exception_keeper_value_115 = exception_value;
        exception_keeper_tb_115 = exception_tb;
        exception_keeper_lineno_115 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_8__element_1);
        tmp_listcomp$tuple_unpack_8__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_8__element_2);
        tmp_listcomp$tuple_unpack_8__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_115;
        exception_value = exception_keeper_value_115;
        exception_tb = exception_keeper_tb_115;
        exception_lineno = exception_keeper_lineno_115;

        goto try_except_handler_116;
        // End of try:
        try_end_68:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_8__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_8__source_iter);
        tmp_listcomp$tuple_unpack_8__source_iter = NULL;
        {
            PyObject *tmp_assign_source_290;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_8__element_1);
            tmp_assign_source_290 = tmp_listcomp$tuple_unpack_8__element_1;
            {
                PyObject *old = outline_20_var_i;
                outline_20_var_i = tmp_assign_source_290;
                Py_INCREF(outline_20_var_i);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_8__element_1);
        tmp_listcomp$tuple_unpack_8__element_1 = NULL;

        {
            PyObject *tmp_assign_source_291;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_8__element_2);
            tmp_assign_source_291 = tmp_listcomp$tuple_unpack_8__element_2;
            {
                PyObject *old = outline_20_var_v;
                outline_20_var_v = tmp_assign_source_291;
                Py_INCREF(outline_20_var_v);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_8__element_2);
        tmp_listcomp$tuple_unpack_8__element_2 = NULL;

        {
            nuitka_bool tmp_condition_result_82;
            PyObject *tmp_compexpr_left_54;
            PyObject *tmp_compexpr_right_54;
            PyObject *tmp_expression_name_43;
            CHECK_OBJECT(outline_20_var_v);
            tmp_compexpr_left_54 = outline_20_var_v;
            tmp_expression_name_43 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_expression_name_43 == NULL)) {
                tmp_expression_name_43 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
            }

            if (tmp_expression_name_43 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2109;
                type_description_2 = "oo";
                goto try_except_handler_116;
            }
            tmp_compexpr_right_54 = LOOKUP_ATTRIBUTE(tmp_expression_name_43, mod_consts[133]);
            if (tmp_compexpr_right_54 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2109;
                type_description_2 = "oo";
                goto try_except_handler_116;
            }
            tmp_condition_result_82 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_54, tmp_compexpr_right_54);
            Py_DECREF(tmp_compexpr_right_54);
            if (tmp_condition_result_82 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2109;
                type_description_2 = "oo";
                goto try_except_handler_116;
            }
            if (tmp_condition_result_82 == NUITKA_BOOL_TRUE) {
                goto branch_yes_82;
            } else {
                goto branch_no_82;
            }
            assert(tmp_condition_result_82 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_82:;
        {
            PyObject *tmp_append_list_21;
            PyObject *tmp_append_value_21;
            CHECK_OBJECT(tmp_listcomp_19__contraction);
            tmp_append_list_21 = tmp_listcomp_19__contraction;
            CHECK_OBJECT(outline_20_var_i);
            tmp_append_value_21 = outline_20_var_i;
            assert(PyList_Check(tmp_append_list_21));
            tmp_result = LIST_APPEND0(tmp_append_list_21, tmp_append_value_21);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2108;
                type_description_2 = "oo";
                goto try_except_handler_116;
            }
        }
        branch_no_82:;
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2108;
            type_description_2 = "oo";
            goto try_except_handler_116;
        }
        goto loop_start_34;
        loop_end_34:;
        CHECK_OBJECT(tmp_listcomp_19__contraction);
        tmp_assign_source_283 = tmp_listcomp_19__contraction;
        Py_INCREF(tmp_assign_source_283);
        goto try_return_handler_116;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_116:;
        CHECK_OBJECT(tmp_listcomp_19__$0);
        Py_DECREF(tmp_listcomp_19__$0);
        tmp_listcomp_19__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_19__contraction);
        Py_DECREF(tmp_listcomp_19__contraction);
        tmp_listcomp_19__contraction = NULL;
        Py_XDECREF(tmp_listcomp_19__iter_value_0);
        tmp_listcomp_19__iter_value_0 = NULL;
        goto frame_return_exit_22;
        // Exception handler code:
        try_except_handler_116:;
        exception_keeper_type_116 = exception_type;
        exception_keeper_value_116 = exception_value;
        exception_keeper_tb_116 = exception_tb;
        exception_keeper_lineno_116 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_19__$0);
        Py_DECREF(tmp_listcomp_19__$0);
        tmp_listcomp_19__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_19__contraction);
        Py_DECREF(tmp_listcomp_19__contraction);
        tmp_listcomp_19__contraction = NULL;
        Py_XDECREF(tmp_listcomp_19__iter_value_0);
        tmp_listcomp_19__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_116;
        exception_value = exception_keeper_value_116;
        exception_tb = exception_keeper_tb_116;
        exception_lineno = exception_keeper_lineno_116;

        goto frame_exception_exit_22;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_38ab9ed5c303df5ab27124fa88a0c141_22);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_21;

        frame_return_exit_22:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_38ab9ed5c303df5ab27124fa88a0c141_22);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_115;

        frame_exception_exit_22:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_38ab9ed5c303df5ab27124fa88a0c141_22);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_38ab9ed5c303df5ab27124fa88a0c141_22, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_38ab9ed5c303df5ab27124fa88a0c141_22->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_38ab9ed5c303df5ab27124fa88a0c141_22, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_38ab9ed5c303df5ab27124fa88a0c141_22,
            type_description_2,
            outline_20_var_i,
            outline_20_var_v
        );


        // Release cached frame if used for exception.
        if (frame_38ab9ed5c303df5ab27124fa88a0c141_22 == cache_frame_38ab9ed5c303df5ab27124fa88a0c141_22) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_38ab9ed5c303df5ab27124fa88a0c141_22);
            cache_frame_38ab9ed5c303df5ab27124fa88a0c141_22 = NULL;
        }

        assertFrameObject(frame_38ab9ed5c303df5ab27124fa88a0c141_22);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_21;

        frame_no_exception_21:;
        goto skip_nested_handling_21;
        nested_frame_exit_21:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_115;
        skip_nested_handling_21:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_115:;
        Py_XDECREF(outline_20_var_i);
        outline_20_var_i = NULL;
        Py_XDECREF(outline_20_var_v);
        outline_20_var_v = NULL;
        goto outline_result_21;
        // Exception handler code:
        try_except_handler_115:;
        exception_keeper_type_117 = exception_type;
        exception_keeper_value_117 = exception_value;
        exception_keeper_tb_117 = exception_tb;
        exception_keeper_lineno_117 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_20_var_i);
        outline_20_var_i = NULL;
        Py_XDECREF(outline_20_var_v);
        outline_20_var_v = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_117;
        exception_value = exception_keeper_value_117;
        exception_tb = exception_keeper_tb_117;
        exception_lineno = exception_keeper_lineno_117;

        goto outline_exception_21;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_21:;
        exception_lineno = 2108;
        goto frame_exception_exit_1;
        outline_result_21:;
        assert(Nuitka_Cell_GET(var_strcolidx) == NULL);
        PyCell_SET(var_strcolidx, tmp_assign_source_283);

    }
    {
        nuitka_bool tmp_condition_result_83;
        int tmp_and_left_truth_5;
        nuitka_bool tmp_and_left_value_5;
        nuitka_bool tmp_and_right_value_5;
        int tmp_truth_name_27;
        if (var_byte_converters == NUITKA_BOOL_UNASSIGNED) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[185]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2111;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_and_left_value_5 = var_byte_converters;
        tmp_and_left_truth_5 = tmp_and_left_value_5 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2111;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_5 == 1) {
            goto and_right_5;
        } else {
            goto and_left_5;
        }
        and_right_5:;
        CHECK_OBJECT(Nuitka_Cell_GET(var_strcolidx));
        tmp_truth_name_27 = CHECK_IF_TRUE(Nuitka_Cell_GET(var_strcolidx));
        if (tmp_truth_name_27 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2111;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_5 = tmp_truth_name_27 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_condition_result_83 = tmp_and_right_value_5;
        goto and_end_5;
        and_left_5:;
        tmp_condition_result_83 = tmp_and_left_value_5;
        and_end_5:;
        if (tmp_condition_result_83 == NUITKA_BOOL_TRUE) {
            goto branch_yes_83;
        } else {
            goto branch_no_83;
        }
    }
    branch_yes_83:;
    {
        PyObject *tmp_called_name_66;
        PyObject *tmp_expression_name_44;
        PyObject *tmp_call_result_25;
        PyObject *tmp_args_name_4;
        PyObject *tmp_tuple_element_10;
        PyObject *tmp_kwargs_name_4;
        tmp_expression_name_44 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_name_44 == NULL)) {
            tmp_expression_name_44 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_name_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2113;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_66 = LOOKUP_ATTRIBUTE(tmp_expression_name_44, mod_consts[1]);
        if (tmp_called_name_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2113;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_10 = mod_consts[371];
        tmp_args_name_4 = PyTuple_New(2);
        {
            PyObject *tmp_expression_name_45;
            PyTuple_SET_ITEM0(tmp_args_name_4, 0, tmp_tuple_element_10);
            tmp_expression_name_45 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

            if (unlikely(tmp_expression_name_45 == NULL)) {
                tmp_expression_name_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
            }

            if (tmp_expression_name_45 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2117;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto tuple_build_exception_4;
            }
            tmp_tuple_element_10 = LOOKUP_ATTRIBUTE(tmp_expression_name_45, mod_consts[372]);
            if (tmp_tuple_element_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2117;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto tuple_build_exception_4;
            }
            PyTuple_SET_ITEM(tmp_args_name_4, 1, tmp_tuple_element_10);
        }
        goto tuple_build_noexception_4;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_4:;
        Py_DECREF(tmp_called_name_66);
        Py_DECREF(tmp_args_name_4);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_4:;
        tmp_kwargs_name_4 = PyDict_Copy(mod_consts[4]);
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2113;
        tmp_call_result_25 = CALL_FUNCTION(tmp_called_name_66, tmp_args_name_4, tmp_kwargs_name_4);
        Py_DECREF(tmp_called_name_66);
        Py_DECREF(tmp_args_name_4);
        Py_DECREF(tmp_kwargs_name_4);
        if (tmp_call_result_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2113;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_25);
    }
    {
        PyObject *tmp_assign_source_292;
        struct Nuitka_CellObject *tmp_closure_1[1];

        tmp_closure_1[0] = var_strcolidx;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_292 = MAKE_FUNCTION_numpy$lib$npyio$$$function__29_genfromtxt$$$function__2_encode_unicode_cols(tmp_closure_1);

        assert(var_encode_unicode_cols == NULL);
        var_encode_unicode_cols = tmp_assign_source_292;
    }
    {
        nuitka_bool tmp_assign_source_293;
        tmp_assign_source_293 = NUITKA_BOOL_TRUE;
        tmp_try_except_1__unhandled_indicator = tmp_assign_source_293;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_294;
        // Tried code:
        {
            PyObject *tmp_assign_source_295;
            PyObject *tmp_iter_arg_51;
            CHECK_OBJECT(var_data);
            tmp_iter_arg_51 = var_data;
            tmp_assign_source_295 = MAKE_ITERATOR(tmp_iter_arg_51);
            if (tmp_assign_source_295 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2125;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_120;
            }
            assert(tmp_listcomp_20__$0 == NULL);
            tmp_listcomp_20__$0 = tmp_assign_source_295;
        }
        {
            PyObject *tmp_assign_source_296;
            tmp_assign_source_296 = PyList_New(0);
            assert(tmp_listcomp_20__contraction == NULL);
            tmp_listcomp_20__contraction = tmp_assign_source_296;
        }
        if (isFrameUnusable(cache_frame_b5133f64a3c8b885e89b634eeb140c25_23)) {
            Py_XDECREF(cache_frame_b5133f64a3c8b885e89b634eeb140c25_23);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b5133f64a3c8b885e89b634eeb140c25_23 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b5133f64a3c8b885e89b634eeb140c25_23 = MAKE_FUNCTION_FRAME(codeobj_b5133f64a3c8b885e89b634eeb140c25, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b5133f64a3c8b885e89b634eeb140c25_23->m_type_description == NULL);
        frame_b5133f64a3c8b885e89b634eeb140c25_23 = cache_frame_b5133f64a3c8b885e89b634eeb140c25_23;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b5133f64a3c8b885e89b634eeb140c25_23);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b5133f64a3c8b885e89b634eeb140c25_23) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_35:;
        {
            PyObject *tmp_next_source_34;
            PyObject *tmp_assign_source_297;
            CHECK_OBJECT(tmp_listcomp_20__$0);
            tmp_next_source_34 = tmp_listcomp_20__$0;
            tmp_assign_source_297 = ITERATOR_NEXT(tmp_next_source_34);
            if (tmp_assign_source_297 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_35;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 2125;
                    goto try_except_handler_121;
                }
            }

            {
                PyObject *old = tmp_listcomp_20__iter_value_0;
                tmp_listcomp_20__iter_value_0 = tmp_assign_source_297;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_298;
            CHECK_OBJECT(tmp_listcomp_20__iter_value_0);
            tmp_assign_source_298 = tmp_listcomp_20__iter_value_0;
            {
                PyObject *old = outline_21_var_r;
                outline_21_var_r = tmp_assign_source_298;
                Py_INCREF(outline_21_var_r);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_22;
            PyObject *tmp_append_value_22;
            PyObject *tmp_called_name_67;
            PyObject *tmp_args_element_name_77;
            CHECK_OBJECT(tmp_listcomp_20__contraction);
            tmp_append_list_22 = tmp_listcomp_20__contraction;
            if (var_encode_unicode_cols == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[373]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2125;
                type_description_2 = "oo";
                goto try_except_handler_121;
            }

            tmp_called_name_67 = var_encode_unicode_cols;
            CHECK_OBJECT(outline_21_var_r);
            tmp_args_element_name_77 = outline_21_var_r;
            frame_b5133f64a3c8b885e89b634eeb140c25_23->m_frame.f_lineno = 2125;
            tmp_append_value_22 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_67, tmp_args_element_name_77);
            if (tmp_append_value_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2125;
                type_description_2 = "oo";
                goto try_except_handler_121;
            }
            assert(PyList_Check(tmp_append_list_22));
            tmp_result = LIST_APPEND1(tmp_append_list_22, tmp_append_value_22);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2125;
                type_description_2 = "oo";
                goto try_except_handler_121;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2125;
            type_description_2 = "oo";
            goto try_except_handler_121;
        }
        goto loop_start_35;
        loop_end_35:;
        CHECK_OBJECT(tmp_listcomp_20__contraction);
        tmp_assign_source_294 = tmp_listcomp_20__contraction;
        Py_INCREF(tmp_assign_source_294);
        goto try_return_handler_121;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_121:;
        CHECK_OBJECT(tmp_listcomp_20__$0);
        Py_DECREF(tmp_listcomp_20__$0);
        tmp_listcomp_20__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_20__contraction);
        Py_DECREF(tmp_listcomp_20__contraction);
        tmp_listcomp_20__contraction = NULL;
        Py_XDECREF(tmp_listcomp_20__iter_value_0);
        tmp_listcomp_20__iter_value_0 = NULL;
        goto frame_return_exit_23;
        // Exception handler code:
        try_except_handler_121:;
        exception_keeper_type_118 = exception_type;
        exception_keeper_value_118 = exception_value;
        exception_keeper_tb_118 = exception_tb;
        exception_keeper_lineno_118 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_20__$0);
        Py_DECREF(tmp_listcomp_20__$0);
        tmp_listcomp_20__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_20__contraction);
        Py_DECREF(tmp_listcomp_20__contraction);
        tmp_listcomp_20__contraction = NULL;
        Py_XDECREF(tmp_listcomp_20__iter_value_0);
        tmp_listcomp_20__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_118;
        exception_value = exception_keeper_value_118;
        exception_tb = exception_keeper_tb_118;
        exception_lineno = exception_keeper_lineno_118;

        goto frame_exception_exit_23;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b5133f64a3c8b885e89b634eeb140c25_23);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_22;

        frame_return_exit_23:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_b5133f64a3c8b885e89b634eeb140c25_23);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_120;

        frame_exception_exit_23:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b5133f64a3c8b885e89b634eeb140c25_23);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b5133f64a3c8b885e89b634eeb140c25_23, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b5133f64a3c8b885e89b634eeb140c25_23->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b5133f64a3c8b885e89b634eeb140c25_23, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b5133f64a3c8b885e89b634eeb140c25_23,
            type_description_2,
            outline_21_var_r,
            var_encode_unicode_cols
        );


        // Release cached frame if used for exception.
        if (frame_b5133f64a3c8b885e89b634eeb140c25_23 == cache_frame_b5133f64a3c8b885e89b634eeb140c25_23) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b5133f64a3c8b885e89b634eeb140c25_23);
            cache_frame_b5133f64a3c8b885e89b634eeb140c25_23 = NULL;
        }

        assertFrameObject(frame_b5133f64a3c8b885e89b634eeb140c25_23);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_22;

        frame_no_exception_22:;
        goto skip_nested_handling_22;
        nested_frame_exit_22:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_120;
        skip_nested_handling_22:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_120:;
        Py_XDECREF(outline_21_var_r);
        outline_21_var_r = NULL;
        goto outline_result_22;
        // Exception handler code:
        try_except_handler_120:;
        exception_keeper_type_119 = exception_type;
        exception_keeper_value_119 = exception_value;
        exception_keeper_tb_119 = exception_tb;
        exception_keeper_lineno_119 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_21_var_r);
        outline_21_var_r = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_119;
        exception_value = exception_keeper_value_119;
        exception_tb = exception_keeper_tb_119;
        exception_lineno = exception_keeper_lineno_119;

        goto outline_exception_22;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_22:;
        exception_lineno = 2125;
        goto try_except_handler_119;
        outline_result_22:;
        {
            PyObject *old = var_data;
            assert(old != NULL);
            var_data = tmp_assign_source_294;
            Py_DECREF(old);
        }

    }
    goto try_end_69;
    // Exception handler code:
    try_except_handler_119:;
    exception_keeper_type_120 = exception_type;
    exception_keeper_value_120 = exception_value;
    exception_keeper_tb_120 = exception_tb;
    exception_keeper_lineno_120 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_assign_source_299;
        tmp_assign_source_299 = NUITKA_BOOL_FALSE;
        tmp_try_except_1__unhandled_indicator = tmp_assign_source_299;
    }
    // Preserve existing published exception id 15.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_15, &exception_preserved_value_15, &exception_preserved_tb_15);

    if (exception_keeper_tb_120 == NULL) {
        exception_keeper_tb_120 = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_120);
    } else if (exception_keeper_lineno_120 != 0) {
        exception_keeper_tb_120 = ADD_TRACEBACK(exception_keeper_tb_120, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_keeper_lineno_120);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_120, &exception_keeper_value_120, &exception_keeper_tb_120);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_120, exception_keeper_tb_120);
    PUBLISH_EXCEPTION(&exception_keeper_type_120, &exception_keeper_value_120, &exception_keeper_tb_120);
    // Tried code:
    {
        bool tmp_condition_result_84;
        PyObject *tmp_compexpr_left_55;
        PyObject *tmp_compexpr_right_55;
        tmp_compexpr_left_55 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_55 = PyExc_UnicodeEncodeError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_55, tmp_compexpr_right_55);
        assert(!(tmp_res == -1));
        tmp_condition_result_84 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_84 != false) {
            goto branch_yes_84;
        } else {
            goto branch_no_84;
        }
    }
    branch_yes_84:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 2124;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
    goto try_except_handler_122;
    branch_no_84:;
    goto try_end_70;
    // Exception handler code:
    try_except_handler_122:;
    exception_keeper_type_121 = exception_type;
    exception_keeper_value_121 = exception_value;
    exception_keeper_tb_121 = exception_tb;
    exception_keeper_lineno_121 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 15.
    SET_CURRENT_EXCEPTION(exception_preserved_type_15, exception_preserved_value_15, exception_preserved_tb_15);

    // Re-raise.
    exception_type = exception_keeper_type_121;
    exception_value = exception_keeper_value_121;
    exception_tb = exception_keeper_tb_121;
    exception_lineno = exception_keeper_lineno_121;

    goto frame_exception_exit_1;
    // End of try:
    try_end_70:;
    // Restore previous exception id 15.
    SET_CURRENT_EXCEPTION(exception_preserved_type_15, exception_preserved_value_15, exception_preserved_tb_15);

    goto try_end_69;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_69:;
    {
        bool tmp_condition_result_85;
        nuitka_bool tmp_compexpr_left_56;
        nuitka_bool tmp_compexpr_right_56;
        assert(tmp_try_except_1__unhandled_indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_56 = tmp_try_except_1__unhandled_indicator;
        tmp_compexpr_right_56 = NUITKA_BOOL_TRUE;
        tmp_condition_result_85 = (tmp_compexpr_left_56 == tmp_compexpr_right_56) ? true : false;
        if (tmp_condition_result_85 != false) {
            goto branch_yes_85;
        } else {
            goto branch_no_85;
        }
    }
    branch_yes_85:;
    {
        PyObject *tmp_assign_source_300;
        PyObject *tmp_iter_arg_52;
        CHECK_OBJECT(Nuitka_Cell_GET(var_strcolidx));
        tmp_iter_arg_52 = Nuitka_Cell_GET(var_strcolidx);
        tmp_assign_source_300 = MAKE_ITERATOR(tmp_iter_arg_52);
        if (tmp_assign_source_300 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2129;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_13__for_iterator == NULL);
        tmp_for_loop_13__for_iterator = tmp_assign_source_300;
    }
    // Tried code:
    loop_start_36:;
    {
        PyObject *tmp_next_source_35;
        PyObject *tmp_assign_source_301;
        CHECK_OBJECT(tmp_for_loop_13__for_iterator);
        tmp_next_source_35 = tmp_for_loop_13__for_iterator;
        tmp_assign_source_301 = ITERATOR_NEXT(tmp_next_source_35);
        if (tmp_assign_source_301 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_36;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 2129;
                goto try_except_handler_123;
            }
        }

        {
            PyObject *old = tmp_for_loop_13__iter_value;
            tmp_for_loop_13__iter_value = tmp_assign_source_301;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_302;
        CHECK_OBJECT(tmp_for_loop_13__iter_value);
        tmp_assign_source_302 = tmp_for_loop_13__iter_value;
        {
            PyObject *old = Nuitka_Cell_GET(var_i);
            PyCell_SET(var_i, tmp_assign_source_302);
            Py_INCREF(tmp_assign_source_302);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_ass_subvalue_5;
        PyObject *tmp_expression_name_46;
        PyObject *tmp_ass_subscribed_5;
        PyObject *tmp_ass_subscript_5;
        tmp_expression_name_46 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_46 == NULL)) {
            tmp_expression_name_46 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2130;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_123;
        }
        tmp_ass_subvalue_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_46, mod_consts[131]);
        if (tmp_ass_subvalue_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2130;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_123;
        }
        if (var_column_types == NULL) {
            Py_DECREF(tmp_ass_subvalue_5);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[375]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2130;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_123;
        }

        tmp_ass_subscribed_5 = var_column_types;
        CHECK_OBJECT(Nuitka_Cell_GET(var_i));
        tmp_ass_subscript_5 = Nuitka_Cell_GET(var_i);
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_5, tmp_ass_subscript_5, tmp_ass_subvalue_5);
        Py_DECREF(tmp_ass_subvalue_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2130;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_123;
        }
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2129;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_123;
    }
    goto loop_start_36;
    loop_end_36:;
    goto try_end_71;
    // Exception handler code:
    try_except_handler_123:;
    exception_keeper_type_122 = exception_type;
    exception_keeper_value_122 = exception_value;
    exception_keeper_tb_122 = exception_tb;
    exception_keeper_lineno_122 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_13__iter_value);
    tmp_for_loop_13__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_13__for_iterator);
    Py_DECREF(tmp_for_loop_13__for_iterator);
    tmp_for_loop_13__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_122;
    exception_value = exception_keeper_value_122;
    exception_tb = exception_keeper_tb_122;
    exception_lineno = exception_keeper_lineno_122;

    goto frame_exception_exit_1;
    // End of try:
    try_end_71:;
    Py_XDECREF(tmp_for_loop_13__iter_value);
    tmp_for_loop_13__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_13__for_iterator);
    Py_DECREF(tmp_for_loop_13__for_iterator);
    tmp_for_loop_13__for_iterator = NULL;
    branch_no_85:;
    branch_no_83:;
    {
        PyObject *tmp_assign_source_303;
        PyObject *tmp_expression_name_47;
        PyObject *tmp_subscript_name_16;
        if (var_column_types == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[375]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2133;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_47 = var_column_types;
        tmp_subscript_name_16 = mod_consts[376];
        tmp_assign_source_303 = LOOKUP_SUBSCRIPT(tmp_expression_name_47, tmp_subscript_name_16);
        if (tmp_assign_source_303 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2133;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_sized_column_types == NULL);
        var_sized_column_types = tmp_assign_source_303;
    }
    {
        PyObject *tmp_assign_source_304;
        PyObject *tmp_iter_arg_53;
        PyObject *tmp_called_name_68;
        PyObject *tmp_args_element_name_78;
        tmp_called_name_68 = (PyObject *)&PyEnum_Type;
        if (var_column_types == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[375]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2134;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_78 = var_column_types;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2134;
        tmp_iter_arg_53 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_68, tmp_args_element_name_78);
        if (tmp_iter_arg_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2134;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_304 = MAKE_ITERATOR(tmp_iter_arg_53);
        Py_DECREF(tmp_iter_arg_53);
        if (tmp_assign_source_304 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2134;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_14__for_iterator == NULL);
        tmp_for_loop_14__for_iterator = tmp_assign_source_304;
    }
    // Tried code:
    loop_start_37:;
    {
        PyObject *tmp_next_source_36;
        PyObject *tmp_assign_source_305;
        CHECK_OBJECT(tmp_for_loop_14__for_iterator);
        tmp_next_source_36 = tmp_for_loop_14__for_iterator;
        tmp_assign_source_305 = ITERATOR_NEXT(tmp_next_source_36);
        if (tmp_assign_source_305 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_37;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 2134;
                goto try_except_handler_124;
            }
        }

        {
            PyObject *old = tmp_for_loop_14__iter_value;
            tmp_for_loop_14__iter_value = tmp_assign_source_305;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_306;
        PyObject *tmp_iter_arg_54;
        CHECK_OBJECT(tmp_for_loop_14__iter_value);
        tmp_iter_arg_54 = tmp_for_loop_14__iter_value;
        tmp_assign_source_306 = MAKE_ITERATOR(tmp_iter_arg_54);
        if (tmp_assign_source_306 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2134;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_125;
        }
        {
            PyObject *old = tmp_tuple_unpack_9__source_iter;
            tmp_tuple_unpack_9__source_iter = tmp_assign_source_306;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_307;
        PyObject *tmp_unpack_34;
        CHECK_OBJECT(tmp_tuple_unpack_9__source_iter);
        tmp_unpack_34 = tmp_tuple_unpack_9__source_iter;
        tmp_assign_source_307 = UNPACK_NEXT(tmp_unpack_34, 0, 2);
        if (tmp_assign_source_307 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2134;
            goto try_except_handler_126;
        }
        {
            PyObject *old = tmp_tuple_unpack_9__element_1;
            tmp_tuple_unpack_9__element_1 = tmp_assign_source_307;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_308;
        PyObject *tmp_unpack_35;
        CHECK_OBJECT(tmp_tuple_unpack_9__source_iter);
        tmp_unpack_35 = tmp_tuple_unpack_9__source_iter;
        tmp_assign_source_308 = UNPACK_NEXT(tmp_unpack_35, 1, 2);
        if (tmp_assign_source_308 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2134;
            goto try_except_handler_126;
        }
        {
            PyObject *old = tmp_tuple_unpack_9__element_2;
            tmp_tuple_unpack_9__element_2 = tmp_assign_source_308;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_17;
        CHECK_OBJECT(tmp_tuple_unpack_9__source_iter);
        tmp_iterator_name_17 = tmp_tuple_unpack_9__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_17); assert(HAS_ITERNEXT(tmp_iterator_name_17));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_17)->tp_iternext)(tmp_iterator_name_17);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 2134;
                    goto try_except_handler_126;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2134;
            goto try_except_handler_126;
        }
    }
    goto try_end_72;
    // Exception handler code:
    try_except_handler_126:;
    exception_keeper_type_123 = exception_type;
    exception_keeper_value_123 = exception_value;
    exception_keeper_tb_123 = exception_tb;
    exception_keeper_lineno_123 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_9__source_iter);
    Py_DECREF(tmp_tuple_unpack_9__source_iter);
    tmp_tuple_unpack_9__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_123;
    exception_value = exception_keeper_value_123;
    exception_tb = exception_keeper_tb_123;
    exception_lineno = exception_keeper_lineno_123;

    goto try_except_handler_125;
    // End of try:
    try_end_72:;
    goto try_end_73;
    // Exception handler code:
    try_except_handler_125:;
    exception_keeper_type_124 = exception_type;
    exception_keeper_value_124 = exception_value;
    exception_keeper_tb_124 = exception_tb;
    exception_keeper_lineno_124 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_9__element_1);
    tmp_tuple_unpack_9__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_9__element_2);
    tmp_tuple_unpack_9__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_124;
    exception_value = exception_keeper_value_124;
    exception_tb = exception_keeper_tb_124;
    exception_lineno = exception_keeper_lineno_124;

    goto try_except_handler_124;
    // End of try:
    try_end_73:;
    CHECK_OBJECT(tmp_tuple_unpack_9__source_iter);
    Py_DECREF(tmp_tuple_unpack_9__source_iter);
    tmp_tuple_unpack_9__source_iter = NULL;
    {
        PyObject *tmp_assign_source_309;
        CHECK_OBJECT(tmp_tuple_unpack_9__element_1);
        tmp_assign_source_309 = tmp_tuple_unpack_9__element_1;
        {
            PyObject *old = Nuitka_Cell_GET(var_i);
            PyCell_SET(var_i, tmp_assign_source_309);
            Py_INCREF(tmp_assign_source_309);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_9__element_1);
    tmp_tuple_unpack_9__element_1 = NULL;

    {
        PyObject *tmp_assign_source_310;
        CHECK_OBJECT(tmp_tuple_unpack_9__element_2);
        tmp_assign_source_310 = tmp_tuple_unpack_9__element_2;
        {
            PyObject *old = var_col_type;
            var_col_type = tmp_assign_source_310;
            Py_INCREF(var_col_type);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_9__element_2);
    tmp_tuple_unpack_9__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_86;
        PyObject *tmp_called_name_69;
        PyObject *tmp_expression_name_48;
        PyObject *tmp_call_result_26;
        PyObject *tmp_args_element_name_79;
        PyObject *tmp_args_element_name_80;
        PyObject *tmp_expression_name_49;
        int tmp_truth_name_28;
        tmp_expression_name_48 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_48 == NULL)) {
            tmp_expression_name_48 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2135;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_124;
        }
        tmp_called_name_69 = LOOKUP_ATTRIBUTE(tmp_expression_name_48, mod_consts[377]);
        if (tmp_called_name_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2135;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_124;
        }
        CHECK_OBJECT(var_col_type);
        tmp_args_element_name_79 = var_col_type;
        tmp_expression_name_49 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_49 == NULL)) {
            tmp_expression_name_49 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_69);

            exception_lineno = 2135;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_124;
        }
        tmp_args_element_name_80 = LOOKUP_ATTRIBUTE(tmp_expression_name_49, mod_consts[378]);
        if (tmp_args_element_name_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_69);

            exception_lineno = 2135;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_124;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2135;
        {
            PyObject *call_args[] = {tmp_args_element_name_79, tmp_args_element_name_80};
            tmp_call_result_26 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_69, call_args);
        }

        Py_DECREF(tmp_called_name_69);
        Py_DECREF(tmp_args_element_name_80);
        if (tmp_call_result_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2135;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_124;
        }
        tmp_truth_name_28 = CHECK_IF_TRUE(tmp_call_result_26);
        if (tmp_truth_name_28 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_26);

            exception_lineno = 2135;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_124;
        }
        tmp_condition_result_86 = tmp_truth_name_28 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_26);
        if (tmp_condition_result_86 == NUITKA_BOOL_TRUE) {
            goto branch_yes_86;
        } else {
            goto branch_no_86;
        }
    }
    branch_yes_86:;
    {
        PyObject *tmp_assign_source_311;
        PyObject *tmp_called_name_70;
        PyObject *tmp_args_element_name_81;
        tmp_called_name_70 = LOOKUP_BUILTIN(mod_consts[379]);
        assert(tmp_called_name_70 != NULL);
        {
            PyObject *tmp_assign_source_312;
            PyObject *tmp_iter_arg_55;
            if (var_data == NULL) {

                FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[380]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2136;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_124;
            }

            tmp_iter_arg_55 = var_data;
            tmp_assign_source_312 = MAKE_ITERATOR(tmp_iter_arg_55);
            if (tmp_assign_source_312 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2136;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_124;
            }
            {
                PyObject *old = tmp_genexpr_1__$0;
                tmp_genexpr_1__$0 = tmp_assign_source_312;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            struct Nuitka_CellObject *tmp_closure_2[2];

            tmp_closure_2[0] = Nuitka_Cell_New0(tmp_genexpr_1__$0);
            tmp_closure_2[1] = var_i;
            Py_INCREF(tmp_closure_2[1]);

            tmp_args_element_name_81 = MAKE_GENERATOR_numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__1_genexpr(tmp_closure_2);

            goto try_return_handler_127;
        }
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_127:;
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;
        goto outline_result_23;
        // End of try:
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_23:;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2136;
        tmp_assign_source_311 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_70, tmp_args_element_name_81);
        Py_DECREF(tmp_args_element_name_81);
        if (tmp_assign_source_311 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2136;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_124;
        }
        {
            PyObject *old = var_n_chars;
            var_n_chars = tmp_assign_source_311;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_ass_subvalue_6;
        PyObject *tmp_tuple_element_11;
        PyObject *tmp_ass_subscribed_6;
        PyObject *tmp_ass_subscript_6;
        CHECK_OBJECT(var_col_type);
        tmp_tuple_element_11 = var_col_type;
        tmp_ass_subvalue_6 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_ass_subvalue_6, 0, tmp_tuple_element_11);
        CHECK_OBJECT(var_n_chars);
        tmp_tuple_element_11 = var_n_chars;
        PyTuple_SET_ITEM0(tmp_ass_subvalue_6, 1, tmp_tuple_element_11);
        if (var_sized_column_types == NULL) {
            Py_DECREF(tmp_ass_subvalue_6);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[381]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2137;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_124;
        }

        tmp_ass_subscribed_6 = var_sized_column_types;
        CHECK_OBJECT(Nuitka_Cell_GET(var_i));
        tmp_ass_subscript_6 = Nuitka_Cell_GET(var_i);
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_6, tmp_ass_subscript_6, tmp_ass_subvalue_6);
        Py_DECREF(tmp_ass_subvalue_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2137;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_124;
        }
    }
    branch_no_86:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2134;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_124;
    }
    goto loop_start_37;
    loop_end_37:;
    goto try_end_74;
    // Exception handler code:
    try_except_handler_124:;
    exception_keeper_type_125 = exception_type;
    exception_keeper_value_125 = exception_value;
    exception_keeper_tb_125 = exception_tb;
    exception_keeper_lineno_125 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_14__iter_value);
    tmp_for_loop_14__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_14__for_iterator);
    Py_DECREF(tmp_for_loop_14__for_iterator);
    tmp_for_loop_14__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_125;
    exception_value = exception_keeper_value_125;
    exception_tb = exception_keeper_tb_125;
    exception_lineno = exception_keeper_lineno_125;

    goto frame_exception_exit_1;
    // End of try:
    try_end_74:;
    Py_XDECREF(tmp_for_loop_14__iter_value);
    tmp_for_loop_14__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_14__for_iterator);
    Py_DECREF(tmp_for_loop_14__for_iterator);
    tmp_for_loop_14__for_iterator = NULL;
    {
        bool tmp_condition_result_87;
        PyObject *tmp_compexpr_left_57;
        PyObject *tmp_compexpr_right_57;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2139;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_57 = par_names;
        tmp_compexpr_right_57 = Py_None;
        tmp_condition_result_87 = (tmp_compexpr_left_57 == tmp_compexpr_right_57) ? true : false;
        if (tmp_condition_result_87 != false) {
            goto branch_yes_87;
        } else {
            goto branch_no_87;
        }
    }
    branch_yes_87:;
    {
        PyObject *tmp_assign_source_313;
        // Tried code:
        {
            PyObject *tmp_assign_source_314;
            PyObject *tmp_iter_arg_56;
            PyObject *tmp_called_name_71;
            PyObject *tmp_args_element_name_82;
            PyObject *tmp_args_element_name_83;
            tmp_called_name_71 = (PyObject *)&PyZip_Type;
            if (par_converters == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[191]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2143;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_128;
            }

            tmp_args_element_name_82 = par_converters;
            if (var_column_types == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[375]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2143;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_128;
            }

            tmp_args_element_name_83 = var_column_types;
            frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2143;
            {
                PyObject *call_args[] = {tmp_args_element_name_82, tmp_args_element_name_83};
                tmp_iter_arg_56 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_71, call_args);
            }

            if (tmp_iter_arg_56 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2143;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_128;
            }
            tmp_assign_source_314 = MAKE_ITERATOR(tmp_iter_arg_56);
            Py_DECREF(tmp_iter_arg_56);
            if (tmp_assign_source_314 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2141;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_128;
            }
            assert(tmp_setcontraction_1__$0 == NULL);
            tmp_setcontraction_1__$0 = tmp_assign_source_314;
        }
        {
            PyObject *tmp_assign_source_315;
            tmp_assign_source_315 = PySet_New(NULL);
            assert(tmp_setcontraction_1__contraction == NULL);
            tmp_setcontraction_1__contraction = tmp_assign_source_315;
        }
        if (isFrameUnusable(cache_frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24)) {
            Py_XDECREF(cache_frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24);

#if _DEBUG_REFCOUNTS
            if (cache_frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24 = MAKE_FUNCTION_FRAME(codeobj_ce14080c6ebfefbdf4eeca2f3c6a3703, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24->m_type_description == NULL);
        frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24 = cache_frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_38:;
        {
            PyObject *tmp_next_source_37;
            PyObject *tmp_assign_source_316;
            CHECK_OBJECT(tmp_setcontraction_1__$0);
            tmp_next_source_37 = tmp_setcontraction_1__$0;
            tmp_assign_source_316 = ITERATOR_NEXT(tmp_next_source_37);
            if (tmp_assign_source_316 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_38;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 2141;
                    goto try_except_handler_129;
                }
            }

            {
                PyObject *old = tmp_setcontraction_1__iter_value_0;
                tmp_setcontraction_1__iter_value_0 = tmp_assign_source_316;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_317;
            PyObject *tmp_iter_arg_57;
            CHECK_OBJECT(tmp_setcontraction_1__iter_value_0);
            tmp_iter_arg_57 = tmp_setcontraction_1__iter_value_0;
            tmp_assign_source_317 = MAKE_ITERATOR(tmp_iter_arg_57);
            if (tmp_assign_source_317 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2141;
                type_description_2 = "oo";
                goto try_except_handler_130;
            }
            {
                PyObject *old = tmp_setcontraction$tuple_unpack_1__source_iter;
                tmp_setcontraction$tuple_unpack_1__source_iter = tmp_assign_source_317;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_318;
            PyObject *tmp_unpack_36;
            CHECK_OBJECT(tmp_setcontraction$tuple_unpack_1__source_iter);
            tmp_unpack_36 = tmp_setcontraction$tuple_unpack_1__source_iter;
            tmp_assign_source_318 = UNPACK_NEXT(tmp_unpack_36, 0, 2);
            if (tmp_assign_source_318 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "oo";
                exception_lineno = 2141;
                goto try_except_handler_131;
            }
            {
                PyObject *old = tmp_setcontraction$tuple_unpack_1__element_1;
                tmp_setcontraction$tuple_unpack_1__element_1 = tmp_assign_source_318;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_319;
            PyObject *tmp_unpack_37;
            CHECK_OBJECT(tmp_setcontraction$tuple_unpack_1__source_iter);
            tmp_unpack_37 = tmp_setcontraction$tuple_unpack_1__source_iter;
            tmp_assign_source_319 = UNPACK_NEXT(tmp_unpack_37, 1, 2);
            if (tmp_assign_source_319 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "oo";
                exception_lineno = 2141;
                goto try_except_handler_131;
            }
            {
                PyObject *old = tmp_setcontraction$tuple_unpack_1__element_2;
                tmp_setcontraction$tuple_unpack_1__element_2 = tmp_assign_source_319;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_18;
            CHECK_OBJECT(tmp_setcontraction$tuple_unpack_1__source_iter);
            tmp_iterator_name_18 = tmp_setcontraction$tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_18); assert(HAS_ITERNEXT(tmp_iterator_name_18));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_18)->tp_iternext)(tmp_iterator_name_18);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "oo";
                        exception_lineno = 2141;
                        goto try_except_handler_131;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[94];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "oo";
                exception_lineno = 2141;
                goto try_except_handler_131;
            }
        }
        goto try_end_75;
        // Exception handler code:
        try_except_handler_131:;
        exception_keeper_type_126 = exception_type;
        exception_keeper_value_126 = exception_value;
        exception_keeper_tb_126 = exception_tb;
        exception_keeper_lineno_126 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_setcontraction$tuple_unpack_1__source_iter);
        Py_DECREF(tmp_setcontraction$tuple_unpack_1__source_iter);
        tmp_setcontraction$tuple_unpack_1__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_126;
        exception_value = exception_keeper_value_126;
        exception_tb = exception_keeper_tb_126;
        exception_lineno = exception_keeper_lineno_126;

        goto try_except_handler_130;
        // End of try:
        try_end_75:;
        goto try_end_76;
        // Exception handler code:
        try_except_handler_130:;
        exception_keeper_type_127 = exception_type;
        exception_keeper_value_127 = exception_value;
        exception_keeper_tb_127 = exception_tb;
        exception_keeper_lineno_127 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_setcontraction$tuple_unpack_1__element_1);
        tmp_setcontraction$tuple_unpack_1__element_1 = NULL;
        Py_XDECREF(tmp_setcontraction$tuple_unpack_1__element_2);
        tmp_setcontraction$tuple_unpack_1__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_127;
        exception_value = exception_keeper_value_127;
        exception_tb = exception_keeper_tb_127;
        exception_lineno = exception_keeper_lineno_127;

        goto try_except_handler_129;
        // End of try:
        try_end_76:;
        CHECK_OBJECT(tmp_setcontraction$tuple_unpack_1__source_iter);
        Py_DECREF(tmp_setcontraction$tuple_unpack_1__source_iter);
        tmp_setcontraction$tuple_unpack_1__source_iter = NULL;
        {
            PyObject *tmp_assign_source_320;
            CHECK_OBJECT(tmp_setcontraction$tuple_unpack_1__element_1);
            tmp_assign_source_320 = tmp_setcontraction$tuple_unpack_1__element_1;
            {
                PyObject *old = outline_22_var_c;
                outline_22_var_c = tmp_assign_source_320;
                Py_INCREF(outline_22_var_c);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_setcontraction$tuple_unpack_1__element_1);
        tmp_setcontraction$tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_321;
            CHECK_OBJECT(tmp_setcontraction$tuple_unpack_1__element_2);
            tmp_assign_source_321 = tmp_setcontraction$tuple_unpack_1__element_2;
            {
                PyObject *old = outline_22_var_c_type;
                outline_22_var_c_type = tmp_assign_source_321;
                Py_INCREF(outline_22_var_c_type);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_setcontraction$tuple_unpack_1__element_2);
        tmp_setcontraction$tuple_unpack_1__element_2 = NULL;

        {
            nuitka_bool tmp_condition_result_88;
            PyObject *tmp_expression_name_50;
            PyObject *tmp_attribute_value_1;
            int tmp_truth_name_29;
            CHECK_OBJECT(outline_22_var_c);
            tmp_expression_name_50 = outline_22_var_c;
            tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_50, mod_consts[382]);
            if (tmp_attribute_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2144;
                type_description_2 = "oo";
                goto try_except_handler_129;
            }
            tmp_truth_name_29 = CHECK_IF_TRUE(tmp_attribute_value_1);
            if (tmp_truth_name_29 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_attribute_value_1);

                exception_lineno = 2144;
                type_description_2 = "oo";
                goto try_except_handler_129;
            }
            tmp_condition_result_88 = tmp_truth_name_29 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            Py_DECREF(tmp_attribute_value_1);
            if (tmp_condition_result_88 == NUITKA_BOOL_TRUE) {
                goto branch_yes_88;
            } else {
                goto branch_no_88;
            }
        }
        branch_yes_88:;
        {
            PyObject *tmp_add_set_1;
            PyObject *tmp_add_value_1;
            CHECK_OBJECT(tmp_setcontraction_1__contraction);
            tmp_add_set_1 = tmp_setcontraction_1__contraction;
            CHECK_OBJECT(outline_22_var_c_type);
            tmp_add_value_1 = outline_22_var_c_type;
            assert(PySet_Check(tmp_add_set_1));
            tmp_res = PySet_Add(tmp_add_set_1, tmp_add_value_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2141;
                type_description_2 = "oo";
                goto try_except_handler_129;
            }
        }
        branch_no_88:;
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2141;
            type_description_2 = "oo";
            goto try_except_handler_129;
        }
        goto loop_start_38;
        loop_end_38:;
        CHECK_OBJECT(tmp_setcontraction_1__contraction);
        tmp_assign_source_313 = tmp_setcontraction_1__contraction;
        Py_INCREF(tmp_assign_source_313);
        goto try_return_handler_129;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_129:;
        CHECK_OBJECT(tmp_setcontraction_1__$0);
        Py_DECREF(tmp_setcontraction_1__$0);
        tmp_setcontraction_1__$0 = NULL;
        CHECK_OBJECT(tmp_setcontraction_1__contraction);
        Py_DECREF(tmp_setcontraction_1__contraction);
        tmp_setcontraction_1__contraction = NULL;
        Py_XDECREF(tmp_setcontraction_1__iter_value_0);
        tmp_setcontraction_1__iter_value_0 = NULL;
        goto frame_return_exit_24;
        // Exception handler code:
        try_except_handler_129:;
        exception_keeper_type_128 = exception_type;
        exception_keeper_value_128 = exception_value;
        exception_keeper_tb_128 = exception_tb;
        exception_keeper_lineno_128 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_setcontraction_1__$0);
        Py_DECREF(tmp_setcontraction_1__$0);
        tmp_setcontraction_1__$0 = NULL;
        CHECK_OBJECT(tmp_setcontraction_1__contraction);
        Py_DECREF(tmp_setcontraction_1__contraction);
        tmp_setcontraction_1__contraction = NULL;
        Py_XDECREF(tmp_setcontraction_1__iter_value_0);
        tmp_setcontraction_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_128;
        exception_value = exception_keeper_value_128;
        exception_tb = exception_keeper_tb_128;
        exception_lineno = exception_keeper_lineno_128;

        goto frame_exception_exit_24;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_23;

        frame_return_exit_24:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_128;

        frame_exception_exit_24:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24,
            type_description_2,
            outline_22_var_c,
            outline_22_var_c_type
        );


        // Release cached frame if used for exception.
        if (frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24 == cache_frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24);
            cache_frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24 = NULL;
        }

        assertFrameObject(frame_ce14080c6ebfefbdf4eeca2f3c6a3703_24);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_23;

        frame_no_exception_23:;
        goto skip_nested_handling_23;
        nested_frame_exit_23:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_128;
        skip_nested_handling_23:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_128:;
        Py_XDECREF(outline_22_var_c);
        outline_22_var_c = NULL;
        Py_XDECREF(outline_22_var_c_type);
        outline_22_var_c_type = NULL;
        goto outline_result_24;
        // Exception handler code:
        try_except_handler_128:;
        exception_keeper_type_129 = exception_type;
        exception_keeper_value_129 = exception_value;
        exception_keeper_tb_129 = exception_tb;
        exception_keeper_lineno_129 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_22_var_c);
        outline_22_var_c = NULL;
        Py_XDECREF(outline_22_var_c_type);
        outline_22_var_c_type = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_129;
        exception_value = exception_keeper_value_129;
        exception_tb = exception_keeper_tb_129;
        exception_lineno = exception_keeper_lineno_129;

        goto outline_exception_23;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_23:;
        exception_lineno = 2141;
        goto frame_exception_exit_1;
        outline_result_24:;
        assert(var_base == NULL);
        var_base = tmp_assign_source_313;
    }
    {
        bool tmp_condition_result_89;
        PyObject *tmp_compexpr_left_58;
        PyObject *tmp_compexpr_right_58;
        PyObject *tmp_len_arg_14;
        PyObject *tmp_tmp_condition_result_89_object_1;
        CHECK_OBJECT(var_base);
        tmp_len_arg_14 = var_base;
        tmp_compexpr_left_58 = BUILTIN_LEN(tmp_len_arg_14);
        if (tmp_compexpr_left_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2145;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_58 = mod_consts[63];
        tmp_tmp_condition_result_89_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_58, tmp_compexpr_right_58);
        Py_DECREF(tmp_compexpr_left_58);
        assert(!(tmp_tmp_condition_result_89_object_1 == NULL));
        tmp_condition_result_89 = CHECK_IF_TRUE(tmp_tmp_condition_result_89_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_89_object_1);
        if (tmp_condition_result_89 != false) {
            goto branch_yes_89;
        } else {
            goto branch_no_89;
        }
    }
    branch_yes_89:;
    // Tried code:
    {
        PyObject *tmp_assign_source_322;
        PyObject *tmp_iter_arg_58;
        CHECK_OBJECT(var_base);
        tmp_iter_arg_58 = var_base;
        tmp_assign_source_322 = MAKE_ITERATOR(tmp_iter_arg_58);
        if (tmp_assign_source_322 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2146;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_132;
        }
        assert(tmp_tuple_unpack_10__source_iter == NULL);
        tmp_tuple_unpack_10__source_iter = tmp_assign_source_322;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_323;
        PyObject *tmp_unpack_38;
        CHECK_OBJECT(tmp_tuple_unpack_10__source_iter);
        tmp_unpack_38 = tmp_tuple_unpack_10__source_iter;
        tmp_assign_source_323 = UNPACK_NEXT(tmp_unpack_38, 0, 1);
        if (tmp_assign_source_323 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2146;
            goto try_except_handler_133;
        }
        assert(tmp_tuple_unpack_10__element_1 == NULL);
        tmp_tuple_unpack_10__element_1 = tmp_assign_source_323;
    }
    {
        PyObject *tmp_iterator_name_19;
        CHECK_OBJECT(tmp_tuple_unpack_10__source_iter);
        tmp_iterator_name_19 = tmp_tuple_unpack_10__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_19); assert(HAS_ITERNEXT(tmp_iterator_name_19));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_19)->tp_iternext)(tmp_iterator_name_19);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 2146;
                    goto try_except_handler_133;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[383];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2146;
            goto try_except_handler_133;
        }
    }
    goto try_end_77;
    // Exception handler code:
    try_except_handler_133:;
    exception_keeper_type_130 = exception_type;
    exception_keeper_value_130 = exception_value;
    exception_keeper_tb_130 = exception_tb;
    exception_keeper_lineno_130 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_10__source_iter);
    Py_DECREF(tmp_tuple_unpack_10__source_iter);
    tmp_tuple_unpack_10__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_130;
    exception_value = exception_keeper_value_130;
    exception_tb = exception_keeper_tb_130;
    exception_lineno = exception_keeper_lineno_130;

    goto try_except_handler_132;
    // End of try:
    try_end_77:;
    goto try_end_78;
    // Exception handler code:
    try_except_handler_132:;
    exception_keeper_type_131 = exception_type;
    exception_keeper_value_131 = exception_value;
    exception_keeper_tb_131 = exception_tb;
    exception_keeper_lineno_131 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_10__element_1);
    tmp_tuple_unpack_10__element_1 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_131;
    exception_value = exception_keeper_value_131;
    exception_tb = exception_keeper_tb_131;
    exception_lineno = exception_keeper_lineno_131;

    goto frame_exception_exit_1;
    // End of try:
    try_end_78:;
    CHECK_OBJECT(tmp_tuple_unpack_10__source_iter);
    Py_DECREF(tmp_tuple_unpack_10__source_iter);
    tmp_tuple_unpack_10__source_iter = NULL;
    {
        PyObject *tmp_assign_source_324;
        CHECK_OBJECT(tmp_tuple_unpack_10__element_1);
        tmp_assign_source_324 = tmp_tuple_unpack_10__element_1;
        assert(var_uniform_type == NULL);
        Py_INCREF(tmp_assign_source_324);
        var_uniform_type = tmp_assign_source_324;
    }
    Py_XDECREF(tmp_tuple_unpack_10__element_1);
    tmp_tuple_unpack_10__element_1 = NULL;

    {
        PyObject *tmp_assign_source_325;
        PyObject *tmp_iter_arg_59;
        PyObject *tmp_tuple_element_12;
        CHECK_OBJECT(var_uniform_type);
        tmp_tuple_element_12 = var_uniform_type;
        tmp_iter_arg_59 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_iter_arg_59, 0, tmp_tuple_element_12);
        tmp_tuple_element_12 = (PyObject *)&PyBool_Type;
        PyTuple_SET_ITEM0(tmp_iter_arg_59, 1, tmp_tuple_element_12);
        tmp_assign_source_325 = MAKE_ITERATOR_INFALLIBLE(tmp_iter_arg_59);
        Py_DECREF(tmp_iter_arg_59);
        assert(!(tmp_assign_source_325 == NULL));
        assert(tmp_tuple_unpack_11__source_iter == NULL);
        tmp_tuple_unpack_11__source_iter = tmp_assign_source_325;
    }
    {
        PyObject *tmp_assign_source_326;
        PyObject *tmp_unpack_39;
        CHECK_OBJECT(tmp_tuple_unpack_11__source_iter);
        tmp_unpack_39 = tmp_tuple_unpack_11__source_iter;
        tmp_assign_source_326 = UNPACK_NEXT_INFALLIBLE(tmp_unpack_39);
        assert(!(tmp_assign_source_326 == NULL));
        assert(tmp_tuple_unpack_11__element_1 == NULL);
        tmp_tuple_unpack_11__element_1 = tmp_assign_source_326;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_327;
        PyObject *tmp_unpack_40;
        CHECK_OBJECT(tmp_tuple_unpack_11__source_iter);
        tmp_unpack_40 = tmp_tuple_unpack_11__source_iter;
        tmp_assign_source_327 = UNPACK_NEXT(tmp_unpack_40, 1, 2);
        if (tmp_assign_source_327 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2147;
            goto try_except_handler_135;
        }
        assert(tmp_tuple_unpack_11__element_2 == NULL);
        tmp_tuple_unpack_11__element_2 = tmp_assign_source_327;
    }
    {
        PyObject *tmp_iterator_name_20;
        CHECK_OBJECT(tmp_tuple_unpack_11__source_iter);
        tmp_iterator_name_20 = tmp_tuple_unpack_11__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_20); assert(HAS_ITERNEXT(tmp_iterator_name_20));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_20)->tp_iternext)(tmp_iterator_name_20);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 2147;
                    goto try_except_handler_135;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2147;
            goto try_except_handler_135;
        }
    }
    goto try_end_79;
    // Exception handler code:
    try_except_handler_135:;
    exception_keeper_type_132 = exception_type;
    exception_keeper_value_132 = exception_value;
    exception_keeper_tb_132 = exception_tb;
    exception_keeper_lineno_132 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_11__source_iter);
    Py_DECREF(tmp_tuple_unpack_11__source_iter);
    tmp_tuple_unpack_11__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_132;
    exception_value = exception_keeper_value_132;
    exception_tb = exception_keeper_tb_132;
    exception_lineno = exception_keeper_lineno_132;

    goto try_except_handler_134;
    // End of try:
    try_end_79:;
    goto try_end_80;
    // Exception handler code:
    try_except_handler_134:;
    exception_keeper_type_133 = exception_type;
    exception_keeper_value_133 = exception_value;
    exception_keeper_tb_133 = exception_tb;
    exception_keeper_lineno_133 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_11__element_1);
    Py_DECREF(tmp_tuple_unpack_11__element_1);
    tmp_tuple_unpack_11__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_11__element_2);
    tmp_tuple_unpack_11__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_133;
    exception_value = exception_keeper_value_133;
    exception_tb = exception_keeper_tb_133;
    exception_lineno = exception_keeper_lineno_133;

    goto frame_exception_exit_1;
    // End of try:
    try_end_80:;
    CHECK_OBJECT(tmp_tuple_unpack_11__source_iter);
    Py_DECREF(tmp_tuple_unpack_11__source_iter);
    tmp_tuple_unpack_11__source_iter = NULL;
    {
        PyObject *tmp_assign_source_328;
        CHECK_OBJECT(tmp_tuple_unpack_11__element_1);
        tmp_assign_source_328 = tmp_tuple_unpack_11__element_1;
        assert(var_ddtype == NULL);
        Py_INCREF(tmp_assign_source_328);
        var_ddtype = tmp_assign_source_328;
    }
    Py_XDECREF(tmp_tuple_unpack_11__element_1);
    tmp_tuple_unpack_11__element_1 = NULL;

    {
        PyObject *tmp_assign_source_329;
        CHECK_OBJECT(tmp_tuple_unpack_11__element_2);
        tmp_assign_source_329 = tmp_tuple_unpack_11__element_2;
        assert(var_mdtype == NULL);
        Py_INCREF(tmp_assign_source_329);
        var_mdtype = tmp_assign_source_329;
    }
    Py_XDECREF(tmp_tuple_unpack_11__element_2);
    tmp_tuple_unpack_11__element_2 = NULL;

    goto branch_end_89;
    branch_no_89:;
    {
        PyObject *tmp_assign_source_330;
        // Tried code:
        {
            PyObject *tmp_assign_source_331;
            PyObject *tmp_iter_arg_60;
            PyObject *tmp_called_name_72;
            PyObject *tmp_args_element_name_84;
            tmp_called_name_72 = (PyObject *)&PyEnum_Type;
            if (var_sized_column_types == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[381]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2150;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_136;
            }

            tmp_args_element_name_84 = var_sized_column_types;
            frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2150;
            tmp_iter_arg_60 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_72, tmp_args_element_name_84);
            if (tmp_iter_arg_60 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2150;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_136;
            }
            tmp_assign_source_331 = MAKE_ITERATOR(tmp_iter_arg_60);
            Py_DECREF(tmp_iter_arg_60);
            if (tmp_assign_source_331 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2149;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_136;
            }
            assert(tmp_listcomp_21__$0 == NULL);
            tmp_listcomp_21__$0 = tmp_assign_source_331;
        }
        {
            PyObject *tmp_assign_source_332;
            tmp_assign_source_332 = PyList_New(0);
            assert(tmp_listcomp_21__contraction == NULL);
            tmp_listcomp_21__contraction = tmp_assign_source_332;
        }
        if (isFrameUnusable(cache_frame_bd4bdd0b6623041f56eabe0ce043b654_25)) {
            Py_XDECREF(cache_frame_bd4bdd0b6623041f56eabe0ce043b654_25);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bd4bdd0b6623041f56eabe0ce043b654_25 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bd4bdd0b6623041f56eabe0ce043b654_25 = MAKE_FUNCTION_FRAME(codeobj_bd4bdd0b6623041f56eabe0ce043b654, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bd4bdd0b6623041f56eabe0ce043b654_25->m_type_description == NULL);
        frame_bd4bdd0b6623041f56eabe0ce043b654_25 = cache_frame_bd4bdd0b6623041f56eabe0ce043b654_25;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bd4bdd0b6623041f56eabe0ce043b654_25);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bd4bdd0b6623041f56eabe0ce043b654_25) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_39:;
        {
            PyObject *tmp_next_source_38;
            PyObject *tmp_assign_source_333;
            CHECK_OBJECT(tmp_listcomp_21__$0);
            tmp_next_source_38 = tmp_listcomp_21__$0;
            tmp_assign_source_333 = ITERATOR_NEXT(tmp_next_source_38);
            if (tmp_assign_source_333 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_39;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "ooo";
                    exception_lineno = 2149;
                    goto try_except_handler_137;
                }
            }

            {
                PyObject *old = tmp_listcomp_21__iter_value_0;
                tmp_listcomp_21__iter_value_0 = tmp_assign_source_333;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_334;
            PyObject *tmp_iter_arg_61;
            CHECK_OBJECT(tmp_listcomp_21__iter_value_0);
            tmp_iter_arg_61 = tmp_listcomp_21__iter_value_0;
            tmp_assign_source_334 = MAKE_ITERATOR(tmp_iter_arg_61);
            if (tmp_assign_source_334 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2149;
                type_description_2 = "ooo";
                goto try_except_handler_138;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_9__source_iter;
                tmp_listcomp$tuple_unpack_9__source_iter = tmp_assign_source_334;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_335;
            PyObject *tmp_unpack_41;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_9__source_iter);
            tmp_unpack_41 = tmp_listcomp$tuple_unpack_9__source_iter;
            tmp_assign_source_335 = UNPACK_NEXT(tmp_unpack_41, 0, 2);
            if (tmp_assign_source_335 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 2149;
                goto try_except_handler_139;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_9__element_1;
                tmp_listcomp$tuple_unpack_9__element_1 = tmp_assign_source_335;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_336;
            PyObject *tmp_unpack_42;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_9__source_iter);
            tmp_unpack_42 = tmp_listcomp$tuple_unpack_9__source_iter;
            tmp_assign_source_336 = UNPACK_NEXT(tmp_unpack_42, 1, 2);
            if (tmp_assign_source_336 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 2149;
                goto try_except_handler_139;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_9__element_2;
                tmp_listcomp$tuple_unpack_9__element_2 = tmp_assign_source_336;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_21;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_9__source_iter);
            tmp_iterator_name_21 = tmp_listcomp$tuple_unpack_9__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_21); assert(HAS_ITERNEXT(tmp_iterator_name_21));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_21)->tp_iternext)(tmp_iterator_name_21);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "ooo";
                        exception_lineno = 2149;
                        goto try_except_handler_139;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[94];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "ooo";
                exception_lineno = 2149;
                goto try_except_handler_139;
            }
        }
        goto try_end_81;
        // Exception handler code:
        try_except_handler_139:;
        exception_keeper_type_134 = exception_type;
        exception_keeper_value_134 = exception_value;
        exception_keeper_tb_134 = exception_tb;
        exception_keeper_lineno_134 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_9__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_9__source_iter);
        tmp_listcomp$tuple_unpack_9__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_134;
        exception_value = exception_keeper_value_134;
        exception_tb = exception_keeper_tb_134;
        exception_lineno = exception_keeper_lineno_134;

        goto try_except_handler_138;
        // End of try:
        try_end_81:;
        goto try_end_82;
        // Exception handler code:
        try_except_handler_138:;
        exception_keeper_type_135 = exception_type;
        exception_keeper_value_135 = exception_value;
        exception_keeper_tb_135 = exception_tb;
        exception_keeper_lineno_135 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_9__element_1);
        tmp_listcomp$tuple_unpack_9__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_9__element_2);
        tmp_listcomp$tuple_unpack_9__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_135;
        exception_value = exception_keeper_value_135;
        exception_tb = exception_keeper_tb_135;
        exception_lineno = exception_keeper_lineno_135;

        goto try_except_handler_137;
        // End of try:
        try_end_82:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_9__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_9__source_iter);
        tmp_listcomp$tuple_unpack_9__source_iter = NULL;
        {
            PyObject *tmp_assign_source_337;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_9__element_1);
            tmp_assign_source_337 = tmp_listcomp$tuple_unpack_9__element_1;
            {
                PyObject *old = outline_23_var_i;
                outline_23_var_i = tmp_assign_source_337;
                Py_INCREF(outline_23_var_i);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_9__element_1);
        tmp_listcomp$tuple_unpack_9__element_1 = NULL;

        {
            PyObject *tmp_assign_source_338;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_9__element_2);
            tmp_assign_source_338 = tmp_listcomp$tuple_unpack_9__element_2;
            {
                PyObject *old = outline_23_var_dt;
                outline_23_var_dt = tmp_assign_source_338;
                Py_INCREF(outline_23_var_dt);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_9__element_2);
        tmp_listcomp$tuple_unpack_9__element_2 = NULL;

        {
            PyObject *tmp_append_list_23;
            PyObject *tmp_append_value_23;
            PyObject *tmp_tuple_element_13;
            PyObject *tmp_left_name_23;
            PyObject *tmp_right_name_23;
            CHECK_OBJECT(tmp_listcomp_21__contraction);
            tmp_append_list_23 = tmp_listcomp_21__contraction;
            if (par_defaultfmt == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[384]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2149;
                type_description_2 = "ooo";
                goto try_except_handler_137;
            }

            tmp_left_name_23 = par_defaultfmt;
            CHECK_OBJECT(outline_23_var_i);
            tmp_right_name_23 = outline_23_var_i;
            tmp_tuple_element_13 = BINARY_OPERATION_MOD_OBJECT_OBJECT_OBJECT(tmp_left_name_23, tmp_right_name_23);
            if (tmp_tuple_element_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2149;
                type_description_2 = "ooo";
                goto try_except_handler_137;
            }
            tmp_append_value_23 = PyTuple_New(2);
            PyTuple_SET_ITEM(tmp_append_value_23, 0, tmp_tuple_element_13);
            CHECK_OBJECT(outline_23_var_dt);
            tmp_tuple_element_13 = outline_23_var_dt;
            PyTuple_SET_ITEM0(tmp_append_value_23, 1, tmp_tuple_element_13);
            assert(PyList_Check(tmp_append_list_23));
            tmp_result = LIST_APPEND1(tmp_append_list_23, tmp_append_value_23);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2149;
                type_description_2 = "ooo";
                goto try_except_handler_137;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2149;
            type_description_2 = "ooo";
            goto try_except_handler_137;
        }
        goto loop_start_39;
        loop_end_39:;
        CHECK_OBJECT(tmp_listcomp_21__contraction);
        tmp_assign_source_330 = tmp_listcomp_21__contraction;
        Py_INCREF(tmp_assign_source_330);
        goto try_return_handler_137;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_137:;
        CHECK_OBJECT(tmp_listcomp_21__$0);
        Py_DECREF(tmp_listcomp_21__$0);
        tmp_listcomp_21__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_21__contraction);
        Py_DECREF(tmp_listcomp_21__contraction);
        tmp_listcomp_21__contraction = NULL;
        Py_XDECREF(tmp_listcomp_21__iter_value_0);
        tmp_listcomp_21__iter_value_0 = NULL;
        goto frame_return_exit_25;
        // Exception handler code:
        try_except_handler_137:;
        exception_keeper_type_136 = exception_type;
        exception_keeper_value_136 = exception_value;
        exception_keeper_tb_136 = exception_tb;
        exception_keeper_lineno_136 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_21__$0);
        Py_DECREF(tmp_listcomp_21__$0);
        tmp_listcomp_21__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_21__contraction);
        Py_DECREF(tmp_listcomp_21__contraction);
        tmp_listcomp_21__contraction = NULL;
        Py_XDECREF(tmp_listcomp_21__iter_value_0);
        tmp_listcomp_21__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_136;
        exception_value = exception_keeper_value_136;
        exception_tb = exception_keeper_tb_136;
        exception_lineno = exception_keeper_lineno_136;

        goto frame_exception_exit_25;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bd4bdd0b6623041f56eabe0ce043b654_25);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_24;

        frame_return_exit_25:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_bd4bdd0b6623041f56eabe0ce043b654_25);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_136;

        frame_exception_exit_25:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bd4bdd0b6623041f56eabe0ce043b654_25);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bd4bdd0b6623041f56eabe0ce043b654_25, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bd4bdd0b6623041f56eabe0ce043b654_25->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bd4bdd0b6623041f56eabe0ce043b654_25, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bd4bdd0b6623041f56eabe0ce043b654_25,
            type_description_2,
            outline_23_var_i,
            outline_23_var_dt,
            par_defaultfmt
        );


        // Release cached frame if used for exception.
        if (frame_bd4bdd0b6623041f56eabe0ce043b654_25 == cache_frame_bd4bdd0b6623041f56eabe0ce043b654_25) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bd4bdd0b6623041f56eabe0ce043b654_25);
            cache_frame_bd4bdd0b6623041f56eabe0ce043b654_25 = NULL;
        }

        assertFrameObject(frame_bd4bdd0b6623041f56eabe0ce043b654_25);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_24;

        frame_no_exception_24:;
        goto skip_nested_handling_24;
        nested_frame_exit_24:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_136;
        skip_nested_handling_24:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_136:;
        Py_XDECREF(outline_23_var_i);
        outline_23_var_i = NULL;
        Py_XDECREF(outline_23_var_dt);
        outline_23_var_dt = NULL;
        goto outline_result_25;
        // Exception handler code:
        try_except_handler_136:;
        exception_keeper_type_137 = exception_type;
        exception_keeper_value_137 = exception_value;
        exception_keeper_tb_137 = exception_tb;
        exception_keeper_lineno_137 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_23_var_i);
        outline_23_var_i = NULL;
        Py_XDECREF(outline_23_var_dt);
        outline_23_var_dt = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_137;
        exception_value = exception_keeper_value_137;
        exception_tb = exception_keeper_tb_137;
        exception_lineno = exception_keeper_lineno_137;

        goto outline_exception_24;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_24:;
        exception_lineno = 2149;
        goto frame_exception_exit_1;
        outline_result_25:;
        assert(var_ddtype == NULL);
        var_ddtype = tmp_assign_source_330;
    }
    {
        nuitka_bool tmp_condition_result_90;
        int tmp_truth_name_30;
        if (par_usemask == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[346]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2151;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_30 = CHECK_IF_TRUE(par_usemask);
        if (tmp_truth_name_30 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2151;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_90 = tmp_truth_name_30 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_90 == NUITKA_BOOL_TRUE) {
            goto branch_yes_90;
        } else {
            goto branch_no_90;
        }
    }
    branch_yes_90:;
    {
        PyObject *tmp_assign_source_339;
        // Tried code:
        {
            PyObject *tmp_assign_source_340;
            PyObject *tmp_iter_arg_62;
            PyObject *tmp_called_name_73;
            PyObject *tmp_args_element_name_85;
            tmp_called_name_73 = (PyObject *)&PyEnum_Type;
            if (var_sized_column_types == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[381]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2153;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_140;
            }

            tmp_args_element_name_85 = var_sized_column_types;
            frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2153;
            tmp_iter_arg_62 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_73, tmp_args_element_name_85);
            if (tmp_iter_arg_62 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2153;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_140;
            }
            tmp_assign_source_340 = MAKE_ITERATOR(tmp_iter_arg_62);
            Py_DECREF(tmp_iter_arg_62);
            if (tmp_assign_source_340 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2152;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_140;
            }
            assert(tmp_listcomp_22__$0 == NULL);
            tmp_listcomp_22__$0 = tmp_assign_source_340;
        }
        {
            PyObject *tmp_assign_source_341;
            tmp_assign_source_341 = PyList_New(0);
            assert(tmp_listcomp_22__contraction == NULL);
            tmp_listcomp_22__contraction = tmp_assign_source_341;
        }
        if (isFrameUnusable(cache_frame_933082d1fc1b1ce8a8130425a055db0d_26)) {
            Py_XDECREF(cache_frame_933082d1fc1b1ce8a8130425a055db0d_26);

#if _DEBUG_REFCOUNTS
            if (cache_frame_933082d1fc1b1ce8a8130425a055db0d_26 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_933082d1fc1b1ce8a8130425a055db0d_26 = MAKE_FUNCTION_FRAME(codeobj_933082d1fc1b1ce8a8130425a055db0d, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_933082d1fc1b1ce8a8130425a055db0d_26->m_type_description == NULL);
        frame_933082d1fc1b1ce8a8130425a055db0d_26 = cache_frame_933082d1fc1b1ce8a8130425a055db0d_26;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_933082d1fc1b1ce8a8130425a055db0d_26);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_933082d1fc1b1ce8a8130425a055db0d_26) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_40:;
        {
            PyObject *tmp_next_source_39;
            PyObject *tmp_assign_source_342;
            CHECK_OBJECT(tmp_listcomp_22__$0);
            tmp_next_source_39 = tmp_listcomp_22__$0;
            tmp_assign_source_342 = ITERATOR_NEXT(tmp_next_source_39);
            if (tmp_assign_source_342 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_40;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "ooo";
                    exception_lineno = 2152;
                    goto try_except_handler_141;
                }
            }

            {
                PyObject *old = tmp_listcomp_22__iter_value_0;
                tmp_listcomp_22__iter_value_0 = tmp_assign_source_342;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_343;
            PyObject *tmp_iter_arg_63;
            CHECK_OBJECT(tmp_listcomp_22__iter_value_0);
            tmp_iter_arg_63 = tmp_listcomp_22__iter_value_0;
            tmp_assign_source_343 = MAKE_ITERATOR(tmp_iter_arg_63);
            if (tmp_assign_source_343 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2152;
                type_description_2 = "ooo";
                goto try_except_handler_142;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_10__source_iter;
                tmp_listcomp$tuple_unpack_10__source_iter = tmp_assign_source_343;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_344;
            PyObject *tmp_unpack_43;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_10__source_iter);
            tmp_unpack_43 = tmp_listcomp$tuple_unpack_10__source_iter;
            tmp_assign_source_344 = UNPACK_NEXT(tmp_unpack_43, 0, 2);
            if (tmp_assign_source_344 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 2152;
                goto try_except_handler_143;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_10__element_1;
                tmp_listcomp$tuple_unpack_10__element_1 = tmp_assign_source_344;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_345;
            PyObject *tmp_unpack_44;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_10__source_iter);
            tmp_unpack_44 = tmp_listcomp$tuple_unpack_10__source_iter;
            tmp_assign_source_345 = UNPACK_NEXT(tmp_unpack_44, 1, 2);
            if (tmp_assign_source_345 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "ooo";
                exception_lineno = 2152;
                goto try_except_handler_143;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_10__element_2;
                tmp_listcomp$tuple_unpack_10__element_2 = tmp_assign_source_345;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_22;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_10__source_iter);
            tmp_iterator_name_22 = tmp_listcomp$tuple_unpack_10__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_22); assert(HAS_ITERNEXT(tmp_iterator_name_22));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_22)->tp_iternext)(tmp_iterator_name_22);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "ooo";
                        exception_lineno = 2152;
                        goto try_except_handler_143;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[94];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "ooo";
                exception_lineno = 2152;
                goto try_except_handler_143;
            }
        }
        goto try_end_83;
        // Exception handler code:
        try_except_handler_143:;
        exception_keeper_type_138 = exception_type;
        exception_keeper_value_138 = exception_value;
        exception_keeper_tb_138 = exception_tb;
        exception_keeper_lineno_138 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_10__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_10__source_iter);
        tmp_listcomp$tuple_unpack_10__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_138;
        exception_value = exception_keeper_value_138;
        exception_tb = exception_keeper_tb_138;
        exception_lineno = exception_keeper_lineno_138;

        goto try_except_handler_142;
        // End of try:
        try_end_83:;
        goto try_end_84;
        // Exception handler code:
        try_except_handler_142:;
        exception_keeper_type_139 = exception_type;
        exception_keeper_value_139 = exception_value;
        exception_keeper_tb_139 = exception_tb;
        exception_keeper_lineno_139 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_10__element_1);
        tmp_listcomp$tuple_unpack_10__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_10__element_2);
        tmp_listcomp$tuple_unpack_10__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_139;
        exception_value = exception_keeper_value_139;
        exception_tb = exception_keeper_tb_139;
        exception_lineno = exception_keeper_lineno_139;

        goto try_except_handler_141;
        // End of try:
        try_end_84:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_10__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_10__source_iter);
        tmp_listcomp$tuple_unpack_10__source_iter = NULL;
        {
            PyObject *tmp_assign_source_346;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_10__element_1);
            tmp_assign_source_346 = tmp_listcomp$tuple_unpack_10__element_1;
            {
                PyObject *old = outline_24_var_i;
                outline_24_var_i = tmp_assign_source_346;
                Py_INCREF(outline_24_var_i);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_10__element_1);
        tmp_listcomp$tuple_unpack_10__element_1 = NULL;

        {
            PyObject *tmp_assign_source_347;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_10__element_2);
            tmp_assign_source_347 = tmp_listcomp$tuple_unpack_10__element_2;
            {
                PyObject *old = outline_24_var_dt;
                outline_24_var_dt = tmp_assign_source_347;
                Py_INCREF(outline_24_var_dt);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_10__element_2);
        tmp_listcomp$tuple_unpack_10__element_2 = NULL;

        {
            PyObject *tmp_append_list_24;
            PyObject *tmp_append_value_24;
            PyObject *tmp_tuple_element_14;
            PyObject *tmp_left_name_24;
            PyObject *tmp_right_name_24;
            CHECK_OBJECT(tmp_listcomp_22__contraction);
            tmp_append_list_24 = tmp_listcomp_22__contraction;
            if (par_defaultfmt == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[384]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2152;
                type_description_2 = "ooo";
                goto try_except_handler_141;
            }

            tmp_left_name_24 = par_defaultfmt;
            CHECK_OBJECT(outline_24_var_i);
            tmp_right_name_24 = outline_24_var_i;
            tmp_tuple_element_14 = BINARY_OPERATION_MOD_OBJECT_OBJECT_OBJECT(tmp_left_name_24, tmp_right_name_24);
            if (tmp_tuple_element_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2152;
                type_description_2 = "ooo";
                goto try_except_handler_141;
            }
            tmp_append_value_24 = PyTuple_New(2);
            PyTuple_SET_ITEM(tmp_append_value_24, 0, tmp_tuple_element_14);
            tmp_tuple_element_14 = (PyObject *)&PyBool_Type;
            PyTuple_SET_ITEM0(tmp_append_value_24, 1, tmp_tuple_element_14);
            assert(PyList_Check(tmp_append_list_24));
            tmp_result = LIST_APPEND1(tmp_append_list_24, tmp_append_value_24);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2152;
                type_description_2 = "ooo";
                goto try_except_handler_141;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2152;
            type_description_2 = "ooo";
            goto try_except_handler_141;
        }
        goto loop_start_40;
        loop_end_40:;
        CHECK_OBJECT(tmp_listcomp_22__contraction);
        tmp_assign_source_339 = tmp_listcomp_22__contraction;
        Py_INCREF(tmp_assign_source_339);
        goto try_return_handler_141;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_141:;
        CHECK_OBJECT(tmp_listcomp_22__$0);
        Py_DECREF(tmp_listcomp_22__$0);
        tmp_listcomp_22__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_22__contraction);
        Py_DECREF(tmp_listcomp_22__contraction);
        tmp_listcomp_22__contraction = NULL;
        Py_XDECREF(tmp_listcomp_22__iter_value_0);
        tmp_listcomp_22__iter_value_0 = NULL;
        goto frame_return_exit_26;
        // Exception handler code:
        try_except_handler_141:;
        exception_keeper_type_140 = exception_type;
        exception_keeper_value_140 = exception_value;
        exception_keeper_tb_140 = exception_tb;
        exception_keeper_lineno_140 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_22__$0);
        Py_DECREF(tmp_listcomp_22__$0);
        tmp_listcomp_22__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_22__contraction);
        Py_DECREF(tmp_listcomp_22__contraction);
        tmp_listcomp_22__contraction = NULL;
        Py_XDECREF(tmp_listcomp_22__iter_value_0);
        tmp_listcomp_22__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_140;
        exception_value = exception_keeper_value_140;
        exception_tb = exception_keeper_tb_140;
        exception_lineno = exception_keeper_lineno_140;

        goto frame_exception_exit_26;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_933082d1fc1b1ce8a8130425a055db0d_26);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_25;

        frame_return_exit_26:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_933082d1fc1b1ce8a8130425a055db0d_26);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_140;

        frame_exception_exit_26:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_933082d1fc1b1ce8a8130425a055db0d_26);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_933082d1fc1b1ce8a8130425a055db0d_26, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_933082d1fc1b1ce8a8130425a055db0d_26->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_933082d1fc1b1ce8a8130425a055db0d_26, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_933082d1fc1b1ce8a8130425a055db0d_26,
            type_description_2,
            outline_24_var_i,
            outline_24_var_dt,
            par_defaultfmt
        );


        // Release cached frame if used for exception.
        if (frame_933082d1fc1b1ce8a8130425a055db0d_26 == cache_frame_933082d1fc1b1ce8a8130425a055db0d_26) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_933082d1fc1b1ce8a8130425a055db0d_26);
            cache_frame_933082d1fc1b1ce8a8130425a055db0d_26 = NULL;
        }

        assertFrameObject(frame_933082d1fc1b1ce8a8130425a055db0d_26);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_25;

        frame_no_exception_25:;
        goto skip_nested_handling_25;
        nested_frame_exit_25:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_140;
        skip_nested_handling_25:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_140:;
        Py_XDECREF(outline_24_var_i);
        outline_24_var_i = NULL;
        Py_XDECREF(outline_24_var_dt);
        outline_24_var_dt = NULL;
        goto outline_result_26;
        // Exception handler code:
        try_except_handler_140:;
        exception_keeper_type_141 = exception_type;
        exception_keeper_value_141 = exception_value;
        exception_keeper_tb_141 = exception_tb;
        exception_keeper_lineno_141 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_24_var_i);
        outline_24_var_i = NULL;
        Py_XDECREF(outline_24_var_dt);
        outline_24_var_dt = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_141;
        exception_value = exception_keeper_value_141;
        exception_tb = exception_keeper_tb_141;
        exception_lineno = exception_keeper_lineno_141;

        goto outline_exception_25;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_25:;
        exception_lineno = 2152;
        goto frame_exception_exit_1;
        outline_result_26:;
        assert(var_mdtype == NULL);
        var_mdtype = tmp_assign_source_339;
    }
    branch_no_90:;
    branch_end_89:;
    goto branch_end_87;
    branch_no_87:;
    {
        PyObject *tmp_assign_source_348;
        PyObject *tmp_list_arg_7;
        PyObject *tmp_called_name_74;
        PyObject *tmp_args_element_name_86;
        PyObject *tmp_args_element_name_87;
        tmp_called_name_74 = (PyObject *)&PyZip_Type;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2155;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_86 = par_names;
        if (var_sized_column_types == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[381]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2155;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_87 = var_sized_column_types;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2155;
        {
            PyObject *call_args[] = {tmp_args_element_name_86, tmp_args_element_name_87};
            tmp_list_arg_7 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_74, call_args);
        }

        if (tmp_list_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2155;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_348 = MAKE_LIST(tmp_list_arg_7);
        Py_DECREF(tmp_list_arg_7);
        if (tmp_assign_source_348 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2155;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_ddtype == NULL);
        var_ddtype = tmp_assign_source_348;
    }
    {
        PyObject *tmp_assign_source_349;
        PyObject *tmp_list_arg_8;
        PyObject *tmp_called_name_75;
        PyObject *tmp_args_element_name_88;
        PyObject *tmp_args_element_name_89;
        PyObject *tmp_left_name_25;
        PyObject *tmp_right_name_25;
        PyObject *tmp_len_arg_15;
        tmp_called_name_75 = (PyObject *)&PyZip_Type;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2156;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_88 = par_names;
        tmp_left_name_25 = LIST_COPY(mod_consts[385]);
        if (var_sized_column_types == NULL) {
            Py_DECREF(tmp_left_name_25);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[381]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2156;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_len_arg_15 = var_sized_column_types;
        tmp_right_name_25 = BUILTIN_LEN(tmp_len_arg_15);
        if (tmp_right_name_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_name_25);

            exception_lineno = 2156;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_89 = BINARY_OPERATION_MULT_OBJECT_LIST_LONG(tmp_left_name_25, tmp_right_name_25);
        Py_DECREF(tmp_left_name_25);
        Py_DECREF(tmp_right_name_25);
        assert(!(tmp_args_element_name_89 == NULL));
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2156;
        {
            PyObject *call_args[] = {tmp_args_element_name_88, tmp_args_element_name_89};
            tmp_list_arg_8 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_75, call_args);
        }

        Py_DECREF(tmp_args_element_name_89);
        if (tmp_list_arg_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2156;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_349 = MAKE_LIST(tmp_list_arg_8);
        Py_DECREF(tmp_list_arg_8);
        if (tmp_assign_source_349 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2156;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_mdtype == NULL);
        var_mdtype = tmp_assign_source_349;
    }
    branch_end_87:;
    {
        PyObject *tmp_assign_source_350;
        PyObject *tmp_called_name_76;
        PyObject *tmp_expression_name_51;
        PyObject *tmp_kw_call_arg_value_0_7;
        PyObject *tmp_kw_call_dict_value_0_7;
        tmp_expression_name_51 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_51 == NULL)) {
            tmp_expression_name_51 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2157;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_76 = LOOKUP_ATTRIBUTE(tmp_expression_name_51, mod_consts[195]);
        if (tmp_called_name_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2157;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (var_data == NULL) {
            Py_DECREF(tmp_called_name_76);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[380]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2157;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_arg_value_0_7 = var_data;
        if (var_ddtype == NULL) {
            Py_DECREF(tmp_called_name_76);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[386]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2157;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_dict_value_0_7 = var_ddtype;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2157;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_7};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_7};
            tmp_assign_source_350 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_76, args, kw_values, mod_consts[297]);
        }

        Py_DECREF(tmp_called_name_76);
        if (tmp_assign_source_350 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2157;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_output == NULL);
        var_output = tmp_assign_source_350;
    }
    {
        nuitka_bool tmp_condition_result_91;
        int tmp_truth_name_31;
        if (par_usemask == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[346]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2158;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_31 = CHECK_IF_TRUE(par_usemask);
        if (tmp_truth_name_31 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2158;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_91 = tmp_truth_name_31 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_91 == NUITKA_BOOL_TRUE) {
            goto branch_yes_91;
        } else {
            goto branch_no_91;
        }
    }
    branch_yes_91:;
    {
        PyObject *tmp_assign_source_351;
        PyObject *tmp_called_name_77;
        PyObject *tmp_expression_name_52;
        PyObject *tmp_kw_call_arg_value_0_8;
        PyObject *tmp_kw_call_dict_value_0_8;
        tmp_expression_name_52 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_52 == NULL)) {
            tmp_expression_name_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2159;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_77 = LOOKUP_ATTRIBUTE(tmp_expression_name_52, mod_consts[195]);
        if (tmp_called_name_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2159;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (var_masks == NULL) {
            Py_DECREF(tmp_called_name_77);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[367]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2159;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_arg_value_0_8 = var_masks;
        if (var_mdtype == NULL) {
            Py_DECREF(tmp_called_name_77);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[387]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2159;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_dict_value_0_8 = var_mdtype;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2159;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_8};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_8};
            tmp_assign_source_351 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_77, args, kw_values, mod_consts[297]);
        }

        Py_DECREF(tmp_called_name_77);
        if (tmp_assign_source_351 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2159;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_outputmask == NULL);
        var_outputmask = tmp_assign_source_351;
    }
    branch_no_91:;
    goto branch_end_81;
    branch_no_81:;
    {
        nuitka_bool tmp_condition_result_92;
        int tmp_and_left_truth_6;
        nuitka_bool tmp_and_left_value_6;
        nuitka_bool tmp_and_right_value_6;
        int tmp_truth_name_32;
        PyObject *tmp_compexpr_left_59;
        PyObject *tmp_compexpr_right_59;
        PyObject *tmp_expression_name_53;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2162;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_32 = CHECK_IF_TRUE(par_names);
        if (tmp_truth_name_32 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2162;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_6 = tmp_truth_name_32 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_6 = tmp_and_left_value_6 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2162;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_6 == 1) {
            goto and_right_6;
        } else {
            goto and_left_6;
        }
        and_right_6:;
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2162;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_53 = par_dtype;
        tmp_compexpr_left_59 = LOOKUP_ATTRIBUTE(tmp_expression_name_53, mod_consts[211]);
        if (tmp_compexpr_left_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2162;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_59 = Py_None;
        tmp_and_right_value_6 = (tmp_compexpr_left_59 != tmp_compexpr_right_59) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_compexpr_left_59);
        tmp_condition_result_92 = tmp_and_right_value_6;
        goto and_end_6;
        and_left_6:;
        tmp_condition_result_92 = tmp_and_left_value_6;
        and_end_6:;
        if (tmp_condition_result_92 == NUITKA_BOOL_TRUE) {
            goto branch_yes_92;
        } else {
            goto branch_no_92;
        }
    }
    branch_yes_92:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        if (par_names == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[211]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2163;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_value_1 = par_names;
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2163;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_1 = par_dtype;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[211], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2163;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_no_92:;
    {
        bool tmp_condition_result_93;
        PyObject *tmp_compexpr_left_60;
        PyObject *tmp_compexpr_right_60;
        PyObject *tmp_len_arg_16;
        PyObject *tmp_tmp_condition_result_93_object_1;
        if (var_dtype_flat == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[388]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2165;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_len_arg_16 = var_dtype_flat;
        tmp_compexpr_left_60 = BUILTIN_LEN(tmp_len_arg_16);
        if (tmp_compexpr_left_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2165;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_60 = mod_consts[63];
        tmp_tmp_condition_result_93_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_60, tmp_compexpr_right_60);
        Py_DECREF(tmp_compexpr_left_60);
        assert(!(tmp_tmp_condition_result_93_object_1 == NULL));
        tmp_condition_result_93 = CHECK_IF_TRUE(tmp_tmp_condition_result_93_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_93_object_1);
        if (tmp_condition_result_93 != false) {
            goto branch_yes_93;
        } else {
            goto branch_no_93;
        }
    }
    branch_yes_93:;
    {
        bool tmp_condition_result_94;
        PyObject *tmp_compexpr_left_61;
        PyObject *tmp_compexpr_right_61;
        tmp_compexpr_left_61 = mod_consts[389];
        {
            PyObject *tmp_assign_source_352;
            PyObject *tmp_iter_arg_64;
            if (var_dtype_flat == NULL) {

                FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[388]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2170;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_iter_arg_64 = var_dtype_flat;
            tmp_assign_source_352 = MAKE_ITERATOR(tmp_iter_arg_64);
            if (tmp_assign_source_352 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2170;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_genexpr_2__$0 == NULL);
            tmp_genexpr_2__$0 = tmp_assign_source_352;
        }
        // Tried code:
        {
            struct Nuitka_CellObject *tmp_closure_3[1];

            tmp_closure_3[0] = Nuitka_Cell_New0(tmp_genexpr_2__$0);

            tmp_compexpr_right_61 = MAKE_GENERATOR_numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__2_genexpr(tmp_closure_3);

            goto try_return_handler_144;
        }
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_144:;
        CHECK_OBJECT(tmp_genexpr_2__$0);
        Py_DECREF(tmp_genexpr_2__$0);
        tmp_genexpr_2__$0 = NULL;
        goto outline_result_27;
        // End of try:
        CHECK_OBJECT(tmp_genexpr_2__$0);
        Py_DECREF(tmp_genexpr_2__$0);
        tmp_genexpr_2__$0 = NULL;
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_27:;
        tmp_res = PySequence_Contains(tmp_compexpr_right_61, tmp_compexpr_left_61);
        Py_DECREF(tmp_compexpr_right_61);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2170;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_94 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_94 != false) {
            goto branch_yes_94;
        } else {
            goto branch_no_94;
        }
    }
    branch_yes_94:;
    {
        nuitka_bool tmp_condition_result_95;
        PyObject *tmp_called_name_78;
        PyObject *tmp_call_result_27;
        PyObject *tmp_args_element_name_90;
        int tmp_truth_name_33;
        tmp_called_name_78 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[390]);

        if (unlikely(tmp_called_name_78 == NULL)) {
            tmp_called_name_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[390]);
        }

        if (tmp_called_name_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2171;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2171;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_90 = par_dtype;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2171;
        tmp_call_result_27 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_78, tmp_args_element_name_90);
        if (tmp_call_result_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2171;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_33 = CHECK_IF_TRUE(tmp_call_result_27);
        if (tmp_truth_name_33 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_27);

            exception_lineno = 2171;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_95 = tmp_truth_name_33 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_27);
        if (tmp_condition_result_95 == NUITKA_BOOL_TRUE) {
            goto branch_yes_95;
        } else {
            goto branch_no_95;
        }
    }
    branch_yes_95:;
    {
        PyObject *tmp_raise_type_7;
        PyObject *tmp_make_exception_arg_6;
        tmp_make_exception_arg_6 = mod_consts[391];
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2172;
        tmp_raise_type_7 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_NotImplementedError, tmp_make_exception_arg_6);
        assert(!(tmp_raise_type_7 == NULL));
        exception_type = tmp_raise_type_7;
        exception_lineno = 2172;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto frame_exception_exit_1;
    }
    goto branch_end_95;
    branch_no_95:;
    {
        PyObject *tmp_assign_source_353;
        PyObject *tmp_called_name_79;
        PyObject *tmp_expression_name_54;
        PyObject *tmp_kw_call_arg_value_0_9;
        PyObject *tmp_kw_call_dict_value_0_9;
        tmp_expression_name_54 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_54 == NULL)) {
            tmp_expression_name_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2175;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_79 = LOOKUP_ATTRIBUTE(tmp_expression_name_54, mod_consts[195]);
        if (tmp_called_name_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2175;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_data);
        tmp_kw_call_arg_value_0_9 = var_data;
        if (par_dtype == NULL) {
            Py_DECREF(tmp_called_name_79);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2175;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_dict_value_0_9 = par_dtype;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2175;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_9};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_9};
            tmp_assign_source_353 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_79, args, kw_values, mod_consts[297]);
        }

        Py_DECREF(tmp_called_name_79);
        if (tmp_assign_source_353 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2175;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_output == NULL);
        var_output = tmp_assign_source_353;
    }
    branch_end_95:;
    goto branch_end_94;
    branch_no_94:;
    {
        PyObject *tmp_assign_source_354;
        PyObject *tmp_called_name_80;
        PyObject *tmp_expression_name_55;
        PyObject *tmp_kw_call_arg_value_0_10;
        PyObject *tmp_kw_call_dict_value_0_10;
        tmp_expression_name_55 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_55 == NULL)) {
            tmp_expression_name_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2177;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_80 = LOOKUP_ATTRIBUTE(tmp_expression_name_55, mod_consts[195]);
        if (tmp_called_name_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2177;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_data);
        tmp_kw_call_arg_value_0_10 = var_data;
        // Tried code:
        {
            PyObject *tmp_assign_source_355;
            PyObject *tmp_iter_arg_65;
            if (var_dtype_flat == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[388]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2177;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_145;
            }

            tmp_iter_arg_65 = var_dtype_flat;
            tmp_assign_source_355 = MAKE_ITERATOR(tmp_iter_arg_65);
            if (tmp_assign_source_355 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2177;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_145;
            }
            assert(tmp_listcomp_23__$0 == NULL);
            tmp_listcomp_23__$0 = tmp_assign_source_355;
        }
        {
            PyObject *tmp_assign_source_356;
            tmp_assign_source_356 = PyList_New(0);
            assert(tmp_listcomp_23__contraction == NULL);
            tmp_listcomp_23__contraction = tmp_assign_source_356;
        }
        if (isFrameUnusable(cache_frame_71e8ef82d3d1a21b289c89efd29ba4fb_27)) {
            Py_XDECREF(cache_frame_71e8ef82d3d1a21b289c89efd29ba4fb_27);

#if _DEBUG_REFCOUNTS
            if (cache_frame_71e8ef82d3d1a21b289c89efd29ba4fb_27 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_71e8ef82d3d1a21b289c89efd29ba4fb_27 = MAKE_FUNCTION_FRAME(codeobj_71e8ef82d3d1a21b289c89efd29ba4fb, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_71e8ef82d3d1a21b289c89efd29ba4fb_27->m_type_description == NULL);
        frame_71e8ef82d3d1a21b289c89efd29ba4fb_27 = cache_frame_71e8ef82d3d1a21b289c89efd29ba4fb_27;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_71e8ef82d3d1a21b289c89efd29ba4fb_27);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_71e8ef82d3d1a21b289c89efd29ba4fb_27) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_41:;
        {
            PyObject *tmp_next_source_40;
            PyObject *tmp_assign_source_357;
            CHECK_OBJECT(tmp_listcomp_23__$0);
            tmp_next_source_40 = tmp_listcomp_23__$0;
            tmp_assign_source_357 = ITERATOR_NEXT(tmp_next_source_40);
            if (tmp_assign_source_357 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_41;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 2177;
                    goto try_except_handler_146;
                }
            }

            {
                PyObject *old = tmp_listcomp_23__iter_value_0;
                tmp_listcomp_23__iter_value_0 = tmp_assign_source_357;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_358;
            CHECK_OBJECT(tmp_listcomp_23__iter_value_0);
            tmp_assign_source_358 = tmp_listcomp_23__iter_value_0;
            {
                PyObject *old = outline_25_var__;
                outline_25_var__ = tmp_assign_source_358;
                Py_INCREF(outline_25_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_25;
            PyObject *tmp_append_value_25;
            PyObject *tmp_tuple_element_15;
            CHECK_OBJECT(tmp_listcomp_23__contraction);
            tmp_append_list_25 = tmp_listcomp_23__contraction;
            tmp_tuple_element_15 = mod_consts[180];
            tmp_append_value_25 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_append_value_25, 0, tmp_tuple_element_15);
            CHECK_OBJECT(outline_25_var__);
            tmp_tuple_element_15 = outline_25_var__;
            PyTuple_SET_ITEM0(tmp_append_value_25, 1, tmp_tuple_element_15);
            assert(PyList_Check(tmp_append_list_25));
            tmp_result = LIST_APPEND1(tmp_append_list_25, tmp_append_value_25);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2177;
                type_description_2 = "o";
                goto try_except_handler_146;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2177;
            type_description_2 = "o";
            goto try_except_handler_146;
        }
        goto loop_start_41;
        loop_end_41:;
        CHECK_OBJECT(tmp_listcomp_23__contraction);
        tmp_kw_call_dict_value_0_10 = tmp_listcomp_23__contraction;
        Py_INCREF(tmp_kw_call_dict_value_0_10);
        goto try_return_handler_146;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_146:;
        CHECK_OBJECT(tmp_listcomp_23__$0);
        Py_DECREF(tmp_listcomp_23__$0);
        tmp_listcomp_23__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_23__contraction);
        Py_DECREF(tmp_listcomp_23__contraction);
        tmp_listcomp_23__contraction = NULL;
        Py_XDECREF(tmp_listcomp_23__iter_value_0);
        tmp_listcomp_23__iter_value_0 = NULL;
        goto frame_return_exit_27;
        // Exception handler code:
        try_except_handler_146:;
        exception_keeper_type_142 = exception_type;
        exception_keeper_value_142 = exception_value;
        exception_keeper_tb_142 = exception_tb;
        exception_keeper_lineno_142 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_23__$0);
        Py_DECREF(tmp_listcomp_23__$0);
        tmp_listcomp_23__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_23__contraction);
        Py_DECREF(tmp_listcomp_23__contraction);
        tmp_listcomp_23__contraction = NULL;
        Py_XDECREF(tmp_listcomp_23__iter_value_0);
        tmp_listcomp_23__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_142;
        exception_value = exception_keeper_value_142;
        exception_tb = exception_keeper_tb_142;
        exception_lineno = exception_keeper_lineno_142;

        goto frame_exception_exit_27;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_71e8ef82d3d1a21b289c89efd29ba4fb_27);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_26;

        frame_return_exit_27:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_71e8ef82d3d1a21b289c89efd29ba4fb_27);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_145;

        frame_exception_exit_27:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_71e8ef82d3d1a21b289c89efd29ba4fb_27);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_71e8ef82d3d1a21b289c89efd29ba4fb_27, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_71e8ef82d3d1a21b289c89efd29ba4fb_27->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_71e8ef82d3d1a21b289c89efd29ba4fb_27, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_71e8ef82d3d1a21b289c89efd29ba4fb_27,
            type_description_2,
            outline_25_var__
        );


        // Release cached frame if used for exception.
        if (frame_71e8ef82d3d1a21b289c89efd29ba4fb_27 == cache_frame_71e8ef82d3d1a21b289c89efd29ba4fb_27) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_71e8ef82d3d1a21b289c89efd29ba4fb_27);
            cache_frame_71e8ef82d3d1a21b289c89efd29ba4fb_27 = NULL;
        }

        assertFrameObject(frame_71e8ef82d3d1a21b289c89efd29ba4fb_27);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_26;

        frame_no_exception_26:;
        goto skip_nested_handling_26;
        nested_frame_exit_26:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_145;
        skip_nested_handling_26:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_145:;
        Py_XDECREF(outline_25_var__);
        outline_25_var__ = NULL;
        goto outline_result_28;
        // Exception handler code:
        try_except_handler_145:;
        exception_keeper_type_143 = exception_type;
        exception_keeper_value_143 = exception_value;
        exception_keeper_tb_143 = exception_tb;
        exception_keeper_lineno_143 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_25_var__);
        outline_25_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_143;
        exception_value = exception_keeper_value_143;
        exception_tb = exception_keeper_tb_143;
        exception_lineno = exception_keeper_lineno_143;

        goto outline_exception_26;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_26:;
        exception_lineno = 2177;
        goto frame_exception_exit_1;
        outline_result_28:;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2177;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_10};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_10};
            tmp_assign_source_354 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_80, args, kw_values, mod_consts[297]);
        }

        Py_DECREF(tmp_called_name_80);
        Py_DECREF(tmp_kw_call_dict_value_0_10);
        if (tmp_assign_source_354 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2177;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_rows;
            assert(old != NULL);
            var_rows = tmp_assign_source_354;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_359;
        PyObject *tmp_called_name_81;
        PyObject *tmp_expression_name_56;
        PyObject *tmp_args_element_name_91;
        CHECK_OBJECT(var_rows);
        tmp_expression_name_56 = var_rows;
        tmp_called_name_81 = LOOKUP_ATTRIBUTE(tmp_expression_name_56, mod_consts[392]);
        if (tmp_called_name_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2178;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (par_dtype == NULL) {
            Py_DECREF(tmp_called_name_81);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2178;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_91 = par_dtype;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2178;
        tmp_assign_source_359 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_81, tmp_args_element_name_91);
        Py_DECREF(tmp_called_name_81);
        if (tmp_assign_source_359 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2178;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_output == NULL);
        var_output = tmp_assign_source_359;
    }
    branch_end_94:;
    {
        nuitka_bool tmp_condition_result_96;
        int tmp_truth_name_34;
        if (par_usemask == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[346]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2180;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_34 = CHECK_IF_TRUE(par_usemask);
        if (tmp_truth_name_34 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2180;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_96 = tmp_truth_name_34 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_96 == NUITKA_BOOL_TRUE) {
            goto branch_yes_96;
        } else {
            goto branch_no_96;
        }
    }
    branch_yes_96:;
    {
        PyObject *tmp_assign_source_360;
        PyObject *tmp_called_name_82;
        PyObject *tmp_expression_name_57;
        PyObject *tmp_kw_call_arg_value_0_11;
        PyObject *tmp_kw_call_dict_value_0_11;
        PyObject *tmp_called_name_83;
        PyObject *tmp_expression_name_58;
        PyObject *tmp_args_element_name_92;
        tmp_expression_name_57 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_57 == NULL)) {
            tmp_expression_name_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2181;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_82 = LOOKUP_ATTRIBUTE(tmp_expression_name_57, mod_consts[195]);
        if (tmp_called_name_82 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2181;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (var_masks == NULL) {
            Py_DECREF(tmp_called_name_82);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[367]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2182;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_arg_value_0_11 = var_masks;
        tmp_expression_name_58 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_58 == NULL)) {
            tmp_expression_name_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_82);

            exception_lineno = 2182;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_83 = LOOKUP_ATTRIBUTE(tmp_expression_name_58, mod_consts[176]);
        if (tmp_called_name_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_82);

            exception_lineno = 2182;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_361;
            PyObject *tmp_iter_arg_66;
            if (var_dtype_flat == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[388]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2182;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_147;
            }

            tmp_iter_arg_66 = var_dtype_flat;
            tmp_assign_source_361 = MAKE_ITERATOR(tmp_iter_arg_66);
            if (tmp_assign_source_361 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2182;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_147;
            }
            assert(tmp_listcomp_24__$0 == NULL);
            tmp_listcomp_24__$0 = tmp_assign_source_361;
        }
        {
            PyObject *tmp_assign_source_362;
            tmp_assign_source_362 = PyList_New(0);
            assert(tmp_listcomp_24__contraction == NULL);
            tmp_listcomp_24__contraction = tmp_assign_source_362;
        }
        if (isFrameUnusable(cache_frame_4a19938cda3c601aaeccfb58a1e34b39_28)) {
            Py_XDECREF(cache_frame_4a19938cda3c601aaeccfb58a1e34b39_28);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4a19938cda3c601aaeccfb58a1e34b39_28 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4a19938cda3c601aaeccfb58a1e34b39_28 = MAKE_FUNCTION_FRAME(codeobj_4a19938cda3c601aaeccfb58a1e34b39, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4a19938cda3c601aaeccfb58a1e34b39_28->m_type_description == NULL);
        frame_4a19938cda3c601aaeccfb58a1e34b39_28 = cache_frame_4a19938cda3c601aaeccfb58a1e34b39_28;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4a19938cda3c601aaeccfb58a1e34b39_28);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4a19938cda3c601aaeccfb58a1e34b39_28) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_42:;
        {
            PyObject *tmp_next_source_41;
            PyObject *tmp_assign_source_363;
            CHECK_OBJECT(tmp_listcomp_24__$0);
            tmp_next_source_41 = tmp_listcomp_24__$0;
            tmp_assign_source_363 = ITERATOR_NEXT(tmp_next_source_41);
            if (tmp_assign_source_363 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_42;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 2182;
                    goto try_except_handler_148;
                }
            }

            {
                PyObject *old = tmp_listcomp_24__iter_value_0;
                tmp_listcomp_24__iter_value_0 = tmp_assign_source_363;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_364;
            CHECK_OBJECT(tmp_listcomp_24__iter_value_0);
            tmp_assign_source_364 = tmp_listcomp_24__iter_value_0;
            {
                PyObject *old = outline_26_var_t;
                outline_26_var_t = tmp_assign_source_364;
                Py_INCREF(outline_26_var_t);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_26;
            PyObject *tmp_append_value_26;
            CHECK_OBJECT(tmp_listcomp_24__contraction);
            tmp_append_list_26 = tmp_listcomp_24__contraction;
            tmp_append_value_26 = mod_consts[393];
            assert(PyList_Check(tmp_append_list_26));
            tmp_result = LIST_APPEND0(tmp_append_list_26, tmp_append_value_26);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2182;
                type_description_2 = "o";
                goto try_except_handler_148;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2182;
            type_description_2 = "o";
            goto try_except_handler_148;
        }
        goto loop_start_42;
        loop_end_42:;
        CHECK_OBJECT(tmp_listcomp_24__contraction);
        tmp_args_element_name_92 = tmp_listcomp_24__contraction;
        Py_INCREF(tmp_args_element_name_92);
        goto try_return_handler_148;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_148:;
        CHECK_OBJECT(tmp_listcomp_24__$0);
        Py_DECREF(tmp_listcomp_24__$0);
        tmp_listcomp_24__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_24__contraction);
        Py_DECREF(tmp_listcomp_24__contraction);
        tmp_listcomp_24__contraction = NULL;
        Py_XDECREF(tmp_listcomp_24__iter_value_0);
        tmp_listcomp_24__iter_value_0 = NULL;
        goto frame_return_exit_28;
        // Exception handler code:
        try_except_handler_148:;
        exception_keeper_type_144 = exception_type;
        exception_keeper_value_144 = exception_value;
        exception_keeper_tb_144 = exception_tb;
        exception_keeper_lineno_144 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_24__$0);
        Py_DECREF(tmp_listcomp_24__$0);
        tmp_listcomp_24__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_24__contraction);
        Py_DECREF(tmp_listcomp_24__contraction);
        tmp_listcomp_24__contraction = NULL;
        Py_XDECREF(tmp_listcomp_24__iter_value_0);
        tmp_listcomp_24__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_144;
        exception_value = exception_keeper_value_144;
        exception_tb = exception_keeper_tb_144;
        exception_lineno = exception_keeper_lineno_144;

        goto frame_exception_exit_28;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4a19938cda3c601aaeccfb58a1e34b39_28);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_27;

        frame_return_exit_28:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_4a19938cda3c601aaeccfb58a1e34b39_28);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_147;

        frame_exception_exit_28:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4a19938cda3c601aaeccfb58a1e34b39_28);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4a19938cda3c601aaeccfb58a1e34b39_28, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4a19938cda3c601aaeccfb58a1e34b39_28->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4a19938cda3c601aaeccfb58a1e34b39_28, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4a19938cda3c601aaeccfb58a1e34b39_28,
            type_description_2,
            outline_26_var_t
        );


        // Release cached frame if used for exception.
        if (frame_4a19938cda3c601aaeccfb58a1e34b39_28 == cache_frame_4a19938cda3c601aaeccfb58a1e34b39_28) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4a19938cda3c601aaeccfb58a1e34b39_28);
            cache_frame_4a19938cda3c601aaeccfb58a1e34b39_28 = NULL;
        }

        assertFrameObject(frame_4a19938cda3c601aaeccfb58a1e34b39_28);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_27;

        frame_no_exception_27:;
        goto skip_nested_handling_27;
        nested_frame_exit_27:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_147;
        skip_nested_handling_27:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_147:;
        Py_XDECREF(outline_26_var_t);
        outline_26_var_t = NULL;
        goto outline_result_29;
        // Exception handler code:
        try_except_handler_147:;
        exception_keeper_type_145 = exception_type;
        exception_keeper_value_145 = exception_value;
        exception_keeper_tb_145 = exception_tb;
        exception_keeper_lineno_145 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_26_var_t);
        outline_26_var_t = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_145;
        exception_value = exception_keeper_value_145;
        exception_tb = exception_keeper_tb_145;
        exception_lineno = exception_keeper_lineno_145;

        goto outline_exception_27;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_27:;
        exception_lineno = 2182;
        goto frame_exception_exit_1;
        outline_result_29:;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2182;
        tmp_kw_call_dict_value_0_11 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_83, tmp_args_element_name_92);
        Py_DECREF(tmp_called_name_83);
        Py_DECREF(tmp_args_element_name_92);
        if (tmp_kw_call_dict_value_0_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_82);

            exception_lineno = 2182;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2181;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_11};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_11};
            tmp_assign_source_360 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_82, args, kw_values, mod_consts[297]);
        }

        Py_DECREF(tmp_called_name_82);
        Py_DECREF(tmp_kw_call_dict_value_0_11);
        if (tmp_assign_source_360 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2181;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_rowmasks == NULL);
        var_rowmasks = tmp_assign_source_360;
    }
    {
        PyObject *tmp_assign_source_365;
        PyObject *tmp_called_name_84;
        PyObject *tmp_args_element_name_93;
        if (var_make_mask_descr == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[304]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2184;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_84 = var_make_mask_descr;
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2184;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_93 = par_dtype;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2184;
        tmp_assign_source_365 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_84, tmp_args_element_name_93);
        if (tmp_assign_source_365 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2184;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_mdtype == NULL);
        var_mdtype = tmp_assign_source_365;
    }
    {
        PyObject *tmp_assign_source_366;
        PyObject *tmp_called_instance_27;
        PyObject *tmp_args_element_name_94;
        CHECK_OBJECT(var_rowmasks);
        tmp_called_instance_27 = var_rowmasks;
        CHECK_OBJECT(var_mdtype);
        tmp_args_element_name_94 = var_mdtype;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2185;
        tmp_assign_source_366 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_27, mod_consts[392], tmp_args_element_name_94);
        if (tmp_assign_source_366 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2185;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_outputmask == NULL);
        var_outputmask = tmp_assign_source_366;
    }
    branch_no_96:;
    goto branch_end_93;
    branch_no_93:;
    {
        nuitka_bool tmp_condition_result_97;
        int tmp_truth_name_35;
        if (var_user_converters == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[394]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2189;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_35 = CHECK_IF_TRUE(var_user_converters);
        if (tmp_truth_name_35 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2189;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_97 = tmp_truth_name_35 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_97 == NUITKA_BOOL_TRUE) {
            goto branch_yes_97;
        } else {
            goto branch_no_97;
        }
    }
    branch_yes_97:;
    {
        PyObject *tmp_assign_source_367;
        tmp_assign_source_367 = Py_True;
        assert(var_ishomogeneous == NULL);
        Py_INCREF(tmp_assign_source_367);
        var_ishomogeneous = tmp_assign_source_367;
    }
    {
        PyObject *tmp_assign_source_368;
        tmp_assign_source_368 = PyList_New(0);
        {
            PyObject *old = var_descr;
            var_descr = tmp_assign_source_368;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_369;
        PyObject *tmp_iter_arg_67;
        PyObject *tmp_called_name_85;
        PyObject *tmp_args_element_name_95;
        tmp_called_name_85 = (PyObject *)&PyEnum_Type;
        // Tried code:
        {
            PyObject *tmp_assign_source_370;
            PyObject *tmp_iter_arg_68;
            if (par_converters == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[191]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2192;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_149;
            }

            tmp_iter_arg_68 = par_converters;
            tmp_assign_source_370 = MAKE_ITERATOR(tmp_iter_arg_68);
            if (tmp_assign_source_370 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2192;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_149;
            }
            assert(tmp_listcomp_25__$0 == NULL);
            tmp_listcomp_25__$0 = tmp_assign_source_370;
        }
        {
            PyObject *tmp_assign_source_371;
            tmp_assign_source_371 = PyList_New(0);
            assert(tmp_listcomp_25__contraction == NULL);
            tmp_listcomp_25__contraction = tmp_assign_source_371;
        }
        if (isFrameUnusable(cache_frame_107dd700e550287aab3b7337563115b5_29)) {
            Py_XDECREF(cache_frame_107dd700e550287aab3b7337563115b5_29);

#if _DEBUG_REFCOUNTS
            if (cache_frame_107dd700e550287aab3b7337563115b5_29 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_107dd700e550287aab3b7337563115b5_29 = MAKE_FUNCTION_FRAME(codeobj_107dd700e550287aab3b7337563115b5, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_107dd700e550287aab3b7337563115b5_29->m_type_description == NULL);
        frame_107dd700e550287aab3b7337563115b5_29 = cache_frame_107dd700e550287aab3b7337563115b5_29;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_107dd700e550287aab3b7337563115b5_29);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_107dd700e550287aab3b7337563115b5_29) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_43:;
        {
            PyObject *tmp_next_source_42;
            PyObject *tmp_assign_source_372;
            CHECK_OBJECT(tmp_listcomp_25__$0);
            tmp_next_source_42 = tmp_listcomp_25__$0;
            tmp_assign_source_372 = ITERATOR_NEXT(tmp_next_source_42);
            if (tmp_assign_source_372 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_43;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 2192;
                    goto try_except_handler_150;
                }
            }

            {
                PyObject *old = tmp_listcomp_25__iter_value_0;
                tmp_listcomp_25__iter_value_0 = tmp_assign_source_372;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_373;
            CHECK_OBJECT(tmp_listcomp_25__iter_value_0);
            tmp_assign_source_373 = tmp_listcomp_25__iter_value_0;
            {
                PyObject *old = outline_27_var_conv;
                outline_27_var_conv = tmp_assign_source_373;
                Py_INCREF(outline_27_var_conv);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_27;
            PyObject *tmp_append_value_27;
            PyObject *tmp_expression_name_59;
            CHECK_OBJECT(tmp_listcomp_25__contraction);
            tmp_append_list_27 = tmp_listcomp_25__contraction;
            CHECK_OBJECT(outline_27_var_conv);
            tmp_expression_name_59 = outline_27_var_conv;
            tmp_append_value_27 = LOOKUP_ATTRIBUTE(tmp_expression_name_59, mod_consts[122]);
            if (tmp_append_value_27 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2192;
                type_description_2 = "o";
                goto try_except_handler_150;
            }
            assert(PyList_Check(tmp_append_list_27));
            tmp_result = LIST_APPEND1(tmp_append_list_27, tmp_append_value_27);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2192;
                type_description_2 = "o";
                goto try_except_handler_150;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2192;
            type_description_2 = "o";
            goto try_except_handler_150;
        }
        goto loop_start_43;
        loop_end_43:;
        CHECK_OBJECT(tmp_listcomp_25__contraction);
        tmp_args_element_name_95 = tmp_listcomp_25__contraction;
        Py_INCREF(tmp_args_element_name_95);
        goto try_return_handler_150;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_150:;
        CHECK_OBJECT(tmp_listcomp_25__$0);
        Py_DECREF(tmp_listcomp_25__$0);
        tmp_listcomp_25__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_25__contraction);
        Py_DECREF(tmp_listcomp_25__contraction);
        tmp_listcomp_25__contraction = NULL;
        Py_XDECREF(tmp_listcomp_25__iter_value_0);
        tmp_listcomp_25__iter_value_0 = NULL;
        goto frame_return_exit_29;
        // Exception handler code:
        try_except_handler_150:;
        exception_keeper_type_146 = exception_type;
        exception_keeper_value_146 = exception_value;
        exception_keeper_tb_146 = exception_tb;
        exception_keeper_lineno_146 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_25__$0);
        Py_DECREF(tmp_listcomp_25__$0);
        tmp_listcomp_25__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_25__contraction);
        Py_DECREF(tmp_listcomp_25__contraction);
        tmp_listcomp_25__contraction = NULL;
        Py_XDECREF(tmp_listcomp_25__iter_value_0);
        tmp_listcomp_25__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_146;
        exception_value = exception_keeper_value_146;
        exception_tb = exception_keeper_tb_146;
        exception_lineno = exception_keeper_lineno_146;

        goto frame_exception_exit_29;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_107dd700e550287aab3b7337563115b5_29);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_28;

        frame_return_exit_29:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_107dd700e550287aab3b7337563115b5_29);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_149;

        frame_exception_exit_29:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_107dd700e550287aab3b7337563115b5_29);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_107dd700e550287aab3b7337563115b5_29, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_107dd700e550287aab3b7337563115b5_29->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_107dd700e550287aab3b7337563115b5_29, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_107dd700e550287aab3b7337563115b5_29,
            type_description_2,
            outline_27_var_conv
        );


        // Release cached frame if used for exception.
        if (frame_107dd700e550287aab3b7337563115b5_29 == cache_frame_107dd700e550287aab3b7337563115b5_29) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_107dd700e550287aab3b7337563115b5_29);
            cache_frame_107dd700e550287aab3b7337563115b5_29 = NULL;
        }

        assertFrameObject(frame_107dd700e550287aab3b7337563115b5_29);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_28;

        frame_no_exception_28:;
        goto skip_nested_handling_28;
        nested_frame_exit_28:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_149;
        skip_nested_handling_28:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_149:;
        Py_XDECREF(outline_27_var_conv);
        outline_27_var_conv = NULL;
        goto outline_result_30;
        // Exception handler code:
        try_except_handler_149:;
        exception_keeper_type_147 = exception_type;
        exception_keeper_value_147 = exception_value;
        exception_keeper_tb_147 = exception_tb;
        exception_keeper_lineno_147 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_27_var_conv);
        outline_27_var_conv = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_147;
        exception_value = exception_keeper_value_147;
        exception_tb = exception_keeper_tb_147;
        exception_lineno = exception_keeper_lineno_147;

        goto outline_exception_28;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_28:;
        exception_lineno = 2192;
        goto frame_exception_exit_1;
        outline_result_30:;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2192;
        tmp_iter_arg_67 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_85, tmp_args_element_name_95);
        Py_DECREF(tmp_args_element_name_95);
        if (tmp_iter_arg_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2192;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_369 = MAKE_ITERATOR(tmp_iter_arg_67);
        Py_DECREF(tmp_iter_arg_67);
        if (tmp_assign_source_369 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2192;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_15__for_iterator == NULL);
        tmp_for_loop_15__for_iterator = tmp_assign_source_369;
    }
    // Tried code:
    loop_start_44:;
    {
        PyObject *tmp_next_source_43;
        PyObject *tmp_assign_source_374;
        CHECK_OBJECT(tmp_for_loop_15__for_iterator);
        tmp_next_source_43 = tmp_for_loop_15__for_iterator;
        tmp_assign_source_374 = ITERATOR_NEXT(tmp_next_source_43);
        if (tmp_assign_source_374 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_44;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 2192;
                goto try_except_handler_151;
            }
        }

        {
            PyObject *old = tmp_for_loop_15__iter_value;
            tmp_for_loop_15__iter_value = tmp_assign_source_374;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_375;
        PyObject *tmp_iter_arg_69;
        CHECK_OBJECT(tmp_for_loop_15__iter_value);
        tmp_iter_arg_69 = tmp_for_loop_15__iter_value;
        tmp_assign_source_375 = MAKE_ITERATOR(tmp_iter_arg_69);
        if (tmp_assign_source_375 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2192;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_152;
        }
        {
            PyObject *old = tmp_tuple_unpack_12__source_iter;
            tmp_tuple_unpack_12__source_iter = tmp_assign_source_375;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_376;
        PyObject *tmp_unpack_45;
        CHECK_OBJECT(tmp_tuple_unpack_12__source_iter);
        tmp_unpack_45 = tmp_tuple_unpack_12__source_iter;
        tmp_assign_source_376 = UNPACK_NEXT(tmp_unpack_45, 0, 2);
        if (tmp_assign_source_376 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2192;
            goto try_except_handler_153;
        }
        {
            PyObject *old = tmp_tuple_unpack_12__element_1;
            tmp_tuple_unpack_12__element_1 = tmp_assign_source_376;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_377;
        PyObject *tmp_unpack_46;
        CHECK_OBJECT(tmp_tuple_unpack_12__source_iter);
        tmp_unpack_46 = tmp_tuple_unpack_12__source_iter;
        tmp_assign_source_377 = UNPACK_NEXT(tmp_unpack_46, 1, 2);
        if (tmp_assign_source_377 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2192;
            goto try_except_handler_153;
        }
        {
            PyObject *old = tmp_tuple_unpack_12__element_2;
            tmp_tuple_unpack_12__element_2 = tmp_assign_source_377;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_23;
        CHECK_OBJECT(tmp_tuple_unpack_12__source_iter);
        tmp_iterator_name_23 = tmp_tuple_unpack_12__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_23); assert(HAS_ITERNEXT(tmp_iterator_name_23));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_23)->tp_iternext)(tmp_iterator_name_23);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 2192;
                    goto try_except_handler_153;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2192;
            goto try_except_handler_153;
        }
    }
    goto try_end_85;
    // Exception handler code:
    try_except_handler_153:;
    exception_keeper_type_148 = exception_type;
    exception_keeper_value_148 = exception_value;
    exception_keeper_tb_148 = exception_tb;
    exception_keeper_lineno_148 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_12__source_iter);
    Py_DECREF(tmp_tuple_unpack_12__source_iter);
    tmp_tuple_unpack_12__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_148;
    exception_value = exception_keeper_value_148;
    exception_tb = exception_keeper_tb_148;
    exception_lineno = exception_keeper_lineno_148;

    goto try_except_handler_152;
    // End of try:
    try_end_85:;
    goto try_end_86;
    // Exception handler code:
    try_except_handler_152:;
    exception_keeper_type_149 = exception_type;
    exception_keeper_value_149 = exception_value;
    exception_keeper_tb_149 = exception_tb;
    exception_keeper_lineno_149 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_12__element_1);
    tmp_tuple_unpack_12__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_12__element_2);
    tmp_tuple_unpack_12__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_149;
    exception_value = exception_keeper_value_149;
    exception_tb = exception_keeper_tb_149;
    exception_lineno = exception_keeper_lineno_149;

    goto try_except_handler_151;
    // End of try:
    try_end_86:;
    CHECK_OBJECT(tmp_tuple_unpack_12__source_iter);
    Py_DECREF(tmp_tuple_unpack_12__source_iter);
    tmp_tuple_unpack_12__source_iter = NULL;
    {
        PyObject *tmp_assign_source_378;
        CHECK_OBJECT(tmp_tuple_unpack_12__element_1);
        tmp_assign_source_378 = tmp_tuple_unpack_12__element_1;
        {
            PyObject *old = Nuitka_Cell_GET(var_i);
            PyCell_SET(var_i, tmp_assign_source_378);
            Py_INCREF(tmp_assign_source_378);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_12__element_1);
    tmp_tuple_unpack_12__element_1 = NULL;

    {
        PyObject *tmp_assign_source_379;
        CHECK_OBJECT(tmp_tuple_unpack_12__element_2);
        tmp_assign_source_379 = tmp_tuple_unpack_12__element_2;
        {
            PyObject *old = var_ttype;
            var_ttype = tmp_assign_source_379;
            Py_INCREF(var_ttype);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_12__element_2);
    tmp_tuple_unpack_12__element_2 = NULL;

    {
        bool tmp_condition_result_98;
        PyObject *tmp_compexpr_left_62;
        PyObject *tmp_compexpr_right_62;
        CHECK_OBJECT(Nuitka_Cell_GET(var_i));
        tmp_compexpr_left_62 = Nuitka_Cell_GET(var_i);
        if (var_user_converters == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[394]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2194;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }

        tmp_compexpr_right_62 = var_user_converters;
        tmp_res = PySequence_Contains(tmp_compexpr_right_62, tmp_compexpr_left_62);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2194;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        tmp_condition_result_98 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_98 != false) {
            goto branch_yes_98;
        } else {
            goto branch_no_98;
        }
    }
    branch_yes_98:;
    {
        PyObject *tmp_assign_source_380;
        PyObject *tmp_left_name_26;
        PyObject *tmp_right_name_26;
        PyObject *tmp_compexpr_left_63;
        PyObject *tmp_compexpr_right_63;
        PyObject *tmp_expression_name_60;
        if (var_ishomogeneous == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[395]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2195;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }

        tmp_left_name_26 = var_ishomogeneous;
        CHECK_OBJECT(var_ttype);
        tmp_compexpr_left_63 = var_ttype;
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2195;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }

        tmp_expression_name_60 = par_dtype;
        tmp_compexpr_right_63 = LOOKUP_ATTRIBUTE(tmp_expression_name_60, mod_consts[122]);
        if (tmp_compexpr_right_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2195;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        tmp_right_name_26 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_63, tmp_compexpr_right_63);
        Py_DECREF(tmp_compexpr_right_63);
        if (tmp_right_name_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2195;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        tmp_result = BINARY_OPERATION_BITAND_OBJECT_OBJECT_INPLACE(&tmp_left_name_26, tmp_right_name_26);
        Py_DECREF(tmp_right_name_26);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2195;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        tmp_assign_source_380 = tmp_left_name_26;
        var_ishomogeneous = tmp_assign_source_380;

    }
    {
        nuitka_bool tmp_condition_result_99;
        PyObject *tmp_called_name_86;
        PyObject *tmp_expression_name_61;
        PyObject *tmp_call_result_28;
        PyObject *tmp_args_element_name_96;
        PyObject *tmp_args_element_name_97;
        PyObject *tmp_expression_name_62;
        int tmp_truth_name_36;
        tmp_expression_name_61 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_61 == NULL)) {
            tmp_expression_name_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2196;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        tmp_called_name_86 = LOOKUP_ATTRIBUTE(tmp_expression_name_61, mod_consts[377]);
        if (tmp_called_name_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2196;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        CHECK_OBJECT(var_ttype);
        tmp_args_element_name_96 = var_ttype;
        tmp_expression_name_62 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_62 == NULL)) {
            tmp_expression_name_62 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_86);

            exception_lineno = 2196;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        tmp_args_element_name_97 = LOOKUP_ATTRIBUTE(tmp_expression_name_62, mod_consts[378]);
        if (tmp_args_element_name_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_86);

            exception_lineno = 2196;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2196;
        {
            PyObject *call_args[] = {tmp_args_element_name_96, tmp_args_element_name_97};
            tmp_call_result_28 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_86, call_args);
        }

        Py_DECREF(tmp_called_name_86);
        Py_DECREF(tmp_args_element_name_97);
        if (tmp_call_result_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2196;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        tmp_truth_name_36 = CHECK_IF_TRUE(tmp_call_result_28);
        if (tmp_truth_name_36 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_28);

            exception_lineno = 2196;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        tmp_condition_result_99 = tmp_truth_name_36 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_28);
        if (tmp_condition_result_99 == NUITKA_BOOL_TRUE) {
            goto branch_yes_99;
        } else {
            goto branch_no_99;
        }
    }
    branch_yes_99:;
    {
        PyObject *tmp_assign_source_381;
        PyObject *tmp_tuple_element_16;
        CHECK_OBJECT(var_ttype);
        tmp_tuple_element_16 = var_ttype;
        tmp_assign_source_381 = PyTuple_New(2);
        {
            PyObject *tmp_called_name_87;
            PyObject *tmp_args_element_name_98;
            PyTuple_SET_ITEM0(tmp_assign_source_381, 0, tmp_tuple_element_16);
            tmp_called_name_87 = LOOKUP_BUILTIN(mod_consts[379]);
            assert(tmp_called_name_87 != NULL);
            {
                PyObject *tmp_assign_source_382;
                PyObject *tmp_iter_arg_70;
                if (var_data == NULL) {

                    FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[380]);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 2197;
                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    goto tuple_build_exception_5;
                }

                tmp_iter_arg_70 = var_data;
                tmp_assign_source_382 = MAKE_ITERATOR(tmp_iter_arg_70);
                if (tmp_assign_source_382 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2197;
                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    goto tuple_build_exception_5;
                }
                {
                    PyObject *old = tmp_genexpr_3__$0;
                    tmp_genexpr_3__$0 = tmp_assign_source_382;
                    Py_XDECREF(old);
                }

            }
            // Tried code:
            {
                struct Nuitka_CellObject *tmp_closure_4[2];

                tmp_closure_4[0] = Nuitka_Cell_New0(tmp_genexpr_3__$0);
                tmp_closure_4[1] = var_i;
                Py_INCREF(tmp_closure_4[1]);

                tmp_args_element_name_98 = MAKE_GENERATOR_numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__3_genexpr(tmp_closure_4);

                goto try_return_handler_154;
            }
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_154:;
            CHECK_OBJECT(tmp_genexpr_3__$0);
            Py_DECREF(tmp_genexpr_3__$0);
            tmp_genexpr_3__$0 = NULL;
            goto outline_result_31;
            // End of try:
            CHECK_OBJECT(tmp_genexpr_3__$0);
            Py_DECREF(tmp_genexpr_3__$0);
            tmp_genexpr_3__$0 = NULL;
            NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
            return NULL;
            outline_result_31:;
            frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2197;
            tmp_tuple_element_16 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_87, tmp_args_element_name_98);
            Py_DECREF(tmp_args_element_name_98);
            if (tmp_tuple_element_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2197;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto tuple_build_exception_5;
            }
            PyTuple_SET_ITEM(tmp_assign_source_381, 1, tmp_tuple_element_16);
        }
        goto tuple_build_noexception_5;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_5:;
        Py_DECREF(tmp_assign_source_381);
        goto try_except_handler_151;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_5:;
        {
            PyObject *old = var_ttype;
            assert(old != NULL);
            var_ttype = tmp_assign_source_381;
            Py_DECREF(old);
        }

    }
    branch_no_99:;
    {
        PyObject *tmp_called_name_88;
        PyObject *tmp_expression_name_63;
        PyObject *tmp_call_result_29;
        PyObject *tmp_args_element_name_99;
        PyObject *tmp_tuple_element_17;
        if (var_descr == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[319]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2198;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }

        tmp_expression_name_63 = var_descr;
        tmp_called_name_88 = LOOKUP_ATTRIBUTE(tmp_expression_name_63, mod_consts[29]);
        if (tmp_called_name_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2198;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        tmp_tuple_element_17 = mod_consts[180];
        tmp_args_element_name_99 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_element_name_99, 0, tmp_tuple_element_17);
        if (var_ttype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[396]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2198;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto tuple_build_exception_6;
        }

        tmp_tuple_element_17 = var_ttype;
        PyTuple_SET_ITEM0(tmp_args_element_name_99, 1, tmp_tuple_element_17);
        goto tuple_build_noexception_6;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_6:;
        Py_DECREF(tmp_called_name_88);
        Py_DECREF(tmp_args_element_name_99);
        goto try_except_handler_151;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_6:;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2198;
        tmp_call_result_29 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_88, tmp_args_element_name_99);
        Py_DECREF(tmp_called_name_88);
        Py_DECREF(tmp_args_element_name_99);
        if (tmp_call_result_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2198;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        Py_DECREF(tmp_call_result_29);
    }
    goto branch_end_98;
    branch_no_98:;
    {
        PyObject *tmp_called_name_89;
        PyObject *tmp_expression_name_64;
        PyObject *tmp_call_result_30;
        PyObject *tmp_args_element_name_100;
        PyObject *tmp_tuple_element_18;
        if (var_descr == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[319]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2200;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }

        tmp_expression_name_64 = var_descr;
        tmp_called_name_89 = LOOKUP_ATTRIBUTE(tmp_expression_name_64, mod_consts[29]);
        if (tmp_called_name_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2200;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        tmp_tuple_element_18 = mod_consts[180];
        tmp_args_element_name_100 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_element_name_100, 0, tmp_tuple_element_18);
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2200;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto tuple_build_exception_7;
        }

        tmp_tuple_element_18 = par_dtype;
        PyTuple_SET_ITEM0(tmp_args_element_name_100, 1, tmp_tuple_element_18);
        goto tuple_build_noexception_7;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_7:;
        Py_DECREF(tmp_called_name_89);
        Py_DECREF(tmp_args_element_name_100);
        goto try_except_handler_151;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_7:;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2200;
        tmp_call_result_30 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_89, tmp_args_element_name_100);
        Py_DECREF(tmp_called_name_89);
        Py_DECREF(tmp_args_element_name_100);
        if (tmp_call_result_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2200;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_151;
        }
        Py_DECREF(tmp_call_result_30);
    }
    branch_end_98:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2192;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_151;
    }
    goto loop_start_44;
    loop_end_44:;
    goto try_end_87;
    // Exception handler code:
    try_except_handler_151:;
    exception_keeper_type_150 = exception_type;
    exception_keeper_value_150 = exception_value;
    exception_keeper_tb_150 = exception_tb;
    exception_keeper_lineno_150 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_15__iter_value);
    tmp_for_loop_15__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_15__for_iterator);
    Py_DECREF(tmp_for_loop_15__for_iterator);
    tmp_for_loop_15__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_150;
    exception_value = exception_keeper_value_150;
    exception_tb = exception_keeper_tb_150;
    exception_lineno = exception_keeper_lineno_150;

    goto frame_exception_exit_1;
    // End of try:
    try_end_87:;
    Py_XDECREF(tmp_for_loop_15__iter_value);
    tmp_for_loop_15__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_15__for_iterator);
    Py_DECREF(tmp_for_loop_15__for_iterator);
    tmp_for_loop_15__for_iterator = NULL;
    {
        nuitka_bool tmp_condition_result_100;
        PyObject *tmp_operand_name_7;
        if (var_ishomogeneous == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[395]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2202;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_operand_name_7 = var_ishomogeneous;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2202;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_100 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_100 == NUITKA_BOOL_TRUE) {
            goto branch_yes_100;
        } else {
            goto branch_no_100;
        }
    }
    branch_yes_100:;
    {
        bool tmp_condition_result_101;
        PyObject *tmp_compexpr_left_64;
        PyObject *tmp_compexpr_right_64;
        PyObject *tmp_len_arg_17;
        PyObject *tmp_tmp_condition_result_101_object_1;
        if (var_descr == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[319]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2204;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_len_arg_17 = var_descr;
        tmp_compexpr_left_64 = BUILTIN_LEN(tmp_len_arg_17);
        if (tmp_compexpr_left_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2204;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_64 = mod_consts[63];
        tmp_tmp_condition_result_101_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_64, tmp_compexpr_right_64);
        Py_DECREF(tmp_compexpr_left_64);
        assert(!(tmp_tmp_condition_result_101_object_1 == NULL));
        tmp_condition_result_101 = CHECK_IF_TRUE(tmp_tmp_condition_result_101_object_1) == 1;
        Py_DECREF(tmp_tmp_condition_result_101_object_1);
        if (tmp_condition_result_101 != false) {
            goto branch_yes_101;
        } else {
            goto branch_no_101;
        }
    }
    branch_yes_101:;
    {
        PyObject *tmp_assign_source_383;
        PyObject *tmp_called_name_90;
        PyObject *tmp_expression_name_65;
        PyObject *tmp_args_element_name_101;
        tmp_expression_name_65 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_65 == NULL)) {
            tmp_expression_name_65 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2205;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_90 = LOOKUP_ATTRIBUTE(tmp_expression_name_65, mod_consts[176]);
        if (tmp_called_name_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2205;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (var_descr == NULL) {
            Py_DECREF(tmp_called_name_90);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[319]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2205;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_101 = var_descr;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2205;
        tmp_assign_source_383 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_90, tmp_args_element_name_101);
        Py_DECREF(tmp_called_name_90);
        if (tmp_assign_source_383 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2205;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_dtype;
            par_dtype = tmp_assign_source_383;
            Py_XDECREF(old);
        }

    }
    goto branch_end_101;
    branch_no_101:;
    {
        PyObject *tmp_assign_source_384;
        PyObject *tmp_called_name_91;
        PyObject *tmp_expression_name_66;
        PyObject *tmp_args_element_name_102;
        tmp_expression_name_66 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_66 == NULL)) {
            tmp_expression_name_66 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2208;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_91 = LOOKUP_ATTRIBUTE(tmp_expression_name_66, mod_consts[176]);
        if (tmp_called_name_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2208;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (var_ttype == NULL) {
            Py_DECREF(tmp_called_name_91);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[396]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2208;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_102 = var_ttype;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2208;
        tmp_assign_source_384 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_91, tmp_args_element_name_102);
        Py_DECREF(tmp_called_name_91);
        if (tmp_assign_source_384 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2208;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_dtype;
            par_dtype = tmp_assign_source_384;
            Py_XDECREF(old);
        }

    }
    branch_end_101:;
    branch_no_100:;
    branch_no_97:;
    {
        PyObject *tmp_assign_source_385;
        PyObject *tmp_called_name_92;
        PyObject *tmp_expression_name_67;
        PyObject *tmp_args_element_name_103;
        PyObject *tmp_args_element_name_104;
        tmp_expression_name_67 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_67 == NULL)) {
            tmp_expression_name_67 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2210;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_92 = LOOKUP_ATTRIBUTE(tmp_expression_name_67, mod_consts[195]);
        if (tmp_called_name_92 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2210;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (var_data == NULL) {
            Py_DECREF(tmp_called_name_92);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[380]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2210;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_103 = var_data;
        if (par_dtype == NULL) {
            Py_DECREF(tmp_called_name_92);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2210;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_104 = par_dtype;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2210;
        {
            PyObject *call_args[] = {tmp_args_element_name_103, tmp_args_element_name_104};
            tmp_assign_source_385 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_92, call_args);
        }

        Py_DECREF(tmp_called_name_92);
        if (tmp_assign_source_385 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2210;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_output == NULL);
        var_output = tmp_assign_source_385;
    }
    {
        nuitka_bool tmp_condition_result_102;
        int tmp_truth_name_37;
        if (par_usemask == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[346]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2211;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_37 = CHECK_IF_TRUE(par_usemask);
        if (tmp_truth_name_37 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2211;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_102 = tmp_truth_name_37 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_102 == NUITKA_BOOL_TRUE) {
            goto branch_yes_102;
        } else {
            goto branch_no_102;
        }
    }
    branch_yes_102:;
    {
        bool tmp_condition_result_103;
        PyObject *tmp_compexpr_left_65;
        PyObject *tmp_compexpr_right_65;
        PyObject *tmp_expression_name_68;
        if (par_dtype == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[176]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2212;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_68 = par_dtype;
        tmp_compexpr_left_65 = LOOKUP_ATTRIBUTE(tmp_expression_name_68, mod_consts[211]);
        if (tmp_compexpr_left_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2212;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_65 = Py_None;
        tmp_condition_result_103 = (tmp_compexpr_left_65 != tmp_compexpr_right_65) ? true : false;
        Py_DECREF(tmp_compexpr_left_65);
        if (tmp_condition_result_103 != false) {
            goto branch_yes_103;
        } else {
            goto branch_no_103;
        }
    }
    branch_yes_103:;
    {
        PyObject *tmp_assign_source_386;
        // Tried code:
        {
            PyObject *tmp_assign_source_387;
            PyObject *tmp_iter_arg_71;
            PyObject *tmp_expression_name_69;
            if (par_dtype == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[176]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2213;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_155;
            }

            tmp_expression_name_69 = par_dtype;
            tmp_iter_arg_71 = LOOKUP_ATTRIBUTE(tmp_expression_name_69, mod_consts[211]);
            if (tmp_iter_arg_71 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2213;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_155;
            }
            tmp_assign_source_387 = MAKE_ITERATOR(tmp_iter_arg_71);
            Py_DECREF(tmp_iter_arg_71);
            if (tmp_assign_source_387 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2213;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_155;
            }
            assert(tmp_listcomp_26__$0 == NULL);
            tmp_listcomp_26__$0 = tmp_assign_source_387;
        }
        {
            PyObject *tmp_assign_source_388;
            tmp_assign_source_388 = PyList_New(0);
            assert(tmp_listcomp_26__contraction == NULL);
            tmp_listcomp_26__contraction = tmp_assign_source_388;
        }
        if (isFrameUnusable(cache_frame_d3d9c2ed86ab4e07fc312d58026d376e_30)) {
            Py_XDECREF(cache_frame_d3d9c2ed86ab4e07fc312d58026d376e_30);

#if _DEBUG_REFCOUNTS
            if (cache_frame_d3d9c2ed86ab4e07fc312d58026d376e_30 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_d3d9c2ed86ab4e07fc312d58026d376e_30 = MAKE_FUNCTION_FRAME(codeobj_d3d9c2ed86ab4e07fc312d58026d376e, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_d3d9c2ed86ab4e07fc312d58026d376e_30->m_type_description == NULL);
        frame_d3d9c2ed86ab4e07fc312d58026d376e_30 = cache_frame_d3d9c2ed86ab4e07fc312d58026d376e_30;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_d3d9c2ed86ab4e07fc312d58026d376e_30);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_d3d9c2ed86ab4e07fc312d58026d376e_30) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_45:;
        {
            PyObject *tmp_next_source_44;
            PyObject *tmp_assign_source_389;
            CHECK_OBJECT(tmp_listcomp_26__$0);
            tmp_next_source_44 = tmp_listcomp_26__$0;
            tmp_assign_source_389 = ITERATOR_NEXT(tmp_next_source_44);
            if (tmp_assign_source_389 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_45;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 2213;
                    goto try_except_handler_156;
                }
            }

            {
                PyObject *old = tmp_listcomp_26__iter_value_0;
                tmp_listcomp_26__iter_value_0 = tmp_assign_source_389;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_390;
            CHECK_OBJECT(tmp_listcomp_26__iter_value_0);
            tmp_assign_source_390 = tmp_listcomp_26__iter_value_0;
            {
                PyObject *old = outline_28_var__;
                outline_28_var__ = tmp_assign_source_390;
                Py_INCREF(outline_28_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_28;
            PyObject *tmp_append_value_28;
            PyObject *tmp_tuple_element_19;
            CHECK_OBJECT(tmp_listcomp_26__contraction);
            tmp_append_list_28 = tmp_listcomp_26__contraction;
            CHECK_OBJECT(outline_28_var__);
            tmp_tuple_element_19 = outline_28_var__;
            tmp_append_value_28 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_append_value_28, 0, tmp_tuple_element_19);
            tmp_tuple_element_19 = (PyObject *)&PyBool_Type;
            PyTuple_SET_ITEM0(tmp_append_value_28, 1, tmp_tuple_element_19);
            assert(PyList_Check(tmp_append_list_28));
            tmp_result = LIST_APPEND1(tmp_append_list_28, tmp_append_value_28);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2213;
                type_description_2 = "o";
                goto try_except_handler_156;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2213;
            type_description_2 = "o";
            goto try_except_handler_156;
        }
        goto loop_start_45;
        loop_end_45:;
        CHECK_OBJECT(tmp_listcomp_26__contraction);
        tmp_assign_source_386 = tmp_listcomp_26__contraction;
        Py_INCREF(tmp_assign_source_386);
        goto try_return_handler_156;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_156:;
        CHECK_OBJECT(tmp_listcomp_26__$0);
        Py_DECREF(tmp_listcomp_26__$0);
        tmp_listcomp_26__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_26__contraction);
        Py_DECREF(tmp_listcomp_26__contraction);
        tmp_listcomp_26__contraction = NULL;
        Py_XDECREF(tmp_listcomp_26__iter_value_0);
        tmp_listcomp_26__iter_value_0 = NULL;
        goto frame_return_exit_30;
        // Exception handler code:
        try_except_handler_156:;
        exception_keeper_type_151 = exception_type;
        exception_keeper_value_151 = exception_value;
        exception_keeper_tb_151 = exception_tb;
        exception_keeper_lineno_151 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_26__$0);
        Py_DECREF(tmp_listcomp_26__$0);
        tmp_listcomp_26__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_26__contraction);
        Py_DECREF(tmp_listcomp_26__contraction);
        tmp_listcomp_26__contraction = NULL;
        Py_XDECREF(tmp_listcomp_26__iter_value_0);
        tmp_listcomp_26__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_151;
        exception_value = exception_keeper_value_151;
        exception_tb = exception_keeper_tb_151;
        exception_lineno = exception_keeper_lineno_151;

        goto frame_exception_exit_30;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d3d9c2ed86ab4e07fc312d58026d376e_30);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_29;

        frame_return_exit_30:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_d3d9c2ed86ab4e07fc312d58026d376e_30);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_155;

        frame_exception_exit_30:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d3d9c2ed86ab4e07fc312d58026d376e_30);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d3d9c2ed86ab4e07fc312d58026d376e_30, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d3d9c2ed86ab4e07fc312d58026d376e_30->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d3d9c2ed86ab4e07fc312d58026d376e_30, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d3d9c2ed86ab4e07fc312d58026d376e_30,
            type_description_2,
            outline_28_var__
        );


        // Release cached frame if used for exception.
        if (frame_d3d9c2ed86ab4e07fc312d58026d376e_30 == cache_frame_d3d9c2ed86ab4e07fc312d58026d376e_30) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_d3d9c2ed86ab4e07fc312d58026d376e_30);
            cache_frame_d3d9c2ed86ab4e07fc312d58026d376e_30 = NULL;
        }

        assertFrameObject(frame_d3d9c2ed86ab4e07fc312d58026d376e_30);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_29;

        frame_no_exception_29:;
        goto skip_nested_handling_29;
        nested_frame_exit_29:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_155;
        skip_nested_handling_29:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_155:;
        Py_XDECREF(outline_28_var__);
        outline_28_var__ = NULL;
        goto outline_result_32;
        // Exception handler code:
        try_except_handler_155:;
        exception_keeper_type_152 = exception_type;
        exception_keeper_value_152 = exception_value;
        exception_keeper_tb_152 = exception_tb;
        exception_keeper_lineno_152 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_28_var__);
        outline_28_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_152;
        exception_value = exception_keeper_value_152;
        exception_tb = exception_keeper_tb_152;
        exception_lineno = exception_keeper_lineno_152;

        goto outline_exception_29;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_29:;
        exception_lineno = 2213;
        goto frame_exception_exit_1;
        outline_result_32:;
        assert(var_mdtype == NULL);
        var_mdtype = tmp_assign_source_386;
    }
    goto branch_end_103;
    branch_no_103:;
    {
        PyObject *tmp_assign_source_391;
        tmp_assign_source_391 = (PyObject *)&PyBool_Type;
        assert(var_mdtype == NULL);
        Py_INCREF(tmp_assign_source_391);
        var_mdtype = tmp_assign_source_391;
    }
    branch_end_103:;
    {
        PyObject *tmp_assign_source_392;
        PyObject *tmp_called_name_93;
        PyObject *tmp_expression_name_70;
        PyObject *tmp_kw_call_arg_value_0_12;
        PyObject *tmp_kw_call_dict_value_0_12;
        tmp_expression_name_70 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_70 == NULL)) {
            tmp_expression_name_70 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2216;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_93 = LOOKUP_ATTRIBUTE(tmp_expression_name_70, mod_consts[195]);
        if (tmp_called_name_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2216;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (var_masks == NULL) {
            Py_DECREF(tmp_called_name_93);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[367]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2216;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_arg_value_0_12 = var_masks;
        CHECK_OBJECT(var_mdtype);
        tmp_kw_call_dict_value_0_12 = var_mdtype;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2216;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_12};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_12};
            tmp_assign_source_392 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_name_93, args, kw_values, mod_consts[297]);
        }

        Py_DECREF(tmp_called_name_93);
        if (tmp_assign_source_392 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2216;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_outputmask == NULL);
        var_outputmask = tmp_assign_source_392;
    }
    branch_no_102:;
    branch_end_93:;
    branch_end_81:;
    {
        PyObject *tmp_assign_source_393;
        PyObject *tmp_expression_name_71;
        PyObject *tmp_expression_name_72;
        if (var_output == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[397]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2218;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_72 = var_output;
        tmp_expression_name_71 = LOOKUP_ATTRIBUTE(tmp_expression_name_72, mod_consts[176]);
        if (tmp_expression_name_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2218;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_393 = LOOKUP_ATTRIBUTE(tmp_expression_name_71, mod_consts[211]);
        Py_DECREF(tmp_expression_name_71);
        if (tmp_assign_source_393 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2218;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_names;
            par_names = tmp_assign_source_393;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_104;
        int tmp_and_left_truth_7;
        nuitka_bool tmp_and_left_value_7;
        nuitka_bool tmp_and_right_value_7;
        int tmp_truth_name_38;
        int tmp_truth_name_39;
        if (par_usemask == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[346]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2219;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_38 = CHECK_IF_TRUE(par_usemask);
        if (tmp_truth_name_38 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2219;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_7 = tmp_truth_name_38 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_7 = tmp_and_left_value_7 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2219;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_7 == 1) {
            goto and_right_7;
        } else {
            goto and_left_7;
        }
        and_right_7:;
        CHECK_OBJECT(par_names);
        tmp_truth_name_39 = CHECK_IF_TRUE(par_names);
        if (tmp_truth_name_39 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2219;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_7 = tmp_truth_name_39 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_condition_result_104 = tmp_and_right_value_7;
        goto and_end_7;
        and_left_7:;
        tmp_condition_result_104 = tmp_and_left_value_7;
        and_end_7:;
        if (tmp_condition_result_104 == NUITKA_BOOL_TRUE) {
            goto branch_yes_104;
        } else {
            goto branch_no_104;
        }
    }
    branch_yes_104:;
    {
        PyObject *tmp_assign_source_394;
        PyObject *tmp_iter_arg_72;
        PyObject *tmp_called_name_94;
        PyObject *tmp_args_element_name_105;
        PyObject *tmp_args_element_name_106;
        tmp_called_name_94 = (PyObject *)&PyZip_Type;
        CHECK_OBJECT(par_names);
        tmp_args_element_name_105 = par_names;
        if (par_converters == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[191]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2220;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_106 = par_converters;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2220;
        {
            PyObject *call_args[] = {tmp_args_element_name_105, tmp_args_element_name_106};
            tmp_iter_arg_72 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_94, call_args);
        }

        if (tmp_iter_arg_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2220;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_394 = MAKE_ITERATOR(tmp_iter_arg_72);
        Py_DECREF(tmp_iter_arg_72);
        if (tmp_assign_source_394 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2220;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_16__for_iterator == NULL);
        tmp_for_loop_16__for_iterator = tmp_assign_source_394;
    }
    // Tried code:
    loop_start_46:;
    {
        PyObject *tmp_next_source_45;
        PyObject *tmp_assign_source_395;
        CHECK_OBJECT(tmp_for_loop_16__for_iterator);
        tmp_next_source_45 = tmp_for_loop_16__for_iterator;
        tmp_assign_source_395 = ITERATOR_NEXT(tmp_next_source_45);
        if (tmp_assign_source_395 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_46;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 2220;
                goto try_except_handler_157;
            }
        }

        {
            PyObject *old = tmp_for_loop_16__iter_value;
            tmp_for_loop_16__iter_value = tmp_assign_source_395;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_396;
        PyObject *tmp_iter_arg_73;
        CHECK_OBJECT(tmp_for_loop_16__iter_value);
        tmp_iter_arg_73 = tmp_for_loop_16__iter_value;
        tmp_assign_source_396 = MAKE_ITERATOR(tmp_iter_arg_73);
        if (tmp_assign_source_396 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2220;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_158;
        }
        {
            PyObject *old = tmp_tuple_unpack_13__source_iter;
            tmp_tuple_unpack_13__source_iter = tmp_assign_source_396;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_397;
        PyObject *tmp_unpack_47;
        CHECK_OBJECT(tmp_tuple_unpack_13__source_iter);
        tmp_unpack_47 = tmp_tuple_unpack_13__source_iter;
        tmp_assign_source_397 = UNPACK_NEXT(tmp_unpack_47, 0, 2);
        if (tmp_assign_source_397 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2220;
            goto try_except_handler_159;
        }
        {
            PyObject *old = tmp_tuple_unpack_13__element_1;
            tmp_tuple_unpack_13__element_1 = tmp_assign_source_397;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_398;
        PyObject *tmp_unpack_48;
        CHECK_OBJECT(tmp_tuple_unpack_13__source_iter);
        tmp_unpack_48 = tmp_tuple_unpack_13__source_iter;
        tmp_assign_source_398 = UNPACK_NEXT(tmp_unpack_48, 1, 2);
        if (tmp_assign_source_398 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2220;
            goto try_except_handler_159;
        }
        {
            PyObject *old = tmp_tuple_unpack_13__element_2;
            tmp_tuple_unpack_13__element_2 = tmp_assign_source_398;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_24;
        CHECK_OBJECT(tmp_tuple_unpack_13__source_iter);
        tmp_iterator_name_24 = tmp_tuple_unpack_13__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_24); assert(HAS_ITERNEXT(tmp_iterator_name_24));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_24)->tp_iternext)(tmp_iterator_name_24);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                    exception_lineno = 2220;
                    goto try_except_handler_159;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[94];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            exception_lineno = 2220;
            goto try_except_handler_159;
        }
    }
    goto try_end_88;
    // Exception handler code:
    try_except_handler_159:;
    exception_keeper_type_153 = exception_type;
    exception_keeper_value_153 = exception_value;
    exception_keeper_tb_153 = exception_tb;
    exception_keeper_lineno_153 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_13__source_iter);
    Py_DECREF(tmp_tuple_unpack_13__source_iter);
    tmp_tuple_unpack_13__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_153;
    exception_value = exception_keeper_value_153;
    exception_tb = exception_keeper_tb_153;
    exception_lineno = exception_keeper_lineno_153;

    goto try_except_handler_158;
    // End of try:
    try_end_88:;
    goto try_end_89;
    // Exception handler code:
    try_except_handler_158:;
    exception_keeper_type_154 = exception_type;
    exception_keeper_value_154 = exception_value;
    exception_keeper_tb_154 = exception_tb;
    exception_keeper_lineno_154 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_13__element_1);
    tmp_tuple_unpack_13__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_13__element_2);
    tmp_tuple_unpack_13__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_154;
    exception_value = exception_keeper_value_154;
    exception_tb = exception_keeper_tb_154;
    exception_lineno = exception_keeper_lineno_154;

    goto try_except_handler_157;
    // End of try:
    try_end_89:;
    CHECK_OBJECT(tmp_tuple_unpack_13__source_iter);
    Py_DECREF(tmp_tuple_unpack_13__source_iter);
    tmp_tuple_unpack_13__source_iter = NULL;
    {
        PyObject *tmp_assign_source_399;
        CHECK_OBJECT(tmp_tuple_unpack_13__element_1);
        tmp_assign_source_399 = tmp_tuple_unpack_13__element_1;
        {
            PyObject *old = var_name;
            var_name = tmp_assign_source_399;
            Py_INCREF(var_name);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_13__element_1);
    tmp_tuple_unpack_13__element_1 = NULL;

    {
        PyObject *tmp_assign_source_400;
        CHECK_OBJECT(tmp_tuple_unpack_13__element_2);
        tmp_assign_source_400 = tmp_tuple_unpack_13__element_2;
        {
            PyObject *old = var_conv;
            var_conv = tmp_assign_source_400;
            Py_INCREF(var_conv);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_13__element_2);
    tmp_tuple_unpack_13__element_2 = NULL;

    {
        PyObject *tmp_assign_source_401;
        // Tried code:
        {
            PyObject *tmp_assign_source_402;
            PyObject *tmp_iter_arg_74;
            PyObject *tmp_expression_name_73;
            CHECK_OBJECT(var_conv);
            tmp_expression_name_73 = var_conv;
            tmp_iter_arg_74 = LOOKUP_ATTRIBUTE(tmp_expression_name_73, mod_consts[322]);
            if (tmp_iter_arg_74 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2221;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_160;
            }
            tmp_assign_source_402 = MAKE_ITERATOR(tmp_iter_arg_74);
            Py_DECREF(tmp_iter_arg_74);
            if (tmp_assign_source_402 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2221;
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                goto try_except_handler_160;
            }
            {
                PyObject *old = tmp_listcomp_27__$0;
                tmp_listcomp_27__$0 = tmp_assign_source_402;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_403;
            tmp_assign_source_403 = PyList_New(0);
            {
                PyObject *old = tmp_listcomp_27__contraction;
                tmp_listcomp_27__contraction = tmp_assign_source_403;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_9ff6653e6c9844495bf6f7b83958b910_31)) {
            Py_XDECREF(cache_frame_9ff6653e6c9844495bf6f7b83958b910_31);

#if _DEBUG_REFCOUNTS
            if (cache_frame_9ff6653e6c9844495bf6f7b83958b910_31 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_9ff6653e6c9844495bf6f7b83958b910_31 = MAKE_FUNCTION_FRAME(codeobj_9ff6653e6c9844495bf6f7b83958b910, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_9ff6653e6c9844495bf6f7b83958b910_31->m_type_description == NULL);
        frame_9ff6653e6c9844495bf6f7b83958b910_31 = cache_frame_9ff6653e6c9844495bf6f7b83958b910_31;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_9ff6653e6c9844495bf6f7b83958b910_31);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_9ff6653e6c9844495bf6f7b83958b910_31) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_47:;
        {
            PyObject *tmp_next_source_46;
            PyObject *tmp_assign_source_404;
            CHECK_OBJECT(tmp_listcomp_27__$0);
            tmp_next_source_46 = tmp_listcomp_27__$0;
            tmp_assign_source_404 = ITERATOR_NEXT(tmp_next_source_46);
            if (tmp_assign_source_404 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_47;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 2221;
                    goto try_except_handler_161;
                }
            }

            {
                PyObject *old = tmp_listcomp_27__iter_value_0;
                tmp_listcomp_27__iter_value_0 = tmp_assign_source_404;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_405;
            CHECK_OBJECT(tmp_listcomp_27__iter_value_0);
            tmp_assign_source_405 = tmp_listcomp_27__iter_value_0;
            {
                PyObject *old = outline_29_var__;
                outline_29_var__ = tmp_assign_source_405;
                Py_INCREF(outline_29_var__);
                Py_XDECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_105;
            PyObject *tmp_compexpr_left_66;
            PyObject *tmp_compexpr_right_66;
            PyObject *tmp_tmp_condition_result_105_object_1;
            int tmp_truth_name_40;
            CHECK_OBJECT(outline_29_var__);
            tmp_compexpr_left_66 = outline_29_var__;
            tmp_compexpr_right_66 = mod_consts[180];
            tmp_tmp_condition_result_105_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_66, tmp_compexpr_right_66);
            if (tmp_tmp_condition_result_105_object_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2222;
                type_description_2 = "oo";
                goto try_except_handler_161;
            }
            tmp_truth_name_40 = CHECK_IF_TRUE(tmp_tmp_condition_result_105_object_1);
            if (tmp_truth_name_40 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_tmp_condition_result_105_object_1);

                exception_lineno = 2222;
                type_description_2 = "oo";
                goto try_except_handler_161;
            }
            tmp_condition_result_105 = tmp_truth_name_40 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            Py_DECREF(tmp_tmp_condition_result_105_object_1);
            if (tmp_condition_result_105 == NUITKA_BOOL_TRUE) {
                goto branch_yes_105;
            } else {
                goto branch_no_105;
            }
        }
        branch_yes_105:;
        {
            PyObject *tmp_append_list_29;
            PyObject *tmp_append_value_29;
            PyObject *tmp_called_name_95;
            PyObject *tmp_args_element_name_107;
            CHECK_OBJECT(tmp_listcomp_27__contraction);
            tmp_append_list_29 = tmp_listcomp_27__contraction;
            if (var_conv == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[368]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2221;
                type_description_2 = "oo";
                goto try_except_handler_161;
            }

            tmp_called_name_95 = var_conv;
            CHECK_OBJECT(outline_29_var__);
            tmp_args_element_name_107 = outline_29_var__;
            frame_9ff6653e6c9844495bf6f7b83958b910_31->m_frame.f_lineno = 2221;
            tmp_append_value_29 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_95, tmp_args_element_name_107);
            if (tmp_append_value_29 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2221;
                type_description_2 = "oo";
                goto try_except_handler_161;
            }
            assert(PyList_Check(tmp_append_list_29));
            tmp_result = LIST_APPEND1(tmp_append_list_29, tmp_append_value_29);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2221;
                type_description_2 = "oo";
                goto try_except_handler_161;
            }
        }
        branch_no_105:;
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2221;
            type_description_2 = "oo";
            goto try_except_handler_161;
        }
        goto loop_start_47;
        loop_end_47:;
        CHECK_OBJECT(tmp_listcomp_27__contraction);
        tmp_assign_source_401 = tmp_listcomp_27__contraction;
        Py_INCREF(tmp_assign_source_401);
        goto try_return_handler_161;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_161:;
        CHECK_OBJECT(tmp_listcomp_27__$0);
        Py_DECREF(tmp_listcomp_27__$0);
        tmp_listcomp_27__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_27__contraction);
        Py_DECREF(tmp_listcomp_27__contraction);
        tmp_listcomp_27__contraction = NULL;
        Py_XDECREF(tmp_listcomp_27__iter_value_0);
        tmp_listcomp_27__iter_value_0 = NULL;
        goto frame_return_exit_31;
        // Exception handler code:
        try_except_handler_161:;
        exception_keeper_type_155 = exception_type;
        exception_keeper_value_155 = exception_value;
        exception_keeper_tb_155 = exception_tb;
        exception_keeper_lineno_155 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_27__$0);
        Py_DECREF(tmp_listcomp_27__$0);
        tmp_listcomp_27__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_27__contraction);
        Py_DECREF(tmp_listcomp_27__contraction);
        tmp_listcomp_27__contraction = NULL;
        Py_XDECREF(tmp_listcomp_27__iter_value_0);
        tmp_listcomp_27__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_155;
        exception_value = exception_keeper_value_155;
        exception_tb = exception_keeper_tb_155;
        exception_lineno = exception_keeper_lineno_155;

        goto frame_exception_exit_31;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9ff6653e6c9844495bf6f7b83958b910_31);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_30;

        frame_return_exit_31:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_9ff6653e6c9844495bf6f7b83958b910_31);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_160;

        frame_exception_exit_31:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9ff6653e6c9844495bf6f7b83958b910_31);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9ff6653e6c9844495bf6f7b83958b910_31, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9ff6653e6c9844495bf6f7b83958b910_31->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9ff6653e6c9844495bf6f7b83958b910_31, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9ff6653e6c9844495bf6f7b83958b910_31,
            type_description_2,
            outline_29_var__,
            var_conv
        );


        // Release cached frame if used for exception.
        if (frame_9ff6653e6c9844495bf6f7b83958b910_31 == cache_frame_9ff6653e6c9844495bf6f7b83958b910_31) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_9ff6653e6c9844495bf6f7b83958b910_31);
            cache_frame_9ff6653e6c9844495bf6f7b83958b910_31 = NULL;
        }

        assertFrameObject(frame_9ff6653e6c9844495bf6f7b83958b910_31);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_30;

        frame_no_exception_30:;
        goto skip_nested_handling_30;
        nested_frame_exit_30:;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_160;
        skip_nested_handling_30:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_160:;
        Py_XDECREF(outline_29_var__);
        outline_29_var__ = NULL;
        goto outline_result_33;
        // Exception handler code:
        try_except_handler_160:;
        exception_keeper_type_156 = exception_type;
        exception_keeper_value_156 = exception_value;
        exception_keeper_tb_156 = exception_tb;
        exception_keeper_lineno_156 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_29_var__);
        outline_29_var__ = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_156;
        exception_value = exception_keeper_value_156;
        exception_tb = exception_keeper_tb_156;
        exception_lineno = exception_keeper_lineno_156;

        goto outline_exception_30;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_30:;
        exception_lineno = 2221;
        goto try_except_handler_157;
        outline_result_33:;
        {
            PyObject *old = par_missing_values;
            par_missing_values = tmp_assign_source_401;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_406;
        PyObject *tmp_iter_arg_75;
        CHECK_OBJECT(par_missing_values);
        tmp_iter_arg_75 = par_missing_values;
        tmp_assign_source_406 = MAKE_ITERATOR(tmp_iter_arg_75);
        if (tmp_assign_source_406 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2223;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_157;
        }
        {
            PyObject *old = tmp_for_loop_17__for_iterator;
            tmp_for_loop_17__for_iterator = tmp_assign_source_406;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_48:;
    {
        PyObject *tmp_next_source_47;
        PyObject *tmp_assign_source_407;
        CHECK_OBJECT(tmp_for_loop_17__for_iterator);
        tmp_next_source_47 = tmp_for_loop_17__for_iterator;
        tmp_assign_source_407 = ITERATOR_NEXT(tmp_next_source_47);
        if (tmp_assign_source_407 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_48;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
                exception_lineno = 2223;
                goto try_except_handler_162;
            }
        }

        {
            PyObject *old = tmp_for_loop_17__iter_value;
            tmp_for_loop_17__iter_value = tmp_assign_source_407;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_408;
        CHECK_OBJECT(tmp_for_loop_17__iter_value);
        tmp_assign_source_408 = tmp_for_loop_17__iter_value;
        {
            PyObject *old = var_mval;
            var_mval = tmp_assign_source_408;
            Py_INCREF(var_mval);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_409;
        if (var_outputmask == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[398]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2224;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_162;
        }

        tmp_assign_source_409 = var_outputmask;
        {
            PyObject *old = tmp_inplace_assign_subscr_1__target;
            tmp_inplace_assign_subscr_1__target = tmp_assign_source_409;
            Py_INCREF(tmp_inplace_assign_subscr_1__target);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_410;
        if (var_name == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[399]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2224;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_163;
        }

        tmp_assign_source_410 = var_name;
        {
            PyObject *old = tmp_inplace_assign_subscr_1__subscript;
            tmp_inplace_assign_subscr_1__subscript = tmp_assign_source_410;
            Py_INCREF(tmp_inplace_assign_subscr_1__subscript);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_411;
        PyObject *tmp_expression_name_74;
        PyObject *tmp_subscript_name_17;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
        tmp_expression_name_74 = tmp_inplace_assign_subscr_1__target;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
        tmp_subscript_name_17 = tmp_inplace_assign_subscr_1__subscript;
        tmp_assign_source_411 = LOOKUP_SUBSCRIPT(tmp_expression_name_74, tmp_subscript_name_17);
        if (tmp_assign_source_411 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2224;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_163;
        }
        {
            PyObject *old = tmp_inplace_assign_subscr_1__value;
            tmp_inplace_assign_subscr_1__value = tmp_assign_source_411;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_412;
        PyObject *tmp_left_name_27;
        PyObject *tmp_right_name_27;
        PyObject *tmp_compexpr_left_67;
        PyObject *tmp_compexpr_right_67;
        PyObject *tmp_expression_name_75;
        PyObject *tmp_subscript_name_18;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
        tmp_left_name_27 = tmp_inplace_assign_subscr_1__value;
        if (var_output == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[397]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2224;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_163;
        }

        tmp_expression_name_75 = var_output;
        if (var_name == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[399]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2224;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_163;
        }

        tmp_subscript_name_18 = var_name;
        tmp_compexpr_left_67 = LOOKUP_SUBSCRIPT(tmp_expression_name_75, tmp_subscript_name_18);
        if (tmp_compexpr_left_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2224;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_163;
        }
        CHECK_OBJECT(var_mval);
        tmp_compexpr_right_67 = var_mval;
        tmp_right_name_27 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_67, tmp_compexpr_right_67);
        Py_DECREF(tmp_compexpr_left_67);
        if (tmp_right_name_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2224;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_163;
        }
        tmp_result = BINARY_OPERATION_BITOR_OBJECT_OBJECT_INPLACE(&tmp_left_name_27, tmp_right_name_27);
        Py_DECREF(tmp_right_name_27);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2224;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_163;
        }
        tmp_assign_source_412 = tmp_left_name_27;
        tmp_inplace_assign_subscr_1__value = tmp_assign_source_412;

    }
    {
        PyObject *tmp_ass_subvalue_7;
        PyObject *tmp_ass_subscribed_7;
        PyObject *tmp_ass_subscript_7;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
        tmp_ass_subvalue_7 = tmp_inplace_assign_subscr_1__value;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
        tmp_ass_subscribed_7 = tmp_inplace_assign_subscr_1__target;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
        tmp_ass_subscript_7 = tmp_inplace_assign_subscr_1__subscript;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_7, tmp_ass_subscript_7, tmp_ass_subvalue_7);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2224;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto try_except_handler_163;
        }
    }
    goto try_end_90;
    // Exception handler code:
    try_except_handler_163:;
    exception_keeper_type_157 = exception_type;
    exception_keeper_value_157 = exception_value;
    exception_keeper_tb_157 = exception_tb;
    exception_keeper_lineno_157 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
    Py_DECREF(tmp_inplace_assign_subscr_1__target);
    tmp_inplace_assign_subscr_1__target = NULL;
    Py_XDECREF(tmp_inplace_assign_subscr_1__subscript);
    tmp_inplace_assign_subscr_1__subscript = NULL;
    Py_XDECREF(tmp_inplace_assign_subscr_1__value);
    tmp_inplace_assign_subscr_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_157;
    exception_value = exception_keeper_value_157;
    exception_tb = exception_keeper_tb_157;
    exception_lineno = exception_keeper_lineno_157;

    goto try_except_handler_162;
    // End of try:
    try_end_90:;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
    Py_DECREF(tmp_inplace_assign_subscr_1__target);
    tmp_inplace_assign_subscr_1__target = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
    Py_DECREF(tmp_inplace_assign_subscr_1__subscript);
    tmp_inplace_assign_subscr_1__subscript = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
    Py_DECREF(tmp_inplace_assign_subscr_1__value);
    tmp_inplace_assign_subscr_1__value = NULL;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2223;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_162;
    }
    goto loop_start_48;
    loop_end_48:;
    goto try_end_91;
    // Exception handler code:
    try_except_handler_162:;
    exception_keeper_type_158 = exception_type;
    exception_keeper_value_158 = exception_value;
    exception_keeper_tb_158 = exception_tb;
    exception_keeper_lineno_158 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_17__iter_value);
    tmp_for_loop_17__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_17__for_iterator);
    Py_DECREF(tmp_for_loop_17__for_iterator);
    tmp_for_loop_17__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_158;
    exception_value = exception_keeper_value_158;
    exception_tb = exception_keeper_tb_158;
    exception_lineno = exception_keeper_lineno_158;

    goto try_except_handler_157;
    // End of try:
    try_end_91:;
    Py_XDECREF(tmp_for_loop_17__iter_value);
    tmp_for_loop_17__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_17__for_iterator);
    Py_DECREF(tmp_for_loop_17__for_iterator);
    tmp_for_loop_17__for_iterator = NULL;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2220;
        type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
        goto try_except_handler_157;
    }
    goto loop_start_46;
    loop_end_46:;
    goto try_end_92;
    // Exception handler code:
    try_except_handler_157:;
    exception_keeper_type_159 = exception_type;
    exception_keeper_value_159 = exception_value;
    exception_keeper_tb_159 = exception_tb;
    exception_keeper_lineno_159 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_16__iter_value);
    tmp_for_loop_16__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_16__for_iterator);
    Py_DECREF(tmp_for_loop_16__for_iterator);
    tmp_for_loop_16__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_159;
    exception_value = exception_keeper_value_159;
    exception_tb = exception_keeper_tb_159;
    exception_lineno = exception_keeper_lineno_159;

    goto frame_exception_exit_1;
    // End of try:
    try_end_92:;
    Py_XDECREF(tmp_for_loop_16__iter_value);
    tmp_for_loop_16__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_16__for_iterator);
    Py_DECREF(tmp_for_loop_16__for_iterator);
    tmp_for_loop_16__for_iterator = NULL;
    branch_no_104:;
    {
        nuitka_bool tmp_condition_result_106;
        int tmp_truth_name_41;
        if (par_usemask == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[346]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2226;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_41 = CHECK_IF_TRUE(par_usemask);
        if (tmp_truth_name_41 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2226;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_106 = tmp_truth_name_41 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_106 == NUITKA_BOOL_TRUE) {
            goto branch_yes_106;
        } else {
            goto branch_no_106;
        }
    }
    branch_yes_106:;
    {
        PyObject *tmp_assign_source_413;
        PyObject *tmp_called_name_96;
        PyObject *tmp_expression_name_76;
        PyObject *tmp_args_element_name_108;
        if (var_output == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[397]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2227;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_76 = var_output;
        tmp_called_name_96 = LOOKUP_ATTRIBUTE(tmp_expression_name_76, mod_consts[392]);
        if (tmp_called_name_96 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2227;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (var_MaskedArray == NULL) {
            Py_DECREF(tmp_called_name_96);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[303]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2227;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_108 = var_MaskedArray;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2227;
        tmp_assign_source_413 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_96, tmp_args_element_name_108);
        Py_DECREF(tmp_called_name_96);
        if (tmp_assign_source_413 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2227;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_output;
            var_output = tmp_assign_source_413;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        if (var_outputmask == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[398]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2228;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_value_2 = var_outputmask;
        CHECK_OBJECT(var_output);
        tmp_assattr_target_2 = var_output;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[400], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2228;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_no_106:;
    {
        nuitka_bool tmp_condition_result_107;
        int tmp_truth_name_42;
        CHECK_OBJECT(par_unpack);
        tmp_truth_name_42 = CHECK_IF_TRUE(par_unpack);
        if (tmp_truth_name_42 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2229;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_107 = tmp_truth_name_42 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_107 == NUITKA_BOOL_TRUE) {
            goto branch_yes_107;
        } else {
            goto branch_no_107;
        }
    }
    branch_yes_107:;
    {
        PyObject *tmp_expression_name_77;
        PyObject *tmp_called_instance_28;
        if (var_output == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[397]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2230;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_28 = var_output;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2230;
        tmp_expression_name_77 = CALL_METHOD_NO_ARGS(tmp_called_instance_28, mod_consts[206]);
        if (tmp_expression_name_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2230;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_name_77, mod_consts[210]);
        Py_DECREF(tmp_expression_name_77);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2230;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_no_107:;
    {
        PyObject *tmp_called_instance_29;
        if (var_output == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[397]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2231;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_29 = var_output;
        frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame.f_lineno = 2231;
        tmp_return_value = CALL_METHOD_NO_ARGS(tmp_called_instance_29, mod_consts[206]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2231;
            type_description_1 = "oooooooooooooooooooooooooobooooocooooooooooooooooooooooooooooooooooooooooocooooooooooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_37c571cd74ad2fdf61d5caff50be6f52);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_31;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_37c571cd74ad2fdf61d5caff50be6f52);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_37c571cd74ad2fdf61d5caff50be6f52);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_37c571cd74ad2fdf61d5caff50be6f52, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_37c571cd74ad2fdf61d5caff50be6f52->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_37c571cd74ad2fdf61d5caff50be6f52, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_37c571cd74ad2fdf61d5caff50be6f52,
        type_description_1,
        par_fname,
        par_dtype,
        par_comments,
        par_delimiter,
        par_skip_header,
        par_skip_footer,
        par_converters,
        par_missing_values,
        par_filling_values,
        par_usecols,
        par_names,
        par_excludelist,
        par_deletechars,
        par_replace_space,
        par_autostrip,
        par_case_sensitive,
        par_defaultfmt,
        par_unpack,
        par_usemask,
        par_loose,
        par_invalid_raise,
        par_max_rows,
        par_encoding,
        var_MaskedArray,
        var_make_mask_descr,
        var_user_converters,
        (int)var_byte_converters,
        var_fid,
        var_fid_ctx,
        var_fhd,
        var_split_line,
        var_validate_names,
        var_i,
        var_first_values,
        var_first_line,
        var_fval,
        var_nbcols,
        var_current,
        var_descr,
        var_user_missing_values,
        var_key,
        var_val,
        var_miss,
        var_value,
        var_entry,
        var_user_value,
        var_user_filling_values,
        var_n,
        var_dtype_flat,
        var_zipit,
        var_uc_update,
        var_j,
        var_conv,
        var_testing_value,
        var_user_conv,
        var_tobytes_first,
        var_rows,
        var_append_to_rows,
        var_masks,
        var_append_to_masks,
        var_invalid,
        var_append_to_invalid,
        var_line,
        var_values,
        var_nbvalues,
        var_converter,
        var_current_column,
        var_errmsg,
        var_nbinvalid,
        var_nbrows,
        var_template,
        var_nbinvalid_skipped,
        var_data,
        var_column_types,
        var_strcolidx,
        var_encode_unicode_cols,
        var_sized_column_types,
        var_col_type,
        var_n_chars,
        var_base,
        var_uniform_type,
        var_ddtype,
        var_mdtype,
        var_output,
        var_outputmask,
        var_rowmasks,
        var_ishomogeneous,
        var_ttype,
        var_name,
        var_mval
    );


    // Release cached frame if used for exception.
    if (frame_37c571cd74ad2fdf61d5caff50be6f52 == cache_frame_37c571cd74ad2fdf61d5caff50be6f52) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_37c571cd74ad2fdf61d5caff50be6f52);
        cache_frame_37c571cd74ad2fdf61d5caff50be6f52 = NULL;
    }

    assertFrameObject(frame_37c571cd74ad2fdf61d5caff50be6f52);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_31:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_fname);
    par_fname = NULL;
    Py_XDECREF(par_dtype);
    par_dtype = NULL;
    Py_XDECREF(par_skip_footer);
    par_skip_footer = NULL;
    Py_XDECREF(par_converters);
    par_converters = NULL;
    Py_XDECREF(par_missing_values);
    par_missing_values = NULL;
    Py_XDECREF(par_filling_values);
    par_filling_values = NULL;
    Py_XDECREF(par_usecols);
    par_usecols = NULL;
    CHECK_OBJECT(par_names);
    Py_DECREF(par_names);
    par_names = NULL;
    Py_XDECREF(par_encoding);
    par_encoding = NULL;
    Py_XDECREF(var_MaskedArray);
    var_MaskedArray = NULL;
    Py_XDECREF(var_make_mask_descr);
    var_make_mask_descr = NULL;
    Py_XDECREF(var_user_converters);
    var_user_converters = NULL;
    var_byte_converters = NUITKA_BOOL_UNASSIGNED;
    Py_XDECREF(var_fid);
    var_fid = NULL;
    CHECK_OBJECT(var_fid_ctx);
    Py_DECREF(var_fid_ctx);
    var_fid_ctx = NULL;
    Py_XDECREF(var_fhd);
    var_fhd = NULL;
    Py_XDECREF(var_split_line);
    var_split_line = NULL;
    Py_XDECREF(var_validate_names);
    var_validate_names = NULL;
    CHECK_OBJECT(var_i);
    Py_DECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_first_values);
    var_first_values = NULL;
    Py_XDECREF(var_first_line);
    var_first_line = NULL;
    Py_XDECREF(var_fval);
    var_fval = NULL;
    Py_XDECREF(var_nbcols);
    var_nbcols = NULL;
    Py_XDECREF(var_current);
    var_current = NULL;
    Py_XDECREF(var_descr);
    var_descr = NULL;
    Py_XDECREF(var_user_missing_values);
    var_user_missing_values = NULL;
    Py_XDECREF(var_key);
    var_key = NULL;
    Py_XDECREF(var_val);
    var_val = NULL;
    Py_XDECREF(var_miss);
    var_miss = NULL;
    Py_XDECREF(var_value);
    var_value = NULL;
    Py_XDECREF(var_entry);
    var_entry = NULL;
    Py_XDECREF(var_user_value);
    var_user_value = NULL;
    Py_XDECREF(var_user_filling_values);
    var_user_filling_values = NULL;
    Py_XDECREF(var_n);
    var_n = NULL;
    Py_XDECREF(var_dtype_flat);
    var_dtype_flat = NULL;
    Py_XDECREF(var_zipit);
    var_zipit = NULL;
    Py_XDECREF(var_uc_update);
    var_uc_update = NULL;
    Py_XDECREF(var_j);
    var_j = NULL;
    Py_XDECREF(var_conv);
    var_conv = NULL;
    Py_XDECREF(var_testing_value);
    var_testing_value = NULL;
    Py_XDECREF(var_user_conv);
    var_user_conv = NULL;
    Py_XDECREF(var_tobytes_first);
    var_tobytes_first = NULL;
    Py_XDECREF(var_rows);
    var_rows = NULL;
    Py_XDECREF(var_append_to_rows);
    var_append_to_rows = NULL;
    Py_XDECREF(var_masks);
    var_masks = NULL;
    Py_XDECREF(var_append_to_masks);
    var_append_to_masks = NULL;
    Py_XDECREF(var_invalid);
    var_invalid = NULL;
    Py_XDECREF(var_append_to_invalid);
    var_append_to_invalid = NULL;
    Py_XDECREF(var_line);
    var_line = NULL;
    Py_XDECREF(var_values);
    var_values = NULL;
    Py_XDECREF(var_nbvalues);
    var_nbvalues = NULL;
    Py_XDECREF(var_converter);
    var_converter = NULL;
    Py_XDECREF(var_current_column);
    var_current_column = NULL;
    Py_XDECREF(var_errmsg);
    var_errmsg = NULL;
    CHECK_OBJECT(var_nbinvalid);
    Py_DECREF(var_nbinvalid);
    var_nbinvalid = NULL;
    Py_XDECREF(var_nbrows);
    var_nbrows = NULL;
    Py_XDECREF(var_template);
    var_template = NULL;
    Py_XDECREF(var_nbinvalid_skipped);
    var_nbinvalid_skipped = NULL;
    Py_XDECREF(var_data);
    var_data = NULL;
    Py_XDECREF(var_column_types);
    var_column_types = NULL;
    CHECK_OBJECT(var_strcolidx);
    Py_DECREF(var_strcolidx);
    var_strcolidx = NULL;
    Py_XDECREF(var_encode_unicode_cols);
    var_encode_unicode_cols = NULL;
    Py_XDECREF(var_sized_column_types);
    var_sized_column_types = NULL;
    Py_XDECREF(var_col_type);
    var_col_type = NULL;
    Py_XDECREF(var_n_chars);
    var_n_chars = NULL;
    Py_XDECREF(var_base);
    var_base = NULL;
    Py_XDECREF(var_uniform_type);
    var_uniform_type = NULL;
    Py_XDECREF(var_ddtype);
    var_ddtype = NULL;
    Py_XDECREF(var_mdtype);
    var_mdtype = NULL;
    Py_XDECREF(var_output);
    var_output = NULL;
    Py_XDECREF(var_outputmask);
    var_outputmask = NULL;
    Py_XDECREF(var_rowmasks);
    var_rowmasks = NULL;
    Py_XDECREF(var_ishomogeneous);
    var_ishomogeneous = NULL;
    Py_XDECREF(var_ttype);
    var_ttype = NULL;
    Py_XDECREF(var_name);
    var_name = NULL;
    Py_XDECREF(var_mval);
    var_mval = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_160 = exception_type;
    exception_keeper_value_160 = exception_value;
    exception_keeper_tb_160 = exception_tb;
    exception_keeper_lineno_160 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_fname);
    par_fname = NULL;
    Py_XDECREF(par_dtype);
    par_dtype = NULL;
    Py_XDECREF(par_skip_footer);
    par_skip_footer = NULL;
    Py_XDECREF(par_converters);
    par_converters = NULL;
    Py_XDECREF(par_missing_values);
    par_missing_values = NULL;
    Py_XDECREF(par_filling_values);
    par_filling_values = NULL;
    Py_XDECREF(par_usecols);
    par_usecols = NULL;
    Py_XDECREF(par_names);
    par_names = NULL;
    Py_XDECREF(par_encoding);
    par_encoding = NULL;
    Py_XDECREF(var_MaskedArray);
    var_MaskedArray = NULL;
    Py_XDECREF(var_make_mask_descr);
    var_make_mask_descr = NULL;
    Py_XDECREF(var_user_converters);
    var_user_converters = NULL;
    var_byte_converters = NUITKA_BOOL_UNASSIGNED;
    Py_XDECREF(var_fid);
    var_fid = NULL;
    Py_XDECREF(var_fid_ctx);
    var_fid_ctx = NULL;
    Py_XDECREF(var_fhd);
    var_fhd = NULL;
    Py_XDECREF(var_split_line);
    var_split_line = NULL;
    Py_XDECREF(var_validate_names);
    var_validate_names = NULL;
    CHECK_OBJECT(var_i);
    Py_DECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_first_values);
    var_first_values = NULL;
    Py_XDECREF(var_first_line);
    var_first_line = NULL;
    Py_XDECREF(var_fval);
    var_fval = NULL;
    Py_XDECREF(var_nbcols);
    var_nbcols = NULL;
    Py_XDECREF(var_current);
    var_current = NULL;
    Py_XDECREF(var_descr);
    var_descr = NULL;
    Py_XDECREF(var_user_missing_values);
    var_user_missing_values = NULL;
    Py_XDECREF(var_key);
    var_key = NULL;
    Py_XDECREF(var_val);
    var_val = NULL;
    Py_XDECREF(var_miss);
    var_miss = NULL;
    Py_XDECREF(var_value);
    var_value = NULL;
    Py_XDECREF(var_entry);
    var_entry = NULL;
    Py_XDECREF(var_user_value);
    var_user_value = NULL;
    Py_XDECREF(var_user_filling_values);
    var_user_filling_values = NULL;
    Py_XDECREF(var_n);
    var_n = NULL;
    Py_XDECREF(var_dtype_flat);
    var_dtype_flat = NULL;
    Py_XDECREF(var_zipit);
    var_zipit = NULL;
    Py_XDECREF(var_uc_update);
    var_uc_update = NULL;
    Py_XDECREF(var_j);
    var_j = NULL;
    Py_XDECREF(var_conv);
    var_conv = NULL;
    Py_XDECREF(var_testing_value);
    var_testing_value = NULL;
    Py_XDECREF(var_user_conv);
    var_user_conv = NULL;
    Py_XDECREF(var_tobytes_first);
    var_tobytes_first = NULL;
    Py_XDECREF(var_rows);
    var_rows = NULL;
    Py_XDECREF(var_append_to_rows);
    var_append_to_rows = NULL;
    Py_XDECREF(var_masks);
    var_masks = NULL;
    Py_XDECREF(var_append_to_masks);
    var_append_to_masks = NULL;
    Py_XDECREF(var_invalid);
    var_invalid = NULL;
    Py_XDECREF(var_append_to_invalid);
    var_append_to_invalid = NULL;
    Py_XDECREF(var_line);
    var_line = NULL;
    Py_XDECREF(var_values);
    var_values = NULL;
    Py_XDECREF(var_nbvalues);
    var_nbvalues = NULL;
    Py_XDECREF(var_converter);
    var_converter = NULL;
    Py_XDECREF(var_current_column);
    var_current_column = NULL;
    Py_XDECREF(var_errmsg);
    var_errmsg = NULL;
    Py_XDECREF(var_nbinvalid);
    var_nbinvalid = NULL;
    Py_XDECREF(var_nbrows);
    var_nbrows = NULL;
    Py_XDECREF(var_template);
    var_template = NULL;
    Py_XDECREF(var_nbinvalid_skipped);
    var_nbinvalid_skipped = NULL;
    Py_XDECREF(var_data);
    var_data = NULL;
    Py_XDECREF(var_column_types);
    var_column_types = NULL;
    CHECK_OBJECT(var_strcolidx);
    Py_DECREF(var_strcolidx);
    var_strcolidx = NULL;
    Py_XDECREF(var_encode_unicode_cols);
    var_encode_unicode_cols = NULL;
    Py_XDECREF(var_sized_column_types);
    var_sized_column_types = NULL;
    Py_XDECREF(var_col_type);
    var_col_type = NULL;
    Py_XDECREF(var_n_chars);
    var_n_chars = NULL;
    Py_XDECREF(var_base);
    var_base = NULL;
    Py_XDECREF(var_uniform_type);
    var_uniform_type = NULL;
    Py_XDECREF(var_ddtype);
    var_ddtype = NULL;
    Py_XDECREF(var_mdtype);
    var_mdtype = NULL;
    Py_XDECREF(var_output);
    var_output = NULL;
    Py_XDECREF(var_outputmask);
    var_outputmask = NULL;
    Py_XDECREF(var_rowmasks);
    var_rowmasks = NULL;
    Py_XDECREF(var_ishomogeneous);
    var_ishomogeneous = NULL;
    Py_XDECREF(var_ttype);
    var_ttype = NULL;
    Py_XDECREF(var_name);
    var_name = NULL;
    Py_XDECREF(var_mval);
    var_mval = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_160;
    exception_value = exception_keeper_value_160;
    exception_tb = exception_keeper_tb_160;
    exception_lineno = exception_keeper_lineno_160;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_comments);
    Py_DECREF(par_comments);
    CHECK_OBJECT(par_delimiter);
    Py_DECREF(par_delimiter);
    CHECK_OBJECT(par_skip_header);
    Py_DECREF(par_skip_header);
    CHECK_OBJECT(par_excludelist);
    Py_DECREF(par_excludelist);
    CHECK_OBJECT(par_deletechars);
    Py_DECREF(par_deletechars);
    CHECK_OBJECT(par_replace_space);
    Py_DECREF(par_replace_space);
    CHECK_OBJECT(par_autostrip);
    Py_DECREF(par_autostrip);
    CHECK_OBJECT(par_case_sensitive);
    Py_DECREF(par_case_sensitive);
    CHECK_OBJECT(par_defaultfmt);
    Py_DECREF(par_defaultfmt);
    CHECK_OBJECT(par_unpack);
    Py_DECREF(par_unpack);
    CHECK_OBJECT(par_usemask);
    Py_DECREF(par_usemask);
    CHECK_OBJECT(par_loose);
    Py_DECREF(par_loose);
    CHECK_OBJECT(par_invalid_raise);
    Py_DECREF(par_invalid_raise);
    CHECK_OBJECT(par_max_rows);
    Py_DECREF(par_max_rows);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_comments);
    Py_DECREF(par_comments);
    CHECK_OBJECT(par_delimiter);
    Py_DECREF(par_delimiter);
    CHECK_OBJECT(par_skip_header);
    Py_DECREF(par_skip_header);
    CHECK_OBJECT(par_excludelist);
    Py_DECREF(par_excludelist);
    CHECK_OBJECT(par_deletechars);
    Py_DECREF(par_deletechars);
    CHECK_OBJECT(par_replace_space);
    Py_DECREF(par_replace_space);
    CHECK_OBJECT(par_autostrip);
    Py_DECREF(par_autostrip);
    CHECK_OBJECT(par_case_sensitive);
    Py_DECREF(par_case_sensitive);
    CHECK_OBJECT(par_defaultfmt);
    Py_DECREF(par_defaultfmt);
    CHECK_OBJECT(par_unpack);
    Py_DECREF(par_unpack);
    CHECK_OBJECT(par_usemask);
    Py_DECREF(par_usemask);
    CHECK_OBJECT(par_loose);
    Py_DECREF(par_loose);
    CHECK_OBJECT(par_invalid_raise);
    Py_DECREF(par_invalid_raise);
    CHECK_OBJECT(par_max_rows);
    Py_DECREF(par_max_rows);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__29_genfromtxt$$$function__1_tobytes_first(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[0];
    PyObject *par_conv = python_pars[1];
    struct Nuitka_FrameObject *frame_05b48e1fba59274dcc27baf4f70e40a7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_05b48e1fba59274dcc27baf4f70e40a7 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_05b48e1fba59274dcc27baf4f70e40a7)) {
        Py_XDECREF(cache_frame_05b48e1fba59274dcc27baf4f70e40a7);

#if _DEBUG_REFCOUNTS
        if (cache_frame_05b48e1fba59274dcc27baf4f70e40a7 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_05b48e1fba59274dcc27baf4f70e40a7 = MAKE_FUNCTION_FRAME(codeobj_05b48e1fba59274dcc27baf4f70e40a7, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_05b48e1fba59274dcc27baf4f70e40a7->m_type_description == NULL);
    frame_05b48e1fba59274dcc27baf4f70e40a7 = cache_frame_05b48e1fba59274dcc27baf4f70e40a7;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_05b48e1fba59274dcc27baf4f70e40a7);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_05b48e1fba59274dcc27baf4f70e40a7) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_type_arg_1;
        CHECK_OBJECT(par_x);
        tmp_type_arg_1 = par_x;
        tmp_compexpr_left_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        assert(!(tmp_compexpr_left_1 == NULL));
        tmp_compexpr_right_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[142]);

        if (unlikely(tmp_compexpr_right_1 == NULL)) {
            tmp_compexpr_right_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
        }

        if (tmp_compexpr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_1);

            exception_lineno = 1985;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_compexpr_left_1 == tmp_compexpr_right_1) ? true : false;
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(par_conv);
        tmp_called_name_1 = par_conv;
        CHECK_OBJECT(par_x);
        tmp_args_element_name_1 = par_x;
        frame_05b48e1fba59274dcc27baf4f70e40a7->m_frame.f_lineno = 1986;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1986;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_conv);
        tmp_called_name_2 = par_conv;
        CHECK_OBJECT(par_x);
        tmp_called_instance_1 = par_x;
        frame_05b48e1fba59274dcc27baf4f70e40a7->m_frame.f_lineno = 1987;
        tmp_args_element_name_2 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_1,
            mod_consts[242],
            PyTuple_GET_ITEM(mod_consts[243], 0)
        );

        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1987;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_05b48e1fba59274dcc27baf4f70e40a7->m_frame.f_lineno = 1987;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1987;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_05b48e1fba59274dcc27baf4f70e40a7);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_05b48e1fba59274dcc27baf4f70e40a7);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_05b48e1fba59274dcc27baf4f70e40a7);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_05b48e1fba59274dcc27baf4f70e40a7, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_05b48e1fba59274dcc27baf4f70e40a7->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_05b48e1fba59274dcc27baf4f70e40a7, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_05b48e1fba59274dcc27baf4f70e40a7,
        type_description_1,
        par_x,
        par_conv
    );


    // Release cached frame if used for exception.
    if (frame_05b48e1fba59274dcc27baf4f70e40a7 == cache_frame_05b48e1fba59274dcc27baf4f70e40a7) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_05b48e1fba59274dcc27baf4f70e40a7);
        cache_frame_05b48e1fba59274dcc27baf4f70e40a7 = NULL;
    }

    assertFrameObject(frame_05b48e1fba59274dcc27baf4f70e40a7);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_conv);
    Py_DECREF(par_conv);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_conv);
    Py_DECREF(par_conv);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__29_genfromtxt$$$function__2_encode_unicode_cols(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_row_tup = python_pars[0];
    PyObject *var_row = NULL;
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_ba2dede22eeff7087921b6a053f7afe5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_ba2dede22eeff7087921b6a053f7afe5 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_ba2dede22eeff7087921b6a053f7afe5)) {
        Py_XDECREF(cache_frame_ba2dede22eeff7087921b6a053f7afe5);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ba2dede22eeff7087921b6a053f7afe5 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ba2dede22eeff7087921b6a053f7afe5 = MAKE_FUNCTION_FRAME(codeobj_ba2dede22eeff7087921b6a053f7afe5, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ba2dede22eeff7087921b6a053f7afe5->m_type_description == NULL);
    frame_ba2dede22eeff7087921b6a053f7afe5 = cache_frame_ba2dede22eeff7087921b6a053f7afe5;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ba2dede22eeff7087921b6a053f7afe5);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ba2dede22eeff7087921b6a053f7afe5) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_list_arg_1;
        CHECK_OBJECT(par_row_tup);
        tmp_list_arg_1 = par_row_tup;
        tmp_assign_source_1 = MAKE_LIST(tmp_list_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2119;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        assert(var_row == NULL);
        var_row = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[402]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2120;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }

        tmp_iter_arg_1 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_assign_source_2 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2120;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_3 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooc";
                exception_lineno = 2120;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_4 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_4;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        if (var_row == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[403]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2121;
            type_description_1 = "oooc";
            goto try_except_handler_2;
        }

        tmp_expression_name_1 = var_row;
        CHECK_OBJECT(var_i);
        tmp_subscript_name_1 = var_i;
        tmp_called_instance_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_1, tmp_subscript_name_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2121;
            type_description_1 = "oooc";
            goto try_except_handler_2;
        }
        frame_ba2dede22eeff7087921b6a053f7afe5->m_frame.f_lineno = 2121;
        tmp_ass_subvalue_1 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_1,
            mod_consts[242],
            PyTuple_GET_ITEM(mod_consts[243], 0)
        );

        Py_DECREF(tmp_called_instance_1);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2121;
            type_description_1 = "oooc";
            goto try_except_handler_2;
        }
        if (var_row == NULL) {
            Py_DECREF(tmp_ass_subvalue_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[403]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2121;
            type_description_1 = "oooc";
            goto try_except_handler_2;
        }

        tmp_ass_subscribed_1 = var_row;
        CHECK_OBJECT(var_i);
        tmp_ass_subscript_1 = var_i;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2121;
            type_description_1 = "oooc";
            goto try_except_handler_2;
        }
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2120;
        type_description_1 = "oooc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        PyObject *tmp_tuple_arg_1;
        if (var_row == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[403]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2122;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }

        tmp_tuple_arg_1 = var_row;
        tmp_return_value = PySequence_Tuple(tmp_tuple_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2122;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ba2dede22eeff7087921b6a053f7afe5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_ba2dede22eeff7087921b6a053f7afe5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ba2dede22eeff7087921b6a053f7afe5);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ba2dede22eeff7087921b6a053f7afe5, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ba2dede22eeff7087921b6a053f7afe5->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ba2dede22eeff7087921b6a053f7afe5, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ba2dede22eeff7087921b6a053f7afe5,
        type_description_1,
        par_row_tup,
        var_row,
        var_i,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_ba2dede22eeff7087921b6a053f7afe5 == cache_frame_ba2dede22eeff7087921b6a053f7afe5) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ba2dede22eeff7087921b6a053f7afe5);
        cache_frame_ba2dede22eeff7087921b6a053f7afe5 = NULL;
    }

    assertFrameObject(frame_ba2dede22eeff7087921b6a053f7afe5);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_row);
    var_row = NULL;
    Py_XDECREF(var_i);
    var_i = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_row);
    var_row = NULL;
    Py_XDECREF(var_i);
    var_i = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_row_tup);
    Py_DECREF(par_row_tup);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_row_tup);
    Py_DECREF(par_row_tup);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__1_genexpr_locals {
    PyObject *var_row;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__1_genexpr_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

    // Heap access if used.
    struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__1_genexpr_locals *generator_heap = (struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_row = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_765937b408da8e9ac56369f215dfdacb, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 0x340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(Nuitka_Cell_GET(generator->m_closure[0]));
        tmp_next_source_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "Noc";
                generator_heap->exception_lineno = 2136;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_row;
            generator_heap->var_row = tmp_assign_source_2;
            Py_INCREF(generator_heap->var_row);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_subscript_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT(generator_heap->var_row);
        tmp_expression_name_2 = generator_heap->var_row;
        if (Nuitka_Cell_GET(generator->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[337]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 2136;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_subscript_name_1 = Nuitka_Cell_GET(generator->m_closure[1]);
        tmp_len_arg_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_2, tmp_subscript_name_1);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 2136;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_expression_name_1 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 2136;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_len_arg_1, sizeof(PyObject *), &tmp_expression_name_2, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_len_arg_1, sizeof(PyObject *), &tmp_expression_name_2, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 2136;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 2136;
        generator_heap->type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_row,
            generator->m_closure[1]
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_row);
    generator_heap->var_row = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    Py_XDECREF(generator_heap->var_row);
    generator_heap->var_row = NULL;


    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__1_genexpr_context,
        module_numpy$lib$npyio,
        mod_consts[214],
#if PYTHON_VERSION >= 0x350
        mod_consts[404],
#endif
        codeobj_765937b408da8e9ac56369f215dfdacb,
        closure,
        2,
        sizeof(struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__1_genexpr_locals)
    );
}



struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__2_genexpr_locals {
    PyObject *var__;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__2_genexpr_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

    // Heap access if used.
    struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__2_genexpr_locals *generator_heap = (struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__2_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var__ = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_aecb38f380049df4021c82a7fb2953ed, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 0x340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(Nuitka_Cell_GET(generator->m_closure[0]));
        tmp_next_source_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 2170;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var__;
            generator_heap->var__ = tmp_assign_source_2;
            Py_INCREF(generator_heap->var__);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_expression_name_2;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT(generator_heap->var__);
        tmp_expression_name_2 = generator_heap->var__;
        tmp_expression_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[405]);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 2170;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_expression_name_2, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_expression_name_2, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 2170;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 2170;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var__
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var__);
    generator_heap->var__ = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    Py_XDECREF(generator_heap->var__);
    generator_heap->var__ = NULL;


    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__2_genexpr(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__2_genexpr_context,
        module_numpy$lib$npyio,
        mod_consts[214],
#if PYTHON_VERSION >= 0x350
        mod_consts[404],
#endif
        codeobj_aecb38f380049df4021c82a7fb2953ed,
        closure,
        1,
        sizeof(struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__2_genexpr_locals)
    );
}



struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__3_genexpr_locals {
    PyObject *var_row;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__3_genexpr_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

    // Heap access if used.
    struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__3_genexpr_locals *generator_heap = (struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__3_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_row = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_18f089b2e232bbceeb135ddf9d7224da, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 0x340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(Nuitka_Cell_GET(generator->m_closure[0]));
        tmp_next_source_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "Noc";
                generator_heap->exception_lineno = 2197;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_row;
            generator_heap->var_row = tmp_assign_source_2;
            Py_INCREF(generator_heap->var_row);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_subscript_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT(generator_heap->var_row);
        tmp_expression_name_2 = generator_heap->var_row;
        if (Nuitka_Cell_GET(generator->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[337]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 2197;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_subscript_name_1 = Nuitka_Cell_GET(generator->m_closure[1]);
        tmp_len_arg_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_2, tmp_subscript_name_1);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 2197;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_expression_name_1 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 2197;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_len_arg_1, sizeof(PyObject *), &tmp_expression_name_2, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_len_arg_1, sizeof(PyObject *), &tmp_expression_name_2, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 2197;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 2197;
        generator_heap->type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_row,
            generator->m_closure[1]
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_row);
    generator_heap->var_row = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    Py_XDECREF(generator_heap->var_row);
    generator_heap->var_row = NULL;


    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__3_genexpr(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__3_genexpr_context,
        module_numpy$lib$npyio,
        mod_consts[214],
#if PYTHON_VERSION >= 0x350
        mod_consts[404],
#endif
        codeobj_18f089b2e232bbceeb135ddf9d7224da,
        closure,
        2,
        sizeof(struct numpy$lib$npyio$$$function__29_genfromtxt$$$genexpr__3_genexpr_locals)
    );
}


static PyObject *impl_numpy$lib$npyio$$$function__30_ndfromtxt(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_fname = python_pars[0];
    PyObject *par_kwargs = python_pars[1];
    struct Nuitka_FrameObject *frame_aaf06535c32f5efde0120eb452965a3f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_aaf06535c32f5efde0120eb452965a3f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_aaf06535c32f5efde0120eb452965a3f)) {
        Py_XDECREF(cache_frame_aaf06535c32f5efde0120eb452965a3f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_aaf06535c32f5efde0120eb452965a3f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_aaf06535c32f5efde0120eb452965a3f = MAKE_FUNCTION_FRAME(codeobj_aaf06535c32f5efde0120eb452965a3f, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_aaf06535c32f5efde0120eb452965a3f->m_type_description == NULL);
    frame_aaf06535c32f5efde0120eb452965a3f = cache_frame_aaf06535c32f5efde0120eb452965a3f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_aaf06535c32f5efde0120eb452965a3f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_aaf06535c32f5efde0120eb452965a3f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        tmp_ass_subvalue_1 = Py_False;
        CHECK_OBJECT(par_kwargs);
        tmp_ass_subscribed_1 = par_kwargs;
        tmp_ass_subscript_1 = mod_consts[346];
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2253;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_name_1;
        tmp_expression_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_name_1 == NULL)) {
            tmp_expression_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2255;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[1]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2255;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = mod_consts[406];
        tmp_args_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_name_1, 0, tmp_tuple_element_1);
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[3]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[3]);
        }

        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2258;
            type_description_1 = "oo";
            goto tuple_build_exception_1;
        }
        PyTuple_SET_ITEM0(tmp_args_name_1, 1, tmp_tuple_element_1);
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_name_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_kwargs_name_1 = PyDict_Copy(mod_consts[4]);
        frame_aaf06535c32f5efde0120eb452965a3f->m_frame.f_lineno = 2255;
        tmp_call_result_1 = CALL_FUNCTION(tmp_called_name_1, tmp_args_name_1, tmp_kwargs_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kwargs_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2255;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_dircall_arg3_1;
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[407]);

        if (unlikely(tmp_dircall_arg1_1 == NULL)) {
            tmp_dircall_arg1_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[407]);
        }

        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2259;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_fname);
        tmp_tuple_element_2 = par_fname;
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__3_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2259;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_aaf06535c32f5efde0120eb452965a3f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_aaf06535c32f5efde0120eb452965a3f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_aaf06535c32f5efde0120eb452965a3f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_aaf06535c32f5efde0120eb452965a3f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_aaf06535c32f5efde0120eb452965a3f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_aaf06535c32f5efde0120eb452965a3f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_aaf06535c32f5efde0120eb452965a3f,
        type_description_1,
        par_fname,
        par_kwargs
    );


    // Release cached frame if used for exception.
    if (frame_aaf06535c32f5efde0120eb452965a3f == cache_frame_aaf06535c32f5efde0120eb452965a3f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_aaf06535c32f5efde0120eb452965a3f);
        cache_frame_aaf06535c32f5efde0120eb452965a3f = NULL;
    }

    assertFrameObject(frame_aaf06535c32f5efde0120eb452965a3f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_fname);
    Py_DECREF(par_fname);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_fname);
    Py_DECREF(par_fname);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__31_mafromtxt(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_fname = python_pars[0];
    PyObject *par_kwargs = python_pars[1];
    struct Nuitka_FrameObject *frame_6cce7a0a35abffac4c1dbb76a08284fe;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_6cce7a0a35abffac4c1dbb76a08284fe = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_6cce7a0a35abffac4c1dbb76a08284fe)) {
        Py_XDECREF(cache_frame_6cce7a0a35abffac4c1dbb76a08284fe);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6cce7a0a35abffac4c1dbb76a08284fe == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6cce7a0a35abffac4c1dbb76a08284fe = MAKE_FUNCTION_FRAME(codeobj_6cce7a0a35abffac4c1dbb76a08284fe, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_6cce7a0a35abffac4c1dbb76a08284fe->m_type_description == NULL);
    frame_6cce7a0a35abffac4c1dbb76a08284fe = cache_frame_6cce7a0a35abffac4c1dbb76a08284fe;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_6cce7a0a35abffac4c1dbb76a08284fe);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_6cce7a0a35abffac4c1dbb76a08284fe) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        tmp_ass_subvalue_1 = Py_True;
        CHECK_OBJECT(par_kwargs);
        tmp_ass_subscribed_1 = par_kwargs;
        tmp_ass_subscript_1 = mod_consts[346];
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2281;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_name_1;
        tmp_expression_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_name_1 == NULL)) {
            tmp_expression_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[1]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = mod_consts[409];
        tmp_args_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_name_1, 0, tmp_tuple_element_1);
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[3]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[3]);
        }

        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2286;
            type_description_1 = "oo";
            goto tuple_build_exception_1;
        }
        PyTuple_SET_ITEM0(tmp_args_name_1, 1, tmp_tuple_element_1);
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_name_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_kwargs_name_1 = PyDict_Copy(mod_consts[4]);
        frame_6cce7a0a35abffac4c1dbb76a08284fe->m_frame.f_lineno = 2283;
        tmp_call_result_1 = CALL_FUNCTION(tmp_called_name_1, tmp_args_name_1, tmp_kwargs_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kwargs_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_dircall_arg3_1;
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[407]);

        if (unlikely(tmp_dircall_arg1_1 == NULL)) {
            tmp_dircall_arg1_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[407]);
        }

        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2287;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_fname);
        tmp_tuple_element_2 = par_fname;
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__3_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2287;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6cce7a0a35abffac4c1dbb76a08284fe);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_6cce7a0a35abffac4c1dbb76a08284fe);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6cce7a0a35abffac4c1dbb76a08284fe);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6cce7a0a35abffac4c1dbb76a08284fe, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6cce7a0a35abffac4c1dbb76a08284fe->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6cce7a0a35abffac4c1dbb76a08284fe, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6cce7a0a35abffac4c1dbb76a08284fe,
        type_description_1,
        par_fname,
        par_kwargs
    );


    // Release cached frame if used for exception.
    if (frame_6cce7a0a35abffac4c1dbb76a08284fe == cache_frame_6cce7a0a35abffac4c1dbb76a08284fe) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_6cce7a0a35abffac4c1dbb76a08284fe);
        cache_frame_6cce7a0a35abffac4c1dbb76a08284fe = NULL;
    }

    assertFrameObject(frame_6cce7a0a35abffac4c1dbb76a08284fe);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_fname);
    Py_DECREF(par_fname);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_fname);
    Py_DECREF(par_fname);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__32_recfromtxt(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_fname = python_pars[0];
    PyObject *par_kwargs = python_pars[1];
    PyObject *var_usemask = NULL;
    PyObject *var_output = NULL;
    PyObject *var_MaskedRecords = NULL;
    struct Nuitka_FrameObject *frame_7186bda3fb1f202992f3691a45418b04;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7186bda3fb1f202992f3691a45418b04 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_7186bda3fb1f202992f3691a45418b04)) {
        Py_XDECREF(cache_frame_7186bda3fb1f202992f3691a45418b04);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7186bda3fb1f202992f3691a45418b04 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7186bda3fb1f202992f3691a45418b04 = MAKE_FUNCTION_FRAME(codeobj_7186bda3fb1f202992f3691a45418b04, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7186bda3fb1f202992f3691a45418b04->m_type_description == NULL);
    frame_7186bda3fb1f202992f3691a45418b04 = cache_frame_7186bda3fb1f202992f3691a45418b04;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7186bda3fb1f202992f3691a45418b04);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7186bda3fb1f202992f3691a45418b04) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_kwargs);
        tmp_called_instance_1 = par_kwargs;
        frame_7186bda3fb1f202992f3691a45418b04->m_frame.f_lineno = 2311;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS2(
            tmp_called_instance_1,
            mod_consts[411],
            &PyTuple_GET_ITEM(mod_consts[412], 0)
        );

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2311;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(par_kwargs);
        tmp_called_instance_2 = par_kwargs;
        frame_7186bda3fb1f202992f3691a45418b04->m_frame.f_lineno = 2312;
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(
            tmp_called_instance_2,
            mod_consts[413],
            &PyTuple_GET_ITEM(mod_consts[414], 0)
        );

        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2312;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_usemask == NULL);
        var_usemask = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[407]);

        if (unlikely(tmp_dircall_arg1_1 == NULL)) {
            tmp_dircall_arg1_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[407]);
        }

        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2313;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_fname);
        tmp_tuple_element_1 = par_fname;
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_assign_source_2 = impl___main__$$$function__3_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2313;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_output == NULL);
        var_output = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_usemask);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_usemask);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2314;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_arg_name_1;
        PyObject *tmp_locals_arg_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = mod_consts[415];
        tmp_globals_arg_name_1 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_1 = Py_None;
        tmp_fromlist_name_1 = mod_consts[416];
        tmp_level_name_1 = mod_consts[16];
        frame_7186bda3fb1f202992f3691a45418b04->m_frame.f_lineno = 2315;
        tmp_import_name_from_1 = IMPORT_MODULE5(tmp_name_name_1, tmp_globals_arg_name_1, tmp_locals_arg_name_1, tmp_fromlist_name_1, tmp_level_name_1);
        if (tmp_import_name_from_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2315;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_3 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[417],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_3 = IMPORT_NAME(tmp_import_name_from_1, mod_consts[417]);
        }

        Py_DECREF(tmp_import_name_from_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2315;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_MaskedRecords == NULL);
        var_MaskedRecords = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(var_output);
        tmp_called_instance_3 = var_output;
        CHECK_OBJECT(var_MaskedRecords);
        tmp_args_element_name_1 = var_MaskedRecords;
        frame_7186bda3fb1f202992f3691a45418b04->m_frame.f_lineno = 2316;
        tmp_assign_source_4 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_3, mod_consts[392], tmp_args_element_name_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2316;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_output;
            assert(old != NULL);
            var_output = tmp_assign_source_4;
            Py_DECREF(old);
        }

    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_expression_name_2;
        CHECK_OBJECT(var_output);
        tmp_expression_name_1 = var_output;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[392]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2318;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_name_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_2 == NULL)) {
            tmp_expression_name_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 2318;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[418]);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 2318;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_7186bda3fb1f202992f3691a45418b04->m_frame.f_lineno = 2318;
        tmp_assign_source_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2318;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_output;
            assert(old != NULL);
            var_output = tmp_assign_source_5;
            Py_DECREF(old);
        }

    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7186bda3fb1f202992f3691a45418b04);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7186bda3fb1f202992f3691a45418b04);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7186bda3fb1f202992f3691a45418b04, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7186bda3fb1f202992f3691a45418b04->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7186bda3fb1f202992f3691a45418b04, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7186bda3fb1f202992f3691a45418b04,
        type_description_1,
        par_fname,
        par_kwargs,
        var_usemask,
        var_output,
        var_MaskedRecords
    );


    // Release cached frame if used for exception.
    if (frame_7186bda3fb1f202992f3691a45418b04 == cache_frame_7186bda3fb1f202992f3691a45418b04) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7186bda3fb1f202992f3691a45418b04);
        cache_frame_7186bda3fb1f202992f3691a45418b04 = NULL;
    }

    assertFrameObject(frame_7186bda3fb1f202992f3691a45418b04);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_output);
    tmp_return_value = var_output;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_usemask);
    Py_DECREF(var_usemask);
    var_usemask = NULL;
    CHECK_OBJECT(var_output);
    Py_DECREF(var_output);
    var_output = NULL;
    Py_XDECREF(var_MaskedRecords);
    var_MaskedRecords = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_usemask);
    var_usemask = NULL;
    Py_XDECREF(var_output);
    var_output = NULL;
    Py_XDECREF(var_MaskedRecords);
    var_MaskedRecords = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_fname);
    Py_DECREF(par_fname);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_fname);
    Py_DECREF(par_fname);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numpy$lib$npyio$$$function__33_recfromcsv(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_fname = python_pars[0];
    PyObject *par_kwargs = python_pars[1];
    PyObject *var_output = NULL;
    PyObject *var_usemask = NULL;
    PyObject *var_MaskedRecords = NULL;
    struct Nuitka_FrameObject *frame_c2c52e7e83e73a45f1808a1ef7ce0e20;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c2c52e7e83e73a45f1808a1ef7ce0e20 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_c2c52e7e83e73a45f1808a1ef7ce0e20)) {
        Py_XDECREF(cache_frame_c2c52e7e83e73a45f1808a1ef7ce0e20);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c2c52e7e83e73a45f1808a1ef7ce0e20 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c2c52e7e83e73a45f1808a1ef7ce0e20 = MAKE_FUNCTION_FRAME(codeobj_c2c52e7e83e73a45f1808a1ef7ce0e20, module_numpy$lib$npyio, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c2c52e7e83e73a45f1808a1ef7ce0e20->m_type_description == NULL);
    frame_c2c52e7e83e73a45f1808a1ef7ce0e20 = cache_frame_c2c52e7e83e73a45f1808a1ef7ce0e20;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c2c52e7e83e73a45f1808a1ef7ce0e20);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c2c52e7e83e73a45f1808a1ef7ce0e20) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_kwargs);
        tmp_called_instance_1 = par_kwargs;
        frame_c2c52e7e83e73a45f1808a1ef7ce0e20->m_frame.f_lineno = 2345;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS2(
            tmp_called_instance_1,
            mod_consts[411],
            &PyTuple_GET_ITEM(mod_consts[420], 0)
        );

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2345;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(par_kwargs);
        tmp_called_instance_2 = par_kwargs;
        frame_c2c52e7e83e73a45f1808a1ef7ce0e20->m_frame.f_lineno = 2346;
        tmp_call_result_2 = CALL_METHOD_WITH_ARGS2(
            tmp_called_instance_2,
            mod_consts[411],
            &PyTuple_GET_ITEM(mod_consts[421], 0)
        );

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2346;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(par_kwargs);
        tmp_called_instance_3 = par_kwargs;
        frame_c2c52e7e83e73a45f1808a1ef7ce0e20->m_frame.f_lineno = 2347;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS2(
            tmp_called_instance_3,
            mod_consts[411],
            &PyTuple_GET_ITEM(mod_consts[422], 0)
        );

        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2347;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT(par_kwargs);
        tmp_called_instance_4 = par_kwargs;
        frame_c2c52e7e83e73a45f1808a1ef7ce0e20->m_frame.f_lineno = 2348;
        tmp_call_result_4 = CALL_METHOD_WITH_ARGS2(
            tmp_called_instance_4,
            mod_consts[411],
            &PyTuple_GET_ITEM(mod_consts[412], 0)
        );

        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2348;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[407]);

        if (unlikely(tmp_dircall_arg1_1 == NULL)) {
            tmp_dircall_arg1_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[407]);
        }

        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_fname);
        tmp_tuple_element_1 = par_fname;
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_assign_source_1 = impl___main__$$$function__3_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_output == NULL);
        var_output = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_5;
        CHECK_OBJECT(par_kwargs);
        tmp_called_instance_5 = par_kwargs;
        frame_c2c52e7e83e73a45f1808a1ef7ce0e20->m_frame.f_lineno = 2351;
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2(
            tmp_called_instance_5,
            mod_consts[413],
            &PyTuple_GET_ITEM(mod_consts[414], 0)
        );

        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2351;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_usemask == NULL);
        var_usemask = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_usemask);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_usemask);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2352;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_arg_name_1;
        PyObject *tmp_locals_arg_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = mod_consts[415];
        tmp_globals_arg_name_1 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_1 = Py_None;
        tmp_fromlist_name_1 = mod_consts[416];
        tmp_level_name_1 = mod_consts[16];
        frame_c2c52e7e83e73a45f1808a1ef7ce0e20->m_frame.f_lineno = 2353;
        tmp_import_name_from_1 = IMPORT_MODULE5(tmp_name_name_1, tmp_globals_arg_name_1, tmp_locals_arg_name_1, tmp_fromlist_name_1, tmp_level_name_1);
        if (tmp_import_name_from_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2353;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_3 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[417],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_3 = IMPORT_NAME(tmp_import_name_from_1, mod_consts[417]);
        }

        Py_DECREF(tmp_import_name_from_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2353;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_MaskedRecords == NULL);
        var_MaskedRecords = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(var_output);
        tmp_called_instance_6 = var_output;
        CHECK_OBJECT(var_MaskedRecords);
        tmp_args_element_name_1 = var_MaskedRecords;
        frame_c2c52e7e83e73a45f1808a1ef7ce0e20->m_frame.f_lineno = 2354;
        tmp_assign_source_4 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_6, mod_consts[392], tmp_args_element_name_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2354;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_output;
            assert(old != NULL);
            var_output = tmp_assign_source_4;
            Py_DECREF(old);
        }

    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_expression_name_2;
        CHECK_OBJECT(var_output);
        tmp_expression_name_1 = var_output;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[392]);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2356;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_name_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80]);

        if (unlikely(tmp_expression_name_2 == NULL)) {
            tmp_expression_name_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[80]);
        }

        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 2356;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[418]);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 2356;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_c2c52e7e83e73a45f1808a1ef7ce0e20->m_frame.f_lineno = 2356;
        tmp_assign_source_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2356;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_output;
            assert(old != NULL);
            var_output = tmp_assign_source_5;
            Py_DECREF(old);
        }

    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c2c52e7e83e73a45f1808a1ef7ce0e20);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c2c52e7e83e73a45f1808a1ef7ce0e20);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c2c52e7e83e73a45f1808a1ef7ce0e20, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c2c52e7e83e73a45f1808a1ef7ce0e20->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c2c52e7e83e73a45f1808a1ef7ce0e20, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c2c52e7e83e73a45f1808a1ef7ce0e20,
        type_description_1,
        par_fname,
        par_kwargs,
        var_output,
        var_usemask,
        var_MaskedRecords
    );


    // Release cached frame if used for exception.
    if (frame_c2c52e7e83e73a45f1808a1ef7ce0e20 == cache_frame_c2c52e7e83e73a45f1808a1ef7ce0e20) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c2c52e7e83e73a45f1808a1ef7ce0e20);
        cache_frame_c2c52e7e83e73a45f1808a1ef7ce0e20 = NULL;
    }

    assertFrameObject(frame_c2c52e7e83e73a45f1808a1ef7ce0e20);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_output);
    tmp_return_value = var_output;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_output);
    Py_DECREF(var_output);
    var_output = NULL;
    CHECK_OBJECT(var_usemask);
    Py_DECREF(var_usemask);
    var_usemask = NULL;
    Py_XDECREF(var_MaskedRecords);
    var_MaskedRecords = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_output);
    var_output = NULL;
    Py_XDECREF(var_usemask);
    var_usemask = NULL;
    Py_XDECREF(var_MaskedRecords);
    var_MaskedRecords = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_fname);
    Py_DECREF(par_fname);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_fname);
    Py_DECREF(par_fname);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__10___del__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__10___del__,
        mod_consts[471],
#if PYTHON_VERSION >= 0x300
        mod_consts[472],
#endif
        codeobj_c0c5dbbe0fd544ed06dc9412aad86c8f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__11___iter__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__11___iter__,
        mod_consts[473],
#if PYTHON_VERSION >= 0x300
        mod_consts[474],
#endif
        codeobj_47d627e700780e1989fd5fd5291580ae,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__12___len__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__12___len__,
        mod_consts[475],
#if PYTHON_VERSION >= 0x300
        mod_consts[476],
#endif
        codeobj_a629d174a3f4fa3cf2e6fcc0bede0348,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__13___getitem__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__13___getitem__,
        mod_consts[248],
#if PYTHON_VERSION >= 0x300
        mod_consts[477],
#endif
        codeobj_389e8661c2254f6148e69c3af38b4fa4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__14_iteritems() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__14_iteritems,
        mod_consts[478],
#if PYTHON_VERSION >= 0x300
        mod_consts[479],
#endif
        codeobj_d34269cb64eb2787015745693561dccc,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__15_iterkeys() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__15_iterkeys,
        mod_consts[480],
#if PYTHON_VERSION >= 0x300
        mod_consts[481],
#endif
        codeobj_9c46e5c65a04bfc8afa20496b7316031,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__16_load(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__16_load,
        mod_consts[73],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_26c3fe9c0522cf75662bb6396b138263,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[76],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__17__save_dispatcher(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__17__save_dispatcher,
        mod_consts[484],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_5e65546ee4bb33ac40c77193288d4781,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__18_save(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__18_save,
        mod_consts[486],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_d2d849213ae56d24f52f143da7a11ef1,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[83],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__19__savez_dispatcher() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__19__savez_dispatcher,
        mod_consts[87],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_d65142a1321b1f6d9d79a62b087f5f5c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__1_loads() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__1_loads,
        mod_consts[6],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_bca6b229eeda0db5cbf02ad225770c22,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__20_savez() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__20_savez,
        mod_consts[487],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_c825fe02a5098d57da507b6c66339805,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[89],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__21__savez_compressed_dispatcher() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__21__savez_compressed_dispatcher,
        mod_consts[90],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_bb48e9f3487600a2cd978f63986d8482,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__22_savez_compressed() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__22_savez_compressed,
        mod_consts[488],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_c46307c7a6ef593b39620af49cf4d929,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[91],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__23__savez(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__23__savez,
        mod_consts[88],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_aeff938374d2ce8e69488f8d5b5573a6,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__24__getconv,
        mod_consts[177],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_37c3f47fa3cc68c66959e173197129c9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[136],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__1_floatconv() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__24__getconv$$$function__1_floatconv,
        mod_consts[120],
#if PYTHON_VERSION >= 0x300
        mod_consts[121],
#endif
        codeobj_1a262ad3afd9aea256e84820f76c0c2e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__2_lambda() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__24__getconv$$$function__2_lambda,
        mod_consts[124],
#if PYTHON_VERSION >= 0x300
        mod_consts[125],
#endif
        codeobj_ab6bb12151acad0dbab958cac65dbd5d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__3_lambda() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__24__getconv$$$function__3_lambda,
        mod_consts[124],
#if PYTHON_VERSION >= 0x300
        mod_consts[125],
#endif
        codeobj_495cbc5b8273413aa93dd87da5deab47,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv$$$function__4_lambda() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__24__getconv$$$function__4_lambda,
        mod_consts[124],
#if PYTHON_VERSION >= 0x300
        mod_consts[125],
#endif
        codeobj_a651cadf4e614bba25fb4c85d60d6214,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__25_loadtxt,
        mod_consts[492],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_37c8b7601e04f4296f883e3b07a18f2f,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[212],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__1_flatten_dtype_internal() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__1_flatten_dtype_internal,
        mod_consts[165],
#if PYTHON_VERSION >= 0x300
        mod_consts[166],
#endif
        codeobj_7e71276c952a2d8bf742ad0638b2b627,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[164],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__2_pack_items() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__2_pack_items,
        mod_consts[168],
#if PYTHON_VERSION >= 0x300
        mod_consts[169],
#endif
        codeobj_b4d18fb001a90dd499414d48b77fd0b0,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[167],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__3_split_line(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__3_split_line,
        mod_consts[171],
#if PYTHON_VERSION >= 0x300
        mod_consts[172],
#endif
        codeobj_5367a775332636804cc182b3bd4e1852,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[170],
        closure,
        4
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data,
        mod_consts[174],
#if PYTHON_VERSION >= 0x300
        mod_consts[175],
#endif
        codeobj_37301346538005369406fb049bfd5aa7,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[173],
        closure,
        10
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__5_tobytes_first() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__5_tobytes_first,
        mod_consts[186],
#if PYTHON_VERSION >= 0x300
        mod_consts[187],
#endif
        codeobj_b731066c572840eb56efb7bda1cd137e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt$$$function__6_lambda(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__6_lambda,
        mod_consts[124],
#if PYTHON_VERSION >= 0x300
        mod_consts[192],
#endif
        codeobj_da5318f4e4c63064b0eb10d014c7282c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__26__savetxt_dispatcher(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__26__savetxt_dispatcher,
        mod_consts[494],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_0db72ada574b4afe0cda57bda6621849,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__27_savetxt,
        mod_consts[496],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_1ae4e77edcdc6c9918e5fa6a831d799e,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[289],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__1___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__27_savetxt$$$function__1___init__,
        mod_consts[258],
#if PYTHON_VERSION >= 0x300
        mod_consts[259],
#endif
        codeobj_51c964b522699247064b7acc38fee7c6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__2_close() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__27_savetxt$$$function__2_close,
        mod_consts[35],
#if PYTHON_VERSION >= 0x300
        mod_consts[260],
#endif
        codeobj_d6d98bb061ea83d47c15a67ce1843b33,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__3_write() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__27_savetxt$$$function__3_write,
        mod_consts[77],
#if PYTHON_VERSION >= 0x300
        mod_consts[261],
#endif
        codeobj_e63b9958f8928d9d4d831ae4c8d41e3c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__4_write_bytes() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__27_savetxt$$$function__4_write_bytes,
        mod_consts[262],
#if PYTHON_VERSION >= 0x300
        mod_consts[263],
#endif
        codeobj_4f469ce220d3d4a8e430fc24c476d69a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__5_write_normal() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__27_savetxt$$$function__5_write_normal,
        mod_consts[264],
#if PYTHON_VERSION >= 0x300
        mod_consts[265],
#endif
        codeobj_049731c7a8a148b6349c8849ed44c30e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt$$$function__6_first_write() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__27_savetxt$$$function__6_first_write,
        mod_consts[266],
#if PYTHON_VERSION >= 0x300
        mod_consts[267],
#endif
        codeobj_958559edcfc230371fd60661b971e2eb,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__28_fromregex(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__28_fromregex,
        mod_consts[497],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_7bcdd43aa61ece872390d47a883072f6,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[298],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__29_genfromtxt(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__29_genfromtxt,
        mod_consts[407],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_37c571cd74ad2fdf61d5caff50be6f52,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[401],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__29_genfromtxt$$$function__1_tobytes_first() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__29_genfromtxt$$$function__1_tobytes_first,
        mod_consts[186],
#if PYTHON_VERSION >= 0x300
        mod_consts[336],
#endif
        codeobj_05b48e1fba59274dcc27baf4f70e40a7,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__29_genfromtxt$$$function__2_encode_unicode_cols(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__29_genfromtxt$$$function__2_encode_unicode_cols,
        mod_consts[373],
#if PYTHON_VERSION >= 0x300
        mod_consts[374],
#endif
        codeobj_ba2dede22eeff7087921b6a053f7afe5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__2___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__2___init__,
        mod_consts[258],
#if PYTHON_VERSION >= 0x300
        mod_consts[461],
#endif
        codeobj_6c7bf2e6f982b8a29371bc200df3fb58,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__30_ndfromtxt() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__30_ndfromtxt,
        mod_consts[503],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_aaf06535c32f5efde0120eb452965a3f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[408],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__31_mafromtxt() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__31_mafromtxt,
        mod_consts[504],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_6cce7a0a35abffac4c1dbb76a08284fe,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[410],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__32_recfromtxt() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__32_recfromtxt,
        mod_consts[505],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_7186bda3fb1f202992f3691a45418b04,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[419],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__33_recfromcsv() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__33_recfromcsv,
        mod_consts[506],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_c2c52e7e83e73a45f1808a1ef7ce0e20,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[423],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__3___getattribute__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__3___getattribute__,
        mod_consts[10],
#if PYTHON_VERSION >= 0x300
        mod_consts[462],
#endif
        codeobj_b446a954fd7199c282cd24dd1ae9d1a3,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__4___dir__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__4___dir__,
        mod_consts[463],
#if PYTHON_VERSION >= 0x300
        mod_consts[464],
#endif
        codeobj_4b4acc6bad3ec16fa3e9cd104a247d39,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[12],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__5_zipfile_factory() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__5_zipfile_factory,
        mod_consts[20],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_a2f8a04adc5c1a104d57d1177c308c1d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[19],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__6___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__6___init__,
        mod_consts[258],
#if PYTHON_VERSION >= 0x300
        mod_consts[467],
#endif
        codeobj_bcd6c299a9b1325ffc7dcceca04cf14c,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__7___enter__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__7___enter__,
        mod_consts[55],
#if PYTHON_VERSION >= 0x300
        mod_consts[468],
#endif
        codeobj_39a016bc02cd70d1b9dd734b2a846a54,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__8___exit__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__8___exit__,
        mod_consts[56],
#if PYTHON_VERSION >= 0x300
        mod_consts[469],
#endif
        codeobj_967cc2e4c03bb02f7578e32ad41830db,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$lib$npyio$$$function__9_close() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$lib$npyio$$$function__9_close,
        mod_consts[35],
#if PYTHON_VERSION >= 0x300
        mod_consts[470],
#endif
        codeobj_105ef5b2bcec4239ebbd7031df29a51d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numpy$lib$npyio,
        mod_consts[36],
        NULL,
        0
    );


    return (PyObject *)result;
}


extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill
extern void registerDillPluginTables(char const *module_name, PyMethodDef *reduce_compiled_function, PyMethodDef *create_compiled_function);

function_impl_code functable_numpy$lib$npyio[] = {
    impl_numpy$lib$npyio$$$function__24__getconv$$$function__1_floatconv,
    impl_numpy$lib$npyio$$$function__24__getconv$$$function__2_lambda,
    impl_numpy$lib$npyio$$$function__24__getconv$$$function__3_lambda,
    impl_numpy$lib$npyio$$$function__24__getconv$$$function__4_lambda,
    impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__1_flatten_dtype_internal,
    impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__2_pack_items,
    impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__3_split_line,
    impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__4_read_data,
    impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__5_tobytes_first,
    impl_numpy$lib$npyio$$$function__25_loadtxt$$$function__6_lambda,
    impl_numpy$lib$npyio$$$function__27_savetxt$$$function__1___init__,
    impl_numpy$lib$npyio$$$function__27_savetxt$$$function__2_close,
    impl_numpy$lib$npyio$$$function__27_savetxt$$$function__3_write,
    impl_numpy$lib$npyio$$$function__27_savetxt$$$function__4_write_bytes,
    impl_numpy$lib$npyio$$$function__27_savetxt$$$function__5_write_normal,
    impl_numpy$lib$npyio$$$function__27_savetxt$$$function__6_first_write,
    impl_numpy$lib$npyio$$$function__29_genfromtxt$$$function__1_tobytes_first,
    impl_numpy$lib$npyio$$$function__29_genfromtxt$$$function__2_encode_unicode_cols,
    impl_numpy$lib$npyio$$$function__1_loads,
    impl_numpy$lib$npyio$$$function__2___init__,
    impl_numpy$lib$npyio$$$function__3___getattribute__,
    impl_numpy$lib$npyio$$$function__4___dir__,
    impl_numpy$lib$npyio$$$function__5_zipfile_factory,
    impl_numpy$lib$npyio$$$function__6___init__,
    impl_numpy$lib$npyio$$$function__7___enter__,
    impl_numpy$lib$npyio$$$function__8___exit__,
    impl_numpy$lib$npyio$$$function__9_close,
    impl_numpy$lib$npyio$$$function__10___del__,
    impl_numpy$lib$npyio$$$function__11___iter__,
    impl_numpy$lib$npyio$$$function__12___len__,
    impl_numpy$lib$npyio$$$function__13___getitem__,
    impl_numpy$lib$npyio$$$function__14_iteritems,
    impl_numpy$lib$npyio$$$function__15_iterkeys,
    impl_numpy$lib$npyio$$$function__16_load,
    impl_numpy$lib$npyio$$$function__17__save_dispatcher,
    impl_numpy$lib$npyio$$$function__18_save,
    impl_numpy$lib$npyio$$$function__19__savez_dispatcher,
    impl_numpy$lib$npyio$$$function__20_savez,
    impl_numpy$lib$npyio$$$function__21__savez_compressed_dispatcher,
    impl_numpy$lib$npyio$$$function__22_savez_compressed,
    impl_numpy$lib$npyio$$$function__23__savez,
    impl_numpy$lib$npyio$$$function__24__getconv,
    impl_numpy$lib$npyio$$$function__25_loadtxt,
    impl_numpy$lib$npyio$$$function__26__savetxt_dispatcher,
    impl_numpy$lib$npyio$$$function__27_savetxt,
    impl_numpy$lib$npyio$$$function__28_fromregex,
    impl_numpy$lib$npyio$$$function__29_genfromtxt,
    impl_numpy$lib$npyio$$$function__30_ndfromtxt,
    impl_numpy$lib$npyio$$$function__31_mafromtxt,
    impl_numpy$lib$npyio$$$function__32_recfromtxt,
    impl_numpy$lib$npyio$$$function__33_recfromcsv,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_numpy$lib$npyio;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = PyTuple_New(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = PyTuple_New(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && ERROR_OCCURRED()) {
        return NULL;
    }

    if (offset > sizeof(functable_numpy$lib$npyio) || offset < 0) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!ERROR_OCCURRED());

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!ERROR_OCCURRED());
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!ERROR_OCCURRED());

    PyCodeObject *code_object = MAKE_CODEOBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        argnames,
        NULL, // freevars
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_numpy$lib$npyio[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 0x300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_numpy$lib$npyio,
        doc,
        NULL,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_numpy$lib$npyio(PyObject *module, struct Nuitka_MetaPathBasedLoaderEntry const *loader_entry) {
    module_numpy$lib$npyio = module;

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();

    _initSlotCompare();
#if PYTHON_VERSION >= 0x270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
    PRINT_STRING("numpy.lib.npyio: Calling setupMetaPathBasedLoader().\n");
#endif
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 0x300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    PRINT_STRING("numpy.lib.npyio: Calling createModuleConstants().\n");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    PRINT_STRING("numpy.lib.npyio: Calling createModuleCodeObjects().\n");
#endif
    createModuleCodeObjects();

    // PRINT_STRING("in initnumpy$lib$npyio\n");

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.

    moduledict_numpy$lib$npyio = MODULE_DICT(module_numpy$lib$npyio);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    registerDillPluginTables(loader_entry->name, &_method_def_reduce_compiled_function, &_method_def_create_compiled_function);
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_numpy$lib$npyio,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_numpy$lib$npyio,
            (Nuitka_StringObject *)const_str_plain___package__,
            const_str_empty
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_numpy$lib$npyio,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 0x300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL) {
            UPDATE_STRING_DICT1(
                moduledict_numpy$lib$npyio,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1) {
            UPDATE_STRING_DICT1(
                moduledict_numpy$lib$npyio,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_numpy$lib$npyio);

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL) {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

#if PYTHON_VERSION >= 0x300
    UPDATE_STRING_DICT0(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);
#endif

#if PYTHON_VERSION >= 0x340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = getImportLibBootstrapModule();
        CHECK_OBJECT(bootstrap_module);

        PyObject *_spec_from_module = PyObject_GetAttrString(bootstrap_module, "_spec_from_module");
        CHECK_OBJECT(_spec_from_module);

        PyObject *spec_value = CALL_FUNCTION_WITH_SINGLE_ARG(_spec_from_module, module_numpy$lib$npyio);
        Py_DECREF(_spec_from_module);

        // We can assume this to never fail, or else we are in trouble anyway.
        // CHECK_OBJECT(spec_value);

        if (spec_value == NULL) {
            PyErr_PrintEx(0);
            abort();
        }

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_import_from_2__module = NULL;
    PyObject *tmp_import_from_3__module = NULL;
    PyObject *tmp_import_from_4__module = NULL;
    struct Nuitka_FrameObject *frame_ba0f3c1e458a15adc45e861e2cb96579;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_numpy$lib$npyio$$$class__1_BagObj_51 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_ec151b16458d452ce0a734f86c51f0bd_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_ec151b16458d452ce0a734f86c51f0bd_2 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *locals_numpy$lib$npyio$$$class__2_NpzFile_115 = NULL;
    struct Nuitka_FrameObject *frame_422f163fd63f8991fd6791abb5003da8_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_422f163fd63f8991fd6791abb5003da8_3 = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[255], tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[424], tmp_assign_source_2);
    }
    // Frame without reuse.
    frame_ba0f3c1e458a15adc45e861e2cb96579 = MAKE_MODULE_FRAME(codeobj_ba0f3c1e458a15adc45e861e2cb96579, module_numpy$lib$npyio);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack(frame_ba0f3c1e458a15adc45e861e2cb96579);
    assert(Py_REFCNT(frame_ba0f3c1e458a15adc45e861e2cb96579) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = module_filename_obj;
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[425]);

        if (unlikely(tmp_assattr_target_1 == NULL)) {
            tmp_assattr_target_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[425]);
        }

        assert(!(tmp_assattr_target_1 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[426], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_True;
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[425]);

        if (unlikely(tmp_assattr_target_2 == NULL)) {
            tmp_assattr_target_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[425]);
        }

        assert(!(tmp_assattr_target_2 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[427], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[428], tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 1;
        tmp_assign_source_4 = IMPORT_HARD_SYS();
        assert(!(tmp_assign_source_4 == NULL));
        UPDATE_STRING_DICT0(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[102], tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 2;
        tmp_assign_source_5 = IMPORT_HARD_OS();
        assert(!(tmp_assign_source_5 == NULL));
        UPDATE_STRING_DICT0(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[109], tmp_assign_source_5);
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_arg_name_1;
        PyObject *tmp_locals_arg_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = mod_consts[145];
        tmp_globals_arg_name_1 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 3;
        tmp_assign_source_6 = IMPORT_MODULE5(tmp_name_name_1, tmp_globals_arg_name_1, tmp_locals_arg_name_1, tmp_fromlist_name_1, tmp_level_name_1);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[145], tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 4;
        tmp_assign_source_7 = IMPORT_HARD_FUNCTOOLS();
        assert(!(tmp_assign_source_7 == NULL));
        UPDATE_STRING_DICT0(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[188], tmp_assign_source_7);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_arg_name_2;
        PyObject *tmp_locals_arg_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = mod_consts[232];
        tmp_globals_arg_name_2 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_2 = Py_None;
        tmp_fromlist_name_2 = Py_None;
        tmp_level_name_2 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 5;
        tmp_assign_source_8 = IMPORT_MODULE5(tmp_name_name_2, tmp_globals_arg_name_2, tmp_locals_arg_name_2, tmp_fromlist_name_2, tmp_level_name_2);
        assert(!(tmp_assign_source_8 == NULL));
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[232], tmp_assign_source_8);
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_name_name_3;
        PyObject *tmp_globals_arg_name_3;
        PyObject *tmp_locals_arg_name_3;
        PyObject *tmp_fromlist_name_3;
        PyObject *tmp_level_name_3;
        tmp_name_name_3 = mod_consts[0];
        tmp_globals_arg_name_3 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_3 = Py_None;
        tmp_fromlist_name_3 = Py_None;
        tmp_level_name_3 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 6;
        tmp_assign_source_9 = IMPORT_MODULE5(tmp_name_name_3, tmp_globals_arg_name_3, tmp_locals_arg_name_3, tmp_fromlist_name_3, tmp_level_name_3);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[0], tmp_assign_source_9);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_name_name_4;
        PyObject *tmp_globals_arg_name_4;
        PyObject *tmp_locals_arg_name_4;
        PyObject *tmp_fromlist_name_4;
        PyObject *tmp_level_name_4;
        tmp_name_name_4 = mod_consts[7];
        tmp_globals_arg_name_4 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_4 = Py_None;
        tmp_fromlist_name_4 = Py_None;
        tmp_level_name_4 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 7;
        tmp_assign_source_10 = IMPORT_MODULE5(tmp_name_name_4, tmp_globals_arg_name_4, tmp_locals_arg_name_4, tmp_fromlist_name_4, tmp_level_name_4);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 7;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[7], tmp_assign_source_10);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_name_name_5;
        PyObject *tmp_globals_arg_name_5;
        PyObject *tmp_locals_arg_name_5;
        PyObject *tmp_fromlist_name_5;
        PyObject *tmp_level_name_5;
        tmp_name_name_5 = mod_consts[53];
        tmp_globals_arg_name_5 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_5 = Py_None;
        tmp_fromlist_name_5 = Py_None;
        tmp_level_name_5 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 8;
        tmp_assign_source_11 = IMPORT_MODULE5(tmp_name_name_5, tmp_globals_arg_name_5, tmp_locals_arg_name_5, tmp_fromlist_name_5, tmp_level_name_5);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 8;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[53], tmp_assign_source_11);
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_name_name_6;
        PyObject *tmp_globals_arg_name_6;
        PyObject *tmp_locals_arg_name_6;
        PyObject *tmp_fromlist_name_6;
        PyObject *tmp_level_name_6;
        tmp_name_name_6 = mod_consts[429];
        tmp_globals_arg_name_6 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_6 = Py_None;
        tmp_fromlist_name_6 = mod_consts[430];
        tmp_level_name_6 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 9;
        tmp_assign_source_12 = IMPORT_MODULE5(tmp_name_name_6, tmp_globals_arg_name_6, tmp_locals_arg_name_6, tmp_fromlist_name_6, tmp_level_name_6);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 9;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_1__module == NULL);
        tmp_import_from_1__module = tmp_assign_source_12;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_import_name_from_1;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_1 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_13 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[349],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_13 = IMPORT_NAME(tmp_import_name_from_1, mod_consts[349]);
        }

        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 9;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[349], tmp_assign_source_13);
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_import_name_from_2;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_2 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_2)) {
            tmp_assign_source_14 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_2,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[184],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_14 = IMPORT_NAME(tmp_import_name_from_2, mod_consts[184]);
        }

        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 9;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[150], tmp_assign_source_14);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_import_name_from_3;
        PyObject *tmp_name_name_7;
        PyObject *tmp_globals_arg_name_7;
        PyObject *tmp_locals_arg_name_7;
        PyObject *tmp_fromlist_name_7;
        PyObject *tmp_level_name_7;
        tmp_name_name_7 = mod_consts[431];
        tmp_globals_arg_name_7 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_7 = Py_None;
        tmp_fromlist_name_7 = mod_consts[432];
        tmp_level_name_7 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 10;
        tmp_import_name_from_3 = IMPORT_MODULE5(tmp_name_name_7, tmp_globals_arg_name_7, tmp_locals_arg_name_7, tmp_fromlist_name_7, tmp_level_name_7);
        if (tmp_import_name_from_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 10;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_3)) {
            tmp_assign_source_15 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_3,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[433],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_15 = IMPORT_NAME(tmp_import_name_from_3, mod_consts[433]);
        }

        Py_DECREF(tmp_import_name_from_3);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 10;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[433], tmp_assign_source_15);
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_name_name_8;
        PyObject *tmp_globals_arg_name_8;
        PyObject *tmp_locals_arg_name_8;
        PyObject *tmp_fromlist_name_8;
        PyObject *tmp_level_name_8;
        tmp_name_name_8 = mod_consts[434];
        tmp_globals_arg_name_8 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_8 = Py_None;
        tmp_fromlist_name_8 = Py_None;
        tmp_level_name_8 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 12;
        tmp_assign_source_16 = IMPORT_MODULE5(tmp_name_name_8, tmp_globals_arg_name_8, tmp_locals_arg_name_8, tmp_fromlist_name_8, tmp_level_name_8);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 12;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[80], tmp_assign_source_16);
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_import_name_from_4;
        PyObject *tmp_name_name_9;
        PyObject *tmp_globals_arg_name_9;
        PyObject *tmp_locals_arg_name_9;
        PyObject *tmp_fromlist_name_9;
        PyObject *tmp_level_name_9;
        tmp_name_name_9 = mod_consts[180];
        tmp_globals_arg_name_9 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_9 = Py_None;
        tmp_fromlist_name_9 = mod_consts[435];
        tmp_level_name_9 = mod_consts[63];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 13;
        tmp_import_name_from_4 = IMPORT_MODULE5(tmp_name_name_9, tmp_globals_arg_name_9, tmp_locals_arg_name_9, tmp_fromlist_name_9, tmp_level_name_9);
        if (tmp_import_name_from_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 13;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_4)) {
            tmp_assign_source_17 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_4,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[41],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_17 = IMPORT_NAME(tmp_import_name_from_4, mod_consts[41]);
        }

        Py_DECREF(tmp_import_name_from_4);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 13;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[41], tmp_assign_source_17);
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_import_name_from_5;
        PyObject *tmp_name_name_10;
        PyObject *tmp_globals_arg_name_10;
        PyObject *tmp_locals_arg_name_10;
        PyObject *tmp_fromlist_name_10;
        PyObject *tmp_level_name_10;
        tmp_name_name_10 = mod_consts[155];
        tmp_globals_arg_name_10 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_10 = Py_None;
        tmp_fromlist_name_10 = mod_consts[436];
        tmp_level_name_10 = mod_consts[63];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 14;
        tmp_import_name_from_5 = IMPORT_MODULE5(tmp_name_name_10, tmp_globals_arg_name_10, tmp_locals_arg_name_10, tmp_fromlist_name_10, tmp_level_name_10);
        if (tmp_import_name_from_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_5)) {
            tmp_assign_source_18 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_5,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[437],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_18 = IMPORT_NAME(tmp_import_name_from_5, mod_consts[437]);
        }

        Py_DECREF(tmp_import_name_from_5);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[437], tmp_assign_source_18);
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_import_name_from_6;
        PyObject *tmp_name_name_11;
        PyObject *tmp_globals_arg_name_11;
        PyObject *tmp_locals_arg_name_11;
        PyObject *tmp_fromlist_name_11;
        PyObject *tmp_level_name_11;
        tmp_name_name_11 = mod_consts[438];
        tmp_globals_arg_name_11 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_11 = Py_None;
        tmp_fromlist_name_11 = mod_consts[439];
        tmp_level_name_11 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 15;
        tmp_import_name_from_6 = IMPORT_MODULE5(tmp_name_name_11, tmp_globals_arg_name_11, tmp_locals_arg_name_11, tmp_fromlist_name_11, tmp_level_name_11);
        if (tmp_import_name_from_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 15;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_6)) {
            tmp_assign_source_19 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_6,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[440],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_19 = IMPORT_NAME(tmp_import_name_from_6, mod_consts[440]);
        }

        Py_DECREF(tmp_import_name_from_6);
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 15;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[440], tmp_assign_source_19);
    }
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_name_name_12;
        PyObject *tmp_globals_arg_name_12;
        PyObject *tmp_locals_arg_name_12;
        PyObject *tmp_fromlist_name_12;
        PyObject *tmp_level_name_12;
        tmp_name_name_12 = mod_consts[441];
        tmp_globals_arg_name_12 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_12 = Py_None;
        tmp_fromlist_name_12 = mod_consts[442];
        tmp_level_name_12 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 16;
        tmp_assign_source_20 = IMPORT_MODULE5(tmp_name_name_12, tmp_globals_arg_name_12, tmp_locals_arg_name_12, tmp_fromlist_name_12, tmp_level_name_12);
        if (tmp_assign_source_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 16;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_2__module == NULL);
        tmp_import_from_2__module = tmp_assign_source_20;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_import_name_from_7;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_7 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_7)) {
            tmp_assign_source_21 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_7,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[443],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_21 = IMPORT_NAME(tmp_import_name_from_7, mod_consts[443]);
        }

        if (tmp_assign_source_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 16;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[443], tmp_assign_source_21);
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_import_name_from_8;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_8 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_8)) {
            tmp_assign_source_22 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_8,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[444],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_22 = IMPORT_NAME(tmp_import_name_from_8, mod_consts[444]);
        }

        if (tmp_assign_source_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 16;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[444], tmp_assign_source_22);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_2__module);
    Py_DECREF(tmp_import_from_2__module);
    tmp_import_from_2__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_import_from_2__module);
    Py_DECREF(tmp_import_from_2__module);
    tmp_import_from_2__module = NULL;
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_import_name_from_9;
        PyObject *tmp_name_name_13;
        PyObject *tmp_globals_arg_name_13;
        PyObject *tmp_locals_arg_name_13;
        PyObject *tmp_fromlist_name_13;
        PyObject *tmp_level_name_13;
        tmp_name_name_13 = mod_consts[445];
        tmp_globals_arg_name_13 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_13 = Py_None;
        tmp_fromlist_name_13 = mod_consts[446];
        tmp_level_name_13 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 17;
        tmp_import_name_from_9 = IMPORT_MODULE5(tmp_name_name_13, tmp_globals_arg_name_13, tmp_locals_arg_name_13, tmp_fromlist_name_13, tmp_level_name_13);
        if (tmp_import_name_from_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 17;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_9)) {
            tmp_assign_source_23 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_9,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[447],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_23 = IMPORT_NAME(tmp_import_name_from_9, mod_consts[447]);
        }

        Py_DECREF(tmp_import_name_from_9);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 17;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[447], tmp_assign_source_23);
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_import_name_from_10;
        PyObject *tmp_name_name_14;
        PyObject *tmp_globals_arg_name_14;
        PyObject *tmp_locals_arg_name_14;
        PyObject *tmp_fromlist_name_14;
        PyObject *tmp_level_name_14;
        tmp_name_name_14 = mod_consts[448];
        tmp_globals_arg_name_14 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_14 = Py_None;
        tmp_fromlist_name_14 = mod_consts[449];
        tmp_level_name_14 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 18;
        tmp_import_name_from_10 = IMPORT_MODULE5(tmp_name_name_14, tmp_globals_arg_name_14, tmp_locals_arg_name_14, tmp_fromlist_name_14, tmp_level_name_14);
        if (tmp_import_name_from_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 18;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_10)) {
            tmp_assign_source_24 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_10,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[163],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_24 = IMPORT_NAME(tmp_import_name_from_10, mod_consts[163]);
        }

        Py_DECREF(tmp_import_name_from_10);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 18;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[163], tmp_assign_source_24);
    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_name_name_15;
        PyObject *tmp_globals_arg_name_15;
        PyObject *tmp_locals_arg_name_15;
        PyObject *tmp_fromlist_name_15;
        PyObject *tmp_level_name_15;
        tmp_name_name_15 = mod_consts[450];
        tmp_globals_arg_name_15 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_15 = Py_None;
        tmp_fromlist_name_15 = mod_consts[451];
        tmp_level_name_15 = mod_consts[63];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 19;
        tmp_assign_source_25 = IMPORT_MODULE5(tmp_name_name_15, tmp_globals_arg_name_15, tmp_locals_arg_name_15, tmp_fromlist_name_15, tmp_level_name_15);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_3__module == NULL);
        tmp_import_from_3__module = tmp_assign_source_25;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_import_name_from_11;
        CHECK_OBJECT(tmp_import_from_3__module);
        tmp_import_name_from_11 = tmp_import_from_3__module;
        if (PyModule_Check(tmp_import_name_from_11)) {
            tmp_assign_source_26 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_11,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[308],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_26 = IMPORT_NAME(tmp_import_name_from_11, mod_consts[308]);
        }

        if (tmp_assign_source_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[308], tmp_assign_source_26);
    }
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_import_name_from_12;
        CHECK_OBJECT(tmp_import_from_3__module);
        tmp_import_name_from_12 = tmp_import_from_3__module;
        if (PyModule_Check(tmp_import_name_from_12)) {
            tmp_assign_source_27 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_12,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[310],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_27 = IMPORT_NAME(tmp_import_name_from_12, mod_consts[310]);
        }

        if (tmp_assign_source_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[310], tmp_assign_source_27);
    }
    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_import_name_from_13;
        CHECK_OBJECT(tmp_import_from_3__module);
        tmp_import_name_from_13 = tmp_import_from_3__module;
        if (PyModule_Check(tmp_import_name_from_13)) {
            tmp_assign_source_28 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_13,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[328],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_28 = IMPORT_NAME(tmp_import_name_from_13, mod_consts[328]);
        }

        if (tmp_assign_source_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[328], tmp_assign_source_28);
    }
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_import_name_from_14;
        CHECK_OBJECT(tmp_import_from_3__module);
        tmp_import_name_from_14 = tmp_import_from_3__module;
        if (PyModule_Check(tmp_import_name_from_14)) {
            tmp_assign_source_29 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_14,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[355],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_29 = IMPORT_NAME(tmp_import_name_from_14, mod_consts[355]);
        }

        if (tmp_assign_source_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[355], tmp_assign_source_29);
    }
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_import_name_from_15;
        CHECK_OBJECT(tmp_import_from_3__module);
        tmp_import_name_from_15 = tmp_import_from_3__module;
        if (PyModule_Check(tmp_import_name_from_15)) {
            tmp_assign_source_30 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_15,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[351],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_30 = IMPORT_NAME(tmp_import_name_from_15, mod_consts[351]);
        }

        if (tmp_assign_source_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[351], tmp_assign_source_30);
    }
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_import_name_from_16;
        CHECK_OBJECT(tmp_import_from_3__module);
        tmp_import_name_from_16 = tmp_import_from_3__module;
        if (PyModule_Check(tmp_import_name_from_16)) {
            tmp_assign_source_31 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_16,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[365],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_31 = IMPORT_NAME(tmp_import_name_from_16, mod_consts[365]);
        }

        if (tmp_assign_source_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[365], tmp_assign_source_31);
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_import_name_from_17;
        CHECK_OBJECT(tmp_import_from_3__module);
        tmp_import_name_from_17 = tmp_import_from_3__module;
        if (PyModule_Check(tmp_import_name_from_17)) {
            tmp_assign_source_32 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_17,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[108],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_32 = IMPORT_NAME(tmp_import_name_from_17, mod_consts[108]);
        }

        if (tmp_assign_source_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[108], tmp_assign_source_32);
    }
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_import_name_from_18;
        CHECK_OBJECT(tmp_import_from_3__module);
        tmp_import_name_from_18 = tmp_import_from_3__module;
        if (PyModule_Check(tmp_import_name_from_18)) {
            tmp_assign_source_33 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_18,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[390],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_33 = IMPORT_NAME(tmp_import_name_from_18, mod_consts[390]);
        }

        if (tmp_assign_source_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[390], tmp_assign_source_33);
    }
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_import_name_from_19;
        CHECK_OBJECT(tmp_import_from_3__module);
        tmp_import_name_from_19 = tmp_import_from_3__module;
        if (PyModule_Check(tmp_import_name_from_19)) {
            tmp_assign_source_34 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_19,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[331],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_34 = IMPORT_NAME(tmp_import_name_from_19, mod_consts[331]);
        }

        if (tmp_assign_source_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[331], tmp_assign_source_34);
    }
    {
        PyObject *tmp_assign_source_35;
        PyObject *tmp_import_name_from_20;
        CHECK_OBJECT(tmp_import_from_3__module);
        tmp_import_name_from_20 = tmp_import_from_3__module;
        if (PyModule_Check(tmp_import_name_from_20)) {
            tmp_assign_source_35 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_20,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[317],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_35 = IMPORT_NAME(tmp_import_name_from_20, mod_consts[317]);
        }

        if (tmp_assign_source_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[317], tmp_assign_source_35);
    }
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_import_name_from_21;
        CHECK_OBJECT(tmp_import_from_3__module);
        tmp_import_name_from_21 = tmp_import_from_3__module;
        if (PyModule_Check(tmp_import_name_from_21)) {
            tmp_assign_source_36 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_21,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[144],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_36 = IMPORT_NAME(tmp_import_name_from_21, mod_consts[144]);
        }

        if (tmp_assign_source_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[144], tmp_assign_source_36);
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_3__module);
    Py_DECREF(tmp_import_from_3__module);
    tmp_import_from_3__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_import_from_3__module);
    Py_DECREF(tmp_import_from_3__module);
    tmp_import_from_3__module = NULL;
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_name_name_16;
        PyObject *tmp_globals_arg_name_16;
        PyObject *tmp_locals_arg_name_16;
        PyObject *tmp_fromlist_name_16;
        PyObject *tmp_level_name_16;
        tmp_name_name_16 = mod_consts[452];
        tmp_globals_arg_name_16 = (PyObject *)moduledict_numpy$lib$npyio;
        tmp_locals_arg_name_16 = Py_None;
        tmp_fromlist_name_16 = mod_consts[453];
        tmp_level_name_16 = mod_consts[16];
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 25;
        tmp_assign_source_37 = IMPORT_MODULE5(tmp_name_name_16, tmp_globals_arg_name_16, tmp_locals_arg_name_16, tmp_fromlist_name_16, tmp_level_name_16);
        if (tmp_assign_source_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_4__module == NULL);
        tmp_import_from_4__module = tmp_assign_source_37;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_import_name_from_22;
        CHECK_OBJECT(tmp_import_from_4__module);
        tmp_import_name_from_22 = tmp_import_from_4__module;
        if (PyModule_Check(tmp_import_name_from_22)) {
            tmp_assign_source_38 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_22,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[132],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_38 = IMPORT_NAME(tmp_import_name_from_22, mod_consts[132]);
        }

        if (tmp_assign_source_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[132], tmp_assign_source_38);
    }
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_import_name_from_23;
        CHECK_OBJECT(tmp_import_from_4__module);
        tmp_import_name_from_23 = tmp_import_from_4__module;
        if (PyModule_Check(tmp_import_name_from_23)) {
            tmp_assign_source_39 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_23,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[135],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_39 = IMPORT_NAME(tmp_import_name_from_23, mod_consts[135]);
        }

        if (tmp_assign_source_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[135], tmp_assign_source_39);
    }
    {
        PyObject *tmp_assign_source_40;
        PyObject *tmp_import_name_from_24;
        CHECK_OBJECT(tmp_import_from_4__module);
        tmp_import_name_from_24 = tmp_import_from_4__module;
        if (PyModule_Check(tmp_import_name_from_24)) {
            tmp_assign_source_40 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_24,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[134],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_40 = IMPORT_NAME(tmp_import_name_from_24, mod_consts[134]);
        }

        if (tmp_assign_source_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[134], tmp_assign_source_40);
    }
    {
        PyObject *tmp_assign_source_41;
        PyObject *tmp_import_name_from_25;
        CHECK_OBJECT(tmp_import_from_4__module);
        tmp_import_name_from_25 = tmp_import_from_4__module;
        if (PyModule_Check(tmp_import_name_from_25)) {
            tmp_assign_source_41 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_25,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[142],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_41 = IMPORT_NAME(tmp_import_name_from_25, mod_consts[142]);
        }

        if (tmp_assign_source_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[142], tmp_assign_source_41);
    }
    {
        PyObject *tmp_assign_source_42;
        PyObject *tmp_import_name_from_26;
        CHECK_OBJECT(tmp_import_from_4__module);
        tmp_import_name_from_26 = tmp_import_from_4__module;
        if (PyModule_Check(tmp_import_name_from_26)) {
            tmp_assign_source_42 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_26,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[14],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_42 = IMPORT_NAME(tmp_import_name_from_26, mod_consts[14]);
        }

        if (tmp_assign_source_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[14], tmp_assign_source_42);
    }
    {
        PyObject *tmp_assign_source_43;
        PyObject *tmp_import_name_from_27;
        CHECK_OBJECT(tmp_import_from_4__module);
        tmp_import_name_from_27 = tmp_import_from_4__module;
        if (PyModule_Check(tmp_import_name_from_27)) {
            tmp_assign_source_43 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_27,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[153],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_43 = IMPORT_NAME(tmp_import_name_from_27, mod_consts[153]);
        }

        if (tmp_assign_source_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[153], tmp_assign_source_43);
    }
    {
        PyObject *tmp_assign_source_44;
        PyObject *tmp_import_name_from_28;
        CHECK_OBJECT(tmp_import_from_4__module);
        tmp_import_name_from_28 = tmp_import_from_4__module;
        if (PyModule_Check(tmp_import_name_from_28)) {
            tmp_assign_source_44 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_28,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[5],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_44 = IMPORT_NAME(tmp_import_name_from_28, mod_consts[5]);
        }

        if (tmp_assign_source_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[5], tmp_assign_source_44);
    }
    {
        PyObject *tmp_assign_source_45;
        PyObject *tmp_import_name_from_29;
        CHECK_OBJECT(tmp_import_from_4__module);
        tmp_import_name_from_29 = tmp_import_from_4__module;
        if (PyModule_Check(tmp_import_name_from_29)) {
            tmp_assign_source_45 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_29,
                (PyObject *)moduledict_numpy$lib$npyio,
                mod_consts[78],
                mod_consts[16]
            );
        } else {
            tmp_assign_source_45 = IMPORT_NAME(tmp_import_name_from_29, mod_consts[78]);
        }

        if (tmp_assign_source_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[78], tmp_assign_source_45);
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_4__module);
    Py_DECREF(tmp_import_from_4__module);
    tmp_import_from_4__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_import_from_4__module);
    Py_DECREF(tmp_import_from_4__module);
    tmp_import_from_4__module = NULL;
    {
        PyObject *tmp_assign_source_46;
        PyObject *tmp_called_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_1;
        tmp_called_name_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[447]);

        if (unlikely(tmp_called_name_2 == NULL)) {
            tmp_called_name_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[447]);
        }

        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto frame_exception_exit_1;
        }
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 31;
        tmp_called_name_1 = CALL_FUNCTION_WITH_POSARGS1(tmp_called_name_2, mod_consts[454]);

        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto frame_exception_exit_1;
        }


        tmp_args_element_name_1 = MAKE_FUNCTION_numpy$lib$npyio$$$function__1_loads();

        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 31;
        tmp_assign_source_46 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_assign_source_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[6], tmp_assign_source_46);
    }
    {
        PyObject *tmp_assign_source_47;
        tmp_assign_source_47 = LIST_COPY(mod_consts[455]);
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[456], tmp_assign_source_47);
    }
    {
        PyObject *tmp_assign_source_48;
        PyObject *tmp_called_name_3;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_kwargs_name_1;
        tmp_expression_name_1 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[188]);

        if (unlikely(tmp_expression_name_1 == NULL)) {
            tmp_expression_name_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[188]);
        }

        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, mod_consts[189]);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto frame_exception_exit_1;
        }
        tmp_expression_name_2 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[440]);

        if (unlikely(tmp_expression_name_2 == NULL)) {
            tmp_expression_name_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
        }

        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_3);

            exception_lineno = 48;

            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, mod_consts[457]);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_3);

            exception_lineno = 48;

            goto frame_exception_exit_1;
        }
        tmp_args_name_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_name_1, 0, tmp_tuple_element_1);
        tmp_kwargs_name_1 = PyDict_Copy(mod_consts[458]);
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 47;
        tmp_assign_source_48 = CALL_FUNCTION(tmp_called_name_3, tmp_args_name_1, tmp_kwargs_name_1);
        Py_DECREF(tmp_called_name_3);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kwargs_name_1);
        if (tmp_assign_source_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[457], tmp_assign_source_48);
    }
    {
        PyObject *tmp_assign_source_49;
        tmp_assign_source_49 = PyDict_New();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_49;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_metaclass_name_1;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_arg_name_1;
        PyObject *tmp_dict_arg_name_2;
        PyObject *tmp_key_name_2;
        PyObject *tmp_bases_name_1;
        tmp_key_name_1 = mod_consts[244];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_name_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_name_1, tmp_key_name_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_name_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_name_2 = mod_consts[244];
        tmp_metaclass_name_1 = DICT_GET_ITEM_WITH_ERROR(tmp_dict_arg_name_2, tmp_key_name_2);
        if (tmp_metaclass_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;

            goto try_except_handler_5;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_name_1);
        condexpr_end_1:;
        tmp_bases_name_1 = mod_consts[245];
        tmp_assign_source_50 = SELECT_METACLASS(tmp_metaclass_name_1, tmp_bases_name_1);
        Py_DECREF(tmp_metaclass_name_1);
        if (tmp_assign_source_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_50;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_key_name_3;
        PyObject *tmp_dict_arg_name_3;
        tmp_key_name_3 = mod_consts[244];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_name_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_name_3, tmp_key_name_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
    tmp_dictdel_key = mod_consts[244];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 51;

        goto try_except_handler_5;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_expression_name_3;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_name_3 = tmp_class_creation_1__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_name_3, mod_consts[246]);
        tmp_condition_result_3 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_51;
        PyObject *tmp_called_name_4;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_args_name_2;
        PyObject *tmp_kwargs_name_2;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_name_4 = tmp_class_creation_1__metaclass;
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, mod_consts[246]);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;

            goto try_except_handler_5;
        }
        tmp_args_name_2 = mod_consts[459];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kwargs_name_2 = tmp_class_creation_1__class_decl_dict;
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 51;
        tmp_assign_source_51 = CALL_FUNCTION(tmp_called_name_4, tmp_args_name_2, tmp_kwargs_name_2);
        Py_DECREF(tmp_called_name_4);
        if (tmp_assign_source_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_51;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_expression_name_5;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_name_5 = tmp_class_creation_1__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_name_5, mod_consts[248]);
        tmp_operand_name_1 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;

            goto try_except_handler_5;
        }
        tmp_condition_result_4 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        tmp_raise_type_1 = PyExc_TypeError;
        tmp_left_name_1 = mod_consts[249];
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
        tmp_getattr_attr_1 = mod_consts[250];
        tmp_getattr_default_1 = mod_consts[251];
        tmp_tuple_element_2 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;

            goto try_except_handler_5;
        }
        tmp_right_name_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_name_6;
            PyObject *tmp_type_arg_1;
            PyTuple_SET_ITEM(tmp_right_name_1, 0, tmp_tuple_element_2);
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_type_arg_1 = tmp_class_creation_1__prepared;
            tmp_expression_name_6 = BUILTIN_TYPE1(tmp_type_arg_1);
            assert(!(tmp_expression_name_6 == NULL));
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_6, mod_consts[250]);
            Py_DECREF(tmp_expression_name_6);
            if (tmp_tuple_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 51;

                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_name_1, 1, tmp_tuple_element_2);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_right_name_1);
        goto try_except_handler_5;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_raise_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;

            goto try_except_handler_5;
        }
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 51;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_5;
    }
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_52;
        tmp_assign_source_52 = PyDict_New();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_52;
    }
    branch_end_2:;
    {
        PyObject *tmp_assign_source_53;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_numpy$lib$npyio$$$class__1_BagObj_51 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[252];
        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__1_BagObj_51, mod_consts[253], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;

            goto try_except_handler_7;
        }
        tmp_dictset_value = mod_consts[460];
        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__1_BagObj_51, mod_consts[255], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;

            goto try_except_handler_7;
        }
        tmp_dictset_value = mod_consts[32];
        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__1_BagObj_51, mod_consts[257], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;

            goto try_except_handler_7;
        }
        if (isFrameUnusable(cache_frame_ec151b16458d452ce0a734f86c51f0bd_2)) {
            Py_XDECREF(cache_frame_ec151b16458d452ce0a734f86c51f0bd_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_ec151b16458d452ce0a734f86c51f0bd_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_ec151b16458d452ce0a734f86c51f0bd_2 = MAKE_FUNCTION_FRAME(codeobj_ec151b16458d452ce0a734f86c51f0bd, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_ec151b16458d452ce0a734f86c51f0bd_2->m_type_description == NULL);
        frame_ec151b16458d452ce0a734f86c51f0bd_2 = cache_frame_ec151b16458d452ce0a734f86c51f0bd_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_ec151b16458d452ce0a734f86c51f0bd_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_ec151b16458d452ce0a734f86c51f0bd_2) == 2); // Frame stack

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__2___init__();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__1_BagObj_51, mod_consts[258], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 81;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__3___getattribute__();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__1_BagObj_51, mod_consts[10], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 85;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__4___dir__();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__1_BagObj_51, mod_consts[463], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ec151b16458d452ce0a734f86c51f0bd_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ec151b16458d452ce0a734f86c51f0bd_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ec151b16458d452ce0a734f86c51f0bd_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ec151b16458d452ce0a734f86c51f0bd_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ec151b16458d452ce0a734f86c51f0bd_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ec151b16458d452ce0a734f86c51f0bd_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_ec151b16458d452ce0a734f86c51f0bd_2 == cache_frame_ec151b16458d452ce0a734f86c51f0bd_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_ec151b16458d452ce0a734f86c51f0bd_2);
            cache_frame_ec151b16458d452ce0a734f86c51f0bd_2 = NULL;
        }

        assertFrameObject(frame_ec151b16458d452ce0a734f86c51f0bd_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_7;
        skip_nested_handling_1:;
        {
            PyObject *tmp_assign_source_54;
            PyObject *tmp_called_name_5;
            PyObject *tmp_args_name_3;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_kwargs_name_3;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_name_5 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_3 = mod_consts[32];
            tmp_args_name_3 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_name_3, 0, tmp_tuple_element_3);
            tmp_tuple_element_3 = mod_consts[245];
            PyTuple_SET_ITEM0(tmp_args_name_3, 1, tmp_tuple_element_3);
            tmp_tuple_element_3 = locals_numpy$lib$npyio$$$class__1_BagObj_51;
            PyTuple_SET_ITEM0(tmp_args_name_3, 2, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kwargs_name_3 = tmp_class_creation_1__class_decl_dict;
            frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 51;
            tmp_assign_source_54 = CALL_FUNCTION(tmp_called_name_5, tmp_args_name_3, tmp_kwargs_name_3);
            Py_DECREF(tmp_args_name_3);
            if (tmp_assign_source_54 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 51;

                goto try_except_handler_7;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_54;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_53 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_53);
        goto try_return_handler_7;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        Py_DECREF(locals_numpy$lib$npyio$$$class__1_BagObj_51);
        locals_numpy$lib$npyio$$$class__1_BagObj_51 = NULL;
        goto try_return_handler_6;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numpy$lib$npyio$$$class__1_BagObj_51);
        locals_numpy$lib$npyio$$$class__1_BagObj_51 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 51;
        goto try_except_handler_5;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[32], tmp_assign_source_53);
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    {
        PyObject *tmp_assign_source_55;


        tmp_assign_source_55 = MAKE_FUNCTION_numpy$lib$npyio$$$function__5_zipfile_factory();

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[20], tmp_assign_source_55);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_56;
        PyObject *tmp_tuple_element_4;
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[433]);

        if (unlikely(tmp_tuple_element_4 == NULL)) {
            tmp_tuple_element_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[433]);
        }

        if (tmp_tuple_element_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_8;
        }
        tmp_assign_source_56 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_56, 0, tmp_tuple_element_4);
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_56;
    }
    {
        PyObject *tmp_assign_source_57;
        tmp_assign_source_57 = PyDict_New();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_57;
    }
    {
        PyObject *tmp_assign_source_58;
        PyObject *tmp_metaclass_name_2;
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_key_name_4;
        PyObject *tmp_dict_arg_name_4;
        PyObject *tmp_dict_arg_name_5;
        PyObject *tmp_key_name_5;
        PyObject *tmp_type_arg_2;
        PyObject *tmp_expression_name_7;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_bases_name_2;
        tmp_key_name_4 = mod_consts[244];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_name_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_name_4, tmp_key_name_4);
        assert(!(tmp_res == -1));
        tmp_condition_result_5 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_2;
        } else {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_name_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_name_5 = mod_consts[244];
        tmp_metaclass_name_2 = DICT_GET_ITEM_WITH_ERROR(tmp_dict_arg_name_5, tmp_key_name_5);
        if (tmp_metaclass_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_8;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_expression_name_7 = tmp_class_creation_2__bases;
        tmp_subscript_name_1 = mod_consts[16];
        tmp_type_arg_2 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_7, tmp_subscript_name_1, 0);
        if (tmp_type_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_8;
        }
        tmp_metaclass_name_2 = BUILTIN_TYPE1(tmp_type_arg_2);
        Py_DECREF(tmp_type_arg_2);
        if (tmp_metaclass_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_8;
        }
        condexpr_end_2:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_name_2 = tmp_class_creation_2__bases;
        tmp_assign_source_58 = SELECT_METACLASS(tmp_metaclass_name_2, tmp_bases_name_2);
        Py_DECREF(tmp_metaclass_name_2);
        if (tmp_assign_source_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_58;
    }
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_key_name_6;
        PyObject *tmp_dict_arg_name_6;
        tmp_key_name_6 = mod_consts[244];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_name_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_name_6, tmp_key_name_6);
        assert(!(tmp_res == -1));
        tmp_condition_result_6 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
    tmp_dictdel_key = mod_consts[244];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 115;

        goto try_except_handler_8;
    }
    branch_no_4:;
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_expression_name_8;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_name_8 = tmp_class_creation_2__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_name_8, mod_consts[246]);
        tmp_condition_result_7 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_assign_source_59;
        PyObject *tmp_called_name_6;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_args_name_4;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_kwargs_name_4;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_name_9 = tmp_class_creation_2__metaclass;
        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, mod_consts[246]);
        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_8;
        }
        tmp_tuple_element_5 = mod_consts[67];
        tmp_args_name_4 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_name_4, 0, tmp_tuple_element_5);
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_tuple_element_5 = tmp_class_creation_2__bases;
        PyTuple_SET_ITEM0(tmp_args_name_4, 1, tmp_tuple_element_5);
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_kwargs_name_4 = tmp_class_creation_2__class_decl_dict;
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 115;
        tmp_assign_source_59 = CALL_FUNCTION(tmp_called_name_6, tmp_args_name_4, tmp_kwargs_name_4);
        Py_DECREF(tmp_called_name_6);
        Py_DECREF(tmp_args_name_4);
        if (tmp_assign_source_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_59;
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_expression_name_10;
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_expression_name_10 = tmp_class_creation_2__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_name_10, mod_consts[248]);
        tmp_operand_name_2 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_8;
        }
        tmp_condition_result_8 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_raise_value_2;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_tuple_element_6;
        PyObject *tmp_getattr_target_2;
        PyObject *tmp_getattr_attr_2;
        PyObject *tmp_getattr_default_2;
        tmp_raise_type_2 = PyExc_TypeError;
        tmp_left_name_2 = mod_consts[249];
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
        tmp_getattr_attr_2 = mod_consts[250];
        tmp_getattr_default_2 = mod_consts[251];
        tmp_tuple_element_6 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2);
        if (tmp_tuple_element_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_8;
        }
        tmp_right_name_2 = PyTuple_New(2);
        {
            PyObject *tmp_expression_name_11;
            PyObject *tmp_type_arg_3;
            PyTuple_SET_ITEM(tmp_right_name_2, 0, tmp_tuple_element_6);
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_type_arg_3 = tmp_class_creation_2__prepared;
            tmp_expression_name_11 = BUILTIN_TYPE1(tmp_type_arg_3);
            assert(!(tmp_expression_name_11 == NULL));
            tmp_tuple_element_6 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, mod_consts[250]);
            Py_DECREF(tmp_expression_name_11);
            if (tmp_tuple_element_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 115;

                goto tuple_build_exception_2;
            }
            PyTuple_SET_ITEM(tmp_right_name_2, 1, tmp_tuple_element_6);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_right_name_2);
        goto try_except_handler_8;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        tmp_raise_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_2, tmp_right_name_2);
        Py_DECREF(tmp_right_name_2);
        if (tmp_raise_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_8;
        }
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_value = tmp_raise_value_2;
        exception_lineno = 115;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_8;
    }
    branch_no_6:;
    goto branch_end_5;
    branch_no_5:;
    {
        PyObject *tmp_assign_source_60;
        tmp_assign_source_60 = PyDict_New();
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_60;
    }
    branch_end_5:;
    {
        PyObject *tmp_assign_source_61;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_numpy$lib$npyio$$$class__2_NpzFile_115 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[252];
        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[253], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_10;
        }
        tmp_dictset_value = mod_consts[465];
        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[255], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_10;
        }
        tmp_dictset_value = mod_consts[67];
        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[257], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto try_except_handler_10;
        }
        if (isFrameUnusable(cache_frame_422f163fd63f8991fd6791abb5003da8_3)) {
            Py_XDECREF(cache_frame_422f163fd63f8991fd6791abb5003da8_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_422f163fd63f8991fd6791abb5003da8_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_422f163fd63f8991fd6791abb5003da8_3 = MAKE_FUNCTION_FRAME(codeobj_422f163fd63f8991fd6791abb5003da8, module_numpy$lib$npyio, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_422f163fd63f8991fd6791abb5003da8_3->m_type_description == NULL);
        frame_422f163fd63f8991fd6791abb5003da8_3 = cache_frame_422f163fd63f8991fd6791abb5003da8_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_422f163fd63f8991fd6791abb5003da8_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_422f163fd63f8991fd6791abb5003da8_3) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_1;
            tmp_defaults_1 = mod_consts[466];
            Py_INCREF(tmp_defaults_1);


            tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__6___init__(tmp_defaults_1);

            tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[258], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 182;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__7___enter__();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[55], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 203;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__8___exit__();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[56], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__9_close();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[35], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 209;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__10___del__();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[471], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 222;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__11___iter__();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[473], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 226;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__12___len__();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[475], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__13___getitem__();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[248], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__14_iteritems();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[478], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }


        tmp_dictset_value = MAKE_FUNCTION_numpy$lib$npyio$$$function__15_iterkeys();

        tmp_res = PyObject_SetItem(locals_numpy$lib$npyio$$$class__2_NpzFile_115, mod_consts[480], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_422f163fd63f8991fd6791abb5003da8_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_422f163fd63f8991fd6791abb5003da8_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_422f163fd63f8991fd6791abb5003da8_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_422f163fd63f8991fd6791abb5003da8_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_422f163fd63f8991fd6791abb5003da8_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_422f163fd63f8991fd6791abb5003da8_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_422f163fd63f8991fd6791abb5003da8_3 == cache_frame_422f163fd63f8991fd6791abb5003da8_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_422f163fd63f8991fd6791abb5003da8_3);
            cache_frame_422f163fd63f8991fd6791abb5003da8_3 = NULL;
        }

        assertFrameObject(frame_422f163fd63f8991fd6791abb5003da8_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_10;
        skip_nested_handling_2:;
        {
            PyObject *tmp_assign_source_62;
            PyObject *tmp_called_name_7;
            PyObject *tmp_args_name_5;
            PyObject *tmp_tuple_element_7;
            PyObject *tmp_kwargs_name_5;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_name_7 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_7 = mod_consts[67];
            tmp_args_name_5 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_name_5, 0, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_7 = tmp_class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_name_5, 1, tmp_tuple_element_7);
            tmp_tuple_element_7 = locals_numpy$lib$npyio$$$class__2_NpzFile_115;
            PyTuple_SET_ITEM0(tmp_args_name_5, 2, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kwargs_name_5 = tmp_class_creation_2__class_decl_dict;
            frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 115;
            tmp_assign_source_62 = CALL_FUNCTION(tmp_called_name_7, tmp_args_name_5, tmp_kwargs_name_5);
            Py_DECREF(tmp_args_name_5);
            if (tmp_assign_source_62 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 115;

                goto try_except_handler_10;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_62;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_assign_source_61 = outline_1_var___class__;
        Py_INCREF(tmp_assign_source_61);
        goto try_return_handler_10;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_10:;
        Py_DECREF(locals_numpy$lib$npyio$$$class__2_NpzFile_115);
        locals_numpy$lib$npyio$$$class__2_NpzFile_115 = NULL;
        goto try_return_handler_9;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numpy$lib$npyio$$$class__2_NpzFile_115);
        locals_numpy$lib$npyio$$$class__2_NpzFile_115 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        CHECK_OBJECT(outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 115;
        goto try_except_handler_8;
        outline_result_2:;
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[67], tmp_assign_source_61);
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    {
        PyObject *tmp_assign_source_63;
        PyObject *tmp_called_name_8;
        PyObject *tmp_called_name_9;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_defaults_2;
        tmp_called_name_9 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[447]);

        if (unlikely(tmp_called_name_9 == NULL)) {
            tmp_called_name_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[447]);
        }

        if (tmp_called_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 283;

            goto frame_exception_exit_1;
        }
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 283;
        tmp_called_name_8 = CALL_FUNCTION_WITH_POSARGS1(tmp_called_name_9, mod_consts[454]);

        if (tmp_called_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 283;

            goto frame_exception_exit_1;
        }
        tmp_defaults_2 = mod_consts[482];
        Py_INCREF(tmp_defaults_2);


        tmp_args_element_name_2 = MAKE_FUNCTION_numpy$lib$npyio$$$function__16_load(tmp_defaults_2);

        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 283;
        tmp_assign_source_63 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_8, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_8);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_assign_source_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 283;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[73], tmp_assign_source_63);
    }
    {
        PyObject *tmp_assign_source_64;
        PyObject *tmp_defaults_3;
        tmp_defaults_3 = mod_consts[483];
        Py_INCREF(tmp_defaults_3);


        tmp_assign_source_64 = MAKE_FUNCTION_numpy$lib$npyio$$$function__17__save_dispatcher(tmp_defaults_3);

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[484], tmp_assign_source_64);
    }
    {
        PyObject *tmp_assign_source_65;
        PyObject *tmp_called_name_10;
        PyObject *tmp_called_name_11;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_defaults_4;
        tmp_called_name_11 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[457]);

        if (unlikely(tmp_called_name_11 == NULL)) {
            tmp_called_name_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[457]);
        }

        if (tmp_called_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 457;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[484]);

        if (unlikely(tmp_args_element_name_3 == NULL)) {
            tmp_args_element_name_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[484]);
        }

        assert(!(tmp_args_element_name_3 == NULL));
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 457;
        tmp_called_name_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_11, tmp_args_element_name_3);
        if (tmp_called_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 457;

            goto frame_exception_exit_1;
        }
        tmp_defaults_4 = mod_consts[485];
        Py_INCREF(tmp_defaults_4);


        tmp_args_element_name_4 = MAKE_FUNCTION_numpy$lib$npyio$$$function__18_save(tmp_defaults_4);

        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 457;
        tmp_assign_source_65 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_10, tmp_args_element_name_4);
        Py_DECREF(tmp_called_name_10);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_assign_source_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 457;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[486], tmp_assign_source_65);
    }
    {
        PyObject *tmp_assign_source_66;


        tmp_assign_source_66 = MAKE_FUNCTION_numpy$lib$npyio$$$function__19__savez_dispatcher();

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[87], tmp_assign_source_66);
    }
    {
        PyObject *tmp_assign_source_67;
        PyObject *tmp_called_name_12;
        PyObject *tmp_called_name_13;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        tmp_called_name_13 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[457]);

        if (unlikely(tmp_called_name_13 == NULL)) {
            tmp_called_name_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[457]);
        }

        if (tmp_called_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 537;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_5 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[87]);

        if (unlikely(tmp_args_element_name_5 == NULL)) {
            tmp_args_element_name_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[87]);
        }

        assert(!(tmp_args_element_name_5 == NULL));
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 537;
        tmp_called_name_12 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_13, tmp_args_element_name_5);
        if (tmp_called_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 537;

            goto frame_exception_exit_1;
        }


        tmp_args_element_name_6 = MAKE_FUNCTION_numpy$lib$npyio$$$function__20_savez();

        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 537;
        tmp_assign_source_67 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_12, tmp_args_element_name_6);
        Py_DECREF(tmp_called_name_12);
        Py_DECREF(tmp_args_element_name_6);
        if (tmp_assign_source_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 537;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[487], tmp_assign_source_67);
    }
    {
        PyObject *tmp_assign_source_68;


        tmp_assign_source_68 = MAKE_FUNCTION_numpy$lib$npyio$$$function__21__savez_compressed_dispatcher();

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[90], tmp_assign_source_68);
    }
    {
        PyObject *tmp_assign_source_69;
        PyObject *tmp_called_name_14;
        PyObject *tmp_called_name_15;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        tmp_called_name_15 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[457]);

        if (unlikely(tmp_called_name_15 == NULL)) {
            tmp_called_name_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[457]);
        }

        if (tmp_called_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 624;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_7 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[90]);

        if (unlikely(tmp_args_element_name_7 == NULL)) {
            tmp_args_element_name_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[90]);
        }

        assert(!(tmp_args_element_name_7 == NULL));
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 624;
        tmp_called_name_14 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_15, tmp_args_element_name_7);
        if (tmp_called_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 624;

            goto frame_exception_exit_1;
        }


        tmp_args_element_name_8 = MAKE_FUNCTION_numpy$lib$npyio$$$function__22_savez_compressed();

        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 624;
        tmp_assign_source_69 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_14, tmp_args_element_name_8);
        Py_DECREF(tmp_called_name_14);
        Py_DECREF(tmp_args_element_name_8);
        if (tmp_assign_source_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 624;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[488], tmp_assign_source_69);
    }
    {
        PyObject *tmp_assign_source_70;
        PyObject *tmp_defaults_5;
        tmp_defaults_5 = mod_consts[489];
        Py_INCREF(tmp_defaults_5);


        tmp_assign_source_70 = MAKE_FUNCTION_numpy$lib$npyio$$$function__23__savez(tmp_defaults_5);

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[88], tmp_assign_source_70);
    }
    {
        PyObject *tmp_assign_source_71;


        tmp_assign_source_71 = MAKE_FUNCTION_numpy$lib$npyio$$$function__24__getconv();

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[177], tmp_assign_source_71);
    }
    {
        PyObject *tmp_assign_source_72;
        tmp_assign_source_72 = mod_consts[490];
        UPDATE_STRING_DICT0(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[193], tmp_assign_source_72);
    }
    {
        PyObject *tmp_assign_source_73;
        PyObject *tmp_called_name_16;
        PyObject *tmp_called_name_17;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_defaults_6;
        tmp_called_name_17 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[447]);

        if (unlikely(tmp_called_name_17 == NULL)) {
            tmp_called_name_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[447]);
        }

        if (tmp_called_name_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto frame_exception_exit_1;
        }
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 791;
        tmp_called_name_16 = CALL_FUNCTION_WITH_POSARGS1(tmp_called_name_17, mod_consts[454]);

        if (tmp_called_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto frame_exception_exit_1;
        }
        tmp_defaults_6 = mod_consts[491];
        Py_INCREF(tmp_defaults_6);


        tmp_args_element_name_9 = MAKE_FUNCTION_numpy$lib$npyio$$$function__25_loadtxt(tmp_defaults_6);

        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 791;
        tmp_assign_source_73 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_16, tmp_args_element_name_9);
        Py_DECREF(tmp_called_name_16);
        Py_DECREF(tmp_args_element_name_9);
        if (tmp_assign_source_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[492], tmp_assign_source_73);
    }
    {
        PyObject *tmp_assign_source_74;
        PyObject *tmp_defaults_7;
        tmp_defaults_7 = mod_consts[493];
        Py_INCREF(tmp_defaults_7);


        tmp_assign_source_74 = MAKE_FUNCTION_numpy$lib$npyio$$$function__26__savetxt_dispatcher(tmp_defaults_7);

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[494], tmp_assign_source_74);
    }
    {
        PyObject *tmp_assign_source_75;
        PyObject *tmp_called_name_18;
        PyObject *tmp_called_name_19;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_defaults_8;
        tmp_called_name_19 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[457]);

        if (unlikely(tmp_called_name_19 == NULL)) {
            tmp_called_name_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[457]);
        }

        if (tmp_called_name_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_10 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[494]);

        if (unlikely(tmp_args_element_name_10 == NULL)) {
            tmp_args_element_name_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[494]);
        }

        assert(!(tmp_args_element_name_10 == NULL));
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 1191;
        tmp_called_name_18 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_19, tmp_args_element_name_10);
        if (tmp_called_name_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto frame_exception_exit_1;
        }
        tmp_defaults_8 = mod_consts[495];
        Py_INCREF(tmp_defaults_8);


        tmp_args_element_name_11 = MAKE_FUNCTION_numpy$lib$npyio$$$function__27_savetxt(tmp_defaults_8);

        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 1191;
        tmp_assign_source_75 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_18, tmp_args_element_name_11);
        Py_DECREF(tmp_called_name_18);
        Py_DECREF(tmp_args_element_name_11);
        if (tmp_assign_source_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[496], tmp_assign_source_75);
    }
    {
        PyObject *tmp_assign_source_76;
        PyObject *tmp_called_name_20;
        PyObject *tmp_called_name_21;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_defaults_9;
        tmp_called_name_21 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[447]);

        if (unlikely(tmp_called_name_21 == NULL)) {
            tmp_called_name_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[447]);
        }

        if (tmp_called_name_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1439;

            goto frame_exception_exit_1;
        }
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 1439;
        tmp_called_name_20 = CALL_FUNCTION_WITH_POSARGS1(tmp_called_name_21, mod_consts[454]);

        if (tmp_called_name_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1439;

            goto frame_exception_exit_1;
        }
        tmp_defaults_9 = mod_consts[329];
        Py_INCREF(tmp_defaults_9);


        tmp_args_element_name_12 = MAKE_FUNCTION_numpy$lib$npyio$$$function__28_fromregex(tmp_defaults_9);

        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 1439;
        tmp_assign_source_76 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_20, tmp_args_element_name_12);
        Py_DECREF(tmp_called_name_20);
        Py_DECREF(tmp_args_element_name_12);
        if (tmp_assign_source_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1439;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[497], tmp_assign_source_76);
    }
    {
        PyObject *tmp_assign_source_77;
        PyObject *tmp_called_name_22;
        PyObject *tmp_called_name_23;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_defaults_10;
        PyObject *tmp_tuple_element_8;
        tmp_called_name_23 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[447]);

        if (unlikely(tmp_called_name_23 == NULL)) {
            tmp_called_name_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[447]);
        }

        if (tmp_called_name_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1538;

            goto frame_exception_exit_1;
        }
        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 1538;
        tmp_called_name_22 = CALL_FUNCTION_WITH_POSARGS1(tmp_called_name_23, mod_consts[454]);

        if (tmp_called_name_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1538;

            goto frame_exception_exit_1;
        }
        tmp_tuple_element_8 = (PyObject *)&PyFloat_Type;
        tmp_defaults_10 = PyTuple_New(22);
        {
            PyObject *tmp_called_name_24;
            PyObject *tmp_expression_name_12;
            PyObject *tmp_args_element_name_14;
            PyObject *tmp_called_name_25;
            PyObject *tmp_args_element_name_15;
            PyObject *tmp_expression_name_13;
            PyTuple_SET_ITEM0(tmp_defaults_10, 0, tmp_tuple_element_8);
            tmp_tuple_element_8 = mod_consts[498];
            PyTuple_SET_ITEM0(tmp_defaults_10, 1, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_10, 2, tmp_tuple_element_8);
            tmp_tuple_element_8 = mod_consts[16];
            PyTuple_SET_ITEM0(tmp_defaults_10, 3, tmp_tuple_element_8);
            tmp_tuple_element_8 = mod_consts[16];
            PyTuple_SET_ITEM0(tmp_defaults_10, 4, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_10, 5, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_10, 6, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_10, 7, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_10, 8, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_10, 9, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_10, 10, tmp_tuple_element_8);
            tmp_expression_name_12 = mod_consts[180];
            tmp_called_name_24 = LOOKUP_ATTRIBUTE(tmp_expression_name_12, mod_consts[148]);
            assert(!(tmp_called_name_24 == NULL));
            tmp_called_name_25 = LOOKUP_BUILTIN(mod_consts[499]);
            assert(tmp_called_name_25 != NULL);
            tmp_expression_name_13 = GET_STRING_DICT_VALUE(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[310]);

            if (unlikely(tmp_expression_name_13 == NULL)) {
                tmp_expression_name_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[310]);
            }

            if (tmp_expression_name_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_24);

                exception_lineno = 1543;

                goto tuple_build_exception_3;
            }
            tmp_args_element_name_15 = LOOKUP_ATTRIBUTE(tmp_expression_name_13, mod_consts[500]);
            if (tmp_args_element_name_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_24);

                exception_lineno = 1543;

                goto tuple_build_exception_3;
            }
            frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 1543;
            tmp_args_element_name_14 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_25, tmp_args_element_name_15);
            Py_DECREF(tmp_args_element_name_15);
            if (tmp_args_element_name_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_24);

                exception_lineno = 1543;

                goto tuple_build_exception_3;
            }
            frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 1543;
            tmp_tuple_element_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_24, tmp_args_element_name_14);
            Py_DECREF(tmp_called_name_24);
            Py_DECREF(tmp_args_element_name_14);
            if (tmp_tuple_element_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1543;

                goto tuple_build_exception_3;
            }
            PyTuple_SET_ITEM(tmp_defaults_10, 11, tmp_tuple_element_8);
            tmp_tuple_element_8 = mod_consts[501];
            PyTuple_SET_ITEM0(tmp_defaults_10, 12, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_False;
            PyTuple_SET_ITEM0(tmp_defaults_10, 13, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_True;
            PyTuple_SET_ITEM0(tmp_defaults_10, 14, tmp_tuple_element_8);
            tmp_tuple_element_8 = mod_consts[502];
            PyTuple_SET_ITEM0(tmp_defaults_10, 15, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_10, 16, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_False;
            PyTuple_SET_ITEM0(tmp_defaults_10, 17, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_True;
            PyTuple_SET_ITEM0(tmp_defaults_10, 18, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_True;
            PyTuple_SET_ITEM0(tmp_defaults_10, 19, tmp_tuple_element_8);
            tmp_tuple_element_8 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_10, 20, tmp_tuple_element_8);
            tmp_tuple_element_8 = mod_consts[142];
            PyTuple_SET_ITEM0(tmp_defaults_10, 21, tmp_tuple_element_8);
        }
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_called_name_22);
        Py_DECREF(tmp_defaults_10);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;


        tmp_args_element_name_13 = MAKE_FUNCTION_numpy$lib$npyio$$$function__29_genfromtxt(tmp_defaults_10);

        frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame.f_lineno = 1538;
        tmp_assign_source_77 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_22, tmp_args_element_name_13);
        Py_DECREF(tmp_called_name_22);
        Py_DECREF(tmp_args_element_name_13);
        if (tmp_assign_source_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1538;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[407], tmp_assign_source_77);
    }

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION(frame_ba0f3c1e458a15adc45e861e2cb96579);
#endif
    popFrameStack();

    assertFrameObject(frame_ba0f3c1e458a15adc45e861e2cb96579);

    goto frame_no_exception_3;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_ba0f3c1e458a15adc45e861e2cb96579);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ba0f3c1e458a15adc45e861e2cb96579, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ba0f3c1e458a15adc45e861e2cb96579->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ba0f3c1e458a15adc45e861e2cb96579, exception_lineno);
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_3:;
    {
        PyObject *tmp_assign_source_78;


        tmp_assign_source_78 = MAKE_FUNCTION_numpy$lib$npyio$$$function__30_ndfromtxt();

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[503], tmp_assign_source_78);
    }
    {
        PyObject *tmp_assign_source_79;


        tmp_assign_source_79 = MAKE_FUNCTION_numpy$lib$npyio$$$function__31_mafromtxt();

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[504], tmp_assign_source_79);
    }
    {
        PyObject *tmp_assign_source_80;


        tmp_assign_source_80 = MAKE_FUNCTION_numpy$lib$npyio$$$function__32_recfromtxt();

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[505], tmp_assign_source_80);
    }
    {
        PyObject *tmp_assign_source_81;


        tmp_assign_source_81 = MAKE_FUNCTION_numpy$lib$npyio$$$function__33_recfromcsv();

        UPDATE_STRING_DICT1(moduledict_numpy$lib$npyio, (Nuitka_StringObject *)mod_consts[506], tmp_assign_source_81);
    }

    return module_numpy$lib$npyio;
    module_exception_exit:
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);
    return NULL;
}

